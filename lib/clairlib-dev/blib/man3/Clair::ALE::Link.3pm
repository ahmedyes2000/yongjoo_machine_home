.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Clair::ALE::Link 3pm"
.TH Clair::ALE::Link 3pm "2012-07-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Clair::ALE::Link \- A link between two URLs created by the Automatic Link Extrapolator.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This object contains two URLs comprising a link between two pages, the
source page (\*(L"from\*(R") and the destination page (\*(L"to\*(R").
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "new" 4
.IX Item "new"
(to => Clair::ALE::URL, from => Clair::ALE::URL, text => 'words which create link', id => 'link_id')
.Sp
Creates a new Clair::ALE::Link object with an Clair::ALE::URL for the
\&'to' and 'from' of the link, the words that create the link (in an
\&\s-1HTML\s0 Web page, the part between the <a> and </a> tags
as 'text', and a short unique identifier in 'id'.  All of these
parameters are required, and no others are recognized.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "$url\->print ([indent_spaces])" 4
.el .IP "\f(CW$url\fR\->print ([indent_spaces])" 4
.IX Item "$url->print ([indent_spaces])"
Print a brief, human-readable description of a Link.  If the
indent_spaces parameter is provided, everything will be indented by
indent_spaces characters of \fI\f(CI$Clair::Utils::ALE::INDENTCHAR\fI\fR; this is useful for
printing easy-to-read nested structures.  No other guarantees about
the format of the output are provided; if you need a specific format,
you should just print things out yourself, or else talk to me about
adding a specialized printing method.
.SS "\s-1INSTANCE\s0 \s-1VARIABLES\s0"
.IX Subsection "INSTANCE VARIABLES"
.ie n .IP "$link\->{from}" 4
.el .IP "\f(CW$link\fR\->{from}" 4
.IX Item "$link->{from}"
An Clair::ALE::URL object containing the address the link is
\&\*(L"from\*(R" (the \*(L"source\*(R" page).
.ie n .IP "$link\->{to}" 4
.el .IP "\f(CW$link\fR\->{to}" 4
.IX Item "$link->{to}"
An Clair::ALE::URL object containing the address the link is \*(L"to\*(R"
(the \*(L"destination\*(R" page).
.ie n .IP "$link\->{text}" 4
.el .IP "\f(CW$link\fR\->{text}" 4
.IX Item "$link->{text}"
A string containing the words which link the two pages.  For an \s-1HTML\s0
Web page, this would be the part between the <a> and
</a> tags.
.ie n .IP "$link\->{id}" 4
.el .IP "\f(CW$link\fR\->{id}" 4
.IX Item "$link->{id}"
A short, unique identifier for this link.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Mostly, links will come back from Clair::ALE::Search and other
modules; there really isn't a good reason to create one yourself, but
if you want to, you can do:
.PP
.Vb 4
\&  my $link = Clair::ALE::Link\->new(to => Clair::ALE::URL\->new(url=>\*(Aqhttp://www.test.com/\*(Aq,id=>1),
\&                            from => Clair::ALE::URL\->new(url=>\*(Aqhttp://www2.test.com/\*(Aq,id=>2),
\&                            text => "Link from page1 to page2",
\&                            id => 101);
.Ve
.PP
or get one back from a search:
.PP
.Vb 3
\&  my $search = Clair::ALE::Search\->new(word => \*(Aqpenguin\*(Aq);
\&  my $conn = $search\->queryresult;
\&  my $link = $conn\->{link}[0];
.Ve
.PP
\&.  After that, you can get the information from its instance
variables:
.PP
.Vb 2
\&  print $link\->{from}\->{url}," connects to ",$link\->{to}\->{url}," via words ",
\&        $link\->{text},"\en";
.Ve
.PP
or just print out the whole thing:
.PP
.Vb 1
\&  $link\->print;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Clair::Utils::ALE, Clair::ALE::Search, Clair::ALE::URL, Clair::ALE::Conn.
