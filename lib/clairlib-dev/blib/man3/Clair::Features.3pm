.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Clair::Features 3pm"
.TH Clair::Features 3pm "2012-07-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 3
\& B<package> Clair::Features
\& Carry out feature selection using Chi\-squared algorithm with Clair::GenericDoc.pm
\& objects as input.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\& JB Kim
\& jbremnant@gmail.com
\& 20070407
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& We want to receive a collection of Clair::GenericDoc objects and convert the parsed
\& and stemmed words as feature vectors. In addition, it should carry out feature
\& selection using Chi\-squared algorithm.
\&
\&  use Clair::Features;
\&
\&  my $fea = new Clair::Features(DEBUG => $DEBUG);
\&
\&  my $gdoc = new Clair::GenericDoc( DEBUG => $DEBUG, content => "/some/doc");
\&
\&  $fea\->register($gdoc);
\&  
\&  ... insert more ...
\&
\&  $fea\->select();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 6
\& This module should also provide the ability to output a feature_file containing
\& the chi\-square scores of all the words. One caveat about generating feature list
\& with their associated weights is that unique id\*(Aqs need to be constructed for each
\& feature. Afterwards, these id\*(Aqs need to be retained across both the training data
\& and the test data. In other words, the test data should refer to the same feature
\& as the training set when processing the generated feature id\*(Aqs.
.Ve
.SS "new"
.IX Subsection "new"
.Vb 4
\& The constructor. Initializes several container hashes for later use. 
\& In case of $self\->{mode} eq "test", it will attempt to read in the 
\& features file and create a mapping between the feature id and the 
\& actual word associated with it.
.Ve
.SS "register"
.IX Subsection "register"
.Vb 3
\& Takes the instantiated GenericDoc objects and stores the extracted features into
\& internal data structures. It ensures that you are passing in the object that is
\& blessed with the GenericDoc name. 
\&
\& If the $self\->{document_limit} variable is set, the subroutine will simply return
\& without adding the content to the internal hashes when the document registration
\& limit is reached.
.Ve
.SS "select"
.IX Subsection "select"
.Vb 2
\& Takes the internal data structures and then extracts desired features using 
\& default (Chi\-squared) feature selection algorithm.
.Ve
.SS "chi_squared"
.IX Subsection "chi_squared"
.Vb 2
\& Implements Chi\-squared feature selection algorithm. Here are the definitions
\& for the values in the contingency table:
\&
\&  k00 = number of docs in class 0 not containing term t
\&  k01 = number of docs in class 0 containing term t
\&  k10 = number of docs in class 1 not containing term t
\&  k11 = number of docs in class 1 containing term t
\&
\&  The contingency table per feature (word).
\&
\&         I_t
\&      |  0   1  
\&    \-\-\-\-\-\-\-\-\-\-\-\-
\&  C 0 |  k00 k01
\&    1 |  k10 k11 
\&
\& The following routine loops through the nested hashes in $self\->{features_global}
\& and constructs the variables mentioned above.
.Ve
.SS "_chi_squared_binary"
.IX Subsection "_chi_squared_binary"
.Vb 4
\& An implementation of Chi\-squared computation assuming the binary classification.
\& This subroutine is called by chi_squared public subroutine. Another private
\& routine of this type can be implemented for multivariate chi\-squared feature
\& weight calculation.
.Ve
.SS "save_features"
.IX Subsection "save_features"
.Vb 3
\& For training mode, you need to save the features into a file so that the mapping of
\& features to numeric ID\*(Aqs can be retained for the test data. This subroutine drops a file
\& for later use. Each line number is the id for the feature.
.Ve
.SS "output"
.IX Subsection "output"
.Vb 2
\& This subroutine outputs the necessary feature vectors into specified text files.
\& Default method is to use the SVM light format. 
\&
\& In case of test dataset, it will use the prior feature name => id mapping from the
\& train data to make the feature id\*(Aqs consistent.
.Ve
.SS "_output_svm_light_format"
.IX Subsection "_output_svm_light_format"
.Vb 1
\& Prints the lines in this format:
\&
\&  <line> .=. <target> <feature>:<value> <feature>:<value> ... <feature>:<value> # <info>
\&  <target> .=. +1 | \-1 | 0 | <float> 
\&  <feature> .=. <integer> | "qid"
\&  <value> .=. <float>
\&  <info> .=. <string> 
\&
\&  e.g: \-1 1:0.43 3:0.12 9284:0.2 # abcdef
.Ve
.SS "input"
.IX Subsection "input"
.Vb 1
\& Reads in the document feature vector file generated
.Ve
.SS "_input_svm_light_format"
.IX Subsection "_input_svm_light_format"
.Vb 2
\& The exact opposite of output method. It reads in the svm_light data and constructs
\& a perl data structure.
.Ve
