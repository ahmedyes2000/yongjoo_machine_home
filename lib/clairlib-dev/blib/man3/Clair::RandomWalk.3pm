.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Clair::RandomWalk 3pm"
.TH Clair::RandomWalk 3pm "2012-07-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Clair::RandomNetwork \- Random Walk on graphs
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&       use Clair::RandomWalk;
\&       use Calir::Network;
\&
\&       $net = new Clair::Netowrk();
\&       $net\->add_node("a");
\&       .....
\&       $net\->add_edge("a","b");
\&       .....
\&
\&       $rn = new Clair::RandomWalk($net,"a");
\&       $rn\->load_transition_probabilities_from_file("trans");
\&       #trans is a file in the following format: src_node dest_node trasnition_prob.
\&       $rn\->load_initial_probability_distribution_from_file("probs");
\&       #probs is a file in the following format: node prob
\&       $rn\->walk_random_steps(100);
\&       $rn\->print_current_probability_distribution();
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Function  : Creates a new instance of the Clair::RandomNetwork
.PP
Usage     : \f(CW$rn\fR = new Clair::RandomNetwork($net,$start_node);
.PP
Parameters: \- \f(CW$net:\fR a Clair::Netowrk instance, \f(CW$start_node:\fR The node from which
the random walk should start.
.PP
returns   : Clair::RandomWalk obejct
.SS "load_transition_probabilities_from_file"
.IX Subsection "load_transition_probabilities_from_file"
Function  : Loads the transition probabilities between the nodes from a file
.PP
Usage     : \f(CW$rn\fR\->load_transition_probabilities_from_file($file)
.PP
Parameters: The name of a file formated as : src_node dest_node trans_prob
.PP
returns   : nothing
.SS "load_initial_probability_distribution_from_file"
.IX Subsection "load_initial_probability_distribution_from_file"
Function  : Loads the initial probability distribution of the graph nodes from a file
.PP
Usage     : \f(CW$rn\fR\->load_initial_probability_distribution_from_file($file)
.PP
Parameters: The name of a file formated as : node prob
.PP
returns   : Nothing
.SS "compute_stationary_distribution"
.IX Subsection "compute_stationary_distribution"
Function  : Computes the stationary probability distribution (The probability after
walking too many steps). This uses the values from the probability distribution
and the transition probabilities
.PP
Usage     : \f(CW%sd\fR = \f(CW$rn\fR\->\fIcompute_stationary_distribution()\fR
.PP
Parameters: Nothing
.PP
returns   : A hash of node probabilities (key: node, value: probability)
.SS "wrtie_porbability_distribution_to_file"
.IX Subsection "wrtie_porbability_distribution_to_file"
Function  : Write the current probability distribution of the nodes to a file
.PP
Usage     : \f(CW$rn\fR\->wrtie_porbability_distribution_to_file($file)
.PP
Parameters: An output file name.
.PP
returns   : Nothing
.SS "print_current_probability_distribution"
.IX Subsection "print_current_probability_distribution"
Function  : Print the current probability distribution of the nodes on the screen
.PP
Usage     : \f(CW$rn\fR\->\fIprint_current_probability_distribution()\fR
.PP
Parameters: Nothing
.PP
returns   : Nothing
.SS "set_uniform_transition_probabilities"
.IX Subsection "set_uniform_transition_probabilities"
Function  : Set the transition probability of each edge (src_node dest_node) to
1/(out degree of src_node)
.PP
Usage     : \f(CW$rn\fR\->\fIset_uniform_transition_probabilities()\fR
.PP
Parameters: Nothing
.PP
returns   : Nothing
.SS "set_uniform_initial_probability_distribution"
.IX Subsection "set_uniform_initial_probability_distribution"
Function  : Set the initial probability of each node to 1/(number of nodes)
.PP
Usage     : \f(CW$rn\fR\->\fIset_uniform_initial_probability_distribution()\fR
.PP
Parameters: Nothing
.PP
returns   : Nothing
.SS "set_uniform_initial_probability_distribution"
.IX Subsection "set_uniform_initial_probability_distribution"
Function  : Set the initial probability of each node to 1/(number of nodes)
.PP
Usage     : \f(CW$rn\fR\->\fIset_uniform_initial_probability_distribution()\fR
.PP
Parameters: Nothing
.PP
returns   : Nothing
.SS "walk_one_random_step"
.IX Subsection "walk_one_random_step"
Function  : Walk one random step
.PP
Usage     : \f(CW$rn\fR\->\fIwalk_one_random_step()\fR
.PP
Parameters: Nothing
.PP
returns   : The node at which the walk ends after its random step.
.SS "walk_random_steps"
.IX Subsection "walk_random_steps"
Function  : Walk multiple random steps
.PP
Usage     : \f(CW$rn\fR\->walk_random_steps($steps)
.PP
Parameters: The number of random steps to walk
.PP
returns   : The node at which the walk ends after walking the specified random steps.
.SS "compute_porbability_distribution"
.IX Subsection "compute_porbability_distribution"
Function  : Compute the probability distribution after walking randomly a specified
number of steps
.PP
Usage     : \f(CW$rn\fR\->compute_porbability_distribution($steps)
.PP
Parameters: The number of random steps to walk
.PP
returns   : The node at which the walk ends after walking the specified random steps.
.SS "set_current_node"
.IX Subsection "set_current_node"
Function  : Set the cursor of the random walk to a specific node.
.PP
Usage     : \f(CW$rn\fR\->set_current_node($node)
.PP
Parameters: A graph node.
.PP
returns   : Nothing.
.SH "AUTHOR"
.IX Header "AUTHOR"
Amjad Abu Jbara << <clair at umich.edu> >>
.SH "See Also"
.IX Header "See Also"
Clair::Network
