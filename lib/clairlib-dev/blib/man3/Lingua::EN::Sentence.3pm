.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Lingua::EN::Sentence 3pm"
.TH Lingua::EN::Sentence 3pm "2012-07-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::EN::Sentence \- Module for splitting text into sentences.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Lingua::EN::Sentence qw( get_sentences add_acronyms );
\&
\&        add_acronyms(\*(Aqlt\*(Aq,\*(Aqgen\*(Aq);               ## adding support for \*(AqLt. Gen.\*(Aq
\&        my $sentences=get_sentences($text);     ## Get the sentences.
\&        foreach my $sentence (@$sentences) {
\&                ## do something with $sentence
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Lingua::EN::Sentence\*(C'\fR module contains the function get_sentences, which splits text into its constituent sentences, based on a regular expression and a list of abbreviations (built in and given).
.PP
Certain well know exceptions, such as abreviations, may cause incorrect segmentations.  But some of them are already integrated into this code and are being taken care of.  Still, if you see that there are words causing the \fIget_sentences()\fR to fail, you can add those to the module, so it notices them.
.SH "ALGORITHM"
.IX Header "ALGORITHM"
Basically, I use a 'brute' regular expression to split the text into sentences.  (Well, nothing is yet split \- I just mark the end-of-sentence).  Then I look into a set of rules which decide when an end-of-sentence is justified and when it's a mistake. In case of a mistake, the end-of-sentence mark is removed.
.PP
What are such mistakes? Cases of abbreviations, for example. I have a list of such abbreviations (Please see `Acronym/Abbreviations list' section), and more general rules (for example, the abbreviations 'i.e.' and '.e.g.' need not to be in the list as a special rule takes care of all single letter abbreviations).
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
All functions used should be requested in the 'use' clause. None is exported by default.
.ie n .IP "get_sentences( $text )" 4
.el .IP "get_sentences( \f(CW$text\fR )" 4
.IX Item "get_sentences( $text )"
The get sentences function takes a scalar containing ascii text as an argument and returns a reference to an array of sentences that the text has been split into.
Returned sentences will be trimmed (beginning and end of sentence) of white-spaces.
Strings with no alpha-numeric characters in them, won't be returned as sentences.
.ie n .IP "add_acronyms( @acronyms )" 4
.el .IP "add_acronyms( \f(CW@acronyms\fR )" 4
.IX Item "add_acronyms( @acronyms )"
This function is used for adding acronyms not supported by this code.  Please see `Acronym/Abbreviations list' section for the abbreviations already supported by this module.
.IP "get_acronyms(	)" 4
.IX Item "get_acronyms(	)"
This function will return the defined list of acronyms.
.ie n .IP "set_acronyms( @my_acronyms )" 4
.el .IP "set_acronyms( \f(CW@my_acronyms\fR )" 4
.IX Item "set_acronyms( @my_acronyms )"
This function replaces the predefined acroym list with the given list.
.IP "get_EOS(	)" 4
.IX Item "get_EOS(	)"
This function returns the value of the string used to mark the end of sentence. You might want to see what it is, and to make sure your text doesn't contain it. You can use \fIset_EOS()\fR to alter the end-of-sentence string to whatever you desire.
.ie n .IP "set_EOS( $new_EOS_string )" 4
.el .IP "set_EOS( \f(CW$new_EOS_string\fR )" 4
.IX Item "set_EOS( $new_EOS_string )"
This function alters the end-of-sentence string used to mark the end of sentences.
.ie n .IP "set_locale( $new_locale ) Revceives language locale in the form language.country.character\-set for example: ""fr_CA.ISO8859\-1"" for Canadian French using character set \s-1ISO8859\-1\s0." 4
.el .IP "set_locale( \f(CW$new_locale\fR ) Revceives language locale in the form language.country.character\-set for example: ``fr_CA.ISO8859\-1'' for Canadian French using character set \s-1ISO8859\-1\s0." 4
.IX Item "set_locale( $new_locale ) Revceives language locale in the form language.country.character-set for example: fr_CA.ISO8859-1 for Canadian French using character set ISO8859-1."
Returns a reference to a hash containing the current locale formatting values.
Returns undef if got undef.
.Sp
The following will set the \s-1LC_COLLATE\s0 behaviour to Argentinian Spanish. \s-1NOTE:\s0 The naming and avail\% ability of locales depends on your operating sys\% tem. Please consult the perllocale manpage for how to find out which locales are available in your system.
.Sp
\&\f(CW$loc\fR = set_locale( \*(L"es_AR.ISO8859\-1\*(R" );
.Sp
This actually does this:
.Sp
\&\f(CW$loc\fR = setlocale( \s-1LC_ALL\s0, \*(L"es_AR.ISO8859\-1\*(R" );
.SH "Acronym/Abbreviations list"
.IX Header "Acronym/Abbreviations list"
You can use the \fIget_acronyms()\fR function to get acronyms.
It has become too long to specify in the documentation.
.PP
If I come across a good general-purpose list \- I'll incorporate it into this module.
Feel free to suggest such lists.
.SH "FUTURE WORK [1] Object Oriented like usage [2] Supporting more than just English/French [3] Code optimization. Currently everything is RE based and not so optimized RE [4] Possibly use more semantic heuristics for detecting a beginning of a sentence"
.IX Header "FUTURE WORK [1] Object Oriented like usage [2] Supporting more than just English/French [3] Code optimization. Currently everything is RE based and not so optimized RE [4] Possibly use more semantic heuristics for detecting a beginning of a sentence"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&        Text::Sentence
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Shlomo Yona shlomo@cs.haifa.ac.il
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001, 2002 Shlomo Yona. All rights reserved.
.PP
This library is free software. 
You can redistribute it and/or modify it under the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 40:" 4
.IX Item "Around line 40:"
\&'=item' outside of any '=over'
.IP "Around line 84:" 4
.IX Item "Around line 84:"
You forgot a '=back' before '=head1'
