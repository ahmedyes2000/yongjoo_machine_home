.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Clair::Utils::Robot2 3pm"
.TH Clair::Utils::Robot2 3pm "2012-07-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Robot \- configurable web traversal engine (for web robots & agents)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use WWW::Robot;
\&
\&   $robot = new WWW::Robot(\*(AqNAME\*(Aq     => \*(AqMyRobot\*(Aq,
\&                           \*(AqVERSION\*(Aq  => \*(Aq1.000\*(Aq,
\&                           \*(AqEMAIL\*(Aq    => \*(Aqfred@foobar.com\*(Aq);
\&
\&   # ... configure the robot\*(Aqs operation ...
\&
\&   $robot\->run(\*(Aqhttp://www.foobar.com/\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a configurable web traversal engine,
for a \fIrobot\fR or other web agent.
Given an initial web page (\fI\s-1URL\s0\fR),
the Robot will get the contents of that page,
and extract all links on the page, adding them to a list of URLs to visit.
.PP
Features of the Robot module include:
.IP "\(bu" 4
Follows the \fIRobot Exclusion Protocol\fR.
.IP "\(bu" 4
Supports the \s-1META\s0 element proposed extensions to the Protocol.
.IP "\(bu" 4
Implements many of the \fIGuidelines for Robot Writers\fR.
.IP "\(bu" 4
Configurable.
.IP "\(bu" 4
Builds on standard Perl 5 modules for \s-1WWW\s0, \s-1HTTP\s0, \s-1HTML\s0, etc.
.PP
A particular application (robot instance) has to configure
the engine using \fIhooks\fR, which are perl functions invoked by the Robot
engine at specific points in the control loop.
.PP
The robot engine obeys the Robot Exclusion protocol,
as well as a proposed addition.
See \*(L"\s-1SEE\s0 \s-1ALSO\s0\*(R" for references to
documents describing the Robot Exclusion protocol and web robots.
.SH "QUESTIONS"
.IX Header "QUESTIONS"
This section contains a number of questions. I'm interested in hearing
what people think, and what you've done faced with similar questions.
.IP "\(bu" 4
What style of \s-1API\s0 is preferable for setting attributes? Maybe
something like the following:
.Sp
.Vb 2
\&    $robot\->verbose(1);
\&    $traversal = $robot\->traversal();
.Ve
.Sp
I.e. a method for setting and getting each attribute,
depending on whether you passed an argument?
.IP "\(bu" 4
Should the robot module support a standard logging mechanism?
For example, an \s-1LOGFILE\s0 attribute, which is set to either a filename,
or a filehandle reference.
This would need a useful file format.
.IP "\(bu" 4
Should the \s-1AGENT\s0 be an attribute, so you can set this to whatever
UserAgent object you want to use?
Then if the attribute is not set by the first time the \f(CW\*(C`run()\*(C'\fR
method is invoked, we'd fall back on the default.
.IP "\(bu" 4
Should \s-1TMPDIR\s0 and \s-1WORKFILE\s0 be attributes? I don't see any big reason
why they should, but someone else's application might benefit?
.IP "\(bu" 4
Should the module also support an \s-1ERRLOG\s0 attribute, with all warnings
and error messages sent there?
.IP "\(bu" 4
At the moment the robot will print warnings and error messages to stderr,
as well as returning error status. Should this behaviour be configurable?
I.e. the ability to turn off warnings.
.PP
The basic architecture of the Robot is as follows:
.PP
.Vb 10
\&    Hook: restore\-state
\&    Get Next URL
\&        Hook: invoke\-on\-all\-url
\&        Hook: follow\-url\-test
\&        Hook: invoke\-on\-follow\-url
\&        Get contents of URL
\&        Hook: invoke\-on\-contents
\&        Skip if not HTML
\&        Foreach link on page:
\&            Hook: invoke\-on\-link
\&            Add link to robot\*(Aqs queue
\&    Continue? Hook: continue\-test
\&    Hook: save\-state
\&    Hook: generate\-report
.Ve
.PP
Each of the hook procedures and functions is described below.
A robot must provide a \f(CW\*(C`follow\-url\-test\*(C'\fR hook,
and at least one of the following:
.IP "\(bu" 4
\&\f(CW\*(C`invoke\-on\-all\-url\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`invoke\-on\-followed\-url\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`invoke\-on\-contents\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`invoke\-on\-link\*(C'\fR
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Vb 1
\&   $robot = new WWW::Robot( <attribute\-value\-pairs> );
.Ve
.PP
Create a new robot engine instance.
If the constructor fails for any reason, a warning message will be printed,
and \f(CW\*(C`undef\*(C'\fR will be returned.
.PP
Having created a new robot, it should be configured using the methods
described below.
Certain attributes of the Robot can be set during creation;
they can be (re)set after creation, using the \f(CW\*(C`setAttribute()\*(C'\fR method.
.PP
The attributes of the Robot are described below,
in the \fIRobot Attributes\fR section.
.SH "METHODS"
.IX Header "METHODS"
.SS "run"
.IX Subsection "run"
.Vb 1
\&    $robot\->run( LIST );
.Ve
.PP
Invokes the robot, initially traversing the root URLs provided in \s-1LIST\s0,
and any which have been provided with the \f(CW\*(C`addUrl()\*(C'\fR method before
invoking \f(CW\*(C`run()\*(C'\fR.
If you have not correctly configured the robot, the method will
return \f(CW\*(C`undef\*(C'\fR.
.PP
The initial set of URLs can either be passed as arguments to the
\&\fB\f(BIrun()\fB\fR method, or with the \fB\f(BIaddUrl()\fB\fR method before you
invoke \fB\f(BIrun()\fB\fR.
Each \s-1URL\s0 can be specified either as a string,
or as a \s-1URI::URL\s0 object.
.PP
Before invoking this method, you should have provided at least some of
the hook functions.
See the example given in the \s-1EXAMPLES\s0 section below.
.PP
By default the \fB\f(BIrun()\fB\fR method will iterate until there are no more
URLs in the queue.
You can override this behavior by providing a \f(CW\*(C`continue\-test\*(C'\fR hook
function, which checks for the termination conditions.
This particular hook function, and use of hook functions in general,
are described below.
.SS "setAttribute"
.IX Subsection "setAttribute"
.Vb 1
\&  $robot\->setAttribute( ... attribute\-value\-pairs ... );
.Ve
.PP
Change the value of one or more robot attributes.
Attributes are identified using a string, and take scalar values.
For example, to specify the name of your robot,
you set the \f(CW\*(C`NAME\*(C'\fR attribute:
.PP
.Vb 1
\&   $robot\->setAttribute(\*(AqNAME\*(Aq => \*(AqWebStud\*(Aq);
.Ve
.PP
The supported attributes for the Robot module are listed below,
in the \fI\s-1ROBOT\s0 \s-1ATTRIBUTES\s0\fR section.
.SS "getAttribute"
.IX Subsection "getAttribute"
.Vb 1
\&  $value = $robot\->getAttribute(\*(Aqattribute\-name\*(Aq);
.Ve
.PP
Queries a Robot for the value of an attribute.
For example, to query the version number of your robot,
you would get the \f(CW\*(C`VERSION\*(C'\fR attribute:
.PP
.Vb 1
\&   $version = $robot\->getAttribute(\*(AqVERSION\*(Aq);
.Ve
.PP
The supported attributes for the Robot module are listed below,
in the \fI\s-1ROBOT\s0 \s-1ATTRIBUTES\s0\fR section.
.SS "addUrl"
.IX Subsection "addUrl"
.Vb 1
\&  $robot\->addUrl( $url1, ..., $urlN );
.Ve
.PP
Used to add one or more URLs to the queue for the robot.
Each \s-1URL\s0 can be passed as a simple string,
or as a \s-1URI::URL\s0 object.
.PP
Returns True (non-zero) if all URLs were successfully added,
False (zero) if at least one of the URLs could not be added.
.SS "addHook"
.IX Subsection "addHook"
.Vb 1
\&  $robot\->addHook($hook_name, \e&hook_function);
\&
\&  sub hook_function { ... }
.Ve
.PP
Register a \fIhook\fR function which should be invoked by the robot at
a specific point in the control flow. There are a number of
\&\fIhook points\fR in the robot, which are identified by a string.
For a list of hook points, see the \fB\s-1SUPPORTED\s0 \s-1HOOKS\s0\fR section below.
.PP
If you provide more than one function for a particular hook,
then the hook functions will be invoked in the order they were added.
I.e. the first hook function called will be the first hook function
you added.
.SS "proxy, no_proxy, env_proxy"
.IX Subsection "proxy, no_proxy, env_proxy"
These are convenience functions are setting proxy information on the
User agent being used to make the requests.
.PP
.Vb 1
\&    $robot\->proxy( protocol, proxy );
.Ve
.PP
Used to specify a proxy for the given scheme.
The protocol argument can be a reference to a list of protocols.
.PP
.Vb 1
\&    $robot\->no_proxy(domain1, ... domainN);
.Ve
.PP
Specifies that proxies should not be used for the specified
domains or hosts.
.PP
.Vb 1
\&    $robot\->env_proxy();
.Ve
.PP
Load proxy settings from \fIprotocol\fR\fB_proxy\fR environment variables:
\&\f(CW\*(C`ftp_proxy\*(C'\fR, \f(CW\*(C`http_proxy\*(C'\fR, \f(CW\*(C`no_proxy\*(C'\fR, etc.
.SH "ROBOT ATTRIBUTES"
.IX Header "ROBOT ATTRIBUTES"
This section lists the attributes used to configure a Robot object.
Attributes are set using the \f(CW\*(C`setAttribute()\*(C'\fR method,
and queried using the \f(CW\*(C`getAttribute()\*(C'\fR method.
.PP
Some of the attributes \fBmust\fR be set before you start the Robot
(with the \f(CW\*(C`run()\*(C'\fR method).
These are marked as \fBmandatory\fR in the list below.
.IP "\s-1NAME\s0" 4
.IX Item "NAME"
The name of the Robot.
This should be a sequence of alphanumeric characters,
and is used to identify your Robot.
This is used to set the \f(CW\*(C`User\-Agent\*(C'\fR field of \s-1HTTP\s0 requests,
and so will appear in server logs.
.Sp
\&\fBmandatory\fR
.IP "\s-1VERSION\s0" 4
.IX Item "VERSION"
The version number of your Robot.
This should be a floating point number,
in the format \fBN.NNN\fR.
.Sp
\&\fBmandatory\fR
.IP "\s-1EMAIL\s0" 4
.IX Item "EMAIL"
A valid email address which can be used to contact the Robot's owner,
for example by someone who wishes to complain about the behavior of
your robot.
.Sp
\&\fBmandatory\fR
.IP "\s-1VERBOSE\s0" 4
.IX Item "VERBOSE"
A boolean flag which specifies whether the Robot should display verbose
status information as it runs.
.Sp
Default: 0 (false)
.IP "\s-1TRAVERSAL\s0" 4
.IX Item "TRAVERSAL"
Specifies what traversal style should be adopted by the Robot.
Valid values are \fIdepth\fR and \fIbreadth\fR.
.Sp
Default: depth
.IP "\s-1REQUEST_DELAY\s0" 4
.IX Item "REQUEST_DELAY"
Specifies whether the delay (in minutes) between successive GETs
from the same server.
.Sp
Default: 1
.IP "\s-1IGNORE_TEXT\s0" 4
.IX Item "IGNORE_TEXT"
Specifies whether the \s-1HTML\s0 structure passed to the \fIinvoke-on-contents\fR
hook function should include the textual content of the page,
or just the \s-1HTML\s0 elements.
.Sp
Default: 1 (true)
.SH "SUPPORTED HOOKS"
.IX Header "SUPPORTED HOOKS"
This section lists the hooks which are supported by the WWW::Robot module.
The first two arguments passed to a hook function are always the Robot
object followed by the name of the hook being invoked. I.e. the start of
a hook function should look something like:
.PP
.Vb 5
\&    sub my_hook_function
\&    {
\&        my $robot = shift;
\&        my $hook  = shift;
\&        # ... other, hook\-specific, arguments
.Ve
.PP
Wherever a hook function is passed a \f(CW$url\fR argument,
this will be a \s-1URI::URL\s0 object, with the \s-1URL\s0 fully specified.
I.e. even if the \s-1URL\s0 was seen in a relative link,
it will be passed as an absolute \s-1URL\s0.
.SS "restore-state"
.IX Subsection "restore-state"
.Vb 1
\&   sub hook { my($robot, $hook_name) = @_; }
.Ve
.PP
This hook is invoked just before entering the main iterative loop
of the robot.
The intention is that the hook will be used to restore state,
if such an operation is required.
.PP
This can be helpful if the robot is running in an incremental mode,
where state is saved between each run of the robot.
.SS "invoke-on-all-url"
.IX Subsection "invoke-on-all-url"
.Vb 1
\&   sub hook { my($robot, $hook_name, $url) = @_; }
.Ve
.PP
This hook is invoked on all URLs seen by the robot,
regardless of whether the \s-1URL\s0 is actually traversed.
In addition to the standard \f(CW$robot\fR and \f(CW$hook\fR arguments,
the third argument is \f(CW$url\fR, which is the \s-1URL\s0 being travered by
the robot.
.PP
For a given \s-1URL\s0, the hook function will be invoked at most once,
regardless of how many times the \s-1URL\s0 is seen by the Robot.
If you are interested in seeing the \s-1URL\s0 every time,
you can use the \fBinvoke-on-link\fR hook.
.SS "follow-url-test"
.IX Subsection "follow-url-test"
.Vb 1
\&   sub hook { my($robot, $hook_name, $url) = @_; return $boolean; }
.Ve
.PP
This hook is invoked to determine whether the robot should traverse
the given \s-1URL\s0.
If the hook function returns 0 (zero),
then the robot will do nothing further with the \s-1URL\s0.
If the hook function returns non-zero,
then the robot will get the contents of the \s-1URL\s0,
invoke further hooks,
and extract links if the contents are \s-1HTML\s0.
.SS "invoke-on-followed-url"
.IX Subsection "invoke-on-followed-url"
.Vb 1
\&   sub hook { my($robot, $hook_name, $url) = @_; }
.Ve
.PP
This hook is invoked on URLs which are about to be traversed by the robot;
i.e. URLs which have passed the follow-url-test hook.
.SS "invoke-on-get-error"
.IX Subsection "invoke-on-get-error"
.Vb 1
\&   sub hook { my($robot, $hook_name, $url, $response) = @_; }
.Ve
.PP
This hook is invoked if the Robot ever fails to get the contents
of a \s-1URL\s0.
The \f(CW$response\fR argument is an object of type HTTP::Response.
.SS "invoke-on-contents"
.IX Subsection "invoke-on-contents"
.Vb 1
\&   sub hook { my($robot, $hook, $url, $response, $structure, $filename) = @_; }
.Ve
.PP
This hook function is invoked for all URLs for which the contents
are successfully retrieved.
.PP
The \f(CW$url\fR argument is a \s-1URI::URL\s0 object for the \s-1URL\s0 currently being
processed by the Robot engine.
.PP
The \f(CW$response\fR argument is an HTTP::Response object,
the result of the \s-1GET\s0 request on the \s-1URL\s0.
.PP
The \f(CW$structure\fR argument is an
HTML::Element object which is the root of a tree structure constructed
from the contents of the \s-1URL\s0.
You can set the \f(CW\*(C`IGNORE_TEXT\*(C'\fR attribute to specify whether the structure
passed includes the textual content of the page,
or just the \s-1HTML\s0 elements.
.PP
The \f(CW$filename\fR argument is
the path to a local temporary file which contains
a local copy of the \s-1URL\s0 contents.
You cannot assume that the file will exist after control has returned
from your hook function.
.SS "invoke-on-link"
.IX Subsection "invoke-on-link"
.Vb 1
\&   sub hook { my($robot, $hook_name, $from_url, $to_url) = @_; }
.Ve
.PP
This hook function is invoked for all links seen as the robot traverses.
When the robot is parsing a page (\fB\f(CB$from_url\fB\fR) for links,
for every link seen the \fIinvoke-on-link\fR hook is invoked with the \s-1URL\s0
of the source page, and the destination \s-1URL\s0.
The destination \s-1URL\s0 is in canonical form.
.SS "continue-test"
.IX Subsection "continue-test"
.Vb 1
\&   sub hook { my($robot) = @_; }
.Ve
.PP
This hook is invoked at the end of the robot's main iterative loop.
If the hook function returns non-zero, then the robot will continue
execution with the next \s-1URL\s0.
If the hook function returns zero,
then the Robot will terminate the main loop, and close down
after invoking the following two hooks.
.PP
If no \f(CW\*(C`continue\-test\*(C'\fR hook function is provided,
then the robot will always loop.
.SS "save-state"
.IX Subsection "save-state"
.Vb 1
\&   sub hook { my($robot) = @_; }
.Ve
.PP
This hook is used to save any state information required by the robot
application.
.SS "generate-report"
.IX Subsection "generate-report"
.Vb 1
\&   sub hook { my($robot) = @_; }
.Ve
.PP
This hook is used to generate a report for the run of the robot,
if such is desired.
.SS "modified-since"
.IX Subsection "modified-since"
If you provide this hook function, it will be invoked for each \s-1URL\s0
before the robot actually requests it.
The function can return a time to use with the If-Modified-Since
\&\s-1HTTP\s0 header.
This can be used by a robot to only process those pages which have
changed since the last visit.
.PP
Your hook function should be declared as follows:
.PP
.Vb 5
\&    sub modifed_since_hook
\&    {
\&        my $robot = shift;        # instance of Robot module
\&        my $hook  = shift;        # name of hook invoked
\&        my $url   = shift;        # URI::URL for the url in question
\&
\&        # ... calculate time ...
\&        return $time;
\&    }
.Ve
.PP
If your function returns anything other than \f(CW\*(C`undef\*(C'\fR,
then a \fBIf-Modified-Since:\fR field will be added to the request header.
.SS "invoke-after-get"
.IX Subsection "invoke-after-get"
This hook function is invoked immediately after the robot makes
each \s-1GET\s0 request.
This means your hook function will see every type of response,
not just successful GETs.
The hook function is passed two arguments: the \f(CW$url\fR we tried to \s-1GET\s0,
and the \f(CW$response\fR which resulted.
.PP
If you provided a modified-since hook, then provide an invoke-after-get
function, and look for error code 304 (or \s-1RC_NOT_MODIFIED\s0 if you are
using HTTP::Status, which you should be :\-):
.PP
.Vb 3
\&    sub after_get_hook
\&    {
\&        my($robot, $hook, $url, $response) = @_;
\&
\&        if ($response\->code == RC_NOT_MODIFIED) {
\&                # ...
\&        }
\&    }
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
This section illustrates use of the Robot module,
with code snippets from several sample Robot applications.
The code here is not intended to show the right way to code a web robot,
but just illustrates the \s-1API\s0 for using the Robot.
.SS "Validating Robot"
.IX Subsection "Validating Robot"
This is a simple robot which you could use to validate your web site.
The robot uses \fBweblint\fR to check the contents of URLs of type
\&\fBtext/html\fR
.PP
.Vb 3
\&   #!/usr/bin/perl
\&   require 5.002;
\&   use WWW::Robot;
\&
\&   $rootDocument = $ARGV[0];
\&
\&   $robot = new WWW::Robot(\*(AqNAME\*(Aq     =>  \*(AqValidator\*(Aq,
\&                           \*(AqVERSION\*(Aq  =>  1.000,
\&                           \*(AqEMAIL\*(Aq    =>  \*(Aqfred@foobar.com\*(Aq);
\&
\&   $robot\->addHook(\*(Aqfollow\-url\-test\*(Aq, \e&follow_test);
\&   $robot\->addHook(\*(Aqinvoke\-on\-contents\*(Aq, \e&validate_contents);
\&
\&   $robot\->run($rootDocument);
\&
\&   #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   sub follow_test {
\&      my($robot, $hook, $url) = @_;
\&      return 0 unless $url\->scheme eq \*(Aqhttp\*(Aq;
\&      return 0 if $url =~ /\e.(gif|jpg|png|xbm|au|wav|mpg)$/;
\&
\&      #\-\-\-\- we\*(Aqre only interested in pages on our site \-\-\-\-
\&      return $url =~ /^$rootDocument/;
\&   }
\&
\&   #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   sub validate_contents {
\&      my($robot, $hook, $url, $response, $filename) = @_;
\&
\&      return unless $response\->content_type eq \*(Aqtext/html\*(Aq;
\&
\&      print STDERR "\en$url\en";
\&
\&      #\-\-\-\- run weblint on local copy of URL contents \-\-\-\-\-
\&      system("weblint \-s $filename");
\&   }
.Ve
.PP
If you are behind a firewall, then you will have to add something
like the following, just before calling the \f(CW\*(C`run()\*(C'\fR method:
.PP
.Vb 2
\&   $robot\->proxy([\*(Aqftp\*(Aq, \*(Aqhttp\*(Aq, \*(Aqwais\*(Aq, \*(Aqgopher\*(Aq],
\&                 \*(Aqhttp://firewall:8080/\*(Aq);
.Ve
.SH "MODULE DEPENDENCIES"
.IX Header "MODULE DEPENDENCIES"
The Robot.pm module builds on a lot of existing Net, \s-1WWW\s0 and other
Perl modules.
Some of the modules are part of the core Perl distribution,
and the latest versions of all modules are available from
the Comprehensive Perl Archive Network (\s-1CPAN\s0).
The modules used are:
.IP "HTTP::Request" 4
.IX Item "HTTP::Request"
This module is used to construct \s-1HTTP\s0 requests, when retrieving the contents
of a \s-1URL\s0, or using the \s-1HEAD\s0 request to see if a \s-1URL\s0 exists.
.IP "HTML::Parse" 4
.IX Item "HTML::Parse"
This module builds a tree data structure from the contents of an \s-1HTML\s0 page.
This is used to extract the URLs from the links on a page.
This is also used to check for page-specific Robot exclusion commands,
using the \s-1META\s0 element.
.IP "\s-1URI::URL\s0" 4
.IX Item "URI::URL"
This module implements a class for \s-1URL\s0 objects,
providing resolution of relative URLs, and access to the different
components of a \s-1URL\s0.
.IP "LWP::RobotUA" 4
.IX Item "LWP::RobotUA"
This is a wrapper around the LWP::UserAgent class.
A \fIUserAgent\fR is used to connect to servers over the network,
and make requests.
The RobotUA module provides transparent compliance with the
\&\fIRobot Exclusion Protocol\fR.
.IP "HTTP::Status" 4
.IX Item "HTTP::Status"
This has definitions for \s-1HTTP\s0 response codes,
so you can say \s-1RC_NOT_MODIFIED\s0 instead of 304.
.PP
All of these modules are available as part of the libwww\-perl5
distribution, which is also available from \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "The \s-1SAS\s0 Group Home Page" 4
.IX Item "The SAS Group Home Page"
http://www.cre.canon.co.uk/sas.html
.Sp
This is the home page of the Group at Canon Research Centre Europe
who are responsible for Robot.pm.
.IP "Robot Exclusion Protocol" 4
.IX Item "Robot Exclusion Protocol"
http://info.webcrawler.com/mak/projects/robots/norobots.html
.Sp
This is a \fIde facto\fR standard which defines how a `well behaved'
Robot client should interact with web servers and web pages.
.IP "Guidelines for Robot Writers" 4
.IX Item "Guidelines for Robot Writers"
http://info.webcrawler.com/mak/projects/robots/guidelines.html
.Sp
Guidelines and suggestions for those who are (considering)
developing a web robot.
.IP "Weblint Home Page" 4
.IX Item "Weblint Home Page"
http://www.cre.canon.co.uk/~neilb/weblint/
.Sp
Weblint is a perl script which is used to check \s-1HTML\s0 for syntax
errors and stylistic problems,
in the same way \fBlint\fR is used to check C.
.IP "Comprehensive Perl Archive Network (\s-1CPAN\s0)" 4
.IX Item "Comprehensive Perl Archive Network (CPAN)"
http://www.perl.com/perl/CPAN/
.Sp
This is a well-organized collection of Perl resources,
such as modules, documents, and scripts.
\&\s-1CPAN\s0 is mirrored at \s-1FTP\s0 sites around the world.
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 0.011 of the Robot module.
The module requires at least version 5.002 of Perl.
.SH "AUTHOR"
.IX Header "AUTHOR"
.ie n .IP "Neil Bowers ""<neilb@cre.canon.co.uk>""" 4
.el .IP "Neil Bowers \f(CW<neilb@cre.canon.co.uk>\fR" 4
.IX Item "Neil Bowers <neilb@cre.canon.co.uk>"
.PP
\&\s-1SAS\s0 Group, Canon Research Centre Europe
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1997, Canon Research Centre Europe.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
