.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Clair::Polisci::US::Connection 3pm"
.TH Clair::Polisci::US::Connection 3pm "2012-07-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Clair::Polisci::US::Connection \- Read records from the US polisci database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    my $con = Clair::Polisci::US::Connection\->new(
\&        user => "root",
\&        password => "",
\&        host => "localhost",
\&        database => "polisci_us"
\&    );
\&
\&    # Will fetch all records from 2004 that mention moral or ethic in their
\&    # body. 
\&    my @records = $con\->get_records(
\&        min_date => "2004\-01\-01",
\&        max_date => "2004\-12\-31",
\&        chamber => "Senate",
\&        body_regex => "moral|ethic"
\&    );
\&
\&    # Each $record is a Clair::Polisci::Record
\&    foreach my $record (@records) {
\&        my $cluster = $record\->to_graf_cluster( speech_type_id => 1 );
\&        # ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used to read records from the polisci_us database. The data is
loaded into Clair::Polisci::Record, Clair::Polisci::Graf, and Clair::Polisci::Speaker objects.
Currently there are only two methods, \fInew()\fR and \fIget_records()\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 6
\&    my $con = Clair::Polisci::US::Connection\->new(
\&        user => "root",
\&        password => "",
\&        host => "localhost",
\&        database => "polisci_us"
\&    );
.Ve
.PP
Constructs a new Connection object. All of the above fields are required.
.SS "get_records"
.IX Subsection "get_records"
.Vb 8
\&    my @records = $con\->get_records(
\&        min_date => "2004\-01\-01",
\&        max_date => "2004\-12\-31",
\&        title_regex => "bush",
\&        speakers => \e@speaker_ids,
\&        chamber => "House",
\&        body_regex => "moral|ethic"
\&    );
.Ve
.PP
Fetches a list of records that match the given qualifications. Currently,
min_date and max_date are required as an attempt to increase the speed of 
the queries. They must be in the above format. title_regex and body_regex
will perform regular expression matches on the title of the record and
the grafs respectively. They are in the MySQL regular expression format, 
see http://dev.mysql.com/doc/refman/5.0/en/regexp.html for more information.
Chamber is the name of the chamber (either \*(L"Senate\*(R" or \*(L"House\*(R"). To restrict
the results to records where there are certain speakers, set speakers to
an array reference of speaker id's.
.SS "get_speech"
.IX Subsection "get_speech"
.Vb 1
\&    my $speech = $con\->get_speech("105.sen.19970903.023\-14508");
.Ve
.PP
A speech in this sense is defined as the concatentation of one speaker's grafs
in a single record. This method will map the given speech identifier 
(which doesn't exist in the database) to a concatenation of grafs. The format
for the speech identifier is: 
    chamberindex.chamber.YYYYMMDD.index\-speaker_xml_code
where chamber is either \*(L"sen\*(R" or \*(L"house\*(R", index is the position of the record
in the list of records from the given day, and speaker_xml_code is the 
unique \s-1ID\s0 given to each speaker from the \s-1XML\s0 documents.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tony Fader afader@umich.edu
