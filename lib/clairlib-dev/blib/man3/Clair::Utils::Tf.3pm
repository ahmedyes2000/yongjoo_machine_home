.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Clair::Utils::Tf 3pm"
.TH Clair::Utils::Tf 3pm "2012-07-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tf
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
my \f(CW$val\fR = \f(CW$tf\fR\->getTfForWord($word);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1TF\s0 object is stored as a subdirectory of files.
Therefore, unlike the case of the \s-1IDF\s0, there is no compelling
reason to maintain a \s-1TF\s0 object instantiation between
calls to the \s-1TF\s0.  However, it was thought desirable to make the usage
of this module resemble the usage of the \s-1IDF\s0 module.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$tfref = Clair::Utils::Tf::new($rootdir => ""/data0/projects/tfidf"", $corpusname => ""mytf"", $stemmed => 1);"
.el .SS "\f(CW$tfref\fP = Clair::Utils::Tf::new($rootdir => ``/data0/projects/tfidf'', \f(CW$corpusname\fP => ``mytf'', \f(CW$stemmed\fP => 1);"
.IX Subsection "$tfref = Clair::Utils::Tf::new($rootdir => /data0/projects/tfidf, $corpusname => mytf, $stemmed => 1);"
\fI\f(CI$rootdir:\fI\fR
.IX Subsection "$rootdir:"
.PP
(optional) Directory in which the \s-1TF\s0 is stored.  Default is
\&\*(L"/data0/projects/tfidf\*(R"
.PP
\fI\f(CI$corpusname:\fI\fR
.IX Subsection "$corpusname:"
.PP
(required) Name of the corpus the \s-1TF\s0 was built from.
.PP
\fI\f(CI$stemmed:\fI\fR
.IX Subsection "$stemmed:"
.PP
(optional) Pass 1 to use the stemmed \s-1TF\s0, 0 to use the
unstemmed \s-1TF\s0.  If the \s-1TF\s0 requested does not exist, the
.ie n .SS "$count = $tfref\->getNumDocsWithWord($word)"
.el .SS "\f(CW$count\fP = \f(CW$tfref\fP\->getNumDocsWithWord($word)"
.IX Subsection "$count = $tfref->getNumDocsWithWord($word)"
returns number of documents in corpus with this word
.ie n .SS "$count = $tfref\->getNumDocsWithPhrase(@phrase)"
.el .SS "\f(CW$count\fP = \f(CW$tfref\fP\->getNumDocsWithPhrase(@phrase)"
.IX Subsection "$count = $tfref->getNumDocsWithPhrase(@phrase)"
returns number of documents in corpus with this phrase,
where phrase is an array the elements of which in order
constitute the words of the phrase
.ie n .SS "$count = $tfref\->getFreqInDocument($word)"
.el .SS "\f(CW$count\fP = \f(CW$tfref\fP\->getFreqInDocument($word)"
.IX Subsection "$count = $tfref->getFreqInDocument($word)"
returns number of occurrences of this word in the
specified document
.ie n .SS "($count, $pMatchingPositions) = $tfref\->getPhraseFreqInDocument(\e@phrase)"
.el .SS "($count, \f(CW$pMatchingPositions\fP) = \f(CW$tfref\fP\->getPhraseFreqInDocument(\e@phrase)"
.IX Subsection "($count, $pMatchingPositions) = $tfref->getPhraseFreqInDocument(@phrase)"
returns number of occurrences of this phrase in the
specified document ($count), as well as a reference
to a hash ($pMatchingPositions) whose keys are the
positions at which the phrase occurs
.ie n .SS "$count = $tfref\->getFreq($word)"
.el .SS "\f(CW$count\fP = \f(CW$tfref\fP\->getFreq($word)"
.IX Subsection "$count = $tfref->getFreq($word)"
returns total number of occurrences of this word in all
documents in the corpus
.ie n .SS "$count = $tfref\->getPhraseFreq(@phrase)"
.el .SS "\f(CW$count\fP = \f(CW$tfref\fP\->getPhraseFreq(@phrase)"
.IX Subsection "$count = $tfref->getPhraseFreq(@phrase)"
return total number of occurrences of this phrase in all
documents in the corpus
.ie n .SS "@urls = $tfref\->getDocs($word)"
.el .SS "\f(CW@urls\fP = \f(CW$tfref\fP\->getDocs($word)"
.IX Subsection "@urls = $tfref->getDocs($word)"
returns an array containing the URLs of documents that have this word.
.ie n .SS "$refPosByUrl = $tfref\->getDocsWithPhrase(@phrase)"
.el .SS "\f(CW$refPosByUrl\fP = \f(CW$tfref\fP\->getDocsWithPhrase(@phrase)"
.IX Subsection "$refPosByUrl = $tfref->getDocsWithPhrase(@phrase)"
returns a reference to a hash containing, for each document with this phrase,
a key equal to the document \s-1URL\s0, with value equal to a
reference to an array containing all the positions at which
the phrase occurs in that document
.ie n .SS "%docScores = $tfref\->getDocsMatchingFuzzyORQuery(\e@terms, \e@negTerms, \e@phrases, \e@negPhrases)"
.el .SS "\f(CW%docScores\fP = \f(CW$tfref\fP\->getDocsMatchingFuzzyORQuery(\e@terms, \e@negTerms, \e@phrases, \e@negPhrases)"
.IX Subsection "%docScores = $tfref->getDocsMatchingFuzzyORQuery(@terms, @negTerms, @phrases, @negPhrases)"
returns a hash with keys equal to the URLs of documents matching
a query specified with unnegated terms, negated terms,
unnegated phrases, and negated phrases, using fuzzy \s-1OR\s0;
the value of a key is the corresponding document's score,
which is 1 point for each occurrence of each term matched, and
N points for each occurrence of each N\-term phrase matched.
