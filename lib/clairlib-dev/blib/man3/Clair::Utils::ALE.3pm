.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Clair::Utils::ALE 3pm"
.TH Clair::Utils::ALE 3pm "2012-07-09" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ALE \- The Automatic Link Extrapolator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1ALE\s0 is a collection of tools and Perl libraries providing easy database access for indexing information about the links in \s-1HTML\s0 documents and retreiving information from those indices.
.PP
The basic process used is to give a series of documents to the \s-1ALE\s0 indexer, then ask questions with the command-line search tool or the Perl modules.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
To use the \s-1ALE\s0 classes in your program, you'll need to first tell Perl
where they are, with a line like this:
.PP
.Vb 1
\&    use lib \*(Aq/clair4/projects/crawl/wget/prog/ale\*(Aq;
.Ve
.PP
After that, you can just use them like any other modules.
.PP
The only module you should use directly is Clair::ALE::Search.
That module will return Clair::ALE::Conn objects, which contain
one or more Clair::ALE::Link objects, which contain two
Clair::ALE::URL objects.
.PP
Internal modules you might be interested in if you are extending \s-1ALE\s0
are Clair::ALE::Stemmer and Clair::ALE::_SQL.
.PP
The easiest way to begin using \s-1ALE\s0 is to pull in the environment variables from /clair4/projects/crawl/profile using a Bourne-like shell (sh, ksh, bash, zsh, etc.). You can do that with a command like:
.PP
.Vb 1
\&    . /clair4/projects/crawl/profile
.Ve
.PP
That will add the \s-1ALE\s0 tools to your path, and set other environment variables necessary to use \s-1ALE\s0.
.SS "Environment variables"
.IX Subsection "Environment variables"
All \s-1ALE\s0 programs and libraries recognize a few environment variables which tell them where to store and look for their data. These can be set directly in the environment or by importing \f(CW%ALE::ALE_ENV\fR and setting them there, with the exception of \s-1MYSQL_UNIX_PORT\s0.
.ie n .IP """ALESPACE""" 4
.el .IP "\f(CWALESPACE\fR" 4
.IX Item "ALESPACE"
is the subdirectory where all data should be stored, and a prefix for
all directory names. If you are working with data independent of other
projects, you should try to set \s-1ALESPACE\s0 to something unique, perhaps
starting with your username. It defaults to ``default''.
.ie n .IP """ALECACHEBASE""" 4
.el .IP "\f(CWALECACHEBASE\fR" 4
.IX Item "ALECACHEBASE"
determines the root of the location where \s-1ALE\s0 can find the documents
its working with, in wget format. It defaults to \fI\f(CI$ALEBASE\fI/cache\fR.
.Sp
In addition, \s-1ALE\s0 is built on a MySQL backend. Several MySQL
environment variables can further influence \s-1ALE\s0's behavior.
.ie n .IP """MYSQL_UNIX_PORT""" 4
.el .IP "\f(CWMYSQL_UNIX_PORT\fR" 4
.IX Item "MYSQL_UNIX_PORT"
gives the path to the \s-1UNIX\s0 socket where the MySQL database \s-1ALE\s0 should
use is running on.
.SS "Getting files"
.IX Subsection "Getting files"
\&\f(CW\*(C`aleget\*(C'\fR is a tool for fetching files to index from the Web. It is a
thin front-end to \f(CW\*(C`wget\*(C'\fR, which instructs wget to stores files in the
place you specified in your environment variables.  It gives some default command-line options to \f(CW\*(C`wget\*(C'\fR,
and you can also use any other switches documented in wget.
.SS "Indexing"
.IX Subsection "Indexing"
\&\f(CW\*(C`alext\*(C'\fR is the \s-1ALE\s0 indexer. It takes one or more \s-1HTML\s0 files to index
on its command line, extracts the links from them, and puts them into
its index.
.PP
It expects all files to be in the \f(CW$ALESPACE\fR subdirectory of the
\&\f(CW$ALECACHEBASE\fR directory. If a filename starts with ``./'' it is
assumed to be a relative path and located in the proper directory, and
otherwise it is assumed to be an absolute path which should be located
in the proper directory. If you fetched your files with \f(CW\*(C`aleget\*(C'\fR, you
won't have to worry much about this.
.PP
You can use \f(CW\*(C`alext \-z\*(C'\fR to ``zap'' the tables in \f(CW$ALESPACE\fR,
removing all data stored there.
.PP
You usually will use alext in conjunction with \f(CW\*(C`find\*(C'\fR and \f(CW\*(C`xargs\*(C'\fR,
to easily pass it a large number of files to index. If you are using
\&\s-1GNU\s0 xargs, you can use the \f(CW\*(C`\-P\*(C'\fR option to run multiple copies of
\&\f(CW\*(C`alext\*(C'\fR in parallel. For more information on using these commands, see
find and xargs.
.PP
alext recognizes the standard environment variables; for more information, see Environment Variables.
.PP
Searching from the command-line
.PP
ale is the command-line searching tool. It takes many command-line
parameters; you can get a list of all of them by running \f(CW\*(C`ale
\&\-\-help\*(C'\fR. Some of the more useful ones are:
.IP "\-\-source_url" 4
.IX Item "--source_url"
Only show links with this source \s-1URL\s0. Also \-\-no_source_url.
.IP "\-\-dest_url" 4
.IX Item "--dest_url"
Only show links with this destination \s-1URL\s0. Also \-\-no_dest_url.
.IP "\-\-link_word" 4
.IX Item "--link_word"
Only show links with this word as part of the text that creates the link.
.IP "\-\-source1_url, \-\-dest2_url, \-\-link3_word, etc." 4
.IX Item "--source1_url, --dest2_url, --link3_word, etc."
Requests multi-link paths, with the first link having the specified
source \s-1URL\s0, the second link having the specified destination \s-1URL\s0, the
third link being created by the specified word, and so forth. These
queries have to look at a lot of links, and so can be much slower than
other queries.
.IP "\-\-limit" 4
.IX Item "--limit"
Return at most the given number of results. Defaults to 10; use the
string ``none'' to retreive all links.
.PP
ale recognizes the standard environment variables.
.SS "Searching from the Perl modules"
.IX Subsection "Searching from the Perl modules"
The Perl modules do the same searches as the command-line tool \f(CW\*(C`ale\*(C'\fR,
but return the data in a native Perl format instead of as text. In
fact, the command-line tool is built on top of the Perl modules.
.PP
The Perl modules are well-documented. A good starting place to learn
more about them is \s-1ALE\s0.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Here's an example of indexing the links on the \s-1CLAIR\s0 Web site, and
asking a few questions about the links.
.PP
First, we log on to tangra and start up a Bourne-like shell (if you're
using bash, you don't have to do anything special).
.PP
Once we're logged on, we set up the \s-1ALE\s0 environment:
.PP
.Vb 1
\&    . /clair4/projects/crawl/profile
.Ve
.PP
and set up an \f(CW\*(C`ALESPACE\*(C'\fR environment variable so we are working in
our own private space
.PP
.Vb 2
\&    ALESPACE=gifford_clair
\&    export ALESPACE
.Ve
.PP
Now let's get the \s-1CLAIR\s0 Web site:
.PP
.Vb 2
\&    aleget \-r http://tangra.si.umich.edu/clair/index.html \e
\&      \-X /clair/nsir \-D tangra.si.umich.edu
.Ve
.PP
(as is generally true when using wget to crawl the Web, some
experimentation will be required to figure out what needs to be
excluded). This downloads about 20MB and takes 2.5 minutes.
.PP
With the Web pages in our local cache, we can now build an \s-1ALE\s0 index on it:
.PP
.Vb 3
\&    cd /clair4/projects/crawl/var/alecache/gifford_clair
\&    find . \-type f \-print0 | 
\&      xargs \-P 5 \-n 20 \-0 nofail alext >/tmp/alext.out 2>&1
.Ve
.PP
This takes about 5 minutes.
.PP
Now, we can ask questions using the command-line tool:
.PP
Search for all links containing the word ``mead'':
.PP
.Vb 1
\&    ale \-\-link1_word=\*(Aqmead\*(Aq \-\-limit=none
.Ve
.PP
Search for all links that contain the word ``Jahna'', display up to 10:
.PP
.Vb 1
\&    ale \-\-link1_word=\*(Aqjahna\*(Aq
.Ve
.PP
Search for all links to www.aclweb.org, display up to 10:
.PP
.Vb 1
\&    ale \-\-dest_url \*(Aqhttp://www.aclweb.org\*(Aq
.Ve
.PP
Display all links from the Projects page:
.PP
.Vb 2
\&    ale \-\-source_url http://tangra.si.umich.edu/clair/home/projects.htm \e
\&        \-\-limit=none
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
You may also want to look at \s-1ALE\s0, wget, find, xargs, and
mysql.
.SH "AUTHORS"
.IX Header "AUTHORS"
\&\s-1ALE\s0 was written primarily by Scott Gifford, with input and assistance
from Dragomir Radev, Adam Winkel, and other members of the \s-1CLAIR\s0 group
at the University of Michigan School of Information.
