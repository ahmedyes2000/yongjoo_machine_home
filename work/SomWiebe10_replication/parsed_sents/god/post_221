(ROOT
  (S
    (NP (PRP They))
    (VP (MD can) (RB not)
      (VP (VB be)
        (VP (VBN proven)
          (S
            (VP (TO to)
              (VP (VB exist)
                (PP (IN if)
                  (NP (CD 1)))))))))
    (. .)))

nsubjpass(proven-5, They-1)
aux(proven-5, can-2)
neg(proven-5, not-3)
auxpass(proven-5, be-4)
root(ROOT-0, proven-5)
aux(exist-7, to-6)
xcomp(proven-5, exist-7)
prep_if(exist-7, 1-9)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP do) (RB not)
      (VP (VB have)
        (NP
          (NP (NN instrumentation))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (MD can)
                (VP
                  (VP (VB detect)
                    (NP (PRP them)))
                  (CC and)
                  (VP (VB and)
                    (ADVP (RB relay))
                    (NP
                      (NP (DT that) (NN information))
                      (PP (IN in)
                        (NP (DT a) (NN manner))))
                    (SBAR (IN that)
                      (S
                        (NP (PRP$ our) (CD 5) (NNS senses))
                        (VP (MD can)
                          (VP (VB sense)
                            (NP (PRP them)))))))
                  (NP (CD .2)))))))))
    (. .)))

nsubj(have-4, You-1)
aux(have-4, do-2)
neg(have-4, not-3)
root(ROOT-0, have-4)
dobj(have-4, instrumentation-5)
nsubj(detect-8, instrumentation-5)
nsubj(and-11, instrumentation-5)
aux(detect-8, can-7)
rcmod(instrumentation-5, detect-8)
dobj(detect-8, them-9)
rcmod(instrumentation-5, and-11)
conj_and(detect-8, and-11)
advmod(and-11, relay-12)
det(information-14, that-13)
dobj(and-11, information-14)
det(manner-17, a-16)
prep_in(information-14, manner-17)
complm(sense-23, that-18)
poss(senses-21, our-19)
num(senses-21, 5-20)
nsubj(sense-23, senses-21)
aux(sense-23, can-22)
ccomp(and-11, sense-23)
dobj(sense-23, them-24)
dobj(detect-8, .2-25)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB not)
          (VP (VB have)
            (S
              (NP (DT that) (NN instrumentation))
              (ADJP (VBN tuned)
                (PP (IN into)
                  (NP (DT the) (NN frequency)))))))))
    (NP (DT those) (NN energy) (NNS signals))
    (VP (VBP are)
      (VP (VBG transmitting)
        (PRT (RP on))))
    (. .)))

mark(have-5, If-1)
nsubj(have-5, you-2)
aux(have-5, do-3)
neg(have-5, not-4)
advcl(transmitting-16, have-5)
det(instrumentation-7, that-6)
nsubj(tuned-8, instrumentation-7)
xcomp(have-5, tuned-8)
det(frequency-11, the-10)
prep_into(tuned-8, frequency-11)
det(signals-14, those-12)
nn(signals-14, energy-13)
nsubj(transmitting-16, signals-14)
aux(transmitting-16, are-15)
root(ROOT-0, transmitting-16)
prt(transmitting-16, on-17)

(ROOT
  (FRAG
    (NP (CD 3))
    (. .)))

root(ROOT-0, 3-1)

(ROOT
  (S
    (NP (EX There))
    (VP (MD may)
      (VP (VB be)
        (NP
          (NP (JJ many) (JJ other) (NN energy) (NNS waves))
          (PP (IN than)
            (NP (NN radio) (NN tv) (NN infra) (NN red) (NN ultra) (NN violet) (JJ light) (NNS rays))))))
    (. .)))

expl(waves-7, There-1)
aux(waves-7, may-2)
cop(waves-7, be-3)
amod(waves-7, many-4)
amod(waves-7, other-5)
nn(waves-7, energy-6)
root(ROOT-0, waves-7)
nn(rays-16, radio-9)
nn(rays-16, tv-10)
nn(rays-16, infra-11)
nn(rays-16, red-12)
nn(rays-16, ultra-13)
nn(rays-16, violet-14)
amod(rays-16, light-15)
prep_than(waves-7, rays-16)

(ROOT
  (S
    (S
      (VP (VBG Thought)
        (NP (NNS waves))
        (PP (IN for)
          (NP (NN example)))))
    (, ,)
    (NP (PRP we))
    (VP (MD can) (RB not)
      (ADVP (RB even))
      (VP (VB read)
        (NP
          (NP (NN thought) (NNS waves))
          (SBAR
            (WHNP (WP who))
            (, ,)
            (S
              (PRN
                (SBAR
                  (WHNP (WP who))
                  (S
                    (VP (VBZ knows)
                      (SBAR
                        (WHNP (WP what))
                        (S
                          (NP (JJ other) (NN energy) (NNS signals))
                          (VP (VBP are)
                            (ADVP
                              (ADVP (RB out) (RB there))
                              (SBAR (IN that)
                                (S
                                  (NP (PRP we))
                                  (ADVP (RB simply))
                                  (VP (MD can) (RB not)
                                    (VP (VB detect)))))))))))))
              (VP (VB withn)
                (NP (PRP$ our) (JJ current) (NN detection) (NNS facilities))))))))
    (. .)))

partmod(read-10, Thought-1)
dobj(Thought-1, waves-2)
prep_for(Thought-1, example-4)
nsubj(read-10, we-6)
aux(read-10, can-7)
neg(read-10, not-8)
advmod(read-10, even-9)
root(ROOT-0, read-10)
nn(waves-12, thought-11)
dobj(read-10, waves-12)
nsubj(withn-30, waves-12)
nsubj(knows-16, who-15)
parataxis(withn-30, knows-16)
dobj(are-21, what-17)
amod(signals-20, other-18)
nn(signals-20, energy-19)
nsubj(are-21, signals-20)
ccomp(knows-16, are-21)
advmod(there-23, out-22)
advmod(are-21, there-23)
dep(detect-29, that-24)
nsubj(detect-29, we-25)
advmod(detect-29, simply-26)
aux(detect-29, can-27)
neg(detect-29, not-28)
ccomp(there-23, detect-29)
rcmod(waves-12, withn-30)
poss(facilities-34, our-31)
amod(facilities-34, current-32)
nn(facilities-34, detection-33)
dobj(withn-30, facilities-34)

(ROOT
  (S
    (SBAR (RB Just) (IN because)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP (VB know)
            (NP (PRP$ its))))))
    (NP (EX there))
    (VP (VBZ does) (RB not)
      (VP (VB mean)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ does) (RB n't)
              (VP (VB exist)))))))
    (. .)))

advmod(know-6, Just-1)
dep(know-6, because-2)
nsubj(know-6, you-3)
aux(know-6, do-4)
neg(know-6, n't-5)
advcl(mean-11, know-6)
dobj(know-6, its-7)
expl(mean-11, there-8)
aux(mean-11, does-9)
neg(mean-11, not-10)
root(ROOT-0, mean-11)
nsubj(exist-15, it-12)
aux(exist-15, does-13)
neg(exist-15, n't-14)
ccomp(mean-11, exist-15)

