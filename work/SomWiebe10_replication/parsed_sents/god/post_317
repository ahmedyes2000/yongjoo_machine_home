(ROOT
  (S
    (NP (NNP Mkovach))
    (VP (VBZ is)
      (VP (VBG reaching)
        (PP (IN for)
          (NP (DT an) (JJ old) (NN argument)))
        (SBAR (IN that)
          (S
            (NP (PRP one))
            (VP (MD can)
              (VP (VB find)
                (PP (IN in)
                  (NP
                    (NP (NNP Aquinas))
                    (CC and)
                    (NP (RB elsewhere))))))))))
    (. .)))

nsubj(reaching-3, Mkovach-1)
aux(reaching-3, is-2)
root(ROOT-0, reaching-3)
det(argument-7, an-5)
amod(argument-7, old-6)
prep_for(reaching-3, argument-7)
complm(find-11, that-8)
nsubj(find-11, one-9)
aux(find-11, can-10)
ccomp(reaching-3, find-11)
prep_in(find-11, Aquinas-13)
prep_in(find-11, elsewhere-15)
conj_and(Aquinas-13, elsewhere-15)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (PRP he))
        (VP (VBZ states)
          (NP (PRP it)))))
    (, ,)
    (ADVP (RB though))
    (, ,)
    (NP (PRP it))
    (VP (VBZ has)
      (NP (DT some) (JJ amusing) (NNS consequences)))
    (. .)))

mark(states-3, As-1)
nsubj(states-3, he-2)
advcl(has-9, states-3)
dobj(states-3, it-4)
advmod(has-9, though-6)
nsubj(has-9, it-8)
root(ROOT-0, has-9)
det(consequences-12, some-10)
amod(consequences-12, amusing-11)
dobj(has-9, consequences-12)

(ROOT
  (S ('' '')
    (ADVP (PRP I))
    (, ,)
    (ADVP (RB however))
    (, ,)
    (VP (VBP am)
      (ADJP (JJ able)
        (S
          (VP (TO to)
            (VP (VB contradict)
              (NP (PRP myself)))))))
    (. .)))

advmod(able-7, I-2)
advmod(able-7, however-4)
cop(able-7, am-6)
root(ROOT-0, able-7)
aux(contradict-9, to-8)
xcomp(able-7, contradict-9)
dobj(contradict-9, myself-10)

(ROOT
  (S
    (ADVP (RB Therefore))
    (NP (PRP I))
    (VP (VBP am)
      (ADJP
        (ADJP (JJR greater)
          (PP (IN than)
            (NP (NNP God))))
        (SBAR (IN because)
          (S
            (NP (PRP I))
            (VP (VBP have)
              (NP
                (NP (DT an) (NN ability))
                (SBAR
                  (S
                    (NP (PRP he))
                    (VP (VBZ lacks))))))))))
    (. .)))

advmod(greater-4, Therefore-1)
nsubj(greater-4, I-2)
cop(greater-4, am-3)
root(ROOT-0, greater-4)
prep_than(greater-4, God-6)
mark(have-9, because-7)
nsubj(have-9, I-8)
ccomp(greater-4, have-9)
det(ability-11, an-10)
dobj(have-9, ability-11)
dobj(lacks-13, ability-11)
nsubj(lacks-13, he-12)
rcmod(ability-11, lacks-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (NN something))
        (VP (VBZ is)
          (ADJP (JJ omnipotent))
          (SBAR (IN because)
            (S
              (NP (PRP it))
              (VP (MD can)
                (VP (VB do)
                  (NP
                    (NP (DT all) (NNS things))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBP are)
                          (ADJP (JJ possible)))))))))))))
    (, ,)
    (NP (PRP I))
    (VP (VBP am)
      (ADJP (JJ omnipotent)
        (SBAR (IN because)
          (S
            (NP (PRP I))
            (, ,)
            (ADVP (RB too))
            (, ,)
            (VP (MD can)
              (ADVP (RB also))
              (VP (VB do)
                (NP
                  (NP (DT all) (NNS things))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBP are)
                        (ADJP (JJ possible))))))))))))
    (. .)))

mark(omnipotent-4, If-1)
nsubj(omnipotent-4, something-2)
cop(omnipotent-4, is-3)
advcl(omnipotent-17, omnipotent-4)
mark(do-8, because-5)
nsubj(do-8, it-6)
aux(do-8, can-7)
advcl(omnipotent-4, do-8)
det(things-10, all-9)
dobj(do-8, things-10)
nsubj(possible-13, things-10)
cop(possible-13, are-12)
rcmod(things-10, possible-13)
nsubj(omnipotent-17, I-15)
cop(omnipotent-17, am-16)
root(ROOT-0, omnipotent-17)
mark(do-25, because-18)
nsubj(do-25, I-19)
advmod(do-25, too-21)
aux(do-25, can-23)
advmod(do-25, also-24)
ccomp(omnipotent-17, do-25)
det(things-27, all-26)
dobj(do-25, things-27)
nsubj(possible-30, things-27)
cop(possible-30, are-29)
rcmod(things-27, possible-30)

(ROOT
  (S
    (NP
      (NP (DT The) (NN fact))
      (SBAR (IN that)
        (S
          (NP (PRP I))
          (VP (MD ca) (RB n't)
            (ADVP (RB bench))
            (VP (VB press)
              (NP (CD 300) (NNS pounds)))))))
    (VP (VBZ does) (RB n't)
      (VP (VB disprove)
        (NP (PRP$ my) (NN omnipotence))
        (SBAR (IN since)
          (S
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ 's)
                  (ADVP (RB clearly))
                  (NP
                    (NP (NN something))
                    (SBAR
                      (S
                        (NP (PRP I))
                        (VP (VBP 'm) (RB not)
                          (ADJP (JJ able)
                            (S
                              (VP (TO to)
                                (VP (VB do))))))))))))
            (, ,)
            (X (SYM i.e.))
            (NP (PRP it))
            (VP (VBZ is) (RB n't)
              (ADJP (JJ possible)))))))
    (. .)))

det(fact-2, The-1)
nsubj(disprove-13, fact-2)
complm(press-8, that-3)
nsubj(press-8, I-4)
aux(press-8, ca-5)
neg(press-8, n't-6)
advmod(press-8, bench-7)
dep(fact-2, press-8)
num(pounds-10, 300-9)
dobj(press-8, pounds-10)
aux(disprove-13, does-11)
neg(disprove-13, n't-12)
root(ROOT-0, disprove-13)
poss(omnipotence-15, my-14)
dobj(disprove-13, omnipotence-15)
mark(possible-32, since-16)
nsubj(something-20, that-17)
cop(something-20, 's-18)
advmod(something-20, clearly-19)
dep(possible-32, something-20)
nsubj(able-24, I-21)
cop(able-24, 'm-22)
neg(able-24, not-23)
rcmod(something-20, able-24)
aux(do-26, to-25)
xcomp(able-24, do-26)
dep(possible-32, i.e.-28)
nsubj(possible-32, it-29)
cop(possible-32, is-30)
neg(possible-32, n't-31)
advcl(disprove-13, possible-32)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (VP (VBZ is)
          (ADJP (JJ possible)))))
    (, ,)
    (NP (PRP I))
    (VP (MD can)
      (ADVP (RB readily))
      (VP (VB do)))
    (. .)))

nsubj(possible-3, What-1)
cop(possible-3, is-2)
dep(do-8, possible-3)
nsubj(do-8, I-5)
aux(do-8, can-6)
advmod(do-8, readily-7)
root(ROOT-0, do-8)

(ROOT
  (S
    (ADVP (RB Maybe))
    (NP (PRP I))
    (VP (VBP 'm)
      (NP (NNP God)))
    (. .)))

advmod(God-4, Maybe-1)
nsubj(God-4, I-2)
cop(God-4, 'm-3)
root(ROOT-0, God-4)

(ROOT
  (SBARQ
    (PP (IN By)
      (NP (DT the) (NN way)))
    (, ,)
    (WHADVP (WRB why))
    (SQ (MD should)
      (NP (NN anybody))
      (VP (VB entertain)
        (PP (IN for)
          (NP (DT an) (NN instance)))
        (NP
          (NP (DT the) (NN notion))
          (SBAR (IN that)
            (S
              (NP (EX there))
              (VP (VBZ is)
                (NP
                  (NP (NN anything) (NN omnipotent))
                  (PP (IN in)
                    (NP (DT the) (NN universe))))))))))
    (. ?)))

det(way-3, the-2)
prep_by(entertain-8, way-3)
advmod(entertain-8, why-5)
aux(entertain-8, should-6)
nsubj(entertain-8, anybody-7)
root(ROOT-0, entertain-8)
det(instance-11, an-10)
prep_for(entertain-8, instance-11)
det(notion-13, the-12)
dobj(entertain-8, notion-13)
complm(is-16, that-14)
expl(is-16, there-15)
dep(notion-13, is-16)
nn(omnipotent-18, anything-17)
nsubj(is-16, omnipotent-18)
det(universe-21, the-20)
prep_in(omnipotent-18, universe-21)

(ROOT
  (S
    (NP (NNP Mkovach))
    (VP (VBZ is)
      (VP (VBG assuming)
        (NP (DT both))
        (SBAR
          (SBAR (IN that)
            (S
              (NP (NN omnipotence))
              (VP (VBZ is)
                (NP (DT a) (JJ meaningful) (NN attribute)))))
          (CC and)
          (SBAR (IN that)
            (S
              (NP (NN something))
              (VP (VBZ possesses)
                (NP (PRP it))))))))
    (. .)))

nsubj(assuming-3, Mkovach-1)
aux(assuming-3, is-2)
root(ROOT-0, assuming-3)
dobj(assuming-3, both-4)
complm(attribute-10, that-5)
nsubj(attribute-10, omnipotence-6)
cop(attribute-10, is-7)
det(attribute-10, a-8)
amod(attribute-10, meaningful-9)
ccomp(assuming-3, attribute-10)
complm(possesses-14, that-12)
nsubj(possesses-14, something-13)
ccomp(assuming-3, possesses-14)
conj_and(attribute-10, possesses-14)
dobj(possesses-14, it-15)

(ROOT
  (S
    (ADVP (RB Unfortunately))
    (, ,)
    (NP (NN omnipotence))
    (VP (VBZ is)
      (ADVP (RB just))
      (NP
        (NP (DT the) (NN answer))
        (PP (TO to)
          (NP
            (NP (DT the) (JJ absurd) (NN game))
            (PP (IN of) (`` ``)
              (S
                (VP (VB let)
                  (SBAR
                    (S
                      (VP (VBZ 's)
                        (ADVP (RB now))
                        (VP (VBN come)
                          (PRT (RP up))
                          (PP (IN with)
                            (NP
                              (NP (DT the) (JJS best) (NN thing))
                              (SBAR
                                (WHNP (WDT that))
                                (S
                                  (VP (MD might)
                                    (VP (VB be)
                                      (ADJP (JJ true)
                                        (PP (IN about)
                                          (NP (PRP$ our) (JJ tribal) (NN deity)))))))))))))))))))))
    (. .)))

advmod(answer-7, Unfortunately-1)
nsubj(answer-7, omnipotence-3)
cop(answer-7, is-4)
advmod(answer-7, just-5)
det(answer-7, the-6)
root(ROOT-0, answer-7)
det(game-11, the-9)
amod(game-11, absurd-10)
prep_to(answer-7, game-11)
prep(game-11, of-12)
dep(of-12, let-14)
auxpass(come-17, 's-15)
advmod(come-17, now-16)
ccomp(let-14, come-17)
prt(come-17, up-18)
det(thing-22, the-20)
amod(thing-22, best-21)
prep_with(come-17, thing-22)
nsubj(true-26, thing-22)
aux(true-26, might-24)
cop(true-26, be-25)
rcmod(thing-22, true-26)
poss(deity-30, our-28)
amod(deity-30, tribal-29)
prep_about(true-26, deity-30)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP 'm)
      (VP (VBN reminded)
        (PP (IN of)
          (NP
            (NP (NNS arguments))
            (SBAR
              (S
                (NP (PRP I))
                (VP (VBD had)
                  (PP (IN with)
                    (NP
                      (NP (PRP$ my) (NNS friends))
                      (PP (IN in)
                        (NP (NN grammar) (NN school))))))))))
        (PP (IN about)
          (NP
            (SBAR (IN whether)
              (S
                (NP (DT the) (JJ universal) (NN solvent))
                (VP (VBD was)
                  (ADJP (JJ able)
                    (S
                      (VP (TO to)
                        (VP (VB dissolve)
                          (NP (PRP itself)))))))))
            (, ,)
            (NP (FW etc.))))))
    (. .)))

nsubjpass(reminded-4, I-2)
auxpass(reminded-4, 'm-3)
root(ROOT-0, reminded-4)
prep_of(reminded-4, arguments-6)
dobj(had-8, arguments-6)
nsubj(had-8, I-7)
rcmod(arguments-6, had-8)
poss(friends-11, my-10)
prep_with(had-8, friends-11)
nn(school-14, grammar-13)
prep_in(friends-11, school-14)
dep(able-21, whether-16)
det(solvent-19, the-17)
amod(solvent-19, universal-18)
nsubj(able-21, solvent-19)
cop(able-21, was-20)
dep(etc.-26, able-21)
aux(dissolve-23, to-22)
xcomp(able-21, dissolve-23)
dobj(dissolve-23, itself-24)
prep_about(reminded-4, etc.-26)

(ROOT
  (NP
    (NP (CD One) (JJ last) (NN note))
    (: :)
    (S
      (NP (NNP mkovach) (NNP writes) ('' '') (NNP God))
      (VP (MD can) (RB not)
        (VP (VB contradict)
          (NP (PRP himself)))))
    (. .)))

num(note-3, One-1)
amod(note-3, last-2)
root(ROOT-0, note-3)
nn(God-8, mkovach-5)
nn(God-8, writes-6)
nsubj(contradict-11, God-8)
aux(contradict-11, can-9)
neg(contradict-11, not-10)
dep(note-3, contradict-11)
dobj(contradict-11, himself-12)

