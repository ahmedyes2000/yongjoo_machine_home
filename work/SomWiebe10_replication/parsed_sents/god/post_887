(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADJP (RB completely) (JJ ridiculous))
      (S
        (VP (TO to)
          (VP (VB think)
            (SBAR
              (S
                (NP (DT the) (NN evolution))
                (VP (VBD took)
                  (NP (NN place))
                  (PP (IN without)
                    (NP (NN someone)
                      (CC or)
                      (NN something)))
                  (S
                    (VP (VBG controlling)
                      (NP (PRP it)))))))))))
    (. .)))

nsubj(ridiculous-4, It-1)
xsubj(think-6, It-1)
cop(ridiculous-4, 's-2)
advmod(ridiculous-4, completely-3)
root(ROOT-0, ridiculous-4)
aux(think-6, to-5)
xcomp(ridiculous-4, think-6)
det(evolution-8, the-7)
nsubj(took-9, evolution-8)
ccomp(think-6, took-9)
dobj(took-9, place-10)
prep_without(took-9, someone-12)
prep_without(took-9, something-14)
conj_or(someone-12, something-14)
xcomp(took-9, controlling-15)
dobj(controlling-15, it-16)

(ROOT
  (S (CC And)
    (NP (NN something))
    (VP (MD must)
      (VP (VB have)
        (VP (VBN been)
          (NP
            (NP (DT the) (JJ first) (NN existence))
            (CC and)
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ 's)
                  (NP
                    (ADJP (RBS most) (JJ likely))
                    (NN God)))))))))
    (. .)))

nsubj(existence-8, something-2)
aux(existence-8, must-3)
aux(existence-8, have-4)
cop(existence-8, been-5)
det(existence-8, the-6)
amod(existence-8, first-7)
root(ROOT-0, existence-8)
nsubj(God-14, that-10)
cop(God-14, 's-11)
advmod(likely-13, most-12)
amod(God-14, likely-13)
conj_and(existence-8, God-14)
rcmod(existence-8, God-14)

(ROOT
  (S
    (S
      (NP (DT That))
      (VP (MD may) (RB not)
        (VP (VB sound)
          (ADJP (JJ logical)))))
    (, ,)
    (CC but)
    (S
      (NP
        (NP (DT every) (JJ other) (NN assumption))
        (PP (IN about) ('' '')
          (NP (WP What))))
      (VP (VBD was)
        (ADVP (RB first))))
    (. ?)))

nsubj(sound-4, That-1)
aux(sound-4, may-2)
neg(sound-4, not-3)
root(ROOT-0, sound-4)
acomp(sound-4, logical-5)
det(assumption-10, every-8)
amod(assumption-10, other-9)
nsubj(was-14, assumption-10)
prep_about(assumption-10, What-13)
conj_but(sound-4, was-14)
advmod(was-14, first-15)

(ROOT
  (S
    (NP (NNP ''))
    (VP (VBZ is)
      (ADJP (RB even) (RBR less) (JJ logical)))
    (. .)))

cop(logical-5, is-2)
advmod(logical-5, even-3)
advmod(logical-5, less-4)
root(ROOT-0, logical-5)

(ROOT
  (S (CC And)
    (NP (EX there))
    (VP (VBP are)
      (ADJP
        (ADVP
          (NP (DT a) (RB lot))
          (RBR more))
        (JJ proofs)))
    (. .)))

cc(are-3, And-1)
expl(are-3, there-2)
root(ROOT-0, are-3)
det(lot-5, a-4)
npadvmod(more-6, lot-5)
advmod(proofs-7, more-6)
acomp(are-3, proofs-7)

