(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (ADVP (RB truly))
        (VP (VBP believe)
          (NP (DT that)))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (NP
        (NP (DT a) (VBN lost) (NN cause))
        (PP (TO to)
          (NP (DT the) (NN world)))))
    (. .)))

mark(believe-4, If-1)
nsubj(believe-4, you-2)
advmod(believe-4, truly-3)
advcl(cause-11, believe-4)
dobj(believe-4, that-5)
nsubj(cause-11, you-7)
cop(cause-11, are-8)
det(cause-11, a-9)
amod(cause-11, lost-10)
root(ROOT-0, cause-11)
det(world-14, the-13)
prep_to(cause-11, world-14)

(ROOT
  (S
    (VP (VB Take)
      (NP (DT some) (NN time)
        (S
          (VP (TO to)
            (VP (VB reevaluate)
              (UCP
                (FRAG
                  (WHNP (WP who)))
                (CC and)
                (SBAR
                  (WHNP (WP what))
                  (S
                    (NP (PRP you))
                    (VP (VBP are))))))))))
    (. .)))

root(ROOT-0, Take-1)
det(time-3, some-2)
dobj(Take-1, time-3)
aux(reevaluate-5, to-4)
infmod(time-3, reevaluate-5)
dep(reevaluate-5, who-6)
dobj(are-10, what-8)
nsubj(are-10, you-9)
dep(reevaluate-5, are-10)
conj_and(who-6, are-10)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP wish)
      (NP (PRP you))
      (NP (NN luck)))
    (. .)))

nsubj(wish-2, I-1)
root(ROOT-0, wish-2)
iobj(wish-2, you-3)
dobj(wish-2, luck-4)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB care)
          (SBAR (IN if)
            (S
              (NP (PRP you))
              (VP (VBP have)
                (NP (DT a) (NN faith))))
            (CC or)
            (RB not)))))
    (, ,)
    (CC but)
    (S
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (PRP you))
          (VP (VBP help)
            (NP (NN someone)))))
      (, ,)
      (NP (PRP it))
      (VP (MD should)
        (VP (VB be)
          (SBAR (IN because)
            (S
              (NP (PRP it))
              (VP (VBZ 's)
                (NP (DT the) (JJ right) (NN thing)
                  (S
                    (VP (TO to)
                      (VP (VB do)))))
                (, ,)
                (SBAR (RB not) (IN because)
                  (S
                    (NP (DT the) (JJ magic) (NN sky) (NN daddy))
                    (VP (MD will)
                      (VP (VB punish)
                        (NP (PRP you))
                        (SBAR (IN if)
                          (S
                            (NP (PRP you))
                            (VP (VBP do) (RB n't)
                              (VP (VB do)
                                (NP (DT the) (JJ right) (NN thing))))))))))))))))
    (. .)))

nsubj(care-4, I-1)
aux(care-4, do-2)
neg(care-4, n't-3)
root(ROOT-0, care-4)
mark(have-7, if-5)
nsubj(have-7, you-6)
advcl(care-4, have-7)
det(faith-9, a-8)
dobj(have-7, faith-9)
advcl(care-4, not-11)
conj_or(have-7, not-11)
advmod(help-16, when-14)
nsubj(help-16, you-15)
advcl(be-21, help-16)
dobj(help-16, someone-17)
nsubj(be-21, it-19)
aux(be-21, should-20)
conj_but(care-4, be-21)
mark(thing-27, because-22)
nsubj(thing-27, it-23)
cop(thing-27, 's-24)
det(thing-27, the-25)
amod(thing-27, right-26)
advcl(be-21, thing-27)
aux(do-29, to-28)
infmod(thing-27, do-29)
dep(punish-38, not-31)
dep(punish-38, because-32)
det(daddy-36, the-33)
amod(daddy-36, magic-34)
nn(daddy-36, sky-35)
nsubj(punish-38, daddy-36)
aux(punish-38, will-37)
dep(thing-27, punish-38)
dobj(punish-38, you-39)
mark(do-44, if-40)
nsubj(do-44, you-41)
aux(do-44, do-42)
neg(do-44, n't-43)
advcl(punish-38, do-44)
det(thing-47, the-45)
amod(thing-47, right-46)
dobj(do-44, thing-47)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP
          (NP (NN living))
          (PP (IN for)
            (NP (PRP yourself))))
        (VP (VBZ is)
          (ADJP (RB so) (JJ easy)))))
    (, ,)
    (NP (RB then))
    (VP (VBP do)
      (NP (PRP it)))
    (. .)))

mark(easy-7, If-1)
nsubj(easy-7, living-2)
prep_for(living-2, yourself-4)
cop(easy-7, is-5)
advmod(easy-7, so-6)
advcl(do-10, easy-7)
nsubj(do-10, then-9)
root(ROOT-0, do-10)
dobj(do-10, it-11)

(ROOT
  (S
    (VP (VB Prove)
      (PP (TO to)
        (NP (DT the) (NN world)))
      (SBAR (IN that)
        (S
          (PP (IN without)
            (NP (DT a) (NN god)))
          (NP (PRP you))
          (VP (VBP have)
            (NP (DT no) (JJ moral) (NN fiber))))))
    (. .)))

root(ROOT-0, Prove-1)
det(world-4, the-3)
prep_to(Prove-1, world-4)
complm(have-10, that-5)
det(god-8, a-7)
prep_without(have-10, god-8)
nsubj(have-10, you-9)
ccomp(Prove-1, have-10)
det(fiber-13, no-11)
amod(fiber-13, moral-12)
dobj(have-10, fiber-13)

(ROOT
  (S
    (NP
      (NP (NNP Prove))
      (SBAR
        (SBAR (IN that)
          (S
            (NP (PRP you))
            (VP (VBP 're)
              (ADVP (RB just))
              (NP (DT a) (NN sheep)))))
        (, ,)
        (CC and)
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ 's) (RB all)
              (NP (PRP you)))))))
    (VP (VBP have)
      (NP (DT the) (NN potential)
        (S
          (VP (TO to)
            (ADVP (RB ever))
            (VP (VB be))))))
    (. .)))

nsubj(you-13, Prove-1)
nsubj(have-14, Prove-1)
dep(sheep-7, that-2)
nsubj(sheep-7, you-3)
cop(sheep-7, 're-4)
advmod(sheep-7, just-5)
det(sheep-7, a-6)
rcmod(Prove-1, sheep-7)
cop(you-13, 's-11)
advmod(you-13, all-12)
rcmod(Prove-1, you-13)
conj_and(sheep-7, you-13)
root(ROOT-0, have-14)
det(potential-16, the-15)
dobj(have-14, potential-16)
aux(be-19, to-17)
advmod(be-19, ever-18)
infmod(potential-16, be-19)

(ROOT
  (S
    (S (CC And)
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (PRP they))
          (VP (VB forge)
            (PP (IN into)
              (NP (DT the) (NN future))))))
      (, ,)
      (NP (PRP they))
      (VP (MD will)
        (VP (VB condemn)
          (NP (PRP$ your) (NN name)))))
    (, ,)
    (CC and)
    (S
      (NP (DT the) (NNS names) (NN everyone))
      (VP (VBP like)
        (NP (PRP you))))
    (. .)))

advmod(forge-4, when-2)
nsubj(forge-4, they-3)
advcl(condemn-11, forge-4)
det(future-7, the-6)
prep_into(forge-4, future-7)
nsubj(condemn-11, they-9)
aux(condemn-11, will-10)
root(ROOT-0, condemn-11)
poss(name-13, your-12)
dobj(condemn-11, name-13)
det(everyone-18, the-16)
nn(everyone-18, names-17)
nsubj(like-19, everyone-18)
conj_and(condemn-11, like-19)
dobj(like-19, you-20)

(ROOT
  (S
    (S
      (ADVP (RB Perhaps))
      (NP (EX there))
      (VP (VBZ is)
        (NP (DT no) (NN god))))
    (, ,)
    (CC but)
    (S
      (ADVP (RB even) (RB so))
      (, ,)
      (NP (NN life))
      (VP (VBZ is)
        (NP (DT a) (JJ precious) (NN gift))))
    (. .)))

advmod(is-3, Perhaps-1)
expl(is-3, there-2)
root(ROOT-0, is-3)
det(god-5, no-4)
nsubj(is-3, god-5)
advmod(so-9, even-8)
advmod(gift-15, so-9)
nsubj(gift-15, life-11)
cop(gift-15, is-12)
det(gift-15, a-13)
amod(gift-15, precious-14)
conj_but(is-3, gift-15)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP feel)
          (SBAR (IN like)
            (S
              (NP (EX there))
              (VP (VBZ 's)
                (NP (DT no) (NN reason)
                  (S
                    (VP (TO to)
                      (VP (VB live)
                        (NP (PRP it))
                        (PP (IN without)
                          (NP (DT a) (NN god)))))))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP you))
    (VP (VBP 're)
      (VP (VBG fucking)
        (ADJP (JJ useless))))
    (. .)))

mark(feel-3, If-1)
nsubj(feel-3, you-2)
advcl(fucking-19, feel-3)
mark('s-6, like-4)
expl('s-6, there-5)
advcl(feel-3, 's-6)
det(reason-8, no-7)
nsubj('s-6, reason-8)
aux(live-10, to-9)
infmod(reason-8, live-10)
dobj(live-10, it-11)
det(god-14, a-13)
prep_without(live-10, god-14)
advmod(fucking-19, then-16)
nsubj(fucking-19, you-17)
aux(fucking-19, 're-18)
root(ROOT-0, fucking-19)
acomp(fucking-19, useless-20)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (VP (VBN ignored)
        (S
          (VP (VBG Jesus) ('' '')
            (NP (NN message))))))
    (. .)))

nsubj(ignored-3, You-1)
aux(ignored-3, have-2)
root(ROOT-0, ignored-3)
xcomp(ignored-3, Jesus-4)
dobj(Jesus-4, message-6)

