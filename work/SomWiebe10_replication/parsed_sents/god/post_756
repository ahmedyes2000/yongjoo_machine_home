(ROOT
  (S (RB Then)
    (NP (DT that))
    (VP (VBZ does) (RB n't)
      (VP (VB answer)
        (NP (DT any) (NNS questions))))
    (. .)))

advmod(answer-5, Then-1)
nsubj(answer-5, that-2)
aux(answer-5, does-3)
neg(answer-5, n't-4)
root(ROOT-0, answer-5)
det(questions-7, any-6)
dobj(answer-5, questions-7)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBD was)
      (NP (NN life))
      (VP (VBN put)
        (PP (IN on)
          (NP (NNP Earth)))))
    (. ?)))

advmod(put-4, Why-1)
auxpass(put-4, was-2)
nsubjpass(put-4, life-3)
root(ROOT-0, put-4)
prep_on(put-4, Earth-6)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBZ does)
      (NP (NNP Earth))
      (ADVP (RB even))
      (VP (VB exist)))
    (. ?)))

advmod(exist-5, Why-1)
aux(exist-5, does-2)
nsubj(exist-5, Earth-3)
advmod(exist-5, even-4)
root(ROOT-0, exist-5)

(ROOT
  (SQ (MD Would) (RB n't)
    (NP (PRP it))
    (VP (VB make)
      (NP (NN sense))
      (S
        (VP (TO to)
          (VP (VB believe)
            (PP (IN in)
              (NP (NNP God)))
            (: :)
            (SBAR
              (SBAR
                (S
                  (NP (PRP He))
                  (VP
                    (VP (VBD put)
                      (NP (NN life))
                      (PP (IN on)
                        (NP (NNP Earth)))
                      (, ,)
                      (ADVP (CC either)
                        (RB directly)
                        (CC or)
                        (RB indirectly)))
                    (PRN (-LRB- -LRB-)
                      (S
                        (NP (PRP I))
                        (VP (VBP 'm) (RB not)
                          (VP (VBG getting)
                            (PP (IN into)
                              (NP (DT that))))))
                      (-RRB- -RRB-)))))
              (, ,)
              (CC so)
              (SBAR (IN that)
                (S
                  (NP (PRP we))
                  (VP (MD could)
                    (VP (VB live)
                      (NP (NN life))
                      (SBAR (IN in) (NN order)
                        (S
                          (VP (TO to)
                            (VP (VB return)
                              (PP (TO to)
                                (NP (PRP Him))))))))))))))))
    (. .)))

aux(make-4, Would-1)
neg(make-4, n't-2)
nsubj(make-4, it-3)
root(ROOT-0, make-4)
dobj(make-4, sense-5)
aux(believe-7, to-6)
xcomp(make-4, believe-7)
prep_in(believe-7, God-9)
nsubj(put-12, He-11)
ccomp(believe-7, put-12)
parataxis(believe-7, put-12)
dobj(put-12, life-13)
prep_on(put-12, Earth-15)
preconj(directly-18, either-17)
advmod(put-12, directly-18)
advmod(put-12, indirectly-20)
conj_or(directly-18, indirectly-20)
nsubj(getting-25, I-22)
aux(getting-25, 'm-23)
neg(getting-25, not-24)
parataxis(put-12, getting-25)
prep_into(getting-25, that-27)
complm(live-34, that-31)
nsubj(live-34, we-32)
aux(live-34, could-33)
ccomp(believe-7, live-34)
parataxis(believe-7, live-34)
conj_so(put-12, live-34)
dobj(live-34, life-35)
mark(return-39, in-36)
dep(return-39, order-37)
aux(return-39, to-38)
purpcl(live-34, return-39)
prep_to(return-39, Him-41)

(ROOT
  (S
    (NP (NNP Life))
    (VP (VBZ is)
      (PP (IN like)
        (NP (DT a) (NN trial) (NN period))))
    (. .)))

nsubj(is-2, Life-1)
root(ROOT-0, is-2)
det(period-6, a-4)
nn(period-6, trial-5)
prep_like(is-2, period-6)

(ROOT
  (S
    (NP (NNP God))
    (VP (VBZ wants)
      (S
        (VP (TO to)
          (VP (VB know)
            (SBAR
              (WHADVP (WRB how))
              (S
                (NP (PRP we))
                (VP (MD can)
                  (VP
                    (VP (VB act)
                      (PP (IN with)
                        (NP
                          (NP (JJ free) (NN will))
                          (, ,)
                          (NP (NN sin))
                          (, ,))))
                    (CC and)
                    (VP (VB detachment)
                      (PP (IN from)
                        (NP (JJ pure) (NN good))))))))))))
    (. .)))

nsubj(wants-2, God-1)
xsubj(know-4, God-1)
root(ROOT-0, wants-2)
aux(know-4, to-3)
xcomp(wants-2, know-4)
advmod(act-8, how-5)
nsubj(act-8, we-6)
nsubj(detachment-16, we-6)
aux(act-8, can-7)
ccomp(know-4, act-8)
amod(will-11, free-10)
prep_with(act-8, will-11)
appos(will-11, sin-13)
ccomp(know-4, detachment-16)
conj_and(act-8, detachment-16)
amod(good-19, pure-18)
prep_from(detachment-16, good-19)

