(ROOT
  (S
    (INTJ (UH Yes))
    (, ,)
    (NP (EX there))
    (VP (MD can)
      (VP (VB be)
        (ADJP (RB no) (JJ good)
          (PP (IN without)
            (NP (NNP God))))))
    (. .)))

dep(good-7, Yes-1)
expl(good-7, there-3)
aux(good-7, can-4)
cop(good-7, be-5)
advmod(good-7, no-6)
root(ROOT-0, good-7)
prep_without(good-7, God-9)

(ROOT
  (S
    (PP (IN With)
      (PP (IN out)
        (NP (DT an) (NN author))))
    (, ,)
    (NP (NN everything))
    (ADVP (RB then))
    (VP (VBZ becomes)
      (NP
        (NP (DT a) (NN matter))
        (PP (IN of)
          (NP (JJ personal) (NN preference)
            (CC and)
            (NN interpretation)))))
    (. .)))

prep(matter-10, With-1)
pcomp(With-1, out-2)
det(author-4, an-3)
prep_out(With-1, author-4)
nsubj(matter-10, everything-6)
advmod(matter-10, then-7)
cop(matter-10, becomes-8)
det(matter-10, a-9)
root(ROOT-0, matter-10)
amod(preference-13, personal-12)
prep_of(matter-10, preference-13)
prep_of(matter-10, interpretation-15)
conj_and(preference-13, interpretation-15)

(ROOT
  (S
    (NP (PRP$ Our) (NNS lives))
    (VP (VBP have)
      (NP (DT no) (NN value)))
    (. .)))

poss(lives-2, Our-1)
nsubj(have-3, lives-2)
root(ROOT-0, have-3)
det(value-5, no-4)
dobj(have-3, value-5)

(ROOT
  (S (RB Then)
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP (DT no) (NN difference))
        (PP (IN between)
          (S
            (VP
              (VP (VBG gassing)
                (NP (NNS termites)))
              (CC and)
              (VP (VBG gassing)
                (NP
                  (QP (CD 6) (CD million))
                  (NNPS Jews))))))))
    (. .)))

advmod(is-3, Then-1)
expl(is-3, there-2)
root(ROOT-0, is-3)
det(difference-5, no-4)
nsubj(is-3, difference-5)
prepc_between(difference-5, gassing-7)
dobj(gassing-7, termites-8)
prepc_between(difference-5, gassing-10)
conj_and(gassing-7, gassing-10)
number(million-12, 6-11)
num(Jews-13, million-12)
dobj(gassing-10, Jews-13)

(ROOT
  (S
    (NP (DT That))
    (VP (MD ought)
      (S
        (VP (TO to)
          (VP (VB scare)
            (NP (DT any) (JJ sane) (NN person))))))
    (. .)))

nsubj(ought-2, That-1)
xsubj(scare-4, That-1)
root(ROOT-0, ought-2)
aux(scare-4, to-3)
xcomp(ought-2, scare-4)
det(person-7, any-5)
amod(person-7, sane-6)
dobj(scare-4, person-7)

(ROOT
  (S
    (PP (IN Because)
      (NP (RB then)))
    (NP (PRP you))
    (VP (VBP become)
      (NP
        (NP (DT a) (NN commodity))
        (PP (IN for)
          (NP (DT the) (NN state)
            (S
              (VP (TO to)
                (VP (VB use)
                  (CC and)
                  (VB consume)
                  (PP (IN for)
                    (NP
                      (NP (PRP it) (POS 's))
                      (NNS purposes))))))))))
    (. .)))

prep(commodity-6, Because-1)
pobj(Because-1, then-2)
nsubj(commodity-6, you-3)
cop(commodity-6, become-4)
det(commodity-6, a-5)
root(ROOT-0, commodity-6)
det(state-9, the-8)
prep_for(commodity-6, state-9)
aux(use-11, to-10)
infmod(state-9, use-11)
infmod(state-9, consume-13)
conj_and(use-11, consume-13)
poss(purposes-17, it-15)
prep_for(use-11, purposes-17)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN correlation))
        (PP (IN between)
          (NP (NNP Communism)
            (CC and)
            (NNP atheism)))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(correlation-4, a-3)
nsubj(is-2, correlation-4)
prep_between(correlation-4, Communism-6)
prep_between(correlation-4, atheism-8)
conj_and(Communism-6, atheism-8)

(ROOT
  (S
    (S
      (PP (IN For)
        (NP (JJ further) (NN proof)))
      (VP
        (VP (VB pick)
          (PRT (RP up))
          (NP
            (NP (DT a) (NN copy))
            (PP (IN of)
              (NP
                (NP (DT The) (NNP Guinness) (NNP Book))
                (PP (IN of)
                  (NP (NNP World) (NNPS Records)))))))
        (CC and)
        (VP (VB check)
          (PRT (RP out))
          (NP
            (NP (DT the) (JJS greatest) (NN mass) (NNS murderers))
            (PP (IN of)
              (NP (DT all) (NN time)))))))
    (: :)
    (S
      (NP
        (NP (JJ Atheistic) (NNS regimes))
        (, ,)
        (NP (NNP Stalin))
        (, ,))
      (VP (VBZ Mao)
        (NP (FW etc) (FW etc.))))
    (. .)))

amod(proof-3, further-2)
prep_for(pick-4, proof-3)
root(ROOT-0, pick-4)
prt(pick-4, up-5)
det(copy-7, a-6)
dobj(pick-4, copy-7)
det(Book-11, The-9)
nn(Book-11, Guinness-10)
prep_of(copy-7, Book-11)
nn(Records-14, World-13)
prep_of(Book-11, Records-14)
conj_and(pick-4, check-16)
prt(check-16, out-17)
det(murderers-21, the-18)
amod(murderers-21, greatest-19)
nn(murderers-21, mass-20)
dobj(check-16, murderers-21)
det(time-24, all-23)
prep_of(murderers-21, time-24)
amod(regimes-27, Atheistic-26)
nsubj(Mao-31, regimes-27)
appos(regimes-27, Stalin-29)
parataxis(pick-4, Mao-31)
nn(etc.-33, etc-32)
dobj(Mao-31, etc.-33)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN reason))
        (SBAR
          (S
            (NP (NNP Russia))
            (VP (VBZ is)
              (VP (VBG experiencing)
                (NP
                  (NP (DT a) (NN surge))
                  (PP (IN in)
                    (NP (NN religion))))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(reason-4, a-3)
nsubj(is-2, reason-4)
nsubj(experiencing-7, Russia-5)
aux(experiencing-7, is-6)
rcmod(reason-4, experiencing-7)
det(surge-9, a-8)
dobj(experiencing-7, surge-9)
prep_in(surge-9, religion-11)

(ROOT
  (S
    (S
      (NP (DT This) (NN question))
      (VP (VBZ is) (RB not)
        (NP
          (NP (DT a) (JJ theoretical) (NN one))
          (PP (IN for)
            (NP (PRP them))))))
    (: ;)
    (S
      (NP (PRP they))
      (VP (VBP know)
        (NP (DT the) (NN answer))
        (PP (IN from)
          (NP (JJ first) (NN hand) (NN experience)))))
    (. .)))

det(question-2, This-1)
nsubj(one-7, question-2)
cop(one-7, is-3)
neg(one-7, not-4)
det(one-7, a-5)
amod(one-7, theoretical-6)
root(ROOT-0, one-7)
prep_for(one-7, them-9)
nsubj(know-12, they-11)
parataxis(one-7, know-12)
det(answer-14, the-13)
dobj(know-12, answer-14)
amod(experience-18, first-16)
nn(experience-18, hand-17)
prep_from(know-12, experience-18)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do)
      (ADVP (RB however))
      (VP (VB think)
        (NP
          (NP (DT the) (JJR greater) (NN question))
          (SBAR
            (S
              (VP (VBZ is)
                (SBARQ
                  (WHADVP (WRB why))
                  (SQ (VBP do)
                    (NP (PRP we))
                    (VP (VB have)
                      (S
                        (VP (TO to)
                          (VP (VB protect)
                            (NP (PRP ourselves))
                            (PP (IN from)
                              (NP (PRP ourselves)))))))))))))))
    (. .)))

nsubj(think-4, I-1)
aux(think-4, do-2)
advmod(think-4, however-3)
root(ROOT-0, think-4)
det(question-7, the-5)
amod(question-7, greater-6)
dobj(think-4, question-7)
rcmod(question-7, is-8)
advmod(have-12, why-9)
aux(have-12, do-10)
nsubj(have-12, we-11)
xsubj(protect-14, we-11)
dep(is-8, have-12)
aux(protect-14, to-13)
xcomp(have-12, protect-14)
dobj(protect-14, ourselves-15)
prep_from(protect-14, ourselves-17)

(ROOT
  (S
    (S
      (VP (VB Take)
        (NP (DT the) (CD Ten) (NNS Commandments))))
    (, ,)
    (NP (PRP it))
    (VP (MD ought)
      (S
        (VP (TO to)
          (VP (VB stagger)
            (NP (PRP us))
            (SBAR (IN that)
              (S
                (NP (NNP God))
                (VP (VBZ has)
                  (S
                    (VP (TO to)
                      (VP (VB tell)
                        (S
                          (NP (PRP us))
                          (RB not)
                          (VP (TO to)
                            (VP (VB murder)
                              (CC and)
                              (VB steal))))))))))))))
    (. .)))

ccomp(ought-7, Take-1)
det(Commandments-4, the-2)
num(Commandments-4, Ten-3)
dobj(Take-1, Commandments-4)
nsubj(ought-7, it-6)
xsubj(stagger-9, it-6)
root(ROOT-0, ought-7)
aux(stagger-9, to-8)
xcomp(ought-7, stagger-9)
dobj(stagger-9, us-10)
complm(has-13, that-11)
nsubj(has-13, God-12)
xsubj(tell-15, God-12)
ccomp(stagger-9, has-13)
aux(tell-15, to-14)
xcomp(has-13, tell-15)
nsubj(murder-19, us-16)
nsubj(steal-21, us-16)
neg(murder-19, not-17)
aux(murder-19, to-18)
xcomp(tell-15, murder-19)
xcomp(tell-15, steal-21)
conj_and(murder-19, steal-21)

(ROOT
  (NP (NNP Wow) (NNP !!)))

nn(!!-2, Wow-1)
root(ROOT-0, !!-2)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP
        (NP (DT no) (JJ objective) (NN standard))
        (PP (IN by)
          (SBAR
            (WHNP (WDT which))
            (S
              (VP (TO to)
                (VP (VB judge)
                  (NP (NNS things)))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(standard-5, no-3)
amod(standard-5, objective-4)
nsubj(is-2, standard-5)
nsubj(judge-9, which-7)
aux(judge-9, to-8)
prepc_by(standard-5, judge-9)
dobj(judge-9, things-10)

(ROOT
  (S
    (NP (DT that))
    (VP (MD ought)
      (S
        (VP (TO to)
          (VP (VB be)
            (NP (DT a) (JJ given))))))
    (. .)))

nsubj(ought-2, that-1)
xsubj(given-6, that-1)
root(ROOT-0, ought-2)
aux(given-6, to-3)
cop(given-6, be-4)
det(given-6, a-5)
xcomp(ought-2, given-6)

(ROOT
  (S
    (NP (PRP We))
    (VP (MD should) (RB n't)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB be)
              (VP (VBN told)
                (S (RB not)
                  (VP (TO to)
                    (VP (VB do)
                      (NP (DT those) (NNS things)))))))))))
    (. .)))

nsubj(have-4, We-1)
xsubj(told-7, We-1)
aux(have-4, should-2)
neg(have-4, n't-3)
root(ROOT-0, have-4)
aux(told-7, to-5)
auxpass(told-7, be-6)
xcomp(have-4, told-7)
neg(do-10, not-8)
aux(do-10, to-9)
xcomp(told-7, do-10)
det(things-12, those-11)
dobj(do-10, things-12)

(ROOT
  (S (CC And)
    (NP
      (NP (RB then))
      (SBAR
        (S
          (VP (TO to)
            (VP (VB be)
              (VP (VBN threatened)
                (PP (IN with)
                  (NP (NN punishment))))))))
      (VP (VBG knowing)
        (NP (PRP we))))
    (VP (MD will)
      (VP (VB do)
        (NP (DT those) (NNS things))))
    (. .)))

cc(do-11, And-1)
nsubj(do-11, then-2)
aux(threatened-5, to-3)
auxpass(threatened-5, be-4)
infmod(then-2, threatened-5)
prep_with(threatened-5, punishment-7)
partmod(then-2, knowing-8)
dobj(knowing-8, we-9)
aux(do-11, will-10)
root(ROOT-0, do-11)
det(things-13, those-12)
dobj(do-11, things-13)

(ROOT
  (S
    (NP (NN Something))
    (VP (VBZ is)
      (ADJP (JJ amiss)
        (PP (IN at)
          (NP
            (NP (DT the) (JJ very) (NN core))
            (PP (IN of)
              (SBAR
                (WHNP (WP who))
                (S
                  (NP (PRP we))
                  (VP (VBP are)))))))))
    (. .)))

nsubj(amiss-3, Something-1)
cop(amiss-3, is-2)
root(ROOT-0, amiss-3)
det(core-7, the-5)
amod(core-7, very-6)
prep_at(amiss-3, core-7)
dobj(are-11, who-9)
nsubj(are-11, we-10)
prepc_of(core-7, are-11)

(ROOT
  (S
    (NP (NNS Laws))
    (VP (MD ca) (RB n't)
      (VP (VB help)
        (NP (PRP us))
        (SBAR (IN because)
          (S
            (SBAR (RB as) (RB soon) (IN as)
              (S
                (NP (PRP they))
                (VP (VBP get)
                  (PP (IN in)
                    (NP
                      (NP (DT the) (NN way))
                      (PP (IN of)
                        (SBAR
                          (WHNP (WP what))
                          (S
                            (NP (PRP we))
                            (VP (VBP want))))))))))
            (, ,)
            (NP (PRP they))
            (VP (VBP get)
              (ADVP (RB broke)))))))
    (. .)))

nsubj(help-4, Laws-1)
aux(help-4, ca-2)
neg(help-4, n't-3)
root(ROOT-0, help-4)
dobj(help-4, us-5)
mark(get-21, because-6)
advmod(get-11, as-7)
advmod(get-11, soon-8)
dep(get-11, as-9)
nsubj(get-11, they-10)
dep(get-21, get-11)
det(way-14, the-13)
prep_in(get-11, way-14)
dobj(want-18, what-16)
nsubj(want-18, we-17)
prepc_of(way-14, want-18)
nsubj(get-21, they-20)
advcl(help-4, get-21)
advmod(get-21, broke-22)

(ROOT
  (S
    (S (CC And)
      (NP
        (NP (PRP it) (POS 's))
        (ADJP (RB painfully) (JJ obvious))
        (NN religion))
      (VP (MD ca) (RB n't)
        (VP (VB help)
          (ADVP (RB either)))))
    (: ;)
    (S
      (NP (PRP it))
      (ADVP (RB just))
      (VP (VBZ becomes)
        (NP
          (NP (DT a) (NN facade))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VB hide)
                (PRT (RP behind))
                (S
                  (VP (TO to)
                    (VP (VB justify)
                      (NP (PRP$ our) (NNS actions)))))))))))
    (. .)))

cc(help-9, And-1)
poss(religion-6, it-2)
advmod(obvious-5, painfully-4)
amod(religion-6, obvious-5)
nsubj(help-9, religion-6)
aux(help-9, ca-7)
neg(help-9, n't-8)
root(ROOT-0, help-9)
advmod(help-9, either-10)
nsubj(facade-16, it-12)
advmod(facade-16, just-13)
cop(facade-16, becomes-14)
det(facade-16, a-15)
parataxis(help-9, facade-16)
dobj(hide-18, facade-16)
nsubj(hide-18, we-17)
xsubj(justify-21, we-17)
rcmod(facade-16, hide-18)
prt(hide-18, behind-19)
aux(justify-21, to-20)
xcomp(hide-18, justify-21)
poss(actions-23, our-22)
dobj(justify-21, actions-23)

(ROOT
  (S
    (NP (NNS Others))
    (ADVP (RB simply))
    (VP (VBP turn)
      (S
        (VP (TO to)
          (VP (VB atheism)
            (PRN (, ,)
              (S
                (NP (PRP they))
                (VP
                  (VP (VB close)
                    (NP (PRP$ their) (NNS eyes)))
                  (, ,)
                  (VP (VB cross)
                    (NP (PRP$ their) (NNS fingers)))
                  (CC and)
                  (VP
                    (VP (VB hope)
                      (SBAR
                        (S
                          (NP (DT no) (NN one))
                          (VP (VBZ is)
                            (NP
                              (NP (NN home))
                              (PP (IN in)
                                (NP (DT the) (NN universe))))))))
                    (CC and)
                    (VP (VB proceed)
                      (S
                        (VP (TO to)
                          (VP (VB do)
                            (SBAR
                              (WHNP (WP what))
                              (S
                                (NP (PRP they))
                                (VP (VBP want)))))))))))
              (, ,))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (PRP they))
                (VP (VBP want))))))))
    (. .)))

nsubj(turn-3, Others-1)
xsubj(atheism-5, Others-1)
advmod(turn-3, simply-2)
root(ROOT-0, turn-3)
aux(atheism-5, to-4)
xcomp(turn-3, atheism-5)
nsubj(close-8, they-7)
nsubj(cross-12, they-7)
nsubj(hope-16, they-7)
xsubj(do-27, they-7)
parataxis(atheism-5, close-8)
poss(eyes-10, their-9)
dobj(close-8, eyes-10)
parataxis(atheism-5, cross-12)
conj_and(close-8, cross-12)
poss(fingers-14, their-13)
dobj(cross-12, fingers-14)
parataxis(atheism-5, hope-16)
conj_and(close-8, hope-16)
det(one-18, no-17)
nsubj(home-20, one-18)
cop(home-20, is-19)
ccomp(hope-16, home-20)
det(universe-23, the-22)
prep_in(home-20, universe-23)
conj_and(close-8, proceed-25)
conj_and(hope-16, proceed-25)
aux(do-27, to-26)
xcomp(proceed-25, do-27)
dobj(want-30, what-28)
nsubj(want-30, they-29)
ccomp(do-27, want-30)
advmod(want-34, when-32)
nsubj(want-34, they-33)
advcl(atheism-5, want-34)

(ROOT
  (S
    (S
      (NP (NNS Others))
      (ADVP (RB still))
      (VP (MD will)
        (VP (VB try)
          (S
            (VP (TO to)
              (VP (VB plead)
                (NP (NN ignorance))))))))
    (: :) ('' '')
    (PRN
      (S
        (S
          (NP (PRP I))
          (ADVP (RB really))
          (VP (VBP want)
            (S
              (VP (TO to)
                (VP (VB do)
                  (NP (DT this)))))))
        (CC and)
        (S
          (SBAR (IN If)
            (S
              (NP (EX there))
              (VP (VBZ is)
                (NP
                  (NP (DT a) (NNP God))
                  (SBAR
                    (S
                      (NP (PRP I))
                      (VP (MD 'll)
                        (ADVP (RB just))
                        (VP (VB tell)
                          (NP (PRP Him))
                          (SBAR (IN that)
                            (S
                              (NP (PRP I))
                              (VP (VBD did) (RB n't)
                                (VP (VB know)
                                  (SBAR (IN that)
                                    (S
                                      (NP (PRP it))
                                      (VP (VBD was)
                                        (ADJP (JJ wrong)))))))))
                          ('' '')
                          (ADVP (RB Folks))))))))))
          (, ,)
          (NP (PRP we))
          (VP (VBP need)
            (S
              (VP (TO to)
                (VP (VB be)
                  (VP (VBN saved)
                    (PP (IN from)
                      (NP (PRP ourselves)))))))))))
    (, ,)
    (S
      (NP (PRP we))
      (VP (VBP are)
        (NP (DT the) (NN problem))))
    (. .)))

nsubj(try-4, Others-1)
xsubj(plead-6, Others-1)
advmod(try-4, still-2)
aux(try-4, will-3)
root(ROOT-0, try-4)
aux(plead-6, to-5)
xcomp(try-4, plead-6)
dobj(plead-6, ignorance-7)
nsubj(want-12, I-10)
xsubj(do-14, I-10)
advmod(want-12, really-11)
dep(try-4, want-12)
aux(do-14, to-13)
xcomp(want-12, do-14)
dobj(do-14, this-15)
mark(is-19, If-17)
expl(is-19, there-18)
advcl(need-40, is-19)
det(God-21, a-20)
nsubj(is-19, God-21)
nsubj(tell-25, I-22)
aux(tell-25, 'll-23)
advmod(tell-25, just-24)
rcmod(God-21, tell-25)
dobj(tell-25, Him-26)
complm(know-31, that-27)
nsubj(know-31, I-28)
aux(know-31, did-29)
neg(know-31, n't-30)
ccomp(tell-25, know-31)
complm(wrong-35, that-32)
nsubj(wrong-35, it-33)
cop(wrong-35, was-34)
ccomp(know-31, wrong-35)
advmod(tell-25, Folks-37)
nsubj(need-40, we-39)
xsubj(saved-43, we-39)
dep(try-4, need-40)
conj_and(want-12, need-40)
aux(saved-43, to-41)
auxpass(saved-43, be-42)
xcomp(need-40, saved-43)
prep_from(saved-43, ourselves-45)
nsubj(problem-50, we-47)
cop(problem-50, are-48)
det(problem-50, the-49)
ccomp(try-4, problem-50)

(ROOT
  (S (CC And)
    (SBAR
      (WHADVP (WRB when))
      (S
        (NP (PRP you))
        (VP (VBP are)
          (VP (VBN lost)
            (PP (IN in)
              (NP (DT the) (NN forest)))
            (NP
              (NP (DT the) (JJS worst) (NN thing))
              (SBAR
                (S
                  (NP (PRP you))
                  (VP (MD can)
                    (VP (VB do))))))))))
    (VP (VBZ is)
      (VP (VB ask)
        (NP (PRP yourself))
        (PP (IN for)
          (NP (NNS directions)))))
    (. .)))

cc(ask-16, And-1)
advmod(lost-5, when-2)
nsubjpass(lost-5, you-3)
auxpass(lost-5, are-4)
advcl(ask-16, lost-5)
csubj(ask-16, lost-5)
det(forest-8, the-7)
prep_in(lost-5, forest-8)
det(thing-11, the-9)
amod(thing-11, worst-10)
dobj(lost-5, thing-11)
dobj(do-14, thing-11)
nsubj(do-14, you-12)
aux(do-14, can-13)
rcmod(thing-11, do-14)
aux(ask-16, is-15)
root(ROOT-0, ask-16)
dobj(ask-16, yourself-17)
prep_for(ask-16, directions-19)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD ca) (RB n't)
      (VP (VB ask)
        (NP
          (NP (DT the) (NN maker))
          (PP (IN of)
            (NP (DT the) (NN product))))
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (PRP it))
            (VP (MD should)
              (VP (VB be)
                (VP (VBN used))))))))
    (. .)))

nsubj(ask-4, You-1)
aux(ask-4, ca-2)
neg(ask-4, n't-3)
root(ROOT-0, ask-4)
det(maker-6, the-5)
dobj(ask-4, maker-6)
det(product-9, the-8)
prep_of(maker-6, product-9)
advmod(used-14, how-10)
nsubjpass(used-14, it-11)
aux(used-14, should-12)
auxpass(used-14, be-13)
dep(ask-4, used-14)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ means)
        (SBAR
          (S
            (NP (NN man))
            (VP (VBZ has)
              (NP
                (NP (DT no) (NN purpose))
                (SBAR
                  (WHPP (IN for)
                    (WHNP (WDT which)))
                  (S
                    (NP (PRP he))
                    (VP (VBD was)
                      (VP (VBN made)))))))))))
    (CC and)
    (S
      (ADVP (RB therefore))
      (NP (EX there))
      (VP (MD can)
        (VP (VB be)
          (NP
            (NP (DT no) (NN deviation))
            (PP (IN from)
              (NP (DT a) (NN norm)))))))
    (. .)))

nsubj(means-2, It-1)
root(ROOT-0, means-2)
nsubj(has-4, man-3)
ccomp(means-2, has-4)
det(purpose-6, no-5)
dobj(has-4, purpose-6)
rel(made-11, which-8)
nsubjpass(made-11, he-9)
auxpass(made-11, was-10)
rcmod(purpose-6, made-11)
advmod(deviation-18, therefore-13)
expl(deviation-18, there-14)
aux(deviation-18, can-15)
cop(deviation-18, be-16)
det(deviation-18, no-17)
conj_and(means-2, deviation-18)
det(norm-21, a-20)
prep_from(deviation-18, norm-21)

(ROOT
  (S (CC But)
    (ADVP
      (ADVP (RBR worse))
      (SBAR (IN than)
        (S
          (NP (DT that))
          (VP (VBZ is)
            (SBAR (IN if)
              (S
                (NP (EX there))
                (VP (VBZ is)
                  (NP
                    (NP (DT no) (NN life))
                    (PP (IN after)
                      (NP (NN death)))))))))))
    (, ,)
    (NP (RB then) (NN justice))
    (VP (VBZ becomes)
      (NP (DT a) (NN sham)))
    (. .)))

cc(becomes-16, But-1)
advmod(becomes-16, worse-2)
mark(is-5, than-3)
nsubj(is-5, that-4)
dep(worse-2, is-5)
mark(is-8, if-6)
expl(is-8, there-7)
advcl(is-5, is-8)
det(life-10, no-9)
nsubj(is-8, life-10)
prep_after(life-10, death-12)
advmod(justice-15, then-14)
nsubj(becomes-16, justice-15)
root(ROOT-0, becomes-16)
det(sham-18, a-17)
attr(becomes-16, sham-18)

(ROOT
  (S
    (NP
      (NP (DT Those))
      (SBAR
        (WHNP (WP who))
        (S
          (VP
            (VP (VB go)
              (PP (IN on)
                (NP (JJ shooting) (NNS sprees))))
            (CC and)
            (VP
              (ADVP (RB then))
              (VB take)
              (NP (PRP$ their) (NNS lives)))))))
    (VP (VB escape)
      (NP (NN justice)))
    (. .)))

nsubj(go-3, Those-1)
nsubj(take-9, Those-1)
nsubj(escape-12, Those-1)
rcmod(Those-1, go-3)
amod(sprees-6, shooting-5)
prep_on(go-3, sprees-6)
advmod(take-9, then-8)
rcmod(Those-1, take-9)
conj_and(go-3, take-9)
poss(lives-11, their-10)
dobj(take-9, lives-11)
root(ROOT-0, escape-12)
dobj(escape-12, justice-13)

(ROOT
  (S
    (NP (NNP Hitler))
    (VP
      (VP (VBD escaped)
        (NP (NN justice)))
      (CC and)
      (VP (VBD got)
        (PRT (RP off))))
    (. .)))

nsubj(escaped-2, Hitler-1)
nsubj(got-5, Hitler-1)
root(ROOT-0, escaped-2)
dobj(escaped-2, justice-3)
conj_and(escaped-2, got-5)
prt(got-5, off-6)

(ROOT
  (S (CC But)
    (NP (DT the) (JJS worst) (NN thing))
    (VP (VBZ is)
      (UCP
        (SBAR (IN that)
          (S
            (NP (PRP$ our) (NNS lives))
            (VP (VBP become)
              (ADJP (JJ pointless)))))
        (CC and)
        (PP (IN without)
          (NP (NN meaning)
            (CC or)
            (NN value)))))
    (. .)))

cc(is-5, But-1)
det(thing-4, the-2)
amod(thing-4, worst-3)
nsubj(is-5, thing-4)
root(ROOT-0, is-5)
complm(pointless-10, that-6)
poss(lives-8, our-7)
nsubj(pointless-10, lives-8)
cop(pointless-10, become-9)
dep(is-5, pointless-10)
dep(is-5, without-12)
conj_and(pointless-10, without-12)
pobj(without-12, meaning-13)
pobj(without-12, value-15)
conj_or(meaning-13, value-15)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBP come)
          (PP (IN from)
            (NP (NN nothing)
              (CC and)
              (NN return)))
          (PP (TO to)
            (NP
              (NP (NN nothing))
              (, ,)
              (NP (NNS folks)))))))
    (NP (PRP we))
    (VP (VBP are)
      (NP (NN nothing)))
    (. .)))

mark(come-3, If-1)
nsubj(come-3, we-2)
advcl(nothing-14, come-3)
prep_from(come-3, nothing-5)
prep_from(come-3, return-7)
conj_and(nothing-5, return-7)
prep_to(come-3, nothing-9)
appos(nothing-9, folks-11)
nsubj(nothing-14, we-12)
cop(nothing-14, are-13)
root(ROOT-0, nothing-14)

