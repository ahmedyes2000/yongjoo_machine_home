(ROOT
  (S
    (S
      (NP (DT That))
      (VP (VBZ 's)
        (ADJP (RB sounds) (JJ nice))))
    (: ;)
    (CC but)
    (SINV
      (FRAG
        (WHADVP (WRB why)))
      (VP (MD should))
      (NP (PRP I)))
    (. ?)))

nsubj(nice-4, That-1)
cop(nice-4, 's-2)
advmod(nice-4, sounds-3)
root(ROOT-0, nice-4)
dep(should-8, why-7)
conj_but(nice-4, should-8)
nsubj(should-8, I-9)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADJP
        (NP (DT a) (JJ whole) (NN lot))
        (JJR easier))
      (S
        (VP (TO to)
          (VP (VB live)
            (PP (IN for)
              (NP (PRP myself)))))))
    (. .)))

nsubj(easier-6, It-1)
xsubj(live-8, It-1)
cop(easier-6, 's-2)
det(lot-5, a-3)
amod(lot-5, whole-4)
npadvmod(easier-6, lot-5)
root(ROOT-0, easier-6)
aux(live-8, to-7)
xcomp(easier-6, live-8)
prep_for(live-8, myself-10)

(ROOT
  (SBARQ
    (ADVP (RB Besides))
    (WHNP (WP who))
    (SQ
      (VP (VBZ cares)
        (SBAR (IN if)
          (S
            (NP (NNS things))
            (VP (VBP get)
              (ADVP (RB better)
                (CC or)
                (RB not)))))))
    (. ?)))

advmod(cares-3, Besides-1)
nsubj(cares-3, who-2)
root(ROOT-0, cares-3)
mark(get-6, if-4)
nsubj(get-6, things-5)
advcl(cares-3, get-6)
advmod(get-6, better-7)
advmod(get-6, not-9)
conj_or(better-7, not-9)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP
              (NP (DT no) (NNP God))
              (SBAR
                (WHNP (WP what) (NN difference))
                (S
                  (VP (VBZ does))))))))
      (NP (PRP it))
      (VP (VBP make)))
    (: ;)
    (S
      (NP (NN everything))
      (ADVP (RB just))
      (VP (VBZ becomes)
        (NP
          (NP (DT an) (NN exercise))
          (PP (IN in)
            (NP (NN futility))))))
    (. .)))

mark(is-3, If-1)
expl(is-3, there-2)
advcl(make-10, is-3)
det(God-5, no-4)
nsubj(is-3, God-5)
det(difference-7, God-5)
nsubj(does-8, difference-7)
rcmod(God-5, does-8)
nsubj(make-10, it-9)
root(ROOT-0, make-10)
nsubj(exercise-16, everything-12)
advmod(exercise-16, just-13)
cop(exercise-16, becomes-14)
det(exercise-16, an-15)
parataxis(make-10, exercise-16)
prep_in(exercise-16, futility-18)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP have)
      (NP (DT no) (NN purpose)
        (CC or)
        (NN meaning))
      (ADVP (RB apart))
      (PP (IN from)
        (NP (NNP God))))
    (. .)))

nsubj(have-2, We-1)
root(ROOT-0, have-2)
det(purpose-4, no-3)
dobj(have-2, purpose-4)
dobj(have-2, meaning-6)
conj_or(purpose-4, meaning-6)
prep_apart_from(have-2, God-9)

(ROOT
  (FRAG
    (PP (IN Without)
      (NP
        (NP (NNP God))
        (SBAR
          (WHNP (WP what))
          (S
            (ADVP (RB then))
            (VP (VBZ is)
              (NP (DT the) (JJ moral) (NN imperative)))))))
    (. ?)))

root(ROOT-0, Without-1)
pobj(Without-1, God-2)
nsubj(imperative-8, God-2)
advmod(imperative-8, then-4)
cop(imperative-8, is-5)
det(imperative-8, the-6)
amod(imperative-8, moral-7)
rcmod(God-2, imperative-8)

(ROOT
  (S
    (NP (WP What))
    (ADVP (RB then))
    (VP (VBZ is)
      (NP
        (NP (DT the) (`` ``) (NN ought) ('' ''))
        (S
          (VP (TO to)))))
    (. .)))

nsubj(ought-6, What-1)
advmod(ought-6, then-2)
cop(ought-6, is-3)
det(ought-6, the-4)
root(ROOT-0, ought-6)
infmod(ought-6, to-8)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (MD should)
      (NP (PRP we))
      (VP (VB care)))
    (. ?)))

advmod(care-4, Why-1)
aux(care-4, should-2)
nsubj(care-4, we-3)
root(ROOT-0, care-4)

(ROOT
  (S
    (PP (IN Without)
      (NP (NNP God)))
    (NP (PRP we))
    (VP (VBP are) (RB all)
      (VP (VBN headed)
        (PP (IN for)
          (NP (NN nothing)))))
    (. .)))

prep_without(headed-6, God-2)
nsubjpass(headed-6, we-3)
auxpass(headed-6, are-4)
advmod(headed-6, all-5)
root(ROOT-0, headed-6)
prep_for(headed-6, nothing-8)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD should)
        (VP (VB take)
          (NP (DT some) (NN time)
            (S
              (VP (TO to)
                (VP (VB walk)
                  (PP (IN through)
                    (NP (DT a) (NN cemetery))))))))))
    (CC and)
    (S
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBP get)
            (S
              (NP (DT a) (NN chance))
              (VP (TO to)
                (VP (VB see)
                  (NP (DT a) (JJ fresh) (JJ dug) (NN grave))))))))
      (, ,)
      (VP (VB stare)
        (PP (IN at)
          (NP
            (NP (PRP it))
            (PP (IN for)
              (NP (DT a) (NN while)))))
        (SBAR (IN because) (IN that)
          (S
            (NP (PRP$ my) (NN friend))
            (VP (VBZ is)
              (NP (PRP$ your) (NN destiny)))))))
    (. .)))

nsubj(take-3, You-1)
nsubj(stare-24, You-1)
aux(take-3, should-2)
root(ROOT-0, take-3)
det(time-5, some-4)
dobj(take-3, time-5)
aux(walk-7, to-6)
infmod(time-5, walk-7)
det(cemetery-10, a-9)
prep_through(walk-7, cemetery-10)
mark(get-14, if-12)
nsubj(get-14, you-13)
advcl(stare-24, get-14)
det(chance-16, a-15)
nsubj(see-18, chance-16)
aux(see-18, to-17)
xcomp(get-14, see-18)
det(grave-22, a-19)
amod(grave-22, fresh-20)
amod(grave-22, dug-21)
dobj(see-18, grave-22)
conj_and(take-3, stare-24)
prep_at(stare-24, it-26)
det(while-29, a-28)
prep_for(it-26, while-29)
mark(destiny-36, because-30)
dep(destiny-36, that-31)
poss(friend-33, my-32)
nsubj(destiny-36, friend-33)
cop(destiny-36, is-34)
poss(destiny-36, your-35)
advcl(stare-24, destiny-36)

