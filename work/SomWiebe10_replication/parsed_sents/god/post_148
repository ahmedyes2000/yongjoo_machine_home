(ROOT
  (S
    (ADVP (RB Even))
    (NP (`` ``) (NN possibility) ('' ''))
    (VP (MD must)
      (VP (VB have)
        (NP (JJ supportable) (NN reason))
        (PP (IN for)
          (S
            (VP (VBG claiming)
              (NP (PRP it)))))))
    (. .)))

advmod(have-6, Even-1)
nsubj(have-6, possibility-3)
aux(have-6, must-5)
root(ROOT-0, have-6)
amod(reason-8, supportable-7)
dobj(have-6, reason-8)
prepc_for(have-6, claiming-10)
dobj(claiming-10, it-11)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (MD must)
        (VP (VB ask)
          (S
            (NP (PRP you))
            (NP (DT this))))))
    (: :)
    (SQ (NNS is)
      (NP (EX there))
      (NP
        (NP
          (NP (NN anything))
          (PP (IN in)
            (NP (JJ human) (NN discovery)
              (CC and)
              (NN understanding))))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (MD would)
              (ADVP (RB even) (RB remotely))
              (VP (VB support)
                (NP
                  (NP (DT the) (NN possibility))
                  (PP (IN of)
                    (NP
                      (NP (DT a) (VBG flying) (NN plate))
                      (PP (IN of)
                        (NP
                          (NP (NNS spaghetti))
                          (PP (IN with)
                            (NP (NNS superpowers))))))))))))))
    (. ?)))

nsubj(ask-3, I-1)
aux(ask-3, must-2)
root(ROOT-0, ask-3)
nsubj(this-5, you-4)
xcomp(ask-3, this-5)
parataxis(ask-3, is-7)
expl(is-7, there-8)
nsubj(is-7, anything-9)
nsubj(support-19, anything-9)
amod(discovery-12, human-11)
prep_in(anything-9, discovery-12)
prep_in(anything-9, understanding-14)
conj_and(discovery-12, understanding-14)
aux(support-19, would-16)
advmod(remotely-18, even-17)
advmod(support-19, remotely-18)
rcmod(anything-9, support-19)
det(possibility-21, the-20)
dobj(support-19, possibility-21)
det(plate-25, a-23)
amod(plate-25, flying-24)
prep_of(possibility-21, plate-25)
prep_of(plate-25, spaghetti-27)
prep_with(spaghetti-27, superpowers-29)

(ROOT
  (S
    (NP (PRP We))
    (VP (MD ought) (RB not)
      (VP (VB fling) (`` ``)
        (NP (NN possibility))
        ('' '')
        (PP (IN about)
          (ADJP (RB so) (JJ carelessly)))))
    (. .)))

nsubj(ought-2, We-1)
root(ROOT-0, ought-2)
neg(ought-2, not-3)
dep(ought-2, fling-4)
dobj(fling-4, possibility-6)
advmod(carelessly-10, so-9)
prep_about(fling-4, carelessly-10)

(ROOT
  (S
    (PP (IN For)
      (NP (DT a) (NN thing)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ possible)))))))
    (, ,)
    (NP (PRP it))
    (VP (MD must)
      (VP (VB follow)
        (PP (IN from)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (NN nature))
              (VP (VBZ is)
                (ADJP (JJ capable)
                  (PP (IN of)
                    (PP (IN like)
                      (NP (NN anything) (RB else)))))))))))
    (. .)))

det(thing-3, a-2)
prep_for(follow-10, thing-3)
aux(possible-6, to-4)
cop(possible-6, be-5)
infmod(thing-3, possible-6)
nsubj(follow-10, it-8)
aux(follow-10, must-9)
root(ROOT-0, follow-10)
dobj(capable-15, what-12)
nsubj(capable-15, nature-13)
cop(capable-15, is-14)
prepc_from(follow-10, capable-15)
prep(capable-15, of-16)
pcomp(of-16, like-17)
prep_like(of-16, anything-18)
advmod(anything-18, else-19)

(ROOT
  (S
    (NP (RB Even) (NN possibility))
    (VP (VBZ needs)
      (NP (NN proof)))
    (. .)))

advmod(possibility-2, Even-1)
nsubj(needs-3, possibility-2)
root(ROOT-0, needs-3)
dobj(needs-3, proof-4)

(ROOT
  (S
    (S
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (PRP we))
          (VP (VBP attempt)
            (S
              (VP (TO to)
                (VP (VB treat)
                  (SBAR
                    (WHNP (WP what))
                    (S
                      (NP (PRP we))
                      (VP (MD can)
                        (ADVP (RB only))
                        (VP (VB imagine)
                          (ADJP (RB as) (JJ equal)
                            (PP (TO to)
                              (SBAR
                                (WHNP (WP what))
                                (S
                                  (NP (PRP we))
                                  (VP (VBP know)
                                    (S
                                      (VP (TO to)
                                        (VP (VB be)
                                          (ADJP (JJ true))))))))))))))))))))
      (, ,)
      (NP (PRP we))
      (VP (VBP spit)
        (PP (IN in)
          (NP
            (NP (DT the) (NN face))
            (PP (IN of)
              (NP (NN fact)
                (CC and)
                (NN logic)))))))
    (CC and)
    (, ,)
    (S
      (PP (RB rather) (IN than)
        (S
          (VP (VBG increasing)
            (NP (PRP$ our) (NN awareness)))))
      (, ,)
      (NP (PRP we))
      (VP (VBP return)
        (S
          (VP (TO to)
            (VP (VB childish)
              (NP (VBG sleeping)))))))
    (. .)))

advmod(attempt-3, When-1)
nsubj(attempt-3, we-2)
xsubj(treat-5, we-2)
advcl(spit-22, attempt-3)
aux(treat-5, to-4)
xcomp(attempt-3, treat-5)
dobj(imagine-10, what-6)
nsubj(imagine-10, we-7)
aux(imagine-10, can-8)
advmod(imagine-10, only-9)
ccomp(treat-5, imagine-10)
advmod(equal-12, as-11)
acomp(imagine-10, equal-12)
dep(know-16, what-14)
nsubj(know-16, we-15)
xsubj(true-19, we-15)
prepc_to(equal-12, know-16)
aux(true-19, to-17)
cop(true-19, be-18)
xcomp(know-16, true-19)
nsubj(spit-22, we-21)
root(ROOT-0, spit-22)
det(face-25, the-24)
prep_in(spit-22, face-25)
prep_of(face-25, fact-27)
prep_of(face-25, logic-29)
conj_and(fact-27, logic-29)
advmod(return-39, rather-32)
advcl(return-39, than-33)
prepc_than(return-39, increasing-34)
poss(awareness-36, our-35)
dobj(increasing-34, awareness-36)
nsubj(return-39, we-38)
xsubj(childish-41, we-38)
ccomp(spit-22, return-39)
conj_and(spit-22, return-39)
aux(childish-41, to-40)
xcomp(return-39, childish-41)
dobj(childish-41, sleeping-42)

