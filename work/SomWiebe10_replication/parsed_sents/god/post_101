(ROOT
  (S
    (NP (DT This) (NN one))
    (VP (VBZ is)
      (VP (VBG going)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ long)))))))
    (. .)))

det(one-2, This-1)
nsubj(going-4, one-2)
xsubj(long-7, one-2)
aux(going-4, is-3)
root(ROOT-0, going-4)
aux(long-7, to-5)
cop(long-7, be-6)
xcomp(going-4, long-7)

(ROOT
  (FRAG
    (ADVP (RB First) (RB off))
    (. .)))

advmod(off-2, First-1)
root(ROOT-0, off-2)

(ROOT
  (FRAG
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP have)
          (NP
            (NP (DT a) (JJ large) (NN body))
            (VP (VBG pulling)
              (PRT (RP in))
              (PP (IN on)
                (NP (PRP$ its) (NN self)))
              (NP (PRP$ your) (NN going)
                (S
                  (VP (TO to)
                    (VP (VB have)
                      (NP (NN friction)))))))))))
    (. .)))

mark(have-3, If-1)
nsubj(have-3, you-2)
root(ROOT-0, have-3)
det(body-6, a-4)
amod(body-6, large-5)
dobj(have-3, body-6)
partmod(body-6, pulling-7)
prt(pulling-7, in-8)
poss(self-11, its-10)
prep_on(pulling-7, self-11)
poss(going-13, your-12)
dobj(pulling-7, going-13)
aux(have-15, to-14)
infmod(going-13, have-15)
dobj(have-15, friction-16)

(ROOT
  (S
    (NP (DT That) (NN friction))
    (VP (VBZ makes)
      (NP
        (NP (NN heat))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ melts)
              (NP (NN rock)))))))
    (. .)))

det(friction-2, That-1)
nsubj(makes-3, friction-2)
root(ROOT-0, makes-3)
dobj(makes-3, heat-4)
nsubj(melts-6, heat-4)
rcmod(heat-4, melts-6)
dobj(melts-6, rock-7)

(ROOT
  (S
    (NP (DT This) (NN rock))
    (VP (VBZ makes)
      (NP
        (NP (DT a) (NN molten) (NN core))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ causes)
              (NP
                (NP (NN convection) (NNS currents))
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ makes))))
                (: ;)
                (NP (NN earth) (NNS quakes) (, ,) (NNS tsunamis)
                  (CC and)
                  (NNS volcanoes))))))))
    (. .)))

det(rock-2, This-1)
nsubj(makes-3, rock-2)
root(ROOT-0, makes-3)
det(core-6, a-4)
nn(core-6, molten-5)
dobj(makes-3, core-6)
nsubj(causes-8, core-6)
rcmod(core-6, causes-8)
nn(currents-10, convection-9)
dobj(causes-8, currents-10)
nsubj(makes-12, currents-10)
rcmod(currents-10, makes-12)
nn(quakes-15, earth-14)
dep(currents-10, quakes-15)
dep(currents-10, tsunamis-17)
conj_and(quakes-15, tsunamis-17)
dep(currents-10, volcanoes-19)
conj_and(quakes-15, volcanoes-19)

(ROOT
  (SQ (MD Does)
    (NP
      (NP (DT the) (NN occurrence))
      (PP (IN of)
        (NP (DT these) (NNS things))))
    (VP (VB prove)
      (CC or)
      (VB disprove)
      (NP (NN god)))
    (. ?)))

aux(prove-7, Does-1)
det(occurrence-3, the-2)
nsubj(prove-7, occurrence-3)
nsubj(disprove-9, occurrence-3)
det(things-6, these-5)
prep_of(occurrence-3, things-6)
root(ROOT-0, prove-7)
conj_or(prove-7, disprove-9)
dobj(prove-7, god-10)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ does)
      (NP (DT neither)))
    (. .)))

nsubj(does-2, It-1)
root(ROOT-0, does-2)
dobj(does-2, neither-3)

(ROOT
  (S
    (S
      (NP (DT Some) (NNS people))
      (VP (VBP live)
        (PP (IN in)
          (NP (NN poverty)))))
    (, ,)
    (NP (DT some))
    (VP (VBP suffer)
      (CC and)
      (VBP live)
      (PP (IN in)
        (NP (NN pain)
          (CC and)
          (NN death))))
    (. .)))

det(people-2, Some-1)
nsubj(live-3, people-2)
ccomp(suffer-8, live-3)
prep_in(live-3, poverty-5)
nsubj(suffer-8, some-7)
nsubj(live-10, some-7)
root(ROOT-0, suffer-8)
conj_and(suffer-8, live-10)
prep_in(suffer-8, pain-12)
prep_in(suffer-8, death-14)
conj_and(pain-12, death-14)

(ROOT
  (SQ (NNP Does)
    (NP (DT this))
    (VP (VB mean)
      (SBAR
        (SBAR (IN that)
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP (DT no) (NN god)))))
        (, ,)
        (CC or)
        (SBAR (IN that) (IN if)
          (S
            (NP (EX there))
            (VP (VBZ is)
              (SBAR (IN that)
                (S
                  (NP (PRP he))
                  (VP (VBZ does) (RB n't)
                    (VP (VB care))))))))))
    (. ?)))

dep(mean-3, Does-1)
nsubj(mean-3, this-2)
root(ROOT-0, mean-3)
complm(is-6, that-4)
expl(is-6, there-5)
ccomp(mean-3, is-6)
det(god-8, no-7)
nsubj(is-6, god-8)
nsubj(is-14, god-8)
complm(is-14, that-11)
dep(is-14, if-12)
expl(is-14, there-13)
ccomp(mean-3, is-14)
conj_or(is-6, is-14)
complm(care-19, that-15)
nsubj(care-19, he-16)
aux(care-19, does-17)
neg(care-19, n't-18)
ccomp(is-14, care-19)

(ROOT
  (S
    (NP (DT The) (NN bible))
    (VP (VBZ says)
      (SBAR (IN that)
        (S
          (NP (PRP he))
          (VP (VBD gave)
            (NP (NN man))
            (NP (JJ free) (NN agency))))))
    (. .)))

det(bible-2, The-1)
nsubj(says-3, bible-2)
root(ROOT-0, says-3)
complm(gave-6, that-4)
nsubj(gave-6, he-5)
ccomp(says-3, gave-6)
iobj(gave-6, man-7)
amod(agency-9, free-8)
dobj(gave-6, agency-9)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBD were)
          (S
            (VP (TO to)
              (VP
                (VP (VB pop)
                  (PRT (RP down))
                  (ADVP (RB here)))
                (CC and)
                (VP (VB say)
                  (INTJ (UH hello))
                  (PP (TO to)
                    (NP
                      (NP (DT all))
                      (PP (IN of)
                        (NP (PRP us))))))
                (, ,)
                (CC and)
                (VP (VB help)
                  (NP (PRP us))
                  (PRT (RP out))
                  (PP (IN of)
                    (NP (PRP$ our) (NNS miseries))))))))))
    (WHNP (WP what))
    (SQ
      (VP (MD would)
        (VP (VB happen)
          (PP (TO to)
            (NP (PRP$ our) (NN agency))))))
    (. ?)))

mark(were-3, If-1)
nsubj(were-3, he-2)
xsubj(pop-5, he-2)
dep(happen-25, were-3)
aux(pop-5, to-4)
xcomp(were-3, pop-5)
prt(pop-5, down-6)
advmod(pop-5, here-7)
xcomp(were-3, say-9)
conj_and(pop-5, say-9)
dep(say-9, hello-10)
prep_to(say-9, all-12)
prep_of(all-12, us-14)
xcomp(were-3, help-17)
conj_and(pop-5, help-17)
dobj(help-17, us-18)
poss(miseries-22, our-21)
prep_out_of(help-17, miseries-22)
nsubj(happen-25, what-23)
aux(happen-25, would-24)
root(ROOT-0, happen-25)
poss(agency-28, our-27)
prep_to(happen-25, agency-28)

(ROOT
  (SQ
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP
          (VP (VBD jumped)
            (PRT (RP in)))
          (CC and)
          (VP (VBD made)
            (NP (DT a) (NN murder) (NN stop))))))
    (, ,) (MD would) (RB n't)
    (NP (PRP he))
    (VP (VB have)
      (VP
        (ADVP (RB just) (RB over))
        (VBN ridden)
        (NP
          (NP (DT that) (NN murder) (POS 's))
          (NN agency))))
    (. ?)))

mark(jumped-3, If-1)
nsubj(jumped-3, he-2)
nsubj(made-6, he-2)
advcl(ridden-17, jumped-3)
prt(jumped-3, in-4)
conj_and(jumped-3, made-6)
advcl(ridden-17, made-6)
det(stop-9, a-7)
nn(stop-9, murder-8)
dobj(made-6, stop-9)
aux(ridden-17, would-11)
neg(ridden-17, n't-12)
nsubj(ridden-17, he-13)
aux(ridden-17, have-14)
advmod(over-16, just-15)
advmod(ridden-17, over-16)
root(ROOT-0, ridden-17)
det(murder-19, that-18)
poss(agency-21, murder-19)
dobj(ridden-17, agency-21)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBD was)
          (NP
            (NP (DT a) (NN god))
            (SBAR
              (WHNP (WP who))
              (S
                (VP (VBD created)
                  (NP (NN everything)))))))))
    (, ,)
    (ADVP (WRB how))
    (VP (MD would)
      (VP
        (NP (PRP you))))
    (: ...)))

mark(was-3, If-1)
expl(was-3, there-2)
advcl(you-12, was-3)
det(god-5, a-4)
nsubj(was-3, god-5)
nsubj(created-7, god-5)
rcmod(god-5, created-7)
dobj(created-7, everything-8)
advmod(you-12, how-10)
aux(you-12, would-11)
root(ROOT-0, you-12)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBD wanted)
          (S
            (VP (TO to)
              (VP (VB know)
                (SBAR
                  (WHADVP (WRB how))
                  (S
                    (NP (NNS people))
                    (VP (TO to)
                      (VP (VB make)
                        (NP (JJ certain) (NNS decisions))))))))))))
    (, ,)
    (SQ
      (SQ (MD would)
        (NP (PRP you))
        (VP (VB let)
          (SBAR
            (S
              (NP (PRP them))
              (VP (VBP know)
                (PP (IN that)
                  (NP (PRP$ your)))
                (UCP
                  (ADVP (RB there))
                  (CC and)
                  (VP (VBG watching))))))))
      (, ,)
      (CC or)
      (SQ (MD would)
        (NP (PRP you))
        (VP (VB keep)
          (NP (PRP$ your) (NN presence) (NN unknown)))))
    (. ?)))

mark(wanted-3, If-1)
nsubj(wanted-3, you-2)
xsubj(know-5, you-2)
advcl(let-15, wanted-3)
aux(know-5, to-4)
xcomp(wanted-3, know-5)
advmod(make-9, how-6)
nsubj(make-9, people-7)
aux(make-9, to-8)
ccomp(know-5, make-9)
xcomp(know-5, make-9)
amod(decisions-11, certain-10)
dobj(make-9, decisions-11)
aux(let-15, would-13)
nsubj(let-15, you-14)
root(ROOT-0, let-15)
nsubj(know-17, them-16)
ccomp(let-15, know-17)
prep_that(know-17, your-19)
dep(know-17, there-20)
dep(know-17, watching-22)
conj_and(there-20, watching-22)
aux(keep-27, would-25)
nsubj(keep-27, you-26)
conj_or(let-15, keep-27)
poss(unknown-30, your-28)
nn(unknown-30, presence-29)
dobj(keep-27, unknown-30)

(ROOT
  (SBARQ
    (WHADVP (WRB Where)
      (PP (IN in)
        (NP (DT the) (NN bible))))
    (SQ (VBZ does)
      (NP (PRP it))
      (VP (VB say)
        (SBAR (IN that)
          (S
            (NP (NN god))
            (VP (VBZ condemns)
              (NP (NNS people))
              (PP (TO to)
                (NP (NN hell))))))))
    (. ?)))

advmod(say-7, Where-1)
det(bible-4, the-3)
prep_in(Where-1, bible-4)
aux(say-7, does-5)
nsubj(say-7, it-6)
root(ROOT-0, say-7)
complm(condemns-10, that-8)
nsubj(condemns-10, god-9)
ccomp(say-7, condemns-10)
dobj(condemns-10, people-11)
prep_to(condemns-10, hell-13)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (PRP I))
        (VP (VBD read))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (NNS people))
          (VP (VB condemn)
            (NP (PRP themselves))
            (, ,)
            (PP (IN by)
              (S (RB not)
                (VP
                  (ADVP (RB ever))
                  (VBG going)
                  (ADVP (RB back)
                    (PP (TO to)
                      (NP (NN god))))
                  (PP (IN in)
                    (NP (DT the) (JJ first) (NN place))))))))))
    (. .)))

dobj(read-3, What-1)
nsubj(read-3, I-2)
csubj(is-4, read-3)
root(ROOT-0, is-4)
complm(condemn-7, that-5)
nsubj(condemn-7, people-6)
ccomp(is-4, condemn-7)
dobj(condemn-7, themselves-8)
neg(going-13, not-11)
advmod(going-13, ever-12)
prepc_by(condemn-7, going-13)
advmod(going-13, back-14)
prep_to(back-14, god-16)
det(place-20, the-18)
amod(place-20, first-19)
prep_in(going-13, place-20)

(ROOT
  (S
    (FRAG
      (ADVP (RB As) (IN in)))
    ('' '')
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB belong)
        (SBAR
          (S
            (NP (EX there))
            (, ,)
            (VP (MD might)
              (ADVP (RB as) (RB well))
              (RB not)
              (VP (VB try) ('' '')
                (SBAR (RB not)
                  (S
                    (VP (VBP go)
                      (ADVP (RB back)))))))))))
    (. .)))

advmod(in-2, As-1)
dep(belong-7, in-2)
nsubj(belong-7, I-4)
aux(belong-7, do-5)
neg(belong-7, n't-6)
root(ROOT-0, belong-7)
expl(try-14, there-8)
aux(try-14, might-10)
advmod(well-12, as-11)
mwe(well-12, as-11)
advmod(try-14, well-12)
neg(try-14, not-13)
ccomp(belong-7, try-14)
dep(go-17, not-16)
ccomp(try-14, go-17)
advmod(go-17, back-18)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBZ is)
      (NP (EX there))
      (ADJP (JJ evil))
      (SBAR (IN if)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP (DT a) (NN god))))))
    (. ?)))

advmod(evil-4, Why-1)
cop(evil-4, is-2)
expl(evil-4, there-3)
root(ROOT-0, evil-4)
mark(is-7, if-5)
expl(is-7, there-6)
dep(evil-4, is-7)
det(god-9, a-8)
nsubj(is-7, god-9)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBZ is)
      (NP (EX there))
      (ADJP (IN down))
      (SBAR (IN if)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP (DT an) (RB up))))))
    (. ?)))

advmod(down-4, Why-1)
cop(down-4, is-2)
expl(down-4, there-3)
root(ROOT-0, down-4)
mark(is-7, if-5)
expl(is-7, there-6)
dep(down-4, is-7)
det(up-9, an-8)
nsubj(is-7, up-9)

(ROOT
  (S
    (INTJ (UH eh))
    (, ,)
    (NP (PRP I))
    (VP (MD 'll)
      (VP (VB post)
        (NP (JJR more) (NN latter))))
    (. .)))

dep(post-5, eh-1)
nsubj(post-5, I-3)
aux(post-5, 'll-4)
root(ROOT-0, post-5)
amod(latter-7, more-6)
dobj(post-5, latter-7)

(ROOT
  (S
    (NP
      (NP (PRP$ Its))
      (PP (IN like)
        (NP (CD 3))))
    (VP (VBP am)
      (ADVP (RB here)))
    (. .)))

nsubj(am-4, Its-1)
prep_like(Its-1, 3-3)
root(ROOT-0, am-4)
advmod(am-4, here-5)

(ROOT
  (S
    (ADVP (RB Prove))
    (NP (PRP he))
    (VP (VBZ exists))
    (. ?)))

advmod(exists-3, Prove-1)
nsubj(exists-3, he-2)
root(ROOT-0, exists-3)

(ROOT
  (S
    (VP (VB Prove)
      (SBAR (IN that)
        (S
          (NP (PRP he))
          (VP (VBP DOSE) (RB N'T)
            (VP (VB exist))))))
    (. .)))

root(ROOT-0, Prove-1)
complm(DOSE-4, that-2)
nsubj(DOSE-4, he-3)
ccomp(Prove-1, DOSE-4)
neg(DOSE-4, N'T-5)
dep(DOSE-4, exist-6)

(ROOT
  (S
    (S
      (NP
        (NP (NNP Prove))
        (SBAR (IN that)
          (S
            (NP (PRP he))
            (VP
              (VP (VBD pointed)
                (PP (IN at)
                  (NP (DT the) (NN ground))))
              (CC and)
              (VP (VBN said) ('' '')
                (NP (PRP I)))))))
      (VP (VBP want)
        (NP (DT a) (NN cat))
        (ADVP (RB there))))
    ('' '')
    (CC and)
    (S
      (NP (EX there))
      (VP (VBD came)
        (NP (DT a) (NN cat))))
    (. .)))

nsubj(want-12, Prove-1)
complm(pointed-4, that-2)
nsubj(pointed-4, he-3)
nsubj(said-9, he-3)
dep(Prove-1, pointed-4)
det(ground-7, the-6)
prep_at(pointed-4, ground-7)
dep(Prove-1, said-9)
conj_and(pointed-4, said-9)
dobj(said-9, I-11)
root(ROOT-0, want-12)
det(cat-14, a-13)
dobj(want-12, cat-14)
advmod(want-12, there-15)
expl(came-19, there-18)
conj_and(want-12, came-19)
det(cat-21, a-20)
dobj(came-19, cat-21)
nsubj(came-19, cat-21)

(ROOT
  (S
    (VP
      (VP (VB Prove)
        (SBAR (IN that)
          (S
            (NP (PRP he))
            (VP (VBD did) (RB n't)
              (VP (VB make)
                (NP
                  (NP (DT a) (NN couple))
                  (PP (IN of)
                    (NP (NNS bacteria)))))))))
      (CC and)
      (VP (VB work)
        (NP (PRP$ his) (NN way))
        (PRT (RP up))
        (PP (IN from)
          (NP (RB there)))))
    (. .)))

root(ROOT-0, Prove-1)
complm(make-6, that-2)
nsubj(make-6, he-3)
aux(make-6, did-4)
neg(make-6, n't-5)
ccomp(Prove-1, make-6)
det(couple-8, a-7)
dobj(make-6, couple-8)
prep_of(couple-8, bacteria-10)
conj_and(Prove-1, work-12)
poss(way-14, his-13)
dobj(work-12, way-14)
prt(work-12, up-15)
prep(work-12, from-16)
pobj(from-16, there-17)

(ROOT
  (S
    (NP (NNP Bad) (NNS things))
    (VP (VBP happen)
      (SBAR (IN because)
        (S
          (NP (NN god))
          (VP (VBD made)
            (NP
              (NP (DT a) (NN world))
              (PP (IN of)
                (NP (NN order))))))))
    (. .)))

nn(things-2, Bad-1)
nsubj(happen-3, things-2)
root(ROOT-0, happen-3)
mark(made-6, because-4)
nsubj(made-6, god-5)
advcl(happen-3, made-6)
det(world-8, a-7)
dobj(made-6, world-8)
prep_of(world-8, order-10)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (MD may)
        (VP (VB look)
          (PP (IN like)
            (NP (NN chaos))))))
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (NP (DT an) (NN order))))
    (. .)))

nsubj(look-3, It-1)
aux(look-3, may-2)
root(ROOT-0, look-3)
prep_like(look-3, chaos-5)
nsubj(order-10, it-7)
cop(order-10, is-8)
det(order-10, an-9)
conj_but(look-3, order-10)

(ROOT
  (S (CC And)
    (SBAR (IN for) (NN order)
      (S
        (VP (TO to)
          (VP (VB work)
            (NP (DT some) (NNS things))))))
    (VP (VBP have)
      (S
        (VP (TO to)
          (VP (VB happen)
            (ADVP (DT every) (RB once))
            (PP (IN in)
              (NP (DT a) (NN while)))))))
    (. .)))

cc(have-8, And-1)
mark(work-5, for-2)
dep(work-5, order-3)
aux(work-5, to-4)
csubj(have-8, work-5)
det(things-7, some-6)
dobj(work-5, things-7)
root(ROOT-0, have-8)
aux(happen-10, to-9)
xcomp(have-8, happen-10)
dep(once-12, every-11)
advmod(happen-10, once-12)
det(while-15, a-14)
prep_in(happen-10, while-15)

