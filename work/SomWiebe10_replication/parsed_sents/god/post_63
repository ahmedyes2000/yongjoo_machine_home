(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB categorically))
    (VP (VBP disagree)
      (PP (IN with)
        (NP
          (NP (DT the) (NN definition))
          (PP (IN of)
            (NP
              (NP (NNP God))
              (VP (VBN provided)
                (ADVP (RB here))
                (SBAR (IN because)
                  (S
                    (SBAR (IN while)
                      (S
                        (VP (VBG trying)
                          (S
                            (VP (TO to)
                              (VP (VB provide)
                                (NP
                                  (NP (DT a) (NN definition))
                                  (SBAR
                                    (WHNP (WDT that))
                                    (S
                                      (VP (MD will)
                                        (VP (VB encompass)
                                          (NP (DT all) (NNS religions)))))))))))))
                    (, ,)
                    (NP (PRP it))
                    (VP (VBZ denies)
                      (NP (JJ multiple) (NNS beliefs)))))))))))
    (. .)))

nsubj(disagree-3, I-1)
advmod(disagree-3, categorically-2)
root(ROOT-0, disagree-3)
det(definition-6, the-5)
prep_with(disagree-3, definition-6)
prep_of(definition-6, God-8)
partmod(God-8, provided-9)
advmod(provided-9, here-10)
mark(denies-25, because-11)
mark(trying-13, while-12)
advcl(denies-25, trying-13)
aux(provide-15, to-14)
xcomp(trying-13, provide-15)
det(definition-17, a-16)
dobj(provide-15, definition-17)
nsubj(encompass-20, definition-17)
aux(encompass-20, will-19)
rcmod(definition-17, encompass-20)
det(religions-22, all-21)
dobj(encompass-20, religions-22)
nsubj(denies-25, it-24)
advcl(provided-9, denies-25)
amod(beliefs-27, multiple-26)
dobj(denies-25, beliefs-27)

(ROOT
  (S
    (NP (JJ Many) (NNS religions))
    (VP
      (VP (VBP believe)
        (PRN (, ,)
          (SBAR (IN as)
            (S
              (VP (VBD did)
                (NP
                  (NP (NNP Plato))
                  (PP (IN about)
                    (NP (PRP$ his)))
                  ('' '')
                  (NP
                    (NP (NNP God))
                    (PP (IN of)
                      (NP (DT the) (NNS forms))))
                  (, ,) ('' ''))
                (SBAR (IN that)
                  (S
                    (NP (NNP God))
                    (VP (VBZ does) (RB not)
                      (VP (VB make)
                        (NP
                          (NP (DT the) (NNS laws))
                          (SBAR
                            (WHNP (WDT that))
                            (S
                              (VP (VBP rule)
                                (NP (DT the) (NN universe)))))))))))))
          (, ,)))
      (CC but)
      (VP (VBZ rules)
        (PP (IN by)
          (NP
            (NP (DT the) (JJ transcendent) (NNS laws))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBP are)
                  (ADVP (RB already))
                  (PP (IN in)
                    (NP (NN place))))))))))
    (. .)))

amod(religions-2, Many-1)
nsubj(believe-3, religions-2)
nsubj(rules-30, religions-2)
root(ROOT-0, believe-3)
mark(did-6, as-5)
parataxis(believe-3, did-6)
dobj(did-6, Plato-7)
prep_about(Plato-7, his-9)
dep(Plato-7, God-11)
det(forms-14, the-13)
prep_of(God-11, forms-14)
complm(make-21, that-17)
nsubj(make-21, God-18)
aux(make-21, does-19)
neg(make-21, not-20)
ccomp(did-6, make-21)
det(laws-23, the-22)
dobj(make-21, laws-23)
nsubj(rule-25, laws-23)
rcmod(laws-23, rule-25)
det(universe-27, the-26)
dobj(rule-25, universe-27)
conj_but(believe-3, rules-30)
det(laws-34, the-32)
amod(laws-34, transcendent-33)
prep_by(rules-30, laws-34)
nsubj(are-36, laws-34)
rcmod(laws-34, are-36)
advmod(are-36, already-37)
prep_in(are-36, place-39)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBG being)
        (VP (VBD said))))
    (, ,)
    (S
      (NP
        (NP (DT a) (NN multiplicity))
        (PP (IN of)
          (NP (NNS religions))))
      (VP (VBP believe)
        (SBAR (IN that)
          (S
            (NP (NNP God))
            (VP (VBD did) (RB not)
              (VP (VB create)
                (NP
                  (NP (DT the) (NN universe) (POS 's))
                  (NN matter)
                  (CC and)
                  (NN energy))))))))
    (, ,)
    (CC and)
    (S
      (NP (CC nor))
      (VP (VBZ does)
        (SBAR
          (S
            (NP (PRP he))
            (VP (VBP have)
              (NP (DT the) (NN power)
                (S
                  (VP (TO to)
                    (VP (VB do)
                      (ADVP (RB so)))))))))))
    (. .)))

nsubjpass(said-3, This-1)
auxpass(said-3, being-2)
root(ROOT-0, said-3)
det(multiplicity-6, a-5)
nsubj(believe-9, multiplicity-6)
prep_of(multiplicity-6, religions-8)
ccomp(said-3, believe-9)
conj_and(said-3, believe-9)
complm(create-14, that-10)
nsubj(create-14, God-11)
aux(create-14, did-12)
neg(create-14, not-13)
ccomp(believe-9, create-14)
det(universe-16, the-15)
poss(matter-18, universe-16)
dobj(create-14, matter-18)
dobj(create-14, energy-20)
conj_and(matter-18, energy-20)
nsubj(does-24, nor-23)
conj_and(said-3, does-24)
nsubj(have-26, he-25)
ccomp(does-24, have-26)
det(power-28, the-27)
dobj(have-26, power-28)
aux(do-30, to-29)
infmod(power-28, do-30)
advmod(do-30, so-31)

(ROOT
  (S
    (S
      (ADVP (RB Also))
      (NP
        (NP (DT the) (NN argument))
        (PP (IN of)
          (S
            (VP (VBG providing)
              (NP
                (NP (DT a) (NN definition))
                (PP (IN of)
                  (NP (NNP God))))
              (S
                (VP (TO to)
                  (VP (VB disprove))))))))
      (VP (VBZ denies)
        (NP
          (NP (CD one))
          (PP (IN of)
            (NP
              (NP (DT the) (JJ fundamental) (NNS basics))
              (PP (IN of)
                (NP (NN argumentation))))))
        (SBAR (IN in) (NN order)
          (S
            (VP (TO to)
              (VP (VB disprove)
                (NP (NN anything))))))))
    (, ,)
    (NP (PRP you))
    (VP (MD must)
      (VP (VB disprove)
        (NP (PRP it))
        (PP (IN within)
          (NP (PRP$ its) (JJ own) (NN framework)))))
    (. .)))

advmod(denies-12, Also-1)
det(argument-3, the-2)
nsubj(denies-12, argument-3)
prepc_of(argument-3, providing-5)
det(definition-7, a-6)
dobj(providing-5, definition-7)
prep_of(definition-7, God-9)
aux(disprove-11, to-10)
xcomp(providing-5, disprove-11)
ccomp(disprove-28, denies-12)
dobj(denies-12, one-13)
det(basics-17, the-15)
amod(basics-17, fundamental-16)
prep_of(one-13, basics-17)
prep_of(basics-17, argumentation-19)
mark(disprove-23, in-20)
dep(disprove-23, order-21)
aux(disprove-23, to-22)
purpcl(denies-12, disprove-23)
dobj(disprove-23, anything-24)
nsubj(disprove-28, you-26)
aux(disprove-28, must-27)
root(ROOT-0, disprove-28)
dobj(disprove-28, it-29)
poss(framework-33, its-31)
amod(framework-33, own-32)
prep_within(disprove-28, framework-33)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (S
      (VP (TO to)
        (VP (VB disprove))))
    (VP (VBZ zuess)
      (SBAR
        (S
          (NP (PRP you))
          (VP (MD can) (RB not)
            (VP (VB make)
              (PRT (RP up))
              (NP (PRP$ your) (JJ own) (NN definition)))))))
    (. .)))

prep_for(zuess-6, example-2)
aux(disprove-5, to-4)
csubj(zuess-6, disprove-5)
root(ROOT-0, zuess-6)
nsubj(make-10, you-7)
aux(make-10, can-8)
neg(make-10, not-9)
ccomp(zuess-6, make-10)
prt(make-10, up-11)
poss(definition-14, your-12)
amod(definition-14, own-13)
dobj(make-10, definition-14)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJ same))
        (PP (IN with)
          (NP (NNP God)))))
    (. .)))

nsubj(same-4, It-1)
cop(same-4, is-2)
det(same-4, the-3)
root(ROOT-0, same-4)
prep_with(same-4, God-6)

(ROOT
  (S
    (NP (DT The) (JJ ontological) (NN argument))
    (VP (MD would)
      (ADVP (RB therefore))
      (VP (VB assert)
        (SBAR (IN that)
          (S
            (NP (NNP God))
            (VP (MD must)
              (VP (VB exist)
                (ADVP (RB universally))
                (, ,)
                (SBAR (IN because)
                  (S
                    (PP (IN in)
                      (NP
                        (NP (NN order))
                        (PP (IN for)
                          (NP (DT the) (NN atheist)
                            (S
                              (VP (TO to)
                                (VP (VB disprove)
                                  (NP (NNP God)))))))))
                    (, ,)
                    (NP (PRP they))
                    (VP (VBP have)
                      (S
                        (VP (TO to)
                          (VP
                            (ADVP (RB first))
                            (VB accept)
                            (NP
                              (NP (DT the) (NN definition))
                              (SBAR
                                (WHNP (WDT which))
                                (S
                                  (VP (VBZ is)
                                    (SBAR (IN that)
                                      (S
                                        (NP (PRP he))
                                        (VP (VBZ exists))))))))))))))))))))))

det(argument-3, The-1)
amod(argument-3, ontological-2)
nsubj(assert-6, argument-3)
aux(assert-6, would-4)
advmod(assert-6, therefore-5)
root(ROOT-0, assert-6)
complm(exist-10, that-7)
nsubj(exist-10, God-8)
aux(exist-10, must-9)
ccomp(assert-6, exist-10)
advmod(exist-10, universally-11)
mark(have-24, because-13)
prep_in(have-24, order-15)
det(atheist-18, the-17)
prep_for(order-15, atheist-18)
aux(disprove-20, to-19)
infmod(atheist-18, disprove-20)
dobj(disprove-20, God-21)
nsubj(have-24, they-23)
xsubj(accept-27, they-23)
advcl(exist-10, have-24)
aux(accept-27, to-25)
advmod(accept-27, first-26)
xcomp(have-24, accept-27)
det(definition-29, the-28)
dobj(accept-27, definition-29)
nsubj(is-31, definition-29)
rcmod(definition-29, is-31)
complm(exists-34, that-32)
nsubj(exists-34, he-33)
ccomp(is-31, exists-34)

