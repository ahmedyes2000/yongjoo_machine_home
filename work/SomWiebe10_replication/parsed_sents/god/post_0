(ROOT
  (S
    (PP (IN Within)
      (NP (PRP$ your) (NN question)))
    (NP (PRP you))
    (VP (VBP have)
      (NP
        (NP (CD two) (JJ major) (NNS assumptions))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBP are)
              (ADJP (JJ false)))))))
    (. ...)))

poss(question-3, your-2)
prep_within(have-5, question-3)
nsubj(have-5, you-4)
root(ROOT-0, have-5)
num(assumptions-8, two-6)
amod(assumptions-8, major-7)
dobj(have-5, assumptions-8)
nsubj(false-11, assumptions-8)
cop(false-11, are-10)
rcmod(assumptions-8, false-11)

(ROOT
  (S
    (LST (JJ First))
    (PP (IN of)
      (NP (DT all)))
    (, ,)
    (NP (PRP you))
    (VP (VBP assume)
      (SBAR (IN that)
        (S
          (NP (NNP God))
          (VP (MD can)
            (VP (VB contradict)
              (NP
                (NP (PRP himself))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ is)
                      (ADVP (RB logically))
                      (ADJP (JJ impossible)))))))))))
    (. .)))

dep(assume-6, First-1)
prep_of(assume-6, all-3)
nsubj(assume-6, you-5)
root(ROOT-0, assume-6)
complm(contradict-10, that-7)
nsubj(contradict-10, God-8)
aux(contradict-10, can-9)
ccomp(assume-6, contradict-10)
dobj(contradict-10, himself-11)
nsubj(impossible-16, himself-11)
cop(impossible-16, is-14)
advmod(impossible-16, logically-15)
rcmod(himself-11, impossible-16)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP
          (NP (DT the) (JJ only) (NN way))
          (NP (DT a) (JJ particular) (NN person)))
        (VP (MD might)
          (VP (VB turn)
            (PP (TO to)
              (NP (NNP God)))))))
    (VP (VBZ is)
      (PP (IN through)
        (NP (NN suffering)))
      (, ,)
      (ADVP (RB then))
      (SBAR (IN that)
        (S
          (NP (NN suffering))
          (VP (VBD was)
            (ADJP (JJ good))))))
    (. .)))

mark(turn-9, If-1)
det(way-4, the-2)
amod(way-4, only-3)
nsubj(turn-9, way-4)
det(person-7, a-5)
amod(person-7, particular-6)
dep(way-4, person-7)
aux(turn-9, might-8)
csubj(is-12, turn-9)
prep_to(turn-9, God-11)
root(ROOT-0, is-12)
prep_through(is-12, suffering-14)
advmod(is-12, then-16)
complm(good-20, that-17)
nsubj(good-20, suffering-18)
cop(good-20, was-19)
ccomp(is-12, good-20)

(ROOT
  (S
    (SBAR (IN Since) (IN while)
      (S
        (NP (DT the) (JJ short) (NN term) (NN suffering))
        (VP (MD may)
          (VP (VB seem)
            (ADJP (JJ terrible))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (NP
        (NP (NN nothing))
        (PP (VBN compared)
          (PP (TO to)
            (NP
              (NP (DT an) (NN eternity))
              (ADVP (RB away)
                (PP (IN from)
                  (NP (NNP God)))))))))
    (. .)))

mark(terrible-9, Since-1)
dep(terrible-9, while-2)
det(suffering-6, the-3)
amod(suffering-6, short-4)
nn(suffering-6, term-5)
nsubj(terrible-9, suffering-6)
aux(terrible-9, may-7)
cop(terrible-9, seem-8)
advcl(nothing-13, terrible-9)
nsubj(nothing-13, it-11)
cop(nothing-13, is-12)
root(ROOT-0, nothing-13)
prepc_compared_to(nothing-13, to-15)
det(eternity-17, an-16)
pobj(nothing-13, eternity-17)
prep_away_from(eternity-17, God-20)

(ROOT
  (S
    (S
      (VP (NNP Let)
        (S
          (NP (PRP me))
          (NP
            (NP (NN state))
            (PP (IN for)
              (NP (DT the) (NN record)))))))
    (, ,)
    (NP (NNP God))
    (ADVP (RB absolutely))
    (VP (MD can) (RB not)
      (VP (VB contradict)
        (NP (PRP himself))))
    (. .)))

ccomp(contradict-12, Let-1)
nsubj(state-3, me-2)
xcomp(Let-1, state-3)
det(record-6, the-5)
prep_for(state-3, record-6)
nsubj(contradict-12, God-8)
advmod(contradict-12, absolutely-9)
aux(contradict-12, can-10)
neg(contradict-12, not-11)
root(ROOT-0, contradict-12)
dobj(contradict-12, himself-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP think)
          (SBAR
            (S
              (NP (PRP you))
              (VP (VBP see)
                (NP (DT a) (NN contradiction))))))))
    (, ,)
    (VP (VB check)
      (NP (PRP$ your) (NNS premises)))
    (. .)))

mark(think-3, If-1)
nsubj(think-3, you-2)
advcl(check-9, think-3)
nsubj(see-5, you-4)
ccomp(think-3, see-5)
det(contradiction-7, a-6)
dobj(see-5, contradiction-7)
root(ROOT-0, check-9)
poss(premises-11, your-10)
dobj(check-9, premises-11)

(ROOT
  (S
    (NP (NNP God))
    (VP (VBD created)
      (NP (DT a) (NN world))
      (SBAR
        (WHADVP (WRB where))
        (S
          (NP (NNS people))
          (VP (VBD had)
            (NP
              (NP (NN freedom))
              (CC and)
              (NP (JJ free) (NN will)))))))
    (. .)))

nsubj(created-2, God-1)
root(ROOT-0, created-2)
det(world-4, a-3)
dobj(created-2, world-4)
advmod(had-7, where-5)
nsubj(had-7, people-6)
advcl(created-2, had-7)
dobj(had-7, freedom-8)
amod(will-11, free-10)
dobj(had-7, will-11)
conj_and(freedom-8, will-11)

(ROOT
  (S
    (ADVP (RB Hence))
    (, ,)
    (NP (PRP it))
    (VP (VBZ follows)
      (ADVP (RB logically))
      (SBAR (IN that)
        (S
          (NP (NNP God))
          (VP (MD can) (RB not)
            (VP (VB create)
              (NP
                (NP (NNS people))
                (PP (IN with)
                  (NP
                    (ADJP (RB absolutely) (JJ free))
                    (NN will))))
              (PP (IN without)
                (NP (DT the) (NN possibility)))
              (SBAR (IN that)
                (S
                  (NP (NNS people))
                  (VP (MD might)
                    (VP (VB choose)
                      (ADJP (JJ evil)))))))))))
    (. .)))

advmod(follows-4, Hence-1)
nsubj(follows-4, it-3)
root(ROOT-0, follows-4)
advmod(follows-4, logically-5)
complm(create-10, that-6)
nsubj(create-10, God-7)
aux(create-10, can-8)
neg(create-10, not-9)
ccomp(follows-4, create-10)
dobj(create-10, people-11)
advmod(free-14, absolutely-13)
amod(will-15, free-14)
prep_with(people-11, will-15)
det(possibility-18, the-17)
prep_without(create-10, possibility-18)
complm(choose-22, that-19)
nsubj(choose-22, people-20)
aux(choose-22, might-21)
ccomp(create-10, choose-22)
acomp(choose-22, evil-23)

(ROOT
  (S
    (ADVP (RB Secondly))
    (, ,)
    (NP (PRP you))
    (VP (VBP assume)
      (SBAR
        (S
          (NP
            (NP (NNS humans))
            (CC and)
            (NP (NNP God)))
          (VP (VBP share)
            (NP
              (NP (DT the) (JJ same) (NN definition))
              (PP (IN of) (`` ``)
                (ADJP (JJ good))))))))
    (. .)))

advmod(assume-4, Secondly-1)
nsubj(assume-4, you-3)
root(ROOT-0, assume-4)
nsubj(share-8, humans-5)
conj_and(humans-5, God-7)
nsubj(share-8, God-7)
ccomp(assume-4, share-8)
det(definition-11, the-9)
amod(definition-11, same-10)
dobj(share-8, definition-11)
prep_of(definition-11, good-14)

(ROOT
  (S ('' '')
    (NP (PRP You))
    (VP (VBP say)
      (SBAR (IN that) (IN if)
        (S
          (NP (DT a) (NN person))
          (VP (VBZ is)
            (PP (IN in)
              (NP
                (NP (NN poverty))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ is)
                      (ADJP (JJ bad)))))))))))
    (. .)))

nsubj(say-3, You-2)
root(ROOT-0, say-3)
complm(is-8, that-4)
dep(is-8, if-5)
det(person-7, a-6)
nsubj(is-8, person-7)
ccomp(say-3, is-8)
prep_in(is-8, poverty-10)
nsubj(bad-13, poverty-10)
cop(bad-13, is-12)
rcmod(poverty-10, bad-13)

(ROOT
  (NP (NNPS Yes)
    (CC and)
    (NNPS no.)))

root(ROOT-0, Yes-1)
conj_and(Yes-1, no.-3)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ is)
        (ADJP (JJ true))
        (SBAR (IN that)
          (S
            (NP (PRP they))
            (VP (MD may)
              (VP (VB lead)
                (NP (DT an)
                  (ADJP (RB exceptionally) (JJ painful))
                  (NN existence))))))))
    (, ,)
    (CC but)
    (S
      (NP
        (NP
          (NP (NNP God) (POS 's))
          (NN measure))
        (PP (IN of)
          (ADJP (JJ good))))
      (VP (VBZ is)
        (SBAR
          (WHADJP (WRB how) (JJ many))
          (S
            (NP (NNS people))
            (VP
              (VP (VB accept)
                (NP (PRP him))
                (ADVP (RB freely)))
              (CC and)
              (VP (VB enter)
                (NP (NN heaven))))))))
    (. .)))

nsubj(true-3, It-1)
cop(true-3, is-2)
root(ROOT-0, true-3)
complm(lead-7, that-4)
nsubj(lead-7, they-5)
aux(lead-7, may-6)
ccomp(true-3, lead-7)
det(existence-11, an-8)
advmod(painful-10, exceptionally-9)
amod(existence-11, painful-10)
dobj(lead-7, existence-11)
poss(measure-16, God-14)
nsubj(is-19, measure-16)
prep_of(measure-16, good-18)
conj_but(true-3, is-19)
advmod(many-21, how-20)
dep(accept-23, many-21)
nsubj(accept-23, people-22)
nsubj(enter-27, people-22)
ccomp(is-19, accept-23)
dobj(accept-23, him-24)
advmod(accept-23, freely-25)
ccomp(is-19, enter-27)
conj_and(accept-23, enter-27)
dobj(enter-27, heaven-28)

