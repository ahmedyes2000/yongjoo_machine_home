(ROOT
  (S
    (NP (PRP We))
    (VP (VBP 're)
      (ADVP (RB just))
      (VP (VBG going)
        (NP
          (NP (NN round))
          (PP (IN in)
            (NP (NNS circles))))))
    (. .)))

nsubj(going-4, We-1)
aux(going-4, 're-2)
advmod(going-4, just-3)
root(ROOT-0, going-4)
dobj(going-4, round-5)
prep_in(round-5, circles-7)

(ROOT
  (S
    (ADVP (RB Firslty))
    (, ,)
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB believe)
        (PP (IN in)
          (NP (NNP Christianity)))))
    (. .)))

advmod(believe-6, Firslty-1)
nsubj(believe-6, I-3)
aux(believe-6, do-4)
neg(believe-6, n't-5)
root(ROOT-0, believe-6)
prep_in(believe-6, Christianity-8)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP feed)
      (NP (PRP$ my) (NNS kids))
      (SBAR (IN because)
        (S
          (NP (PRP I))
          (VP (VBP love)
            (NP (PRP$ my) (NNS kids)))))
      (, ,)
      (SBAR (RB not) (IN because)
        (S
          (NP (NNP God))
          (VP (VBZ tells)
            (S
              (NP (PRP me))
              (VP (TO to)))))))
    (. .)))

nsubj(feed-2, I-1)
root(ROOT-0, feed-2)
poss(kids-4, my-3)
dobj(feed-2, kids-4)
mark(love-7, because-5)
nsubj(love-7, I-6)
advcl(feed-2, love-7)
poss(kids-9, my-8)
dobj(love-7, kids-9)
dep(tells-14, not-11)
dep(tells-14, because-12)
nsubj(tells-14, God-13)
dep(feed-2, tells-14)
nsubj(to-16, me-15)
xcomp(tells-14, to-16)

(ROOT
  (S
    (SBAR (RB Even) (IN if)
      (S
        (NP (PRP he))
        (VP (VBD did) (RB not)
          (VP (VB tell)
            (NP (PRP me))
            (PP (TO to))))))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (ADVP (RB still))
      (VP (VB feed)
        (NP (PRP them))))
    (. .)))

advmod(tell-6, Even-1)
dep(tell-6, if-2)
nsubj(tell-6, he-3)
aux(tell-6, did-4)
neg(tell-6, not-5)
advcl(feed-13, tell-6)
dobj(tell-6, me-7)
prep(tell-6, to-8)
nsubj(feed-13, I-10)
aux(feed-13, would-11)
advmod(feed-13, still-12)
root(ROOT-0, feed-13)
dobj(feed-13, them-14)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (NP (DT the) (JJ right) (NN thing)
        (S
          (VP (TO to)
            (VP (VB do))))))
    (. .)))

nsubj(thing-5, It-1)
cop(thing-5, 's-2)
det(thing-5, the-3)
amod(thing-5, right-4)
root(ROOT-0, thing-5)
aux(do-7, to-6)
infmod(thing-5, do-7)

(ROOT
  (NP
    (NP (CD One))
    (NP (NN example))
    (. .)))

root(ROOT-0, One-1)
dep(One-1, example-2)

(ROOT
  (FRAG
    (ADVP (RB Adultery))
    (. .)))

root(ROOT-0, Adultery-1)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP tell)
      (SBAR
        (S
          (NP (PRP me))
          (VP (VBZ is)
            (NP (PRP it))
            (ADVP (JJ right)
              (CC or)
              (JJ wrong))))))
    (. ?)))

nsubj(tell-2, You-1)
root(ROOT-0, tell-2)
nsubj(it-5, me-3)
cop(it-5, is-4)
ccomp(tell-2, it-5)
advmod(it-5, right-6)
advmod(it-5, wrong-8)
conj_or(right-6, wrong-8)

(ROOT
  (S
    (S
      (NP
        (NP (DT Those))
        (SBAR
          (WHNP (WP who))
          (S
            (VP
              (VP (VBP have)
                (VP (VBN thought)
                  (PP (IN of))))
              (CC or)
              (VP (VBP have)
                (ADVP (RB actually))
                (VP (VBN cheated)))))))
      (VP (MD will)
        (VP (VB say)
          (NP (PRP$ its) (NN right)))))
    (, ,)
    (CC but)
    (S
      (NP
        (NP (DT those))
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBP have) (RB n't)))))
      (VP (MD will)
        (VP (VB say)
          (NP (PRP$ its) (JJ wrong)))))
    (. .)))

nsubj(thought-4, Those-1)
nsubj(cheated-9, Those-1)
nsubj(say-11, Those-1)
aux(thought-4, have-3)
rcmod(Those-1, thought-4)
prep(thought-4, of-5)
aux(cheated-9, have-7)
advmod(cheated-9, actually-8)
rcmod(Those-1, cheated-9)
conj_or(thought-4, cheated-9)
aux(say-11, will-10)
root(ROOT-0, say-11)
poss(right-13, its-12)
dobj(say-11, right-13)
nsubj(have-18, those-16)
nsubj(say-21, those-16)
rcmod(those-16, have-18)
neg(have-18, n't-19)
aux(say-21, will-20)
conj_but(say-11, say-21)
poss(wrong-23, its-22)
dobj(say-21, wrong-23)

(ROOT
  (SQ (MD Can)
    (NP (PRP we))
    (VP (VB make)
      (NP (DT a) (NN decision))
      (PP (IN on))
      (SBAR (IN whether)
        (CC or)
        (RB not)
        (S
          (NP (PRP it))
          (VP (MD should)
            (VP (VB be)
              (ADJP (JJ punishable)))))))
    (. ?)))

aux(make-3, Can-1)
nsubj(make-3, we-2)
root(ROOT-0, make-3)
det(decision-5, a-4)
dobj(make-3, decision-5)
prep(make-3, on-6)
complm(punishable-13, whether-7)
ccomp(make-3, not-9)
conj_or(punishable-13, not-9)
nsubj(punishable-13, it-10)
aux(punishable-13, should-11)
cop(punishable-13, be-12)
ccomp(make-3, punishable-13)

(ROOT
  (S
    (PP (IN In)
      (NP (DT the) (NN end)))
    (, ,)
    (NP (NNP God))
    (VP (VBZ says)
      (NP (PRP$ its) (JJ wrong)))
    (. .)))

det(end-3, the-2)
prep_in(says-6, end-3)
nsubj(says-6, God-5)
root(ROOT-0, says-6)
poss(wrong-8, its-7)
dobj(says-6, wrong-8)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP He))
          (VP (VBZ has)
            (NP
              (NP
                (NP (DT a) (JJR better) (NN idea))
                (PP (IN of)
                  (NP (IN whether))))
              (CC or)
              (NP
                (NP (RB not) (PRP$ its) (NN right))
                (CC or)
                (NP (JJ wrong))))))))
    (. .)))

nsubj(think-2, I-1)
root(ROOT-0, think-2)
nsubj(has-4, He-3)
ccomp(think-2, has-4)
det(idea-7, a-5)
amod(idea-7, better-6)
dobj(has-4, idea-7)
prep(idea-7, of-8)
pobj(of-8, whether-9)
neg(right-13, not-11)
poss(right-13, its-12)
dobj(has-4, right-13)
conj_or(idea-7, right-13)
conj_or(idea-7, wrong-15)
conj_or(right-13, wrong-15)

(ROOT
  (FRAG
    (ADVP (RB However))
    (SBAR (IN as)
      (S
        (NP (PRP I))
        (VP (VBP 've)
          (VP (VBD said)
            (NP (JJ SEVERAL) (NNS times))
            (SBAR (IN that)
              (S
                (NP (NNS people))
                (VP (VBP ARE)
                  (ADJP (JJ good)
                    (PP (IN in)
                      (NP (NNP GENERAL)))))))))))
    (. .)))

root(ROOT-0, However-1)
mark(said-5, as-2)
nsubj(said-5, I-3)
aux(said-5, 've-4)
dep(However-1, said-5)
amod(times-7, SEVERAL-6)
dobj(said-5, times-7)
complm(good-11, that-8)
nsubj(good-11, people-9)
cop(good-11, ARE-10)
ccomp(said-5, good-11)
prep_in(good-11, GENERAL-13)

(ROOT
  (S
    (NP (NNP THAT))
    (VP (VBZ is)
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (PRP we))
          (VP (VBP take)
            (NP (PRP$ his) (NN word))
            (, ,)
            (SBAR (IN because)
              (S
                (NP (PRP we))
                (VP (MD can) (RB not)
                  (VP (VB make)
                    (NP (DT the) (JJ right) (NN decision))))))))))
    (. .)))

nsubj(is-2, THAT-1)
root(ROOT-0, is-2)
advmod(take-5, why-3)
nsubj(take-5, we-4)
advcl(is-2, take-5)
poss(word-7, his-6)
dobj(take-5, word-7)
mark(make-13, because-9)
nsubj(make-13, we-10)
aux(make-13, can-11)
neg(make-13, not-12)
advcl(take-5, make-13)
det(decision-16, the-14)
amod(decision-16, right-15)
dobj(make-13, decision-16)

(ROOT
  (S
    (ADVP (RB Hopefully))
    (NP (PRP you))
    (VP (VBP understand)
      (NP (DT this) (NN time)))
    (. .)))

advmod(understand-3, Hopefully-1)
nsubj(understand-3, you-2)
root(ROOT-0, understand-3)
det(time-5, this-4)
dobj(understand-3, time-5)

(ROOT
  (S
    (NP (JJ Fourth) (NN time))
    (ADJP (JJ lucky))
    (. .)))

amod(time-2, Fourth-1)
dep(lucky-3, time-2)
root(ROOT-0, lucky-3)

(ROOT
  (NP (NNP Yay) (: ...)))

root(ROOT-0, Yay-1)

(ROOT
  (FRAG
    (ADVP (RB So))
    (SBAR (IN if)
      (S
        (NP (PRP YOU))
        (VP (VBP think)
          (SBAR (IN that)
            (S
              (NP (PRP I))
              (VP (VBP think)
                (SBAR (IN that)
                  (S
                    (NP (PRP we))
                    (VP (VBD NEED)
                      (S
                        (NP (NNP GOD))
                        (VP (TO to)
                          (VP (VB be)
                            (ADJP (JJ w\/e)))))))))))))
      (. .))
    (. .)))

root(ROOT-0, So-1)
mark(think-4, if-2)
nsubj(think-4, YOU-3)
dep(So-1, think-4)
complm(think-7, that-5)
nsubj(think-7, I-6)
ccomp(think-4, think-7)
complm(NEED-10, that-8)
nsubj(NEED-10, we-9)
ccomp(think-7, NEED-10)
nsubj(w\/e-14, GOD-11)
aux(w\/e-14, to-12)
cop(w\/e-14, be-13)
xcomp(NEED-10, w\/e-14)

(ROOT
  (S (RB then)
    (ADVP (RB again))
    (NP (PRP you))
    (VP (VBP have)
      (ADVP (RB completely))
      (VP (VBN missed)
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP I))
            (VP (VBP 've)
              (VP (VBD said)))))))
    (. .)))

advmod(missed-6, then-1)
advmod(missed-6, again-2)
nsubj(missed-6, you-3)
aux(missed-6, have-4)
advmod(missed-6, completely-5)
root(ROOT-0, missed-6)
dobj(said-10, what-7)
nsubj(said-10, I-8)
aux(said-10, 've-9)
ccomp(missed-6, said-10)

(ROOT
  (NP
    (NP (RB Not) (RB just))
    (NP
      (NP (RB once))
      (, ,)
      (CC or)
      (ADVP
        (ADVP (RB twice))
        (, ,)
        (CC but)
        (ADVP (RB now)))
      (NP (CD 3) (NNS times)))
    (. .)))

neg(just-2, Not-1)
root(ROOT-0, just-2)
dep(just-2, once-3)
dep(just-2, twice-6)
advmod(once-3, twice-6)
conj_or(once-3, twice-6)
advmod(once-3, now-9)
conj_or(once-3, now-9)
conj_but(twice-6, now-9)
num(times-11, 3-10)
dep(just-2, times-11)
conj_or(once-3, times-11)

(ROOT
  (S (-LRB- -LRB-)
    (NP (DT That))
    (VP (VBZ 's)
      (ADVP (RB quite)
        (NP (DT a) (RB lot))
        (PP (IN of)
          (NP (NNS times) (NN ehh) (-RRB- -RRB-) (NNP People) (NNP ARE))))
      (ADJP (JJ good)))
    (. .)))

nsubj(good-13, That-2)
cop(good-13, 's-3)
advmod(good-13, quite-4)
det(lot-6, a-5)
pobj(quite-4, lot-6)
nn(ARE-12, times-8)
nn(ARE-12, ehh-9)
nn(ARE-12, People-11)
prep_of(quite-4, ARE-12)
root(ROOT-0, good-13)

(ROOT
  (FRAG (CC But)
    (VP (VB explain)
      (PP (TO to)
        (NP (PRP me)))
      (SBAR
        (WHNP (WP what))
        (S
          (S
            (VP (VBG being)
              (ADJP (JJ good))))
          (VP (VBZ is)))))
    (. ?)))

dep(explain-2, But-1)
root(ROOT-0, explain-2)
prep_to(explain-2, me-4)
nsubj(is-8, what-5)
cop(good-7, being-6)
csubj(is-8, good-7)
ccomp(explain-2, is-8)

(ROOT
  (SQ (VBZ Is)
    (NP (NN murder))
    (ADJP (JJ good))
    (. ?)))

cop(good-3, Is-1)
nsubj(good-3, murder-2)
root(ROOT-0, good-3)

(ROOT
  (SINV
    (PP (IN In)
      (NP (JJ certain) (NNS circumstances)))
    (VP (VBZ is))
    (NP (PRP it))
    (VP (VBN justified))
    (. ?)))

amod(circumstances-3, certain-2)
prep_in(is-4, circumstances-3)
root(ROOT-0, is-4)
nsubj(is-4, it-5)
dep(is-4, justified-6)

(ROOT
  (SQ (CC Or)
    (VBZ is)
    (NP (PRP it))
    (ADJP
      (ADVP (RB never))
      (VBN justified))
    (. ?)))

cc(justified-5, Or-1)
aux(justified-5, is-2)
nsubj(justified-5, it-3)
neg(justified-5, never-4)
root(ROOT-0, justified-5)

