(ROOT
  (FRAG (`` ``)
    (INTJ (UH 1))
    (. .)))


(ROOT
  (S
    (NP (PRP You))
    (VP (VBP do) (RB not)
      (VP (VB have)
        (NP
          (NP (NN instrumentation))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (MD can)
                (VP
                  (VP (VB detect)
                    (NP (PRP them)))
                  (CC and)
                  (VP (CC and)
                    (NP (JJ relay) (DT that) (NN information))
                    (PP (IN in)
                      (NP
                        (NP (DT a) (NN manner))
                        (SBAR (IN that)
                          (S
                            (NP (PRP$ our) (CD 5) (NNS senses))
                            (VP (MD can)
                              (VP (VB sense)
                                (NP (PRP them))))))))))))))))
    (. .)))

nsubj(have-4, You-1)
aux(have-4, do-2)
neg(have-4, not-3)
root(ROOT-0, have-4)
dobj(have-4, instrumentation-5)
nsubj(detect-8, instrumentation-5)
aux(detect-8, can-7)
rcmod(instrumentation-5, detect-8)
dobj(detect-8, them-9)
cc(information-14, and-11)
amod(information-14, relay-12)
det(information-14, that-13)
rcmod(instrumentation-5, information-14)
conj_and(detect-8, information-14)
det(manner-17, a-16)
prep_in(information-14, manner-17)
complm(sense-23, that-18)
poss(senses-21, our-19)
num(senses-21, 5-20)
nsubj(sense-23, senses-21)
aux(sense-23, can-22)
dep(manner-17, sense-23)
dobj(sense-23, them-24)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ depends)
        (PP (IN on)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (PRP you))
              (VP (VBP mean)
                (PP (IN by) (`` ``)
                  (NP (NNP Thought) (NNPS Waves))
                  ('' ''))))))))
    (: ...)
    (S
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBP are)
            (VP (VBG talking)
              (PP (IN about)
                (NP
                  (NP (DT the) (NN frequency))
                  (PP (IN of)
                    (NP (JJ electrical) (NNS signals)))))
              (S
                (VP (VBG traveling)
                  (PP (IN through)
                    (NP (DT the) (NN brain)))))))))
      (NP (PRP you))
      (VP (VBP are)
        (ADJP (JJ correct)
          (PP (IN in)
            (SBAR (IN that)
              (S
                (NP (PRP we))
                (VP (MD can) (RB not)
                  (VP (`` ``) (VB read) ('' '')
                    (NP (PRP them))))))))))
    (. .)))

nsubj(depends-2, It-1)
root(ROOT-0, depends-2)
dobj(mean-6, what-4)
nsubj(mean-6, you-5)
prepc_on(depends-2, mean-6)
nn(Waves-10, Thought-9)
prep_by(mean-6, Waves-10)
mark(talking-16, if-13)
nsubj(talking-16, you-14)
aux(talking-16, are-15)
advcl(correct-29, talking-16)
det(frequency-19, the-18)
prep_about(talking-16, frequency-19)
amod(signals-22, electrical-21)
prep_of(frequency-19, signals-22)
xcomp(talking-16, traveling-23)
det(brain-26, the-25)
prep_through(traveling-23, brain-26)
nsubj(correct-29, you-27)
cop(correct-29, are-28)
parataxis(depends-2, correct-29)
complm(read-36, that-31)
nsubj(read-36, we-32)
aux(read-36, can-33)
neg(read-36, not-34)
prepc_in(correct-29, read-36)
dobj(read-36, them-38)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (MD can)
        (VP (VB detect)
          (NP (PRP them)))))
    (CC but)
    (S
      (NP (PRP we))
      (VP (MD can) (RB not)
        (VP (VB interpret)
          (NP (PRP them)))))
    (. .)))

nsubj(detect-3, We-1)
aux(detect-3, can-2)
root(ROOT-0, detect-3)
dobj(detect-3, them-4)
nsubj(interpret-9, we-6)
aux(interpret-9, can-7)
neg(interpret-9, not-8)
conj_but(detect-3, interpret-9)
dobj(interpret-9, them-10)

(ROOT
  (S (`` ``)
    (SBAR
      (WHNP (WP who))
      (S
        (VP (VBZ knows)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (JJ other) (NN energy) (NNS signals))
              (VP (VBP are)
                (ADVP
                  (ADVP (RB out) (RB there))
                  (SBAR (IN that)
                    (S
                      (NP (PRP we))
                      (ADVP (RB simply))
                      (VP (MD can) (RB not)
                        (VP (VB detect))))))))))))
    (VP (VB withn)
      (NP (PRP$ our) (JJ current) (NN detection) (NNS facilities)))
    (. .)))

nsubj(knows-3, who-2)
csubj(withn-17, knows-3)
dobj(are-8, what-4)
amod(signals-7, other-5)
nn(signals-7, energy-6)
nsubj(are-8, signals-7)
ccomp(knows-3, are-8)
advmod(there-10, out-9)
advmod(are-8, there-10)
dep(detect-16, that-11)
nsubj(detect-16, we-12)
advmod(detect-16, simply-13)
aux(detect-16, can-14)
neg(detect-16, not-15)
ccomp(there-10, detect-16)
root(ROOT-0, withn-17)
poss(facilities-21, our-18)
amod(facilities-21, current-19)
nn(facilities-21, detection-20)
dobj(withn-17, facilities-21)

(ROOT
  (S ('' '')
    (PP (IN Also)
      (ADJP (JJ true)))
    (, ,)
    (ADVP (RB however))
    (NP (DT that) (NN reasoning))
    (VP (VBZ allows)
      (PP (IN for)
        (NP
          (NP (DT an) (JJ infinite) (NN number))
          (PP (IN of)
            (NP (NNS possibilities))))))
    (: ...)))

prep_also(allows-8, true-3)
advmod(allows-8, however-5)
det(reasoning-7, that-6)
nsubj(allows-8, reasoning-7)
root(ROOT-0, allows-8)
det(number-12, an-10)
amod(number-12, infinite-11)
prep_for(allows-8, number-12)
prep_of(number-12, possibilities-14)

(ROOT
  (S
    (S
      (NP (PRP We))
      (`` ``)
      (VP (MD could)))
    ('' '')
    (VP (VBP be)
      (NP
        (NP (JJ organic) (NNS robots))
        (VP (VBN controlled)
          (PP (IN by)
            (NP
              (NP (NN tachyon) (NNS signals))
              (VP (VBG being)
                (VP (VBN projected)
                  (PP (IN from)
                    (NP (NNP Saturn))))))))))
    (. .)))

nsubj(could-3, We-1)
ccomp(robots-7, could-3)
csubj(robots-7, could-3)
cop(robots-7, be-5)
amod(robots-7, organic-6)
root(ROOT-0, robots-7)
partmod(robots-7, controlled-8)
nn(signals-11, tachyon-10)
agent(controlled-8, signals-11)
auxpass(projected-13, being-12)
partmod(signals-11, projected-13)
prep_from(projected-13, Saturn-15)

(ROOT
  (S ('' '')
    (PP (RB Just)
      (PP (IN because)
        (S
          (NP (PRP you))
          (VP (VBP do) (RB n't)
            (VP (VB know)
              (NP (PRP$ its))
              (ADVP (RB there)))))))
    (VP (VBZ does) (RB not)
      (VP (VB mean)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ does) (RB n't)
              (VP (VB exist)))))))
    (. .)))

advmod(mean-12, Just-2)
nsubj(know-7, you-4)
aux(know-7, do-5)
neg(know-7, n't-6)
prepc_because(mean-12, know-7)
dobj(know-7, its-8)
advmod(know-7, there-9)
aux(mean-12, does-10)
neg(mean-12, not-11)
root(ROOT-0, mean-12)
nsubj(exist-16, it-13)
aux(exist-16, does-14)
neg(exist-16, n't-15)
ccomp(mean-12, exist-16)

(ROOT
  (S ('' '')
    (S
      (S
        (VP (MD Ca) (RB n't)
          (NP (DT the) (JJ same) (NN thing))
          (VP (VB be))))
      (VP (VBD said)
        (PP (IN for)
          (NP (NNP Unicorns)))))
    (CC and)
    (S
      (NP (NN underwear))
      (VP (VBZ gnomes)))
    (. ?)))

aux(be-7, Ca-2)
neg(be-7, n't-3)
det(thing-6, the-4)
amod(thing-6, same-5)
dobj(be-7, thing-6)
csubj(said-8, be-7)
root(ROOT-0, said-8)
prep_for(said-8, Unicorns-10)
nsubj(gnomes-13, underwear-12)
conj_and(said-8, gnomes-13)

(ROOT
  (S (`` ``)
    (S
      (INTJ (UH yes))
      (, ,)
      (NP (DT that))
      (VP (VBZ is)
        (ADJP (JJ true))))
    (: ...)
    (S
      (VP
        (ADVP (RB however))
        (VBG considering)
        (SBAR (IN that)
          (S
            (NP (PRP we))
            (VP (VBP know)
              (SBAR (IN that)
                (S
                  (NP (EX there))
                  (VP (VBP are)
                    (NP
                      (NP (NN radio) (NNS broadcasts))
                      (VP (VBG going)
                        (PRT (RP on))
                        (PP (IN near)
                          (PP (IN by)))))))))))))
    (PRN (-LRB- -LRB-)
      (SBAR (RB even) (IN though)
        (S
          (NP (PRP I))
          (VP (VBP do) (RB not)
            (VP (VB have)
              (NP
                (NP (PRP$ my) (NN cell) (NN phone))
                (PP (IN on)
                  (NP (PRP me)))
                (SBAR
                  (S
                    (NP (PRP I))
                    (VP (VBP know)
                      (SBAR (IN that)
                        (S
                          (NP (PRP it))
                          (VP (VBZ gets)
                            (NP
                              (NP (DT a) (NN signal))
                              (SBAR
                                (WHADVP (WRB where))
                                (S
                                  (NP (PRP I))
                                  (VP (VBP am)
                                    (VP (VBG sitting)))))))))))))))))
      (-RRB- -RRB-))
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB think)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (ADJP (JJ unreasonable)
                (S
                  (VP (TO to)
                    (VP (VB assume)
                      (SBAR (IN that)
                        (S
                          (NP (EX there))
                          (VP (VBP are)
                            (NP
                              (NP (NN radio) (NNS waves))
                              (VP (VBG passing)
                                (PP (IN through)
                                  (NP (PRP me)))
                                (ADVP (RB right) (RB now))))))))))))))))
    (. .)))

dep(true-6, yes-2)
nsubj(true-6, that-4)
cop(true-6, is-5)
dep(think-49, true-6)
advmod(considering-9, however-8)
parataxis(think-49, considering-9)
complm(know-12, that-10)
nsubj(know-12, we-11)
ccomp(considering-9, know-12)
complm(are-15, that-13)
expl(are-15, there-14)
ccomp(know-12, are-15)
nn(broadcasts-17, radio-16)
nsubj(are-15, broadcasts-17)
partmod(broadcasts-17, going-18)
prt(going-18, on-19)
prep(going-18, near-20)
pcomp(near-20, by-21)
prep(near-20, by-21)
advmod(have-28, even-23)
dep(have-28, though-24)
nsubj(have-28, I-25)
aux(have-28, do-26)
neg(have-28, not-27)
parataxis(think-49, have-28)
poss(phone-31, my-29)
nn(phone-31, cell-30)
dobj(have-28, phone-31)
prep_on(phone-31, me-33)
nsubj(know-35, I-34)
rcmod(phone-31, know-35)
complm(gets-38, that-36)
nsubj(gets-38, it-37)
ccomp(know-35, gets-38)
det(signal-40, a-39)
dobj(gets-38, signal-40)
advmod(sitting-44, where-41)
nsubj(sitting-44, I-42)
aux(sitting-44, am-43)
rcmod(signal-40, sitting-44)
nsubj(think-49, I-46)
aux(think-49, do-47)
neg(think-49, n't-48)
root(ROOT-0, think-49)
complm(unreasonable-53, that-50)
nsubj(unreasonable-53, it-51)
cop(unreasonable-53, is-52)
ccomp(think-49, unreasonable-53)
aux(assume-55, to-54)
xcomp(unreasonable-53, assume-55)
complm(are-58, that-56)
expl(are-58, there-57)
ccomp(assume-55, are-58)
nn(waves-60, radio-59)
nsubj(are-58, waves-60)
partmod(waves-60, passing-61)
prep_through(passing-61, me-63)
advmod(now-65, right-64)
advmod(passing-61, now-65)

(ROOT
  (FRAG (`` ``)
    (INTJ (UH 2))
    (. .)))


(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB not)
          (VP (VB have)
            (S
              (NP (DT that) (NN instrumentation))
              (ADJP (VBN tuned)
                (PP (IN into)
                  (NP (DT the) (NN frequency)))))))))
    (NP (DT those) (NN energy) (NNS signals))
    (VP (VBP are)
      (VP (VBG transmitting)
        (PRT (RP on))))
    (. .)))

mark(have-5, If-1)
nsubj(have-5, you-2)
aux(have-5, do-3)
neg(have-5, not-4)
advcl(transmitting-16, have-5)
det(instrumentation-7, that-6)
nsubj(tuned-8, instrumentation-7)
xcomp(have-5, tuned-8)
det(frequency-11, the-10)
prep_into(tuned-8, frequency-11)
det(signals-14, those-12)
nn(signals-14, energy-13)
nsubj(transmitting-16, signals-14)
aux(transmitting-16, are-15)
root(ROOT-0, transmitting-16)
prt(transmitting-16, on-17)

(ROOT
  (S ('' '')
    (NP (DT That))
    (VP
      (VP (VBZ is)
        (NP (DT a) (JJ strange) (NN way))
        (S
          (VP (TO to)
            (VP (VB put)
              (NP (PRP it))))))
      (: ...)
      (CC but)
      (ADVP (RB again))
      (, ,)
      (NP (UH yes)))
    (. .)))

nsubj(way-6, That-2)
cop(way-6, is-3)
det(way-6, a-4)
amod(way-6, strange-5)
root(ROOT-0, way-6)
aux(put-8, to-7)
xcomp(way-6, put-8)
dobj(put-8, it-9)
advmod(way-6, again-12)
conj_but(way-6, again-12)
conj_but(way-6, yes-14)
dobj(way-6, yes-14)

(ROOT
  (FRAG (`` ``)
    (INTJ (UH 3))
    (. .)))


(ROOT
  (S
    (NP (EX There))
    (VP (MD may)
      (VP (VB be)
        (NP
          (NP (JJ many) (JJ other) (NN energy) (NNS waves))
          (PP (IN than)
            (NP (NN radio) (NN tv) (NN infra) (NN red) (NN ultra) (NN violet) (JJ light) (NNS rays))))))
    (. .)))

expl(waves-7, There-1)
aux(waves-7, may-2)
cop(waves-7, be-3)
amod(waves-7, many-4)
amod(waves-7, other-5)
nn(waves-7, energy-6)
root(ROOT-0, waves-7)
nn(rays-16, radio-9)
nn(rays-16, tv-10)
nn(rays-16, infra-11)
nn(rays-16, red-12)
nn(rays-16, ultra-13)
nn(rays-16, violet-14)
amod(rays-16, light-15)
prep_than(waves-7, rays-16)

(ROOT
  (S (`` ``)
    (S
      (UCP
        (VP (VBG getting)
          (NP (NN stranger))
          (ADVP (RB now)))
        (, ,)
        (CC but)
        (ADJP
          (ADVP (RB also))
          (JJ true))))
    (: ...)
    (NP (EX there))
    (VP (VBP are)
      (NP (JJ sound) (NNS waves)
        (S
          (VP (TO to)
            (VP (VB consider)
              (PP (IN for)
                (NP (CD one))))))))
    (. .)))

dep(are-11, getting-2)
dobj(getting-2, stranger-3)
advmod(getting-2, now-4)
advmod(true-8, also-7)
conj_but(getting-2, true-8)
dep(are-11, true-8)
expl(are-11, there-10)
root(ROOT-0, are-11)
amod(waves-13, sound-12)
nsubj(are-11, waves-13)
aux(consider-15, to-14)
infmod(waves-13, consider-15)
prep_for(consider-15, one-17)

(ROOT
  (S ('' '')
    (PP (IN Thought)
      (NP
        (NP (NNS waves))
        (PP (IN for)
          (NP (NN example)))))
    (, ,)
    (NP (PRP we))
    (VP (MD can) (RB not)
      (ADVP (RB even))
      (VP (VB read)
        (NP
          (NP (NN thought) (NNS waves))
          ('' '')
          (VP (VBN Que)))))
    (. ?)))

prep_thought(read-11, waves-3)
prep_for(waves-3, example-5)
nsubj(read-11, we-7)
aux(read-11, can-8)
neg(read-11, not-9)
advmod(read-11, even-10)
root(ROOT-0, read-11)
nn(waves-13, thought-12)
dobj(read-11, waves-13)
partmod(waves-13, Que-15)

