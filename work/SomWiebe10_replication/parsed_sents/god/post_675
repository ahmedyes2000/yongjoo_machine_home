(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ (VBZ does)
      (NP (PRP it))
      (VP (VB take)
        (S
          (VP (TO to)
            (VP (VB decide)
              (SBAR
                (WHNP (WP what))
                (S
                  (VP (VBZ is)
                    (NP (DT the) (JJR greater) (NN good))))))))))
    (. .)))

dep(take-4, What-1)
aux(take-4, does-2)
nsubj(take-4, it-3)
xsubj(decide-6, it-3)
root(ROOT-0, take-4)
aux(decide-6, to-5)
xcomp(take-4, decide-6)
nsubj(good-11, what-7)
cop(good-11, is-8)
det(good-11, the-9)
amod(good-11, greater-10)
ccomp(decide-6, good-11)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP need)
      (NP
        (NP (DT a) (JJ moral) (NN agent))
        (VP (VBG using)
          (NP (NN logic)
            (CC and)
            (NN reason))
          (S
            (VP
              (VP (TO to)
                (VP (VB asses)
                  (NP (DT a) (JJ current) (NN situation))))
              (CC and)
              (ADVP (RB then))
              (VP (TO to)
                (VP (VB judge)
                  (NP
                    (NP (DT that))
                    (PP (IN against)
                      (NP (DT a) (VBN perceived) (NN standard)))))))))))
    (. .)))

nsubj(need-2, You-1)
root(ROOT-0, need-2)
det(agent-5, a-3)
amod(agent-5, moral-4)
dobj(need-2, agent-5)
partmod(agent-5, using-6)
dobj(using-6, logic-7)
dobj(using-6, reason-9)
conj_and(logic-7, reason-9)
aux(asses-11, to-10)
dep(using-6, asses-11)
det(situation-14, a-12)
amod(situation-14, current-13)
dobj(asses-11, situation-14)
dep(using-6, then-16)
advmod(asses-11, then-16)
conj_and(asses-11, then-16)
aux(judge-18, to-17)
dep(using-6, judge-18)
conj_and(asses-11, judge-18)
dobj(judge-18, that-19)
det(standard-23, a-21)
amod(standard-23, perceived-22)
prep_against(that-19, standard-23)

(ROOT
  (S
    (NP
      (NP (DT A) (NN lot))
      (PP (IN of)
        (NP
          (NP (NN stuff))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBP atheism)))))))
    (VP (MD ca) (RB n't)
      (VP (VB account)
        (PP (IN for))))
    (. .)))

det(lot-2, A-1)
nsubj(account-9, lot-2)
prep_of(lot-2, stuff-4)
nsubj(atheism-6, stuff-4)
rcmod(stuff-4, atheism-6)
aux(account-9, ca-7)
neg(account-9, n't-8)
root(ROOT-0, account-9)
prep(account-9, for-10)

(ROOT
  (S
    (INTJ (UH Well))
    (, ,)
    (NP (PRP they))
    (VP (MD can)
      (SBAR (IN if)
        (S
          (NP (PRP they))
          (VP (VBP use)
            (S
              (NP (DT those) (JJ non-physical) (NNS realities))
              (VP (TO to)
                (VP (VB prove)
                  (SBAR (IN that)
                    (S
                      (NP (DT those) (NN non-physical))
                      (VP (VBP do) (RB n't)
                        (VP (VB exist))))))))))))
    (. .)))

dep(can-4, Well-1)
nsubj(can-4, they-3)
root(ROOT-0, can-4)
mark(use-7, if-5)
nsubj(use-7, they-6)
advcl(can-4, use-7)
det(realities-10, those-8)
amod(realities-10, non-physical-9)
nsubj(prove-12, realities-10)
aux(prove-12, to-11)
xcomp(use-7, prove-12)
complm(exist-18, that-13)
det(non-physical-15, those-14)
nsubj(exist-18, non-physical-15)
aux(exist-18, do-16)
neg(exist-18, n't-17)
ccomp(prove-12, exist-18)

(ROOT
  (S
    (NP (NNP Oh))
    (VP (VBZ whoops) (, ,)
      (S
        (VP (VBG darn)
          (NP
            (NP (PRP it))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ 's)
                  (NP
                    (NP (DT a) (NN self))
                    (VP (VBG refuting)
                      (NP (NN argument)))))))))))
    (. .)))

nsubj(whoops-2, Oh-1)
root(ROOT-0, whoops-2)
xcomp(whoops-2, darn-4)
dobj(darn-4, it-5)
nsubj(self-9, it-5)
cop(self-9, 's-7)
det(self-9, a-8)
rcmod(it-5, self-9)
partmod(self-9, refuting-10)
dobj(refuting-10, argument-11)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (JJ only) (NN thing))
        (PP (IN in)
          (NP
            (NP (DT that) (NN string))
            (PP (IN of)
              (NP
                (NP (NNS events))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP
                      (VP (VBZ is)
                        (ADJP (JJ physical)))
                      (CC and)
                      (VP (VBD made)
                        (PRT (RP up))
                        (PP (IN of)
                          (NP (NN matter))))))))))))
      (VP (VBZ is)
        (NP (DT the) (JJ moral) (NN agent))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ 's)
        (NP
          (NP (NN morality) (, ,) (NN logic) (, ,) (NN reason) (, ,) (NN assessment)
            (CC and)
            (NN judgment))
          (SBAR
            (S
              (VP (VBP are) (RB not)))))))
    (. .)))

det(thing-3, The-1)
amod(thing-3, only-2)
nsubj(agent-20, thing-3)
det(string-6, that-5)
prep_in(thing-3, string-6)
prep_of(string-6, events-8)
nsubj(physical-11, events-8)
nsubj(made-13, events-8)
cop(physical-11, is-10)
rcmod(events-8, physical-11)
rcmod(events-8, made-13)
conj_and(physical-11, made-13)
prt(made-13, up-14)
prep_of(made-13, matter-16)
cop(agent-20, is-17)
det(agent-20, the-18)
amod(agent-20, moral-19)
root(ROOT-0, agent-20)
nsubj(morality-25, it-23)
cop(morality-25, 's-24)
conj_but(agent-20, morality-25)
conj_but(agent-20, logic-27)
conj_and(morality-25, logic-27)
conj_but(agent-20, reason-29)
conj_and(morality-25, reason-29)
conj_but(agent-20, assessment-31)
conj_and(morality-25, assessment-31)
conj_but(agent-20, judgment-33)
conj_and(morality-25, judgment-33)
rcmod(morality-25, are-34)
neg(are-34, not-35)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB put)
          (S
            (NP (PRP it))
            (NP (DT another) (NN way))))))
    (: ;)
    (S
      (NP (PRP you))
      (VP (MD ca) (RB n't)
        (VP
          (VP (VB open)
            (NP
              (NP (PRP it) (POS 's))
              (NN head)))
          (CC and)
          (VP (VB see)
            (NP
              (NP (PRP it) (POS 's))
              (NNS thoughts))))))
    (. .)))

aux(put-2, To-1)
root(ROOT-0, put-2)
nsubj(way-5, it-3)
det(way-5, another-4)
xcomp(put-2, way-5)
nsubj(open-10, you-7)
nsubj(see-15, you-7)
aux(open-10, ca-8)
neg(open-10, n't-9)
parataxis(put-2, open-10)
poss(head-13, it-11)
dobj(open-10, head-13)
parataxis(put-2, see-15)
conj_and(open-10, see-15)
poss(thoughts-18, it-16)
dobj(see-15, thoughts-18)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP have)
      (NP
        (NP
          (NP (DT no) (NN projection))
          (PP (IN in)
            (NP (NN space))))
        (: ;)
        (NP
          (NP (DT a) (NN characteristic))
          (PP (IN of)
            (NP (NN matter))))))
    (. .)))

nsubj(have-2, They-1)
root(ROOT-0, have-2)
det(projection-4, no-3)
dobj(have-2, projection-4)
prep_in(projection-4, space-6)
det(characteristic-9, a-8)
dep(projection-4, characteristic-9)
prep_of(characteristic-9, matter-11)

(ROOT
  (S (CC And)
    (S
      (VP (VBP do) (RB n't)
        (VP (VB tell)
          (NP (PRP me))
          (NP (PRP it)))))
    (VP (VBZ 's)
      (PP (IN like)
        (NP (NN computer) (NN memory)))
      (SBAR (IN because)
        (S
          (NP (DT every) (NN one))
          (VP (VBZ knows)
            (SBAR
              (WHNP (WP what))
              (S
                (VP (VBZ happens)
                  (PP (TO to)
                    (NP (PRP$ your) (NN hard-drive)))
                  (SBAR
                    (WHADVP (WRB when))
                    (S
                      (NP (PRP you))
                      (VP (VBD put)
                        (PP (TO to)
                          (NP (RB much)))
                        (PP (IN on)
                          (NP (PRP it)))))))))))))
    (. .)))

cc('s-7, And-1)
aux(tell-4, do-2)
neg(tell-4, n't-3)
csubj('s-7, tell-4)
iobj(tell-4, me-5)
dobj(tell-4, it-6)
root(ROOT-0, 's-7)
nn(memory-10, computer-9)
prep_like('s-7, memory-10)
mark(knows-14, because-11)
det(one-13, every-12)
nsubj(knows-14, one-13)
advcl('s-7, knows-14)
nsubj(happens-16, what-15)
ccomp(knows-14, happens-16)
poss(hard-drive-19, your-18)
prep_to(happens-16, hard-drive-19)
advmod(put-22, when-20)
nsubj(put-22, you-21)
advcl(happens-16, put-22)
prep(put-22, to-23)
pobj(to-23, much-24)
prep_on(put-22, it-26)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ last) (NN time))
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBD checked)))))
    (, ,)
    (S
      (NP (DT no) (NNS ones) (NN head))
      (VP (VBZ gets)
        (ADJP
          (ADJP (JJR bigger))
          (SBAR
            (X (DT the) (JJR more))
            (S
              (NP (PRP they))
              (VP (VBP know)))))))
    (PRN (-LRB- -LRB-)
      (S
        (ADVP (RB well))
        (NP (PRP I))
        (VP (VBP guess)
          (SBAR
            (S
              (NP (PRP it))
              (VP (VBZ does)
                (PP (IN in)
                  (NP (CD one) (NN way))))))))
      (-RRB- -RRB-))
    (S
      (NP (DT The) (NN point))
      (VP (VBZ is)
        (SBAR (IN that)
          (S
            (NP (DT these))
            (VP (VBP are)
              (NP (JJ non-physical) (NNS realities)))))))
    (. .)))

det(time-3, The-1)
amod(time-3, last-2)
dobj(checked-5, time-3)
dep(bigger-11, time-3)
nsubj(checked-5, I-4)
rcmod(time-3, checked-5)
det(head-9, no-7)
nn(head-9, ones-8)
nsubj(bigger-11, head-9)
dep(bigger-11, gets-10)
root(ROOT-0, bigger-11)
det(more-13, the-12)
dep(know-15, more-13)
nsubj(know-15, they-14)
dep(bigger-11, know-15)
advmod(guess-19, well-17)
nsubj(guess-19, I-18)
dep(bigger-11, guess-19)
nsubj(does-21, it-20)
ccomp(guess-19, does-21)
num(way-24, one-23)
prep_in(does-21, way-24)
det(point-27, The-26)
nsubj(is-28, point-27)
ccomp(bigger-11, is-28)
complm(realities-33, that-29)
nsubj(realities-33, these-30)
cop(realities-33, are-31)
amod(realities-33, non-physical-32)
ccomp(is-28, realities-33)

(ROOT
  (S (CC And)
    (S
      (INTJ (UH no))
      (NP (PRP they))
      (VP (VBP 're) (RB not)
        (NP
          (NP (DT the) (NN product))
          (PP (IN of)
            (NP (NN chemical) (NNS reactions))))))
    (, ,)
    (S
      (NP (PRP you))
      (VP (MD can)
        (VP (VB mix)
          (NP
            (NP (NN water))
            (CC and)
            (NP
              (NP (JJ baking) (NN soda))
              (NP (DT all) (NN day)))))))
    (CC and)
    (S
      (NP (DT the) (NNS bubbles))
      (VP (MD will)
        (ADVP (RB never))
        (VP (VB talk)
          (PP (TO to)
            (NP (PRP you))))))
    (. .)))

dep(product-7, no-2)
nsubj(product-7, they-3)
cop(product-7, 're-4)
neg(product-7, not-5)
det(product-7, the-6)
root(ROOT-0, product-7)
nn(reactions-10, chemical-9)
prep_of(product-7, reactions-10)
nsubj(mix-14, you-12)
aux(mix-14, can-13)
conj_and(product-7, mix-14)
dobj(mix-14, water-15)
amod(soda-18, baking-17)
dobj(mix-14, soda-18)
conj_and(water-15, soda-18)
det(day-20, all-19)
dep(soda-18, day-20)
det(bubbles-23, the-22)
nsubj(talk-26, bubbles-23)
aux(talk-26, will-24)
neg(talk-26, never-25)
conj_and(product-7, talk-26)
prep_to(talk-26, you-28)

(ROOT
  (S
    (S
      (NP (NNP Point))
      (VP (VBZ is)
        (NP (DT this))))
    (: ;)
    (S
      (SBAR (IN If)
        (S
          (NP (NN atheism))
          (VP (VBZ is)
            (ADJP (JJ true))
            (SBAR (IN than)
              (S
                (NP (PRP we))
                (VP (VBP have)
                  (NP
                    (NP (DT a) (JJ whole) (NN lot))
                    (PP (IN of)
                      (NP (NN stuff))))))))))
      (NP (DT that))
      (VP (MD should) (RB n't)
        (VP (VB be)
          (ADVP (RB here)))))
    (. .)))

nsubj(this-3, Point-1)
cop(this-3, is-2)
root(ROOT-0, this-3)
mark(true-8, If-5)
nsubj(true-8, atheism-6)
cop(true-8, is-7)
advcl(be-20, true-8)
mark(have-11, than-9)
nsubj(have-11, we-10)
advcl(true-8, have-11)
det(lot-14, a-12)
amod(lot-14, whole-13)
dobj(have-11, lot-14)
prep_of(lot-14, stuff-16)
nsubj(be-20, that-17)
aux(be-20, should-18)
neg(be-20, n't-19)
parataxis(this-3, be-20)
advmod(be-20, here-21)

(ROOT
  (NP
    (NP (DT A) (NN lot))
    (PP (IN of)
      (NP (JJ non-physical) (NNS realities)))
    (PP (IN in)
      (NP (DT a)
        (ADJP (RB purely) (JJ physical))
        (NN world)))
    (. .)))

det(lot-2, A-1)
root(ROOT-0, lot-2)
amod(realities-5, non-physical-4)
prep_of(lot-2, realities-5)
det(world-10, a-7)
advmod(physical-9, purely-8)
amod(world-10, physical-9)
prep_in(lot-2, world-10)

