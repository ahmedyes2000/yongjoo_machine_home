(ROOT
  (S
    (ADVP (RB Whether)
      (CC or)
      (RB not))
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN god))
        (SBAR
          (S
            (VP (VBZ does) (RB n't)
              (VP (VB matter)))))))
    (. .)))

advmod(is-5, Whether-1)
conj_or(Whether-1, not-3)
advmod(is-5, not-3)
expl(is-5, there-4)
root(ROOT-0, is-5)
det(god-7, a-6)
nsubj(is-5, god-7)
aux(matter-10, does-8)
neg(matter-10, n't-9)
rcmod(god-7, matter-10)

(ROOT
  (S
    (S
      (NP (EX There))
      (VP (VBZ is)))
    (, ,)
    (CC or)
    (S
      (NP (EX there))
      (VP (VBZ is) (RB n't)))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
expl(is-6, there-5)
conj_or(is-2, is-6)
neg(is-6, n't-7)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (VP (VBZ matters))))
    (VP (VBZ is)
      (SBAR (IN whether)
        (S
          (NP
            (NP (DT the) (NN existence))
            (PP (IN of)
              (NP (NN god))))
          (VP (VBZ is)
            (ADJP (JJ relevant)
              (PP (TO to)
                (NP (PRP$ our) (NNS lives))))))))
    (. .)))

nsubj(matters-2, What-1)
csubj(is-3, matters-2)
root(ROOT-0, is-3)
complm(relevant-10, whether-4)
det(existence-6, the-5)
nsubj(relevant-10, existence-6)
prep_of(existence-6, god-8)
cop(relevant-10, is-9)
ccomp(is-3, relevant-10)
poss(lives-13, our-12)
prep_to(relevant-10, lives-13)

(ROOT
  (S
    (ADVP (RB Obviously))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (EX there))
        (VP (VBZ 's)
          (NP (DT no) (NN god)))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is) (RB not)
      (ADJP (JJ relevant)))
    (. .)))

advmod(is-10, Obviously-1)
mark('s-5, if-3)
expl('s-5, there-4)
advcl(is-10, 's-5)
det(god-7, no-6)
nsubj('s-5, god-7)
nsubj(is-10, it-9)
root(ROOT-0, is-10)
neg(is-10, not-11)
acomp(is-10, relevant-12)

(ROOT
  (S
    (SBAR (RB Just) (IN as)
      (S
        (SBAR
          (ADVP (RB clear) (: :))
          (IN if)
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP (DT a) (NN god)))))
        (, ,)
        (NP (PRP we))
        (VP (MD can)
          (ADVP (RB never))
          (VP (VB know)
            (NP (PRP$ its) (NN nature))
            (PRN (-LRB- -LRB-)
              (CC or)
              (VP (VBZ alternatively)))))))
    (, ,)
    (NP (PRP we))
    (VP (MD can)
      (ADVP (RB only))
      (VP (VB understand)
        (NP (NN god))
        (PP (IN through)
          (NP (NN faith)))
        (PP (IN without)
          (NP
            (NP (NN proof))
            (: ;)
            (NP (JJ same) (NN thing))))))
    (. .) (-RRB- -RRB-)))

advmod(know-14, Just-1)
dep(know-14, as-2)
advmod(is-7, clear-3)
dep(is-7, if-5)
expl(is-7, there-6)
advcl(know-14, is-7)
det(god-9, a-8)
nsubj(is-7, god-9)
nsubj(know-14, we-11)
aux(know-14, can-12)
neg(know-14, never-13)
advcl(understand-24, know-14)
poss(nature-16, its-15)
dobj(know-14, nature-16)
dep(alternatively-19, or-18)
dep(know-14, alternatively-19)
nsubj(understand-24, we-21)
aux(understand-24, can-22)
advmod(understand-24, only-23)
root(ROOT-0, understand-24)
dobj(understand-24, god-25)
prep_through(understand-24, faith-27)
prep_without(understand-24, proof-29)
amod(thing-32, same-31)
dep(proof-29, thing-32)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (NP (DT the) (JJ only) (JJ possible) (NN way)
        (S
          (VP (TO to)
            (VP (VB explain)
              (NP
                (NP (DT the) (JJ complete) (NN lack))
                (PP (IN of)
                  (NP (JJ real) (NN evidence)))))))))
    (. .)))

nsubj(way-6, This-1)
cop(way-6, is-2)
det(way-6, the-3)
amod(way-6, only-4)
amod(way-6, possible-5)
root(ROOT-0, way-6)
aux(explain-8, to-7)
infmod(way-6, explain-8)
det(lack-11, the-9)
amod(lack-11, complete-10)
dobj(explain-8, lack-11)
amod(evidence-14, real-13)
prep_of(lack-11, evidence-14)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP (DT a) (NN god)))))
    (, ,)
    (S (CC but)
      (NP (PRP we))
      (VP (MD can)
        (ADVP (RB never))
        (VP (VB know)
          (NP (PRP$ its) (NN nature)))))
    (, ,) (RB then)
    (S
      (NP
        (NP (DT the) (JJ only) (NN way))
        (SBAR
          (S
            (NP (PRP we))
            (VP (MD can)
              (VP (VB get)
                (NP (DT some) (NN relevance))
                (PP (IN from)
                  (NP (NN god))))))))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB believe)
              (PP (IN in)
                (NP
                  (NP (DT a) (NN version))
                  (PP (IN of)
                    (NP (NN god)))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ is)
                        (ADJP (JJ relevant))))))))))))
    (. .)))

mark(is-3, If-1)
expl(is-3, there-2)
advcl(know-11, is-3)
det(god-5, a-4)
nsubj(is-3, god-5)
cc(know-11, but-7)
nsubj(know-11, we-8)
aux(know-11, can-9)
neg(know-11, never-10)
root(ROOT-0, know-11)
poss(nature-13, its-12)
dobj(know-11, nature-13)
advmod(know-11, then-15)
det(way-18, the-16)
amod(way-18, only-17)
nsubj(is-26, way-18)
xsubj(believe-28, way-18)
nsubj(get-21, we-19)
aux(get-21, can-20)
rcmod(way-18, get-21)
det(relevance-23, some-22)
dobj(get-21, relevance-23)
prep_from(get-21, god-25)
ccomp(know-11, is-26)
aux(believe-28, to-27)
xcomp(is-26, believe-28)
det(version-31, a-30)
prep_in(believe-28, version-31)
nsubj(relevant-36, version-31)
prep_of(version-31, god-33)
cop(relevant-36, is-35)
rcmod(version-31, relevant-36)

(ROOT
  (S (CC But)
    (NP (DT this) (NN version))
    (VP (VBZ is)
      (NP (DT a) (JJ complete) (NN guess)))
    (. !)))

cc(guess-7, But-1)
det(version-3, this-2)
nsubj(guess-7, version-3)
cop(guess-7, is-4)
det(guess-7, a-5)
amod(guess-7, complete-6)
root(ROOT-0, guess-7)

(ROOT
  (S
    (S
      (NP (DT That))
      (VP (VBZ 's)
        (ADJP (JJ self-delusion))))
    (: ;)
    (S
      (ADVP (RB instead))
      (NP (PRP we))
      (VP (MD ought)
        (S
          (VP (TO to)
            (ADVP (RB just))
            (VP (VB think)
              (ADVP (RB honestly))
              (PP (IN about)
                (SBAR
                  (WHNP (WP what))
                  (S
                    (VP (VBZ is)
                      (ADJP (RB morally) (JJ right)
                        (CC and)
                        (JJ wrong)))))))))))
    (. .)))

nsubj(self-delusion-3, That-1)
cop(self-delusion-3, 's-2)
root(ROOT-0, self-delusion-3)
advmod(ought-7, instead-5)
nsubj(ought-7, we-6)
xsubj(think-10, we-6)
parataxis(self-delusion-3, ought-7)
aux(think-10, to-8)
advmod(think-10, just-9)
xcomp(ought-7, think-10)
advmod(think-10, honestly-11)
nsubj(right-16, what-13)
nsubj(wrong-18, what-13)
cop(right-16, is-14)
advmod(right-16, morally-15)
prepc_about(think-10, right-16)
prepc_about(think-10, wrong-18)
conj_and(right-16, wrong-18)

(ROOT
  (S
    (S
      (NP (DT Another) (NN way)
        (S
          (VP (TO to)
            (VP (VB think)
              (PP (IN about)
                (NP (PRP it)))
              (: :)
              (SBAR (IN if)
                (S
                  (NP
                    (NP (NN god) (POS 's))
                    (NN relevance))
                  (VP (VBZ is)
                    (S
                      (VP (TO to)
                        (VP (VB give)
                          (NP (PRP us))
                          (NP
                            (NP (DT a) (JJ moral) (NN code))
                            (, ,) (RB then) (RB either)
                            (NP (DT the) (JJ moral) (NN code)))))))))))))
      (VP (VBZ is)
        (ADJP (JJ right)
          (PP (IN in)
            (NP
              (NP (PRP itself))
              (PRN (-LRB- -LRB-)
                (SBAR
                  (WHPP (IN in)
                    (WHNP (WDT which) (NN case)))
                  (S
                    (NP (PRP we))
                    (VP (VBP do) (RB n't)
                      (VP (VB need)
                        (NP (NN god))
                        (S
                          (VP (TO to)
                            (VP (VB get)
                              (NP (PRP it)))))))))
                (-RRB- -RRB-)))))))
    (CC or)
    (, ,)
    (S
      (NP (DT the) (JJ moral) (NN code))
      (VP (VBZ is)
        (ADJP (JJ arbitrary))))
    (CC and)
    (S
      (NP (PRP we))
      (VP (MD should)
        (VP (VB ignore)
          (NP (PRP it)))))
    (. .)))

det(way-2, Another-1)
nsubj(right-26, way-2)
aux(think-4, to-3)
infmod(way-2, think-4)
prep_about(think-4, it-6)
mark(is-12, if-8)
poss(relevance-11, god-9)
nsubj(is-12, relevance-11)
xsubj(give-14, relevance-11)
advcl(think-4, is-12)
parataxis(think-4, is-12)
aux(give-14, to-13)
xcomp(is-12, give-14)
iobj(give-14, us-15)
det(code-18, a-16)
amod(code-18, moral-17)
dobj(give-14, code-18)
advmod(code-18, then-20)
advmod(code-18, either-21)
det(code-24, the-22)
amod(code-24, moral-23)
dep(code-18, code-24)
cop(right-26, is-25)
root(ROOT-0, right-26)
prep_in(right-26, itself-28)
dep(need-36, in-30)
det(case-32, which-31)
pobj(in-30, case-32)
nsubj(need-36, we-33)
aux(need-36, do-34)
neg(need-36, n't-35)
dep(itself-28, need-36)
dobj(need-36, god-37)
aux(get-39, to-38)
xcomp(need-36, get-39)
dobj(get-39, it-40)
det(code-46, the-44)
amod(code-46, moral-45)
nsubj(arbitrary-48, code-46)
cop(arbitrary-48, is-47)
conj_or(right-26, arbitrary-48)
nsubj(ignore-52, we-50)
aux(ignore-52, should-51)
conj_and(right-26, ignore-52)
dobj(ignore-52, it-53)

