(ROOT
  (S
    (NP (DT The) (`` ``)
      (S
        (VP (VB wait)
          (CC and)
          (VB see)))
      ('' '') (NN philosophy))
    (VP (VBZ is) (RB n't)
      (NP (DT the) (JJS greatest) (NN idea)))
    (. .)))

det(philosophy-7, The-1)
dep(philosophy-7, wait-3)
conj_and(wait-3, see-5)
dep(philosophy-7, see-5)
nsubj(idea-12, philosophy-7)
cop(idea-12, is-8)
neg(idea-12, n't-9)
det(idea-12, the-10)
amod(idea-12, greatest-11)
root(ROOT-0, idea-12)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (PP (IN like)
        (NP
          (NP (DT a) (NNS deer))
          (VP (VBN caught)
            (PP (IN in)
              (NP (NNS headlights)))))))
    (. .)))

nsubj('s-2, It-1)
root(ROOT-0, 's-2)
det(deer-5, a-4)
prep_like('s-2, deer-5)
partmod(deer-5, caught-6)
prep_in(caught-6, headlights-8)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP are)
        (PP (IN like)
          (NP (DT the) (NNS deer)))))
    (CC and)
    (S
      (NP (DT the) (NNS headlights))
      (VP (VBP are)
        (NP (DT the) (NN afterlife))))
    (. .)))

nsubj(are-2, You-1)
root(ROOT-0, are-2)
det(deer-5, the-4)
prep_like(are-2, deer-5)
det(headlights-8, the-7)
nsubj(afterlife-11, headlights-8)
cop(afterlife-11, are-9)
det(afterlife-11, the-10)
conj_and(are-2, afterlife-11)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (NP
        (NP (DT no) (NN idea))
        (SBAR
          (WHNP (WP what))
          (S
            (VP (VBZ is)
              (VP (VBG coming)
                (PP (IN toward)
                  (NP (PRP you)))))))))
    (. .)))

nsubj(have-2, You-1)
root(ROOT-0, have-2)
det(idea-4, no-3)
dobj(have-2, idea-4)
nsubj(coming-7, idea-4)
aux(coming-7, is-6)
rcmod(idea-4, coming-7)
prep_toward(coming-7, you-9)

(ROOT
  (S (RB Then)
    (ADVP (RB suddenly))
    (, ,)
    (VP (VBZ boom))
    (. .)))

advmod(boom-4, Then-1)
advmod(boom-4, suddenly-2)
root(ROOT-0, boom-4)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP 're)
      (ADJP (JJ dead)))
    (. .)))

nsubj(dead-3, You-1)
cop(dead-3, 're-2)
root(ROOT-0, dead-3)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB now))
    (VP
      (ADVP (RB just))
      (VBD experienced)
      (NP (DT the) (`` ``) (NN afterlife) ('' '')))
    (. .)))

nsubj(experienced-4, You-1)
advmod(experienced-4, now-2)
advmod(experienced-4, just-3)
root(ROOT-0, experienced-4)
det(afterlife-7, the-5)
dobj(experienced-4, afterlife-7)

(ROOT
  (SQ (VBZ Is)
    (NP (PRP it))
    (NP
      (NP (WP what))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBD expected)))))
    (. ?)))

cop(what-3, Is-1)
nsubj(what-3, it-2)
root(ROOT-0, what-3)
dobj(expected-5, what-3)
nsubj(expected-5, you-4)
rcmod(what-3, expected-5)

(ROOT
  (S
    (ADJP (VB No.))
    (. .)))

root(ROOT-0, No.-1)

(ROOT
  (S (CC But)
    (VP
      (ADVP (RBR better))
      (VP (TO to)
        (VP
          (VP (VB believe)
            (PP (IN in)
              (NP (NN something))))
          (CC and)
          (VP (VB be)
            (ADJP (JJ wrong)))))
      (CONJP (IN than))
      (VP (TO to)
        (VP (RB not)
          (VP (VB believe)
            (PP (IN in)
              (NP (NN something))))
          (CC and)
          (ADVP (RB still))
          (VP (VB be)
            (ADJP (JJ wrong))))))
    (. .)))

advmod(believe-4, better-2)
aux(believe-4, to-3)
root(ROOT-0, believe-4)
prep_in(believe-4, something-6)
cop(wrong-9, be-8)
conj_and(believe-4, wrong-9)
aux(believe-13, to-11)
neg(believe-13, not-12)
conj_than(believe-4, believe-13)
prep_in(believe-13, something-15)
conj_than(believe-4, still-17)
advmod(believe-13, still-17)
conj_and(believe-13, still-17)
cop(wrong-19, be-18)
conj_than(believe-4, wrong-19)
conj_and(believe-13, wrong-19)

