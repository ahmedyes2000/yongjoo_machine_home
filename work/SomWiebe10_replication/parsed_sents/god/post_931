(ROOT
  (S
    (NP (NNP Holy))
    (VP
      (VP (VBZ whips))
      (CC and)
      (VP (VBZ chains)))
    (. !)))

nsubj(whips-2, Holy-1)
nsubj(chains-4, Holy-1)
root(ROOT-0, whips-2)
conj_and(whips-2, chains-4)

(ROOT
  (FRAG
    (NP (DT A) (NNP God) (NN argument))
    (SBAR (IN that)
      (S
        (NP (PRP I))
        (VP (VBP have) (RB not)
          (VP
            (ADVP (RB yet))
            (VBD commented)
            (PP (IN on)
              (NP (NNP ?!)))))))))

det(argument-3, A-1)
nn(argument-3, God-2)
root(ROOT-0, argument-3)
complm(commented-9, that-4)
nsubj(commented-9, I-5)
aux(commented-9, have-6)
neg(commented-9, not-7)
advmod(commented-9, yet-8)
dep(argument-3, commented-9)
prep_on(commented-9, ?!-11)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD ca) (RB n't)
      (ADVP (RB just))
      (VP (VB say) ('' '')
        (NP
          (NP (JJ Hey) (NN look))
          (, ,)
          (NP (NN existence)))))
    (. .)))

nsubj(say-5, You-1)
aux(say-5, ca-2)
neg(say-5, n't-3)
advmod(say-5, just-4)
root(ROOT-0, say-5)
amod(look-8, Hey-7)
dobj(say-5, look-8)
appos(look-8, existence-10)

(ROOT
  (S
    (NP (NNP God))
    (VP (VBZ exists))
    (. .)))

nsubj(exists-2, God-1)
root(ROOT-0, exists-2)

(ROOT
  (S ('' '')
    (NP (NNP and))
    (VP (VBP expect)
      (SBAR (IN that)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (RB proof) (JJ enough)))))))
    (. .)))

nsubj(expect-3, and-2)
root(ROOT-0, expect-3)
complm(enough-8, that-4)
aux(enough-8, to-5)
cop(enough-8, be-6)
advmod(enough-8, proof-7)
ccomp(expect-3, enough-8)
xcomp(expect-3, enough-8)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP 'm) (RB not)
        (VP (VBG saying)
          (SBAR (IN that)
            (S
              (NP (NNP God))
              (VP (VBZ does) (RB not)
                (VP (VB exist))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP$ your) (NN proof))
      (VP (VBZ is)
        (ADJP (RB somewhat) (JJ weak))))
    (. .)))

nsubj(saying-4, I-1)
aux(saying-4, 'm-2)
neg(saying-4, not-3)
root(ROOT-0, saying-4)
complm(exist-9, that-5)
nsubj(exist-9, God-6)
aux(exist-9, does-7)
neg(exist-9, not-8)
ccomp(saying-4, exist-9)
poss(proof-13, your-12)
nsubj(weak-16, proof-13)
cop(weak-16, is-14)
advmod(weak-16, somewhat-15)
conj_but(saying-4, weak-16)

(ROOT
  (FRAG
    (ADVP (RB Blasphemy))
    (. !)))

root(ROOT-0, Blasphemy-1)

(ROOT
  (S
    (S
      (NP (NNP \/) (NNP \/) (-RRB- -RRB-) (NNP I))
      (VP (VBP 'm)
        (VP (VBG going)
          (S
            (VP (TO to)
              (VP (VB have)
                (S
                  (VP (TO to)
                    (VP (VB say)
                      (ADVP (RB no)
                        (SBAR (IN because)
                          (S
                            (NP (PRP you))
                            (VP (VBD said)
                              (SBAR (IN that)
                                (S
                                  (NP (EX there))
                                  (VP (VBZ is)
                                    (NP
                                      (NP (`` ``) (NN irrefutable) (NN proof) ('' ''))
                                      (CC and)
                                      (NP (`` ``) (NN evidence) ('' '')))))))))))))
                (SBAR (IN that)
                  (S
                    (NP (NNP God))
                    (VP (VBZ does)
                      (VP (VB exist)))))))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP you))
      (VP (VBP attribute)
        (S
          (VP (VBG existence)
            (NP (PRP itself))
            (PP (TO to)
              (NP (NN proof)))
            (SBAR (IN that)
              (S
                (NP (NNP God))
                (VP (VBZ exists))))))))
    (. .)))

nn(I-4, \/-1)
nn(I-4, \/-2)
nsubj(going-6, I-4)
xsubj(have-8, I-4)
aux(going-6, 'm-5)
root(ROOT-0, going-6)
aux(have-8, to-7)
xcomp(going-6, have-8)
aux(say-10, to-9)
xcomp(have-8, say-10)
advmod(say-10, no-11)
mark(said-14, because-12)
nsubj(said-14, you-13)
dep(no-11, said-14)
complm(is-17, that-15)
expl(is-17, there-16)
ccomp(said-14, is-17)
nn(proof-20, irrefutable-19)
nsubj(is-17, proof-20)
nsubj(is-17, evidence-24)
conj_and(proof-20, evidence-24)
complm(exist-29, that-26)
nsubj(exist-29, God-27)
aux(exist-29, does-28)
ccomp(have-8, exist-29)
nsubj(attribute-33, you-32)
conj_and(going-6, attribute-33)
xcomp(attribute-33, existence-34)
dobj(existence-34, itself-35)
prep_to(existence-34, proof-37)
complm(exists-40, that-38)
nsubj(exists-40, God-39)
ccomp(existence-34, exists-40)

(ROOT
  (S
    (S
      (NP
        (NP (DT That))
        (, ,)
        (PP (TO to)
          (NP (PRP me)))
        (, ,))
      (VP (VBZ is) (RB not)
        (NP (NN proof))))
    (: ;)
    (S
      (NP (DT that))
      (VP (VBZ 's)
        (ADVP (RB merely))
        (NP (DT a) (NN belief))))
    (. .)))

nsubj(proof-8, That-1)
prep_to(That-1, me-4)
cop(proof-8, is-6)
neg(proof-8, not-7)
root(ROOT-0, proof-8)
nsubj(belief-14, that-10)
cop(belief-14, 's-11)
advmod(belief-14, merely-12)
det(belief-14, a-13)
parataxis(proof-8, belief-14)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP want)
          (S
            (VP (TO to)
              (VP (VB be)
                (ADJP (JJ technical)
                  (PP (IN about)
                    (NP (PRP it))))))))))
    (, ,)
    (NP (EX there))
    (VP (VBP are)
      (ADVP
        (NP (CD two) (NNS theories))
        (RB as)
        (PP (TO to)
          (SBAR
            (WHADVP (WRB why))
            (S
              (NP (PRP we))
              (VP (VBP exist)))))))
    (. .)))

mark(want-3, If-1)
nsubj(want-3, you-2)
xsubj(technical-6, you-2)
advcl(are-11, want-3)
aux(technical-6, to-4)
cop(technical-6, be-5)
xcomp(want-3, technical-6)
prep_about(technical-6, it-8)
expl(are-11, there-10)
root(ROOT-0, are-11)
num(theories-13, two-12)
npadvmod(are-11, theories-13)
advmod(exist-18, why-16)
nsubj(exist-18, we-17)
prepc_as_to(are-11, exist-18)

(ROOT
  (S
    (NP (DT The) (JJ first) (NN theory))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBD were)
            (VP (VBN destined)
              (S
                (VP (TO to)
                  (VP (VB exist))))
              (, ,)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (MD could)
                    (VP (VB include)
                      (NP
                        (NP (NNP God))
                        (PP (IN in)
                          (NP (DT that) (NN theory)))))))))))))
    (. .)))

det(theory-3, The-1)
amod(theory-3, first-2)
nsubj(is-4, theory-3)
root(ROOT-0, is-4)
complm(destined-8, that-5)
nsubjpass(destined-8, we-6)
xsubj(exist-10, we-6)
auxpass(destined-8, were-7)
ccomp(is-4, destined-8)
aux(exist-10, to-9)
xcomp(destined-8, exist-10)
nsubj(include-14, which-12)
aux(include-14, could-13)
ccomp(destined-8, include-14)
dobj(include-14, God-15)
det(theory-18, that-17)
prep_in(God-15, theory-18)

(ROOT
  (S
    (NP (DT The) (JJ other) (NN theory))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBD were)
            (ADVP (RB simply))
            (NP
              (NP (DT the) (NN result))
              (PP (IN of)
                (NP (JJ random) (NNS situations)))
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBD created)
                    (NP (NN life))))))))))
    (. .)))

det(theory-3, The-1)
amod(theory-3, other-2)
nsubj(is-4, theory-3)
root(ROOT-0, is-4)
complm(result-10, that-5)
nsubj(result-10, we-6)
cop(result-10, were-7)
advmod(result-10, simply-8)
det(result-10, the-9)
ccomp(is-4, result-10)
nsubj(created-15, result-10)
amod(situations-13, random-12)
prep_of(result-10, situations-13)
rcmod(result-10, created-15)
dobj(created-15, life-16)

(ROOT
  (S
    (VP
      (VP (VB \/) (-RRB- -RRB-)
        (NP (NNS \/))
        (-RRB- -RRB-)
        (PP
          (NP
            (NP (PRP You))
            (SBAR
              (S
                (VP (MD ca) (RB n't)
                  (ADVP (RB really))
                  (VP (VB prove)
                    (NP
                      (NP (DT either) (NN one))
                      (PP (IN of)
                        (NP (DT those) (NNS theories)))))))))
          (IN with)
          (NP (JJ cold) (, ,) (JJ hard) (NNS facts))))
      (: ;)
      (VP
        (NP (RB not) (RB yet))
        (ADVP (IN at) (JJS least))))
    (. .)))

root(ROOT-0, \/-1)
dobj(\/-1, \/-3)
npadvmod(\/-1, You-5)
aux(prove-9, ca-6)
neg(prove-9, n't-7)
advmod(prove-9, really-8)
rcmod(You-5, prove-9)
det(one-11, either-10)
dobj(prove-9, one-11)
det(theories-14, those-13)
prep_of(one-11, theories-14)
amod(facts-19, cold-16)
amod(facts-19, hard-18)
prep_with(\/-1, facts-19)
neg(yet-22, not-21)
dep(\/-1, yet-22)
advmod(yet-22, at-23)
pobj(at-23, least-24)

(ROOT
  (S (CC And)
    (ADVP (RB furthermore))
    (, ,)
    (S
      (VP (VBG saying)
        (SBAR
          (SBAR (IN that)
            (S
              (NP (NNS things))
              (VP (VBP exist))))
          (CC and)
          (SBAR (IN that)
            (S
              (NP (NNP 's) (NNP God))
              (VP (VBZ 's)
                (VP (VBG doing))))))))
    (VP (VBZ is) (RB not)
      (NP
        (NP (NN proof))
        (, ,)
        (CONJP (CC but)
          (RB rather))
        (NP (NN belief))))
    (. .)))

advmod(proof-16, furthermore-2)
csubj(proof-16, saying-4)
complm(exist-7, that-5)
nsubj(exist-7, things-6)
ccomp(saying-4, exist-7)
complm(doing-13, that-9)
nn(God-11, 's-10)
nsubj(doing-13, God-11)
aux(doing-13, 's-12)
ccomp(saying-4, doing-13)
conj_and(exist-7, doing-13)
cop(proof-16, is-14)
neg(proof-16, not-15)
root(ROOT-0, proof-16)
conj_negcc(proof-16, belief-20)

