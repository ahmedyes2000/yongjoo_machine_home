(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (PRP you))
        (VP (VBP 've)
          (VP (VBN done)))))
    (VP
      (VP (VBZ is)
        (VP (VBN set)
          (PRT (RP up))
          (NP (DT a) (NN straw) (NN man))))
      (CC and)
      (VP (VBD knocked)
        (NP (PRP him))
        (PRT (RP down))))
    (. .)))

dobj(done-4, What-1)
nsubj(done-4, you-2)
aux(done-4, 've-3)
csubjpass(set-6, done-4)
csubjpass(knocked-12, done-4)
auxpass(set-6, is-5)
root(ROOT-0, set-6)
prt(set-6, up-7)
det(man-10, a-8)
nn(man-10, straw-9)
dobj(set-6, man-10)
conj_and(set-6, knocked-12)
dobj(knocked-12, him-13)
prt(knocked-12, down-14)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB basically))
    (VP (VBP assert) (, ,)
      (PP (IN with)
        (NP (DT no) (NN support)))
      (, ,)
      (SBAR (IN that)
        (S
          (SBAR (IN if)
            (S
              (NP (EX there))
              (VP (VBZ is)
                (NP (DT a) (NNP God)))))
          (, ,) (`` ``)
          (NP (NNS laws))
          (VP (MD would)
            (VP (VB work)
              (PP (IN in)
                (NP (DT a) (NN helter) (NN skelter) (NN manner))))))))
    (. .)))

nsubj(assert-3, You-1)
advmod(assert-3, basically-2)
root(ROOT-0, assert-3)
det(support-7, no-6)
prep_with(assert-3, support-7)
complm(work-19, that-9)
mark(is-12, if-10)
expl(is-12, there-11)
advcl(work-19, is-12)
det(God-14, a-13)
nsubj(is-12, God-14)
nsubj(work-19, laws-17)
aux(work-19, would-18)
ccomp(assert-3, work-19)
det(manner-24, a-21)
nn(manner-24, helter-22)
nn(manner-24, skelter-23)
prep_in(work-19, manner-24)

(ROOT
  (S
    (NP (EX There))
    (ADVP (RB simply))
    (VP (VBZ is)
      (NP
        (NP (DT no) (JJ rational) (NN support))
        (PP (IN for)
          (NP (PDT such) (DT an) (NN assertion)))))
    (. .)))

expl(is-3, There-1)
advmod(is-3, simply-2)
root(ROOT-0, is-3)
det(support-6, no-4)
amod(support-6, rational-5)
nsubj(is-3, support-6)
predet(assertion-10, such-8)
det(assertion-10, an-9)
prep_for(support-6, assertion-10)

(ROOT
  (S
    (ADVP (RB Therefore))
    (, ,)
    (NP (PRP you))
    (VP (VBP 're)
      (VP (VBN presented)
        (NP
          (NP (NN nothing))
          (PP (CC but)
            (NP
              (NP (DT an) (NN assertion))
              (, ,) (RB certainly) (RB not)
              (NP (DT an) (NN argument)))))))
    (. .)))

advmod(presented-5, Therefore-1)
nsubjpass(presented-5, you-3)
auxpass(presented-5, 're-4)
root(ROOT-0, presented-5)
dobj(presented-5, nothing-6)
prep(nothing-6, but-7)
det(assertion-9, an-8)
dep(but-7, assertion-9)
advmod(assertion-9, certainly-11)
neg(assertion-9, not-12)
det(argument-14, an-13)
dep(assertion-9, argument-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP stand)
      (PP (IN by)
        (NP (PRP$ my) (NN statement))))
    (. .)))

nsubj(stand-2, I-1)
root(ROOT-0, stand-2)
poss(statement-5, my-4)
prep_by(stand-2, statement-5)

