(ROOT
  (S
    (ADVP (RB Really))
    (, ,)
    (NP (DT the) (NN wager))
    (VP (VBZ is) (RB n't)
      (NP (DT a) (CD 50\/50) (NN bet)))
    (. .)))

advmod(bet-9, Really-1)
det(wager-4, the-3)
nsubj(bet-9, wager-4)
cop(bet-9, is-5)
neg(bet-9, n't-6)
det(bet-9, a-7)
num(bet-9, 50\/50-8)
root(ROOT-0, bet-9)

(ROOT
  (FRAG
    (WHNP (WDT What))
    (SBAR (IN if)
      (S
        (S
          (NP (PRP you))
          (VP (VBP pick)
            (NP (DT the) (JJ wrong) (NN god))))
        (, ,)
        (CC and)
        (S
          (S
            (NP (DT the) (JJ true) (NN god))
            (VP (VBZ is)
              (NP (DT a) (JJ jealous) (JJ spiteful) (NN one))))
          (, ,)
          (CC and)
          (S
            (NP (PRP you))
            (VP (VBP have)
              (S
                (VP (TO to)
                  (VP (VB face)
                    (NP
                      (NP (NNP Zeus))
                      (, ,)
                      (PP (IN for)
                        (NP (NN example)))
                      (, ,))
                    (PP (IN in)
                      (NP (DT the) (NN afterlife)))))))))))
    (. ?)))

dep(pick-4, What-1)
mark(pick-4, if-2)
nsubj(pick-4, you-3)
root(ROOT-0, pick-4)
det(god-7, the-5)
amod(god-7, wrong-6)
dobj(pick-4, god-7)
det(god-12, the-10)
amod(god-12, true-11)
nsubj(one-17, god-12)
cop(one-17, is-13)
det(one-17, a-14)
amod(one-17, jealous-15)
amod(one-17, spiteful-16)
conj_and(pick-4, one-17)
nsubj(have-21, you-20)
xsubj(face-23, you-20)
conj_and(pick-4, have-21)
conj_and(one-17, have-21)
aux(face-23, to-22)
xcomp(have-21, face-23)
dobj(face-23, Zeus-24)
prep_for(Zeus-24, example-27)
det(afterlife-31, the-30)
prep_in(face-23, afterlife-31)

(ROOT
  (SQ
    (VP (VB Might)
      (S
        (NP (PRP you))
        (VP (VB be)
          (ADJP (JJR better) (IN off)
            (S (RB not)
              (VP (VBG believing)
                (PP (IN in)
                  (NP
                    (NP (DT any) (NN god))
                    (, ,)
                    (CONJP (RB rather) (IN than))
                    (NP (JJ insulting) (NN god))))
                (PP (IN by)
                  (S
                    (VP (VBG believing)
                      (PP (IN in)
                        (NP (NN someone) (RB else))))))))))))
    (. ?)))

root(ROOT-0, Might-1)
nsubj(off-5, you-2)
cop(off-5, be-3)
dep(off-5, better-4)
ccomp(Might-1, off-5)
neg(believing-7, not-6)
dep(off-5, believing-7)
det(god-10, any-9)
prep_in(believing-7, god-10)
amod(god-15, insulting-14)
prep_in(believing-7, god-15)
conj_negcc(god-10, god-15)
prepc_by(believing-7, believing-17)
prep_in(believing-17, someone-19)
advmod(someone-19, else-20)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD would)
      (VP (VB be)
        (ADJP (JJ good))
        (SBAR (IN if)
          (S
            (NP (PRP you))
            (VP (MD could)
              (ADVP (RB actually))
              (VP (VB prove)
                (NP
                  (NP (PRP$ your) (NN god) (POS 's))
                  (NN existence))))))
        (, ,)
        (PP (RB instead) (IN of)
          (S
            (VP (VBG relying)
              (PP (IN on)
                (NP (JJ blind) (NN faith))))))))
    (. .)))

nsubj(good-4, It-1)
aux(good-4, would-2)
cop(good-4, be-3)
root(ROOT-0, good-4)
mark(prove-9, if-5)
nsubj(prove-9, you-6)
aux(prove-9, could-7)
advmod(prove-9, actually-8)
advcl(good-4, prove-9)
poss(god-11, your-10)
poss(existence-13, god-11)
dobj(prove-9, existence-13)
prepc_instead_of(good-4, relying-17)
amod(faith-20, blind-19)
prep_on(relying-17, faith-20)

(ROOT
  (S (CC Or)
    (ADVP (RB better))
    (S
      (ADVP (RB still))
      (, ,)
      (SBAR (IN if)
        (S
          (NP (PRP he))
          (VP (MD could)
            (VP (VB give)
              (NP (DT a) (NN sign))
              (NP (DT that))))))
      (NP (DT no) (NN one))
      (VP (MD would)
        (VP (VB be)
          (ADJP (JJ able)
            (S
              (VP (TO to)
                (VP (VB dismiss))))))))
    (. .)))

cc(able-16, Or-1)
advmod(able-16, better-2)
advmod(able-16, still-3)
mark(give-8, if-5)
nsubj(give-8, he-6)
aux(give-8, could-7)
dep(able-16, give-8)
det(sign-10, a-9)
iobj(give-8, sign-10)
dobj(give-8, that-11)
det(one-13, no-12)
nsubj(able-16, one-13)
aux(able-16, would-14)
cop(able-16, be-15)
root(ROOT-0, able-16)
aux(dismiss-18, to-17)
xcomp(able-16, dismiss-18)

