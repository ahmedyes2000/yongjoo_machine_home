(ROOT
  (S (`` ``)
    (NP
      (NP (NNP God))
      (PP (IN on)
        (NP (DT the) (JJ other) (NN hand))))
    (, ,)
    (VP (VBZ is)
      (NP
        (NP (DT an) (JJ immaterial) (NN being))
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBZ is)
              (VP (VBN comprised)
                (PP (IN of)
                  (NP (DT no) (NNS parts)))))))))
    (. .)))

nsubj(being-11, God-2)
det(hand-6, the-4)
amod(hand-6, other-5)
prep_on(God-2, hand-6)
cop(being-11, is-8)
det(being-11, an-9)
amod(being-11, immaterial-10)
root(ROOT-0, being-11)
nsubjpass(comprised-14, being-11)
auxpass(comprised-14, is-13)
rcmod(being-11, comprised-14)
det(parts-17, no-16)
prep_of(comprised-14, parts-17)

(ROOT
  (S
    (PP (IN As)
      (NP (JJ such)))
    (, ,)
    (NP (PRP He))
    (VP
      (VP (VBZ is)
        (ADJP (RB irreducibly) (JJ simple)))
      (, ,)
      (CC and)
      (ADVP (RB thus))
      (VP (VBZ does) (RB not)
        (VP (VB require)
          (NP (DT a) (NN cause)))))
    (. .)))

prep_such_as(simple-7, such-2)
nsubj(simple-7, He-4)
nsubj(require-13, He-4)
cop(simple-7, is-5)
advmod(simple-7, irreducibly-6)
root(ROOT-0, simple-7)
advmod(simple-7, thus-10)
conj_and(simple-7, thus-10)
aux(require-13, does-11)
neg(require-13, not-12)
conj_and(simple-7, require-13)
det(cause-15, a-14)
dobj(require-13, cause-15)

(ROOT
  (S ('' '')
    (NP (PRP You))
    (VP (MD might)
      (ADVP (RB as) (RB well))
      (VP (VB be)
        (NP
          (NP (NN saying))
          ('' '')
          (SBAR
            (S
              (NP (EX There))
              (VP (VBZ is)
                (NP (DT no) (NN god))))))))
    (. .) ('' '')))

nsubj(saying-7, You-2)
aux(saying-7, might-3)
advmod(well-5, as-4)
mwe(well-5, as-4)
advmod(saying-7, well-5)
cop(saying-7, be-6)
root(ROOT-0, saying-7)
expl(is-10, There-9)
rcmod(saying-7, is-10)
det(god-12, no-11)
nsubj(is-10, god-12)

