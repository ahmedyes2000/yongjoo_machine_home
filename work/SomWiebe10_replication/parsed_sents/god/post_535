(ROOT
  (S
    (S
      (ADVP (RB Here))
      (NP (PRP we))
      (VP (VBP have)
        (S
          (NP (CD 2) (NN option))
          (VP
            (VP (TO to)
              (VP (VB believe)))
            (CC or)
            (VP (RB not) (TO to)
              (VP (VB believe)))))))
    (CC and)
    (S
      (NP (DT both))
      (VP (MD ca) (RB n't)
        (VP (VB be)
          (VP (VBN proven)
            (PP (TO to)
              (NP (CD 100) (NN %)))))))
    (. .)))

advmod(have-3, Here-1)
nsubj(have-3, we-2)
root(ROOT-0, have-3)
num(option-5, 2-4)
nsubj(believe-7, option-5)
nsubj(believe-11, option-5)
aux(believe-7, to-6)
ccomp(have-3, believe-7)
neg(believe-11, not-9)
aux(believe-11, to-10)
ccomp(have-3, believe-11)
conj_or(believe-7, believe-11)
nsubjpass(proven-17, both-13)
aux(proven-17, ca-14)
neg(proven-17, n't-15)
auxpass(proven-17, be-16)
conj_and(have-3, proven-17)
num(%-20, 100-19)
prep_to(proven-17, %-20)

(ROOT
  (S
    (PP
      (ADVP (RB ____________________________________________________________))
      (IN In)
      (NP (NN case) (CD 1)))
    (: :)
    (NP (NNP God))
    (VP (VBP Do) (RB n't)
      (VP (VB Exist)))
    (. ...)))

advmod(Exist-9, ____________________________________________________________-1)
prep_in(Exist-9, case-3)
num(case-3, 1-4)
nsubj(Exist-9, God-6)
aux(Exist-9, Do-7)
neg(Exist-9, n't-8)
root(ROOT-0, Exist-9)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can)
        (VP (VB ask)
          (ADVP (RB then))
          (SBAR
            (WHNP (WP who))
            (S
              (VP (VBD created)
                (NP (NN god))))))))
    (: ...)
    (S
      (NP (NN u))
      (VP (VBP ask)
        (PP (IN for)
          (NP
            (NP (NNS evidences))
            (SBAR
              (S
                (NP (DT some))
                (ADVP (RB even))
                (VP (VBP ask)
                  (PP (IN for)
                    (NP (NNS photographs))))))))))
    (: ...)
    (S (CC but)
      (NP (DT that))
      (VP (VBZ does) (RB n't)
        (VP (VB prove)
          (S
            (NP (NN god) (NN dont))
            (VP (VB exist))))))
    (: ...)
    (S
      (NP (NN science))
      (VP (VBP say)
        (SBAR (IN that)
          (S
            (NP (NN world))
            (VP (VBD came)
              (S
                (VP (TO to)
                  (VP (VB existence)
                    (NP (JJ thru) (NN bigbang)
                      (CC and)
                      (NN life))
                    (PP (IN through)
                      (NP
                        (NP (NN evolution))
                        (PRN (-LRB- -LRB-)
                          (NP (JJ disputed) (NN theory))
                          (-RRB- -RRB-))))))))))))
    (. .)))

nsubj(ask-3, You-1)
aux(ask-3, can-2)
root(ROOT-0, ask-3)
advmod(ask-3, then-4)
nsubj(created-6, who-5)
ccomp(ask-3, created-6)
dobj(created-6, god-7)
nsubj(ask-10, u-9)
parataxis(ask-3, ask-10)
prep_for(ask-10, evidences-12)
dobj(ask-15, evidences-12)
nsubj(ask-15, some-13)
advmod(ask-15, even-14)
rcmod(evidences-12, ask-15)
prep_for(ask-15, photographs-17)
cc(prove-23, but-19)
nsubj(prove-23, that-20)
aux(prove-23, does-21)
neg(prove-23, n't-22)
parataxis(ask-3, prove-23)
nn(dont-25, god-24)
nsubj(exist-26, dont-25)
ccomp(prove-23, exist-26)
nsubj(say-29, science-28)
parataxis(ask-3, say-29)
complm(came-32, that-30)
nsubj(came-32, world-31)
xsubj(existence-34, world-31)
ccomp(say-29, came-32)
aux(existence-34, to-33)
xcomp(came-32, existence-34)
amod(bigbang-36, thru-35)
dobj(existence-34, bigbang-36)
dobj(existence-34, life-38)
conj_and(bigbang-36, life-38)
prep_through(existence-34, evolution-40)
amod(theory-43, disputed-42)
appos(evolution-40, theory-43)

(ROOT
  (S ('' '')
    (PP (IN Let)
      (S
        (NP (PRP us))
        (VP (VB give)
          (NP (NN chance))
          (NP
            (NP (DT the) (JJ unbelievable) (NN number))
            (PP (IN of)
              (NP
                (NP (NNS attempts))
                (PP (IN of)
                  (NP
                    (QP (CD eight) (CD trillion))))))))))
    (VP (VBZ tries)
      (PP (IN per)
        (NP
          (NP (JJ second))
          (PP (IN in)
            (NP (DT each) (NN set))))))
    (. !)))

nsubj(give-4, us-3)
prepc_let(tries-14, give-4)
iobj(give-4, chance-5)
det(number-8, the-6)
amod(number-8, unbelievable-7)
dobj(give-4, number-8)
prep_of(number-8, attempts-10)
number(trillion-13, eight-12)
prep_of(attempts-10, trillion-13)
root(ROOT-0, tries-14)
prep_per(tries-14, second-16)
det(set-19, each-18)
prep_in(second-16, set-19)

(ROOT
  (S
    (PP (IN At)
      (NP
        (NP (DT this) (NN speed))
        (PP (IN on)
          (NP (NN average)))))
    (NP (PRP it))
    (VP (MD would)
      (VP (VB take)
        (S
          (NP (JJ l0) (JJ raise-to) (CD 147) (NNS years))
          (VP (TO to)
            (VP (VB obtain)
              (NP
                (QP (RB just) (CD one))
                (JJ stable) (NN gene)))))))
    (. .)))

det(speed-3, this-2)
prep_at(take-8, speed-3)
prep_on(speed-3, average-5)
nsubj(take-8, it-6)
aux(take-8, would-7)
root(ROOT-0, take-8)
amod(years-12, l0-9)
amod(years-12, raise-to-10)
num(years-12, 147-11)
nsubj(obtain-14, years-12)
aux(obtain-14, to-13)
xcomp(take-8, obtain-14)
quantmod(one-16, just-15)
num(gene-18, one-16)
amod(gene-18, stable-17)
dobj(obtain-14, gene-18)

(ROOT
  (S (`` ``)
    (NP (NN u))
    (VP (VBP call)
      (NP (DT this) (NN science) (NN ??!))
      (ADVP (RB So))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (PDT both) (DT the) (NN side))
          (VP (VBP are)
            (PP (IN in)
              (S
                (VP (VBG shadows)
                  (S
                    (NP (PRP it))
                    (ADJP (JJ logical)
                      (S
                        (VP (TO to)
                          (VP (VB go)
                            (PP (IN by)
                              (SBAR
                                (WHNP (WDT that))
                                (S
                                  (VP (VBP make)
                                    (NP (DT a) (JJ little) (NN sense))))))))))))))))))
    (. .)))

nsubj(call-3, u-2)
root(ROOT-0, call-3)
det(??!-6, this-4)
nn(??!-6, science-5)
dobj(call-3, ??!-6)
advmod(call-3, So-7)
advmod(are-12, when-8)
predet(side-11, both-9)
det(side-11, the-10)
nsubj(are-12, side-11)
advcl(call-3, are-12)
prepc_in(are-12, shadows-14)
nsubj(logical-16, it-15)
xcomp(shadows-14, logical-16)
aux(go-18, to-17)
xcomp(logical-16, go-18)
nsubj(make-21, that-20)
prepc_by(go-18, make-21)
det(sense-24, a-22)
amod(sense-24, little-23)
dobj(make-21, sense-24)

(ROOT
  (S
    (VP (VB ____________________________________)
      (SBAR (CC And)
        (S
          (NP
            (NP (JJ many))
            (PP (IN of)
              (NP (DT the) (NNP Holy) (NNPS Books) (NN prediction))))
          (VP (VBZ has)
            (VP (VBN come)
              (NP (JJ true) (NNS !!!)))))))))

root(ROOT-0, ____________________________________-1)
cc(come-10, And-2)
nsubj(come-10, many-3)
det(prediction-8, the-5)
nn(prediction-8, Holy-6)
nn(prediction-8, Books-7)
prep_of(many-3, prediction-8)
aux(come-10, has-9)
ccomp(____________________________________-1, come-10)
amod(!!!-12, true-11)
dobj(come-10, !!!-12)

(ROOT
  (S (CC but)
    (PP (IN for)
      (NP (DT the) (NN bigbang)))
    (NP (DT the) (JJ first) (NN mass))
    (VP (VBD was)
      (ADVP
        (ADVP (RB neccessary))
        (CC and)
        (PP (IN for)
          (NP (NN evolution))))
      (NP
        (NP (DT the) (JJ first) (NN environment))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBD initiated)
              (NP (PRP it)))))))
    (. .)))

cc(environment-15, but-1)
det(bigbang-4, the-3)
prep_for(environment-15, bigbang-4)
det(mass-7, the-5)
amod(mass-7, first-6)
nsubj(environment-15, mass-7)
cop(environment-15, was-8)
advmod(environment-15, neccessary-9)
conj_and(neccessary-9, for-11)
advmod(environment-15, for-11)
prep_for(neccessary-9, evolution-12)
det(environment-15, the-13)
amod(environment-15, first-14)
root(ROOT-0, environment-15)
nsubj(initiated-17, environment-15)
rcmod(environment-15, initiated-17)
dobj(initiated-17, it-18)

(ROOT
  (S
    (PP (IN For)
      (NP (DT a) (JJ big) (NN bang)))
    (S
      (ADVP (RB also))
      (NP (DT a) (JJ first) (NN initiation))
      (VP (VBD was)
        (VP (VBN required))))
    (: ...)
    (S
      (NP (RB as) (NN science))
      (VP (VBP say)
        (NP (NN nothing) (NNS starts))
        (PP (IN without)
          (NP
            (NP (NN something))
            (VP (VBG starting)
              (NP (PRP it)))))))
    (CC or)
    (S
      (NP (CC nor))
      (VP (VBP do)
        (S
          (NP (PRP it))
          (VP (VB stop)
            (SBAR (IN until)
              (S
                (NP (DT some) (NN one))
                (VP (VBZ stops)
                  (NP (PRP it)))))))))
    (. .)))

det(bang-4, a-2)
amod(bang-4, big-3)
prep_for(required-10, bang-4)
advmod(required-10, also-5)
det(initiation-8, a-6)
amod(initiation-8, first-7)
nsubjpass(required-10, initiation-8)
auxpass(required-10, was-9)
root(ROOT-0, required-10)
advmod(science-13, as-12)
nsubj(say-14, science-13)
conj_or(required-10, say-14)
parataxis(required-10, say-14)
nn(starts-16, nothing-15)
dobj(say-14, starts-16)
prep_without(say-14, something-18)
partmod(something-18, starting-19)
dobj(starting-19, it-20)
nsubj(do-23, nor-22)
conj_or(required-10, do-23)
nsubj(stop-25, it-24)
ccomp(do-23, stop-25)
mark(stops-29, until-26)
det(one-28, some-27)
nsubj(stops-29, one-28)
advcl(stop-25, stops-29)
dobj(stops-29, it-30)

(ROOT
  (S
    (S
      (FRAG
        (NP
          (NP (NNP _________________________________________________) (NNP Case))
          (NP (CD 2)))
        (: :)
        (NP
          (NP (NNP God) (NNP Exist))
          (: :)
          (NP (NNS Claims))))
      (NP (DT that) (NN nothing))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN created)
            (PP (IN by)
              (NP (PRP$ its) (JJ own)))))))
    (, ,)
    (CC and)
    (S
      (PP (RB rather) (IN than)
        (S
          (VP (VBG believing)
            (SBAR (IN that)
              (S
                (NP (NNS things))
                (VP (VBD was)
                  (VP (VBD came)
                    (PP (TO to)
                      (NP (NN existence)))
                    (PP (IN by)
                      (NP (PRP$ its) (JJ own)))
                    (NP (PRP$ its) (NN logical)
                      (S
                        (VP (TO to)
                          (VP (VB believe))))))))))))
      (NP (NN god))
      (VP (VBP exist)))
    (: ...)))

nn(Case-2, _________________________________________________-1)
dep(created-13, Case-2)
dep(Case-2, 2-3)
nn(Exist-6, God-5)
dep(Case-2, Exist-6)
dep(Exist-6, Claims-8)
det(nothing-10, that-9)
nsubjpass(created-13, nothing-10)
aux(created-13, can-11)
auxpass(created-13, be-12)
root(ROOT-0, created-13)
poss(own-16, its-15)
agent(created-13, own-16)
advmod(exist-36, rather-19)
advcl(exist-36, than-20)
prepc_than(exist-36, believing-21)
complm(came-25, that-22)
nsubjpass(came-25, things-23)
auxpass(came-25, was-24)
ccomp(believing-21, came-25)
prep_to(came-25, existence-27)
poss(own-30, its-29)
agent(came-25, own-30)
poss(logical-32, its-31)
dobj(came-25, logical-32)
aux(believe-34, to-33)
infmod(logical-32, believe-34)
nsubj(exist-36, god-35)
conj_and(created-13, exist-36)

(ROOT
  (SBARQ
    (SBAR (IN Because) (IN if)
      (S
        (NP (DT a) (NN friend))
        (VP
          (VP (VBD visited)
            (NP (PRP$ my) (NN home)))
          (CC and)
          (VP
            (VP (VB see)
              (NP (PRP$ my) (JJ new) (NN computer)))
            (CC and)
            (VP (VB ask)
              (NP (PRP me) ('' ''))
              (FRAG
                (INTJ (UH Wow))))))))
    (, ,)
    (WHADVP (WRB where))
    (SQ (VBD did)
      (NP (NN u))
      (VP (VB get)
        (NP (DT that))))
    (. ?)))

mark(visited-5, Because-1)
dep(visited-5, if-2)
det(friend-4, a-3)
nsubj(visited-5, friend-4)
nsubj(see-9, friend-4)
advcl(get-22, visited-5)
poss(home-7, my-6)
dobj(visited-5, home-7)
conj_and(visited-5, see-9)
advcl(get-22, see-9)
poss(computer-12, my-10)
amod(computer-12, new-11)
dobj(see-9, computer-12)
conj_and(visited-5, ask-14)
conj_and(see-9, ask-14)
dobj(ask-14, me-15)
dep(ask-14, Wow-17)
advmod(get-22, where-19)
aux(get-22, did-20)
nsubj(get-22, u-21)
root(ROOT-0, get-22)
dobj(get-22, that-23)

(ROOT
  (S ('' '')
    (NP (NNP and))
    (VP
      (ADVP (IN if)
        (NP (CD u) (NNS i)))
      (VBP answer)
      (NP (PRP him)))
    (. ...)))

nsubj(answer-6, and-2)
advmod(answer-6, if-3)
num(i-5, u-4)
pobj(if-3, i-5)
root(ROOT-0, answer-6)
dobj(answer-6, him-7)

(ROOT
  (FRAG (`` ``)
    (FRAG
      (VP (VBN oh)
        (SBAR (IN that) (, ,)
          (S
            (S
              (NP (PRP ya))
              (ADVP (RB i))
              (VP (VBD had)
                (NP
                  (NP (DT some)
                    (NP
                      (NP (NN waste) (NNS metals))
                      (, ,)
                      (NP (NN plastic))
                      (, ,))
                    (NN silcon) (NN board) (NN etc))
                  (PP (IN in)
                    (NP (PRP$ my) (NN garage))))))
            (CC and)
            (S
              (NP (PRP it))
              (ADVP (RB gradually)
                (PP (IN in)
                  (NP (NNS years))))
              (VP (VBD evolved)
                (PP (IN into)
                  (NP
                    (NP (DT a) (NN PC))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBZ works))))))))))))
    ('' '')
    (SBAR
      (WHNP (WP what))
      (S
        (VP (MD will)
          (VP (VB be)
            (NP (DT the) (NN response))))))
    (. ?)))

root(ROOT-0, oh-2)
complm(had-7, that-3)
nsubj(had-7, ya-5)
advmod(had-7, i-6)
ccomp(oh-2, had-7)
det(etc-16, some-8)
nn(metals-10, waste-9)
nn(etc-16, metals-10)
appos(metals-10, plastic-12)
nn(etc-16, silcon-14)
nn(etc-16, board-15)
dobj(had-7, etc-16)
poss(garage-19, my-18)
prep_in(etc-16, garage-19)
nsubj(evolved-25, it-21)
advmod(evolved-25, gradually-22)
prep_in(gradually-22, years-24)
ccomp(oh-2, evolved-25)
conj_and(had-7, evolved-25)
det(PC-28, a-27)
prep_into(evolved-25, PC-28)
nsubj(works-30, PC-28)
rcmod(PC-28, works-30)
nsubj(response-36, what-32)
aux(response-36, will-33)
cop(response-36, be-34)
det(response-36, the-35)
dep(oh-2, response-36)

(ROOT
  (NP (JJ BULLSHIT) (NN right) (NNS ?!!)))

amod(?!!-3, BULLSHIT-1)
nn(?!!-3, right-2)
root(ROOT-0, ?!!-3)

(ROOT
  (S
    (NP (PRP$ Its)
      (ADJP (JJR greater))
      (NN bullshit))
    (VP (VBP say)
      (SBAR (IN that)
        (S
          (NP
            (NP (NN man))
            (PP (IN with)
              (NP
                (NP (JJ complex) (NN anatomy))
                (CC and)
                (NP (JJ high) (NN grade) (NN intelligence)))))
          (VP (VBD came)
            (PP (IN into)
              (NP (NN existence)))
            (PP (IN by)
              (NP (NN chance)
                (CC and)
                (NN probability)))))))
    (. .)))

poss(bullshit-3, Its-1)
amod(bullshit-3, greater-2)
nsubj(say-4, bullshit-3)
root(ROOT-0, say-4)
complm(came-14, that-5)
nsubj(came-14, man-6)
amod(anatomy-9, complex-8)
prep_with(man-6, anatomy-9)
amod(intelligence-13, high-11)
nn(intelligence-13, grade-12)
prep_with(man-6, intelligence-13)
conj_and(anatomy-9, intelligence-13)
ccomp(say-4, came-14)
prep_into(came-14, existence-16)
prep_by(came-14, chance-18)
prep_by(came-14, probability-20)
conj_and(chance-18, probability-20)

(ROOT
  (S
    (VP
      (VP (VB Its)
        (ADVP (RB just)))
      (CC and)
      (VP (VB escape)
        (PP (IN from)
          (NP (DT the) (JJ real) (NN scene)))))
    (: ...)))

root(ROOT-0, Its-1)
advmod(Its-1, just-2)
conj_and(Its-1, escape-4)
det(scene-8, the-6)
amod(scene-8, real-7)
prep_from(escape-4, scene-8)

