(ROOT
  (S
    (ADVP (RB goodwyne))
    (, ,)
    (S
      (ADVP (RB nay))
      (, ,)
      (NP (PRP we))
      (VP (VBP have)
        (NP (DT no) (NN reason)
          (S
            (VP (TO to)
              (VP (VB doubt)
                (SBAR (IN that)
                  (S
                    (NP (DT the) (NNS laws))
                    (VP (VBP work))))))))))
    (, ,) (IN so)
    (S
      (NP (PRP one))
      (VP (MD would)
        (VP (VB have)
          (S
            (VP (TO to)
              (VP (VB demonstrate)
                (NP (NN evidence))
                (SBAR (IN that)
                  (S
                    (NP (DT some) (NN occult) (NN force))
                    (VP (MD could)
                      (VP (VB overcome)
                        (S
                          (NP (PRP them))
                          (NP
                            (NP (DT no) (NN straw) (NN man))
                            (PP (IN at)
                              (NP (DT all)))))))))))))))
    (. .)))

advmod(have-6, goodwyne-1)
advmod(have-6, nay-3)
nsubj(have-6, we-5)
root(ROOT-0, have-6)
det(reason-8, no-7)
dobj(have-6, reason-8)
aux(doubt-10, to-9)
infmod(reason-8, doubt-10)
complm(work-14, that-11)
det(laws-13, the-12)
nsubj(work-14, laws-13)
ccomp(doubt-10, work-14)
dep(have-6, so-16)
nsubj(have-19, one-17)
xsubj(demonstrate-21, one-17)
aux(have-19, would-18)
ccomp(have-6, have-19)
aux(demonstrate-21, to-20)
xcomp(have-19, demonstrate-21)
dobj(demonstrate-21, evidence-22)
complm(overcome-28, that-23)
det(force-26, some-24)
nn(force-26, occult-25)
nsubj(overcome-28, force-26)
aux(overcome-28, could-27)
ccomp(demonstrate-21, overcome-28)
nsubj(man-32, them-29)
det(man-32, no-30)
nn(man-32, straw-31)
xcomp(overcome-28, man-32)
prep_at(man-32, all-34)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP one))
        (VP (MD could))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP they))
    (VP (VBD were)
      (PP (IN in)
        (NP (DT a) (NN helter) (NN skelter) (NN manner))))
    (. .)))

mark(could-3, If-1)
nsubj(could-3, one-2)
advcl(were-7, could-3)
advmod(were-7, then-5)
nsubj(were-7, they-6)
root(ROOT-0, were-7)
det(manner-12, a-9)
nn(manner-12, helter-10)
nn(manner-12, skelter-11)
prep_in(were-7, manner-12)

(ROOT
  (S
    (NP (PRP One))
    (VP (MD would)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB show)
              (NP (DT the) (JJ impossible))
              (SBAR (IN that)
                (S
                  (NP
                    (NP (DT the) (NN law))
                    (PP (IN of)
                      (NP (NN conservation))))
                  (VP (VBD did) (RB not)
                    (VP (VB hold)
                      (SBAR (IN before)
                        (S
                          (NP
                            (NP (DT the) (NNP Big) (NNP Bang))
                            (, ,)
                            (SBAR
                              (WHNP (WDT which))
                              (S
                                (PP (IN by)
                                  (NP (DT the) (NN way)))
                                (VP (VBZ depends)
                                  (PP (IN on)
                                    (NP
                                      (NP (DT that) (NN law))
                                      (PP (IN as)
                                        (S
                                          (VP (VBG portraying)
                                            (NP (NN quantum) (NN energy))
                                            (PP (IN before)
                                              (NP (DT the) (NNP Bang)))))))))))
                            (, ,))
                          (VP (VBP whence)
                            (SBAR
                              (S
                                (NP (PRP it))
                                (VP (VBD came))))))))))))))))
    (. .)))

nsubj(have-3, One-1)
xsubj(show-5, One-1)
aux(have-3, would-2)
root(ROOT-0, have-3)
aux(show-5, to-4)
xcomp(have-3, show-5)
det(impossible-7, the-6)
dobj(show-5, impossible-7)
complm(hold-15, that-8)
det(law-10, the-9)
nsubj(hold-15, law-10)
prep_of(law-10, conservation-12)
aux(hold-15, did-13)
neg(hold-15, not-14)
ccomp(show-5, hold-15)
mark(whence-37, before-16)
det(Bang-19, the-17)
nn(Bang-19, Big-18)
nsubj(depends-25, Bang-19)
nsubj(whence-37, Bang-19)
det(way-24, the-23)
prep_by(depends-25, way-24)
rcmod(Bang-19, depends-25)
det(law-28, that-27)
prep_on(depends-25, law-28)
prepc_as(law-28, portraying-30)
nn(energy-32, quantum-31)
dobj(portraying-30, energy-32)
det(Bang-35, the-34)
prep_before(portraying-30, Bang-35)
advcl(hold-15, whence-37)
nsubj(came-39, it-38)
ccomp(whence-37, came-39)

(ROOT
  (S
    (NP
      (NP (DT The) (NN weight))
      (PP (IN of)
        (NP
          (NP (NN evidence))
          (PP (IN from)
            (NP (NN experience))))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP
            (NP (JJ natural) (NNS laws))
            (CC and)
            (NP (NNS causes)
              (CC and)
              (NNS explanations)))
          (VP (VBP are)
            (NP (DT the) (JJ sufficient) (NN reason))))))
    (. .)))

det(weight-2, The-1)
nsubj(is-7, weight-2)
prep_of(weight-2, evidence-4)
prep_from(evidence-4, experience-6)
root(ROOT-0, is-7)
complm(reason-18, that-8)
amod(laws-10, natural-9)
nsubj(reason-18, laws-10)
conj_and(laws-10, causes-12)
nsubj(reason-18, causes-12)
conj_and(laws-10, explanations-14)
conj_and(causes-12, explanations-14)
cop(reason-18, are-15)
det(reason-18, the-16)
amod(reason-18, sufficient-17)
ccomp(is-7, reason-18)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB posit)
          (SBAR
            (S
              (NP (NNP God))
              (VP (VBZ is)
                (NP
                  (NP (DT the) (NN unimformative))
                  (CC and)
                  (NP (JJ fatuous)))))))))
    (, ,)
    (NP (NNP God))
    (VP (VBD did)
      (NP (PRP it)))
    (. !)))

aux(posit-2, To-1)
purpcl(did-11, posit-2)
nsubj(unimformative-6, God-3)
nsubj(fatuous-8, God-3)
cop(unimformative-6, is-4)
det(unimformative-6, the-5)
ccomp(posit-2, unimformative-6)
ccomp(posit-2, fatuous-8)
conj_and(unimformative-6, fatuous-8)
nsubj(did-11, God-10)
root(ROOT-0, did-11)
dobj(did-11, it-12)

(ROOT
  (S
    (NP (NN pbeaird))
    (VP (MD might)
      (VP (VB enlighten)
        (NP (PRP you))
        (ADVP (RBR further))))
    (. .)))

nsubj(enlighten-3, pbeaird-1)
aux(enlighten-3, might-2)
root(ROOT-0, enlighten-3)
dobj(enlighten-3, you-4)
advmod(enlighten-3, further-5)

