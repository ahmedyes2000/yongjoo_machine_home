(ROOT
  (S (`` ``)
    (NP (DT This))
    (VP (VBZ is)
      (NP (DT a) (JJ poorly) (JJ asked) (NN debate) (NN question)))
    (. .)))

nsubj(question-8, This-2)
cop(question-8, is-3)
det(question-8, a-4)
amod(question-8, poorly-5)
amod(question-8, asked-6)
nn(question-8, debate-7)
root(ROOT-0, question-8)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ is)
      (PP (IN like)
        (S
          (NP (PRP me))
          (VP (VBG asking)
            (NP (NN someone))
            (PP (IN from)
              (NP (NNP Ireland)))
            (SBAR (IN if)
              (S
                (NP (PRP they))
                (ADVP (RB even))
                (VP (VBP know)
                  (SBAR
                    (WHNP (WP who))
                    (S
                      (NP (NNP Vishnu)
                        (CC or)
                        (NNP Rama))
                      (VP (VBZ is)
                        (PRN (-LRB- -LRB-)
                          (NP
                            (NP (NNP God))
                            (PP (IN of)
                              (NP (NNP India))))
                          (-RRB- -RRB-))))))))))))
    (. .)))

nsubj(is-2, That-1)
root(ROOT-0, is-2)
nsubj(asking-5, me-4)
prepc_like(is-2, asking-5)
dobj(asking-5, someone-6)
prep_from(asking-5, Ireland-8)
mark(know-12, if-9)
nsubj(know-12, they-10)
advmod(know-12, even-11)
advcl(asking-5, know-12)
dobj(is-17, who-13)
nsubj(is-17, Vishnu-14)
conj_or(Vishnu-14, Rama-16)
nsubj(is-17, Rama-16)
ccomp(know-12, is-17)
dep(is-17, God-19)
prep_of(God-19, India-21)

(ROOT
  (S
    (NP (PRP$ Their))
    (VP (VBP are)
      (NP
        (NP (JJ many) (NNS religions))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBP have)
              (NP (PRP$ their) (JJ own) (NNS excuses))
              (PP (IN for)
                (NP
                  (NP (DT the) (NN cause))
                  (PP (IN of)
                    (NP (DT that) (NN event))))))))))
    (. !)))

nsubj(religions-4, Their-1)
cop(religions-4, are-2)
amod(religions-4, many-3)
root(ROOT-0, religions-4)
nsubj(have-6, religions-4)
rcmod(religions-4, have-6)
poss(excuses-9, their-7)
amod(excuses-9, own-8)
dobj(have-6, excuses-9)
det(cause-12, the-11)
prep_for(have-6, cause-12)
det(event-15, that-14)
prep_of(cause-12, event-15)

(ROOT
  (S
    (ADVP (RB Back)
      (PP (IN into)
        (NP (JJ many) (JJ ancient) (NNS religions))))
    (NP (DT a) (NN flood))
    (VP (VBD was)
      (VP (VBN caused)
        (PP (IN by)
          (NP (DT the) (NNS Gods)))))
    (. !)))

advmod(caused-9, Back-1)
amod(religions-5, many-3)
amod(religions-5, ancient-4)
prep_into(Back-1, religions-5)
det(flood-7, a-6)
nsubjpass(caused-9, flood-7)
auxpass(caused-9, was-8)
root(ROOT-0, caused-9)
det(Gods-12, the-11)
agent(caused-9, Gods-12)

(ROOT
  (S (`` ``)
    (NP (EX There))
    (VP (VBZ is)
      (NP (RB absolutely) (DT no) (NN evidence))
      (SBAR (IN that)
        (S
          (NP (DT a) (JJ great) (NN flood))
          (VP (VBD occured)
            (PP (IN on)
              (NP (NNP Earth)))))))
    (. .)))

expl(is-3, There-2)
root(ROOT-0, is-3)
advmod(evidence-6, absolutely-4)
det(evidence-6, no-5)
nsubj(is-3, evidence-6)
complm(occured-11, that-7)
det(flood-10, a-8)
amod(flood-10, great-9)
nsubj(occured-11, flood-10)
ccomp(is-3, occured-11)
prep_on(occured-11, Earth-13)

(ROOT
  (S
    (NP
      (NP (DT The) (NN reason))
      (SBAR
        (S
          (NP (JJ many) (NNS religions))
          (VP (MD would)
            (VP (VB share)
              (NP (DT this) (NN story)))))))
    (VP (VBZ is)
      (ADJP (JJR more))
      (S
        (VP (TO to)
          (VP (VB do)
            (PP (IN with)
              (NP
                (NP (NNS religions))
                (VP (VBG copying)
                  (NP
                    (NP (JJ other) (NNS religions))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP
                          (NP (NN eg))
                          (, ,)
                          (NP
                            (NP (DT the) (NN copying))
                            (PP (IN of)
                              (NP (NN christianity)))))
                        (PP (IN from)
                          (NP (NN paganism))))
                      (-RRB- -RRB-))))))))))
    (. .)))

det(reason-2, The-1)
nsubj(more-10, reason-2)
xsubj(do-12, reason-2)
amod(religions-4, many-3)
nsubj(share-6, religions-4)
aux(share-6, would-5)
rcmod(reason-2, share-6)
det(story-8, this-7)
dobj(share-6, story-8)
cop(more-10, is-9)
root(ROOT-0, more-10)
aux(do-12, to-11)
xcomp(more-10, do-12)
prep_with(do-12, religions-14)
partmod(religions-14, copying-15)
amod(religions-17, other-16)
dobj(copying-15, religions-17)
dep(religions-17, eg-19)
det(copying-22, the-21)
appos(eg-19, copying-22)
prep_of(copying-22, christianity-24)
prep_from(eg-19, paganism-26)

(ROOT
  (S ('' '')
    (S
      (NP (VBG Think))
      (PP (IN of)
        (NP (DT a) (JJ blind) (NN man))))
    (, ,)
    (CC and)
    (S
      (S
        (VP (VB ask)
          (NP (PRP him))))
      (NP (DT the) (NN question))
      (VP (VBZ does)
        (SBAR
          (S
            (NP (DT the) (NN color) (NN blue))
            (ADVP (RB really))
            (VP (VBP exist))))))
    (. ?)))

root(ROOT-0, Think-2)
dep(Think-2, of-3)
det(man-6, a-4)
amod(man-6, blind-5)
pobj(of-3, man-6)
dep(does-13, ask-9)
dobj(ask-9, him-10)
det(question-12, the-11)
nsubj(does-13, question-12)
conj_and(Think-2, does-13)
det(blue-16, the-14)
nn(blue-16, color-15)
nsubj(exist-18, blue-16)
advmod(exist-18, really-17)
ccomp(does-13, exist-18)

(ROOT
  (FRAG
    (NP (`` ``) (DT An) (JJ interesting) (NN question))
    (, ,)
    (CC but)
    (S
      (NP (PRP you))
      (ADVP (RB obviously))
      (VP (VBP have) (RB n't)
        (VP (VBN thought)
          (S
            (NP (DT this))
            (ADVP (RB through))))))
    (. .)))

det(question-4, An-2)
amod(question-4, interesting-3)
root(ROOT-0, question-4)
dep(question-4, but-6)
nsubj(thought-11, you-7)
advmod(thought-11, obviously-8)
aux(thought-11, have-9)
neg(thought-11, n't-10)
dep(question-4, thought-11)
dep(thought-11, this-12)
advmod(this-12, through-13)

(ROOT
  (S
    (S
      (VP (VBG Asking)
        (NP (DT a) (JJ blind) (NN man))
        (SBAR (IN if)
          (S
            (NP (DT the) (NN color) (NN blue))
            (VP (VBZ exists))))))
    (VP (MD will)
      (ADVP (RB normally))
      (VP (VB be)
        (VP (VBN greeted)
          (PP (IN with)
            (NP (DT a) (JJ yes) (NN answer))))))
    (. .)))

csubjpass(greeted-13, Asking-1)
det(man-4, a-2)
amod(man-4, blind-3)
dobj(Asking-1, man-4)
mark(exists-9, if-5)
det(blue-8, the-6)
nn(blue-8, color-7)
nsubj(exists-9, blue-8)
advcl(Asking-1, exists-9)
aux(greeted-13, will-10)
advmod(greeted-13, normally-11)
auxpass(greeted-13, be-12)
root(ROOT-0, greeted-13)
det(answer-17, a-15)
amod(answer-17, yes-16)
prep_with(greeted-13, answer-17)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBZ is)
      (NP (DT this)))
    (. ?)))

advmod(is-2, Why-1)
root(ROOT-0, is-2)
nsubj(is-2, this-3)

(ROOT
  (S
    (PP (IN Because)
      (NP (DT every) (JJ single) (JJ seeing) (NN person)))
    (NP (PRP he))
    (VP (VBZ has)
      (VP (VBN spoken)
        (S
          (VP (TO to)
            (VP (MD can)
              (VP (VB confirm)
                (SBAR (IN that)
                  (S
                    (NP (DT the) (NN color) (NN blue))
                    (VP (VBZ exists))))))))))
    (. .)))

det(person-5, every-2)
amod(person-5, single-3)
amod(person-5, seeing-4)
prep_because(spoken-8, person-5)
nsubj(spoken-8, he-6)
xsubj(confirm-11, he-6)
aux(spoken-8, has-7)
root(ROOT-0, spoken-8)
aux(confirm-11, to-9)
aux(confirm-11, can-10)
xcomp(spoken-8, confirm-11)
complm(exists-16, that-12)
det(blue-15, the-13)
nn(blue-15, color-14)
nsubj(exists-16, blue-15)
ccomp(confirm-11, exists-16)

(ROOT
  (S
    (NP (PRP He))
    (VP (MD can)
      (VP (VB be)
        (VP
          (VP (VBN told)
            (NP
              (NP (DT the) (NN science))
              (PP (IN behind)
                (NP (PRP it)))))
          (, ,)
          (CC and)
          (VP (VBN taught)
            (PP (IN about)
              (SBAR
                (WHADVP (WRB how))
                (S
                  (NP (NN light))
                  (VP (VBZ reflects)
                    (CC and)
                    (VBZ refracts)
                    (PP (IN from)
                      (NP (JJ different) (NNS surfaces)))))))))))
    (. .)))

nsubjpass(told-4, He-1)
nsubjpass(taught-11, He-1)
aux(told-4, can-2)
auxpass(told-4, be-3)
root(ROOT-0, told-4)
det(science-6, the-5)
dobj(told-4, science-6)
prep_behind(science-6, it-8)
conj_and(told-4, taught-11)
advmod(reflects-15, how-13)
nsubj(reflects-15, light-14)
nsubj(refracts-17, light-14)
prepc_about(taught-11, reflects-15)
prepc_about(taught-11, refracts-17)
conj_and(reflects-15, refracts-17)
amod(surfaces-20, different-19)
prep_from(reflects-15, surfaces-20)

(ROOT
  (S ('' '')
    (S
      (NP (PRP I))
      (VP (VBP 'm)
        (PP (IN from)
          (NP (DT the) (NNP UK)))))
    (CC and)
    (S
      (NP (PRP I))
      (VP (VBP know)
        (SBAR
          (WHNP (WP who))
          (S
            (NP (NNP Vishnu)
              (CC and)
              (NNP Rama))
            (VP (VBP are))))))
    (. .)))

nsubj('m-3, I-2)
root(ROOT-0, 'm-3)
det(UK-6, the-5)
prep_from('m-3, UK-6)
nsubj(know-9, I-8)
conj_and('m-3, know-9)
dobj(are-14, who-10)
nsubj(are-14, Vishnu-11)
conj_and(Vishnu-11, Rama-13)
nsubj(are-14, Rama-13)
ccomp(know-9, are-14)

(ROOT
  (S
    (ADVP (RB Now))
    (NP (NNP let) (POS 's))
    (VP (VBP consider)
      (NP (DT another) (NN scenario)))
    (. .)))

advmod(consider-4, Now-1)
nsubj(consider-4, let-2)
possessive(let-2, 's-3)
root(ROOT-0, consider-4)
det(scenario-6, another-5)
dobj(consider-4, scenario-6)

(ROOT
  (S
    (NP (DT A) (JJ blind) (NN man))
    (VP (VBZ asks)
      (NP
        (QP (CD one) (CD hundred))
        (NNS people))
      (SBAR (IN if)
        (S
          (NP (DT the) (NN color) (NN blue))
          (VP (VBZ exists)))))
    (. .)))

det(man-3, A-1)
amod(man-3, blind-2)
nsubj(asks-4, man-3)
root(ROOT-0, asks-4)
number(hundred-6, one-5)
num(people-7, hundred-6)
dobj(asks-4, people-7)
mark(exists-12, if-8)
det(blue-11, the-9)
nn(blue-11, color-10)
nsubj(exists-12, blue-11)
advcl(asks-4, exists-12)

(ROOT
  (S
    (S
      (PP (IN Of)
        (NP (DT those) (CD one) (CD hundred) (NNS people)))
      (, ,)
      (NP (DT some))
      (VP (MD will)
        (VP (VB say)
          (INTJ (UH yes)))))
    (CC and)
    (S
      (NP (DT some))
      (VP (MD will)
        (VP (VB say)
          (INTJ (UH no)))))
    (, ,)
    (SBAR (IN whilst)
      (S
        (NP (JJ many) (NNS others))
        (VP (MD will)
          (VP (VB bicker)
            (PRT (RP over))
            (SBAR
              (WHNP (RB exactly) (WDT what) (NN color))
              (S
                (NP (NN blue))
                (ADVP (RB actually))
                (VP (VBZ is))))))))
    (. .)))

det(people-5, those-2)
num(people-5, one-3)
num(people-5, hundred-4)
prep_of(say-9, people-5)
nsubj(say-9, some-7)
aux(say-9, will-8)
root(ROOT-0, say-9)
dep(say-9, yes-10)
nsubj(say-14, some-12)
aux(say-14, will-13)
conj_and(say-9, say-14)
dep(say-14, no-15)
mark(bicker-21, whilst-17)
amod(others-19, many-18)
nsubj(bicker-21, others-19)
aux(bicker-21, will-20)
dep(say-9, bicker-21)
prt(bicker-21, over-22)
advmod(color-25, exactly-23)
det(color-25, what-24)
dobj(is-28, color-25)
nsubj(is-28, blue-26)
advmod(is-28, actually-27)
ccomp(bicker-21, is-28)

(ROOT
  (S
    (PP (IN Of)
      (NP
        (NP (DT the) (NNS people))
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBP say)
              (S
                (INTJ (UH yes))
                (, ,)
                (SBAR
                  (WHADVP (WRB when))
                  (S
                    (VP (VBD asked)
                      (SBAR
                        (WHADVP (WRB how))
                        (S
                          (NP (PRP they))
                          (VP (VBP know)
                            (SBAR
                              (S
                                (NP (DT the) (NN color) (NN blue))
                                (VP (VBZ exists))))))))))
                (, ,)
                (NP (PRP they))
                (VP (MD can) (RB not)
                  (VP (VB say)
                    (PP (IN because)
                      (NP (PRP they)))))))))))
    (NP (PRP themselves))
    (VP (VBP have)
      (VP (VBN seen)
        (NP (PRP it))))
    (. .)))

det(people-3, the-2)
nsubj(say-5, people-3)
prep_of(seen-26, people-3)
rcmod(people-3, say-5)
dep(say-21, yes-6)
advmod(asked-9, when-8)
advcl(say-21, asked-9)
advmod(know-12, how-10)
nsubj(know-12, they-11)
ccomp(asked-9, know-12)
det(blue-15, the-13)
nn(blue-15, color-14)
nsubj(exists-16, blue-15)
ccomp(know-12, exists-16)
nsubj(say-21, they-18)
aux(say-21, can-19)
neg(say-21, not-20)
ccomp(say-5, say-21)
prep_because(say-21, they-23)
nsubj(seen-26, themselves-24)
aux(seen-26, have-25)
root(ROOT-0, seen-26)
dobj(seen-26, it-27)

(ROOT
  (S
    (S
      (NP (PRP They))
      (VP (MD can)
        (ADVP (RB only))
        (VP (VB answer)
          (SBAR (IN that)
            (S
              (NP
                (NP (NNS lots))
                (PP (IN of)
                  (NP
                    (NP (NNS people))
                    (SBAR
                      (S
                        (NP (PRP they))
                        (VP (VBD asked)))))))
              (VP (VBP have)
                (VP (VBN seen)
                  (NP (PRP it)))))))))
    (, ,)
    (CC and)
    (S
      (NP
        (NP (JJ blue) (NNS sounds))
        (PP (IN like)
          (NP
            (NP (DT a)
              (ADJP (RB really) (JJ nice))
              (NN color))
            (SBAR (IN so)
              (S
                (NP (PRP they))
                (ADVP (RB really))
                (VP
                  (ADVP (RB really))
                  (VBP hope)
                  (SBAR (IN that)
                    (S
                      (NP (PRP it))
                      (VP (VBZ does))))))))))
      (VP (VBP exist)))
    (. .)))

nsubj(answer-4, They-1)
aux(answer-4, can-2)
advmod(answer-4, only-3)
root(ROOT-0, answer-4)
complm(seen-12, that-5)
nsubj(seen-12, lots-6)
prep_of(lots-6, people-8)
dobj(asked-10, people-8)
nsubj(asked-10, they-9)
rcmod(people-8, asked-10)
aux(seen-12, have-11)
ccomp(answer-4, seen-12)
dobj(seen-12, it-13)
amod(sounds-17, blue-16)
nsubj(exist-31, sounds-17)
det(color-22, a-19)
advmod(nice-21, really-20)
amod(color-22, nice-21)
prep_like(sounds-17, color-22)
mark(hope-27, so-23)
nsubj(hope-27, they-24)
advmod(hope-27, really-25)
advmod(hope-27, really-26)
dep(color-22, hope-27)
complm(does-30, that-28)
nsubj(does-30, it-29)
ccomp(hope-27, does-30)
conj_and(answer-4, exist-31)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP wonder)
      (SBAR (IN if)
        (S
          (NP (DT the) (JJ blind) (NN man))
          (VP (MD would)
            (VP (VB be)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB give)
                      (NP (PRP you))
                      (NP (PDT such) (DT a) (JJ sure) (NN answer))
                      (PP (IN under)
                        (NP (DT these) (NNS conditions))))))))))))
    (. ?)))

nsubj(wonder-2, I-1)
root(ROOT-0, wonder-2)
mark(able-9, if-3)
det(man-6, the-4)
amod(man-6, blind-5)
nsubj(able-9, man-6)
aux(able-9, would-7)
cop(able-9, be-8)
advcl(wonder-2, able-9)
aux(give-11, to-10)
xcomp(able-9, give-11)
iobj(give-11, you-12)
predet(answer-16, such-13)
det(answer-16, a-14)
amod(answer-16, sure-15)
dobj(give-11, answer-16)
det(conditions-19, these-18)
prep_under(give-11, conditions-19)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (MD 'll)
        (VP (VB give)
          (NP (PRP you))
          (NP (DT a) (NN hint)))))
    (: ;)
    (S
      (NP (PRP they))
      (VP (VBP 're) (RB not)
        (NP
          (NP (DT the) (NNS god\/s))
          (PP (IN of)
            (NP (NNP India))))))
    (. .)))

nsubj(give-3, I-1)
aux(give-3, 'll-2)
root(ROOT-0, give-3)
iobj(give-3, you-4)
det(hint-6, a-5)
dobj(give-3, hint-6)
nsubj(god\/s-12, they-8)
cop(god\/s-12, 're-9)
neg(god\/s-12, not-10)
det(god\/s-12, the-11)
parataxis(give-3, god\/s-12)
prep_of(god\/s-12, India-14)

(ROOT
  (S ('' '')
    (PP (IN Without)
      (NP
        (NP (DT a) (NN doubt))
        (SBAR
          (S
            (NP (PRP I))
            (VP (VBP do) (RB not)
              (VP (VB want)
                (S
                  (VP (TO to)
                    (VP (VB believe)
                      (SBAR (IN that)
                        (WHADVP (WRB when))
                        (S
                          (NP (PRP I))
                          (VP (VBP die)
                            (NP (DT the) (NN screen))))))))))))))
    (VP (VBZ goes)
      (ADJP (JJ black)
        (PP (IN like)
          (NP (PRP$ my) (NN TV))))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (DT the) (NN power))
          (VP (VBZ goes)
            (PRT (RP out))))))
    (. .)))

det(doubt-4, a-3)
dobj(want-8, doubt-4)
prep_without(goes-17, doubt-4)
nsubj(want-8, I-5)
xsubj(believe-10, I-5)
aux(want-8, do-6)
neg(want-8, not-7)
rcmod(doubt-4, want-8)
aux(believe-10, to-9)
xcomp(want-8, believe-10)
complm(die-14, that-11)
advmod(die-14, when-12)
nsubj(die-14, I-13)
ccomp(believe-10, die-14)
det(screen-16, the-15)
dobj(die-14, screen-16)
root(ROOT-0, goes-17)
acomp(goes-17, black-18)
poss(TV-21, my-20)
prep_like(black-18, TV-21)
advmod(goes-25, when-22)
det(power-24, the-23)
nsubj(goes-25, power-24)
advcl(goes-17, goes-25)
prt(goes-25, out-26)

(ROOT
  (S
    (SBAR (IN That)
      (S
        (NP (PRP I))
        (VP (VBP refuse)
          (S
            (VP (TO to)
              (VP (VB believe)))))))
    (, ,)
    (NP (PRP I))
    (VP (VBP want)
      (S
        (VP (TO to)
          (VP (VB think)
            (SBAR
              (SBAR (IN that)
                (S
                  (NP (PRP I))
                  (VP (VBP stand)
                    (PP (IN in)
                      (NP
                        (NP (NN front))
                        (PP (IN of)
                          (NP
                            (NP (DT the) (JJ golden) (NNS gates))
                            (PP (IN of)
                              (NP (NN heaven))))))))))
              (CC and)
              (SBAR (IN that)
                (S
                  (NP (DT the) (NNS doors))
                  (VP (VBP open)
                    (PP (TO to)
                      (NP (PRP me)))))))))))
    (. .) ('' '')))

complm(refuse-3, That-1)
nsubj(refuse-3, I-2)
xsubj(believe-5, I-2)
ccomp(want-8, refuse-3)
aux(believe-5, to-4)
xcomp(refuse-3, believe-5)
nsubj(want-8, I-7)
xsubj(think-10, I-7)
root(ROOT-0, want-8)
aux(think-10, to-9)
xcomp(want-8, think-10)
complm(stand-13, that-11)
nsubj(stand-13, I-12)
ccomp(think-10, stand-13)
det(gates-19, the-17)
amod(gates-19, golden-18)
prep_in_front_of(stand-13, gates-19)
prep_of(gates-19, heaven-21)
complm(open-26, that-23)
det(doors-25, the-24)
nsubj(open-26, doors-25)
ccomp(think-10, open-26)
conj_and(stand-13, open-26)
prep_to(open-26, me-28)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP 're) (RB not)
        (VP (VBG arguing)
          (SBAR (IN whether)
            (CC or)
            (RB not)
            (S
              (NP (NN god))
              (VP (VBZ exists)))))))
    (: ;)
    (S
      (NP (PRP you))
      (VP (VBP 're)
        (VP (VBG arguing)
          (SBAR (IN whether)
            (CC or)
            (RB not)
            (S
              (NP (PRP you))
              (VP (VBP want)
                (NP (NN god))
                (S
                  (VP (TO to)
                    (VP (VB exist))))))))))
    (. .)))

nsubj(arguing-4, You-1)
aux(arguing-4, 're-2)
neg(arguing-4, not-3)
root(ROOT-0, arguing-4)
complm(exists-9, whether-5)
ccomp(arguing-4, not-7)
conj_or(exists-9, not-7)
nsubj(exists-9, god-8)
ccomp(arguing-4, exists-9)
nsubj(arguing-13, you-11)
aux(arguing-13, 're-12)
parataxis(arguing-4, arguing-13)
complm(want-18, whether-14)
ccomp(arguing-13, not-16)
conj_or(want-18, not-16)
nsubj(want-18, you-17)
ccomp(arguing-13, want-18)
dobj(want-18, god-19)
aux(exist-21, to-20)
xcomp(want-18, exist-21)

(ROOT
  (S
    (ADVP (RB Clearly))
    (NP (PRP you))
    (VP (VBP do) (, ,)
      (PP (IN as)
        (NP
          (NP (DT the) (NN life))
          (SBAR
            (S
              (NP (PRP you))
              (ADVP (RB currently))
              (VP (VBP have)
                (ADVP (RB obviously))
                (VP (VBZ is) (RB n't)
                  (ADJP (JJ enough)
                    (PP (IN for)
                      (NP (PRP you)))))))))))
    (. .)))

advmod(do-3, Clearly-1)
nsubj(do-3, you-2)
root(ROOT-0, do-3)
det(life-7, the-6)
prep_as(do-3, life-7)
dobj(enough-14, life-7)
nsubj(enough-14, you-8)
advmod(enough-14, currently-9)
aux(enough-14, have-10)
advmod(enough-14, obviously-11)
cop(enough-14, is-12)
neg(enough-14, n't-13)
rcmod(life-7, enough-14)
prep_for(enough-14, you-16)

(ROOT
  (S
    (S
      (VP (VBG Wanting)
        (NP (NN something))
        (S
          (VP (TO to)
            (VP (VB happen))))))
    (VP (VBZ does) (RB n't)
      (VP (VB make)
        (NP (PRP it))
        (ADVP (RB so))
        (, ,)
        (ADVP (RB unfortunately))))
    (. .)))

csubj(make-7, Wanting-1)
dobj(Wanting-1, something-2)
aux(happen-4, to-3)
xcomp(Wanting-1, happen-4)
aux(make-7, does-5)
neg(make-7, n't-6)
root(ROOT-0, make-7)
dobj(make-7, it-8)
advmod(make-7, so-9)
advmod(make-7, unfortunately-11)

(ROOT
  (S ('' '')
    (S
      (NP (PRP We))
      (VP (MD can)
        (VP (VB look)
          (PRT (RP back))
          (PP (IN into)
            (NP (NN history))))))
    (CC and)
    (S
      (NP (PRP we))
      (VP (MD can)
        (VP (VB find)
          (NP (NNS flaws))
          (PP (IN in)
            (NP (DT the) (NNP Bible))))))
    (. .)))

nsubj(look-4, We-2)
aux(look-4, can-3)
root(ROOT-0, look-4)
prt(look-4, back-5)
prep_into(look-4, history-7)
nsubj(find-11, we-9)
aux(find-11, can-10)
conj_and(look-4, find-11)
dobj(find-11, flaws-12)
det(Bible-15, the-14)
prep_in(find-11, Bible-15)

(ROOT
  (NP
    (NP
      (NP (DT The) (NN flood))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBP betook)
            (NP (DT the) (NN Earth))))))
    (NP
      (NP (DT the) (NN flood))
      (SBAR (IN that)
        (S
          (NP (NNP Noah))
          (VP (VBD had)
            (VP (VBN built)
              (NP (DT an) (NNP Arc))
              (PP (IN for)))))))
    (. .)))

det(flood-2, The-1)
root(ROOT-0, flood-2)
nsubj(betook-4, flood-2)
rcmod(flood-2, betook-4)
det(Earth-6, the-5)
dobj(betook-4, Earth-6)
det(flood-8, the-7)
dep(flood-2, flood-8)
complm(built-12, that-9)
nsubj(built-12, Noah-10)
aux(built-12, had-11)
dep(flood-8, built-12)
det(Arc-14, an-13)
dobj(built-12, Arc-14)
prep(built-12, for-15)

