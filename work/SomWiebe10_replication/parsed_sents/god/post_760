(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (POS 's))
        (VP (VB play)
          (NP (PRP$ your) (NN game))
          (, ,)
          (S
            (VP (VBG shall)
              (NP (PRP we)))))))
    (: ...)))

root(ROOT-0, Let-1)
nsubj(play-3, 's-2)
ccomp(Let-1, play-3)
poss(game-5, your-4)
dobj(play-3, game-5)
partmod(play-3, shall-7)
xcomp(play-3, shall-7)
dobj(shall-7, we-8)

(ROOT
  (S
    (SBAR
      (S
        (NP (NNP -RRB-))
        (ADVP (IN So) (RB here))
        (VP (VBZ 's)
          (PRN
            (NP
              (NP (DT the) (NN situation))
              (: :)
              (NP (NNP -)))
            (-RRB- -RRB-)))))
    (NP (PRP You))
    (VP (VBP live)
      (NP
        (NP (DT a) (NN life))
        (PP (IN of)
          (NP
            (NP
              (NP (NNP :))
              (PRN (: --)
                (NP
                  (NP (JJ -RRB-) (NN sex))
                  (: --)
                  (NP (JJ -RRB-) (NNS drugs)))
                (: --))
              (-RRB- -RRB-))
            (ADJP (JJ partyingAlright))))))
    (: ...)))

advmod('s-4, So-2)
advmod(So-2, here-3)
dep(live-11, 's-4)
det(situation-6, the-5)
dep('s-4, situation-6)
nsubj(live-11, You-10)
det(life-13, a-12)
dobj(live-11, life-13)
prep(life-13, of-14)
dep(:-15, sex-18)
dep(sex-18, drugs-21)
amod(:-15, partyingAlright-24)

(ROOT
  (S
    (ADVP (RB Nothing))
    (, ,)
    (NP (PRP you))
    (ADVP (RB just))
    (VP (VBD made)
      (SBAR
        (S
          (NP (PRP me))
          (VP (VBP assume)
            (SBAR (IN that)
              (S
                (NP (PRP I))
                (VP (VBP 'm)
                  (ADJP (JJ dead)))))))))
    (. .)))

advmod(made-5, Nothing-1)
nsubj(made-5, you-3)
advmod(made-5, just-4)
root(ROOT-0, made-5)
nsubj(assume-7, me-6)
ccomp(made-5, assume-7)
complm(dead-11, that-8)
nsubj(dead-11, I-9)
cop(dead-11, 'm-10)
ccomp(assume-7, dead-11)

(ROOT
  (S
    (NP
      (NP (NN Part))
      (PP (IN of)
        (S
          (VP (VBG living)
            (PP (IN for)
              (NP (NN something)))))))
    (VP (VBZ is)
      (VP (VBG being)
        (ADJP (JJ alive))))
    (. .)))

nsubj(alive-8, Part-1)
prepc_of(Part-1, living-3)
prep_for(living-3, something-5)
aux(alive-8, is-6)
cop(alive-8, being-7)
root(ROOT-0, alive-8)

(ROOT
  (S
    (S
      (NP (JJ Dead) (NNS things))
      (VP (VBP are) (RB n't)
        (ADJP (JJ alive))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (NP
        (NP (NN part))
        (PP (IN of)
          (NP
            (NP (PRP it) (POS 's))
            (NN definition)))))
    (. .)))

amod(things-2, Dead-1)
nsubj(alive-5, things-2)
cop(alive-5, are-3)
neg(alive-5, n't-4)
ccomp(part-9, alive-5)
nsubj(part-9, it-7)
cop(part-9, 's-8)
root(ROOT-0, part-9)
poss(definition-13, it-11)
prep_of(part-9, definition-13)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ
      (VP (MD would)
        (VP (VB be)
          (NP
            (NP (DT the) (NN meaning))
            (PP (IN of)
              (NP
                (NP (NN life))
                (PP (IN for)
                  (NP (PRP you)))))))))
    (. ?)))

nsubj(meaning-5, What-1)
aux(meaning-5, would-2)
cop(meaning-5, be-3)
det(meaning-5, the-4)
root(ROOT-0, meaning-5)
prep_of(meaning-5, life-7)
prep_for(life-7, you-9)

(ROOT
  (S
    (NP (JJ Dead) (NNS things))
    (VP (MD can) (RB not)
      (VP (VB know)
        (NP
          (NP (DT the) (NN meaning))
          (PP (IN of)
            (NP (NN anything))))
        (, ,)
        (SBAR (IN because)
          (S
            (NP (PRP they))
            (VP (VBP are) (RB not)
              (ADJP (JJ conscious)))))))
    (. .)))

amod(things-2, Dead-1)
nsubj(know-5, things-2)
aux(know-5, can-3)
neg(know-5, not-4)
root(ROOT-0, know-5)
det(meaning-7, the-6)
dobj(know-5, meaning-7)
prep_of(meaning-7, anything-9)
mark(conscious-15, because-11)
nsubj(conscious-15, they-12)
cop(conscious-15, are-13)
neg(conscious-15, not-14)
advcl(know-5, conscious-15)

(ROOT
  (S
    (NP (DT The) (NN question))
    (VP (MD would) (RB n't)
      (VP (VB be)
        (ADJP (JJ applicable)
          (PP (TO to)
            (NP (PRP me))))
        (ADVP (DT either) (IN though))
        (, ,)
        (SBAR (IN because)
          (S
            (NP (PRP you))
            (VP (VBP address)
              (NP (PRP me))
              (PP (IN as) (`` ``)
                (NP (PRP you))
                ('' ''))
              (, ,)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBZ is)
                    (NP
                      (NP (DT the) (NN way))
                      (SBAR
                        (S
                          (NP (PRP you))
                          (VP (MD would)
                            (VP (VB address)
                              (NP
                                (NP (DT a) (JJ conscious) (NN being))
                                (SBAR
                                  (WHNP (WDT that))
                                  (S
                                    (VP (VBZ is)
                                      (ADJP (JJ aware)
                                        (PP (IN of)
                                          (NP (PRP itself))))
                                      (PP (IN as)
                                        (NP
                                          (NP (DT a) (NN component))
                                          (PP (IN of)
                                            (NP
                                              (NP (PRP it) (POS 's))
                                              (NN environment))))))))))))))))))))))
    (. .)))

det(question-2, The-1)
nsubj(applicable-6, question-2)
aux(applicable-6, would-3)
neg(applicable-6, n't-4)
cop(applicable-6, be-5)
root(ROOT-0, applicable-6)
prep_to(applicable-6, me-8)
dep(though-10, either-9)
advmod(applicable-6, though-10)
mark(address-14, because-12)
nsubj(address-14, you-13)
advcl(applicable-6, address-14)
dobj(address-14, me-15)
prep_as(address-14, you-18)
nsubj(way-24, which-21)
cop(way-24, is-22)
det(way-24, the-23)
dep(address-14, way-24)
nsubj(address-27, you-25)
aux(address-27, would-26)
rcmod(way-24, address-27)
det(being-30, a-28)
amod(being-30, conscious-29)
dobj(address-27, being-30)
nsubj(aware-33, being-30)
cop(aware-33, is-32)
rcmod(being-30, aware-33)
prep_of(aware-33, itself-35)
det(component-38, a-37)
prep_as(aware-33, component-38)
poss(environment-42, it-40)
prep_of(component-38, environment-42)

(ROOT
  (S
    (PP (IN In)
      (NP (NN fact)))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (ADJP (JJ odd))
      (SBAR (CC but)
        (S
          (NP (PRP you))
          (VP (VBP 've)
            (VP (VBN been)
              (VP (VBG calling)
                (S (`` ``)
                  (NP (PRP you))
                  ('' '')
                  (PP (IN since)
                    (NP (PRP$ my) (NN death))))
                (SBAR (RB as) (IN though)
                  (S
                    (NP (PRP I))
                    (VP (VBD was)
                      (ADVP (RB still))
                      (ADJP (JJ alive))
                      (, ,)
                      (SBAR (RB even) (IN though)
                        (S
                          (NP (PRP you))
                          (VP (VBD were)
                            (NP
                              (NP (DT the) (NN one))
                              (SBAR
                                (WHNP (WDT that))
                                (S
                                  (VP (VBD claimed)
                                    (SBAR
                                      (S
                                        (NP (PRP I))
                                        (VP (VBD was)
                                          (ADJP (JJ dead)))))))))))))))))))))
    (. .)))

prep_in(odd-6, fact-2)
nsubj(odd-6, it-4)
cop(odd-6, 's-5)
root(ROOT-0, odd-6)
cc(calling-11, but-7)
nsubj(calling-11, you-8)
aux(calling-11, 've-9)
aux(calling-11, been-10)
ccomp(odd-6, calling-11)
dep(calling-11, you-13)
dep(you-13, since-15)
poss(death-17, my-16)
pobj(since-15, death-17)
advmod(alive-23, as-18)
dep(alive-23, though-19)
nsubj(alive-23, I-20)
cop(alive-23, was-21)
advmod(alive-23, still-22)
ccomp(calling-11, alive-23)
advmod(one-30, even-25)
dep(one-30, though-26)
nsubj(one-30, you-27)
cop(one-30, were-28)
det(one-30, the-29)
ccomp(alive-23, one-30)
nsubj(claimed-32, one-30)
rcmod(one-30, claimed-32)
nsubj(dead-35, I-33)
cop(dead-35, was-34)
ccomp(claimed-32, dead-35)

(ROOT
  (SQ (VBZ Is)
    (NP (PRP it))
    (NP
      (NP (PRP$ our) (NN fault))
      (SBAR (IN that)
        (S
          (NP (PRP you))
          (VP (VBP assume)
            (SBAR
              (S
                (NP (DT a) (JJ dead) (NN body))
                (VP (VBZ possesses)
                  (NP (DT the) (NN capability)
                    (S
                      (VP (TO to)
                        (VP (VB answer)
                          (NP (NNS questions)))))))))))))
    (. ?)))

cop(fault-4, Is-1)
nsubj(fault-4, it-2)
poss(fault-4, our-3)
root(ROOT-0, fault-4)
complm(assume-7, that-5)
nsubj(assume-7, you-6)
dep(fault-4, assume-7)
det(body-10, a-8)
amod(body-10, dead-9)
nsubj(possesses-11, body-10)
ccomp(assume-7, possesses-11)
det(capability-13, the-12)
dobj(possesses-11, capability-13)
aux(answer-15, to-14)
infmod(capability-13, answer-15)
dobj(answer-15, questions-16)

(ROOT
  (S (: ;)
    (S
      (VP (VB PIn)
        (NP (DT all) (NN seriousness))
        (ADVP (RB though))))
    (, ,)
    (NP (PRP you))
    (VP (VBP 're)
      (VP (VBG asking)
        (NP (DT the) (JJ wrong) (NNS questions))))
    (. .)))

parataxis(asking-9, PIn-2)
det(seriousness-4, all-3)
dobj(PIn-2, seriousness-4)
advmod(PIn-2, though-5)
nsubj(asking-9, you-7)
aux(asking-9, 're-8)
root(ROOT-0, asking-9)
det(questions-12, the-10)
amod(questions-12, wrong-11)
dobj(asking-9, questions-12)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP you))
        (VP (VBP come)
          (PP (TO to)
            (NP
              (NP (DT a) (JJ middle) (NN ground))
              (PP (IN for)
                (NP (NN discussion))))))))
    (NP (PRP you))
    (VP (MD should)
      (VP (VB be)
        (ADJP (JJ ready) (RB enough)
          (S
            (VP (TO to)
              (VP (VB know)
                (SBAR (IN that)
                  (S
                    (NP (EX there))
                    (VP (VBP are)
                      (NP
                        (NP (NNS answers))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (VBP are)
                              (PP (IN unlike)
                                (NP (PRP$ your) (JJ own))))))))))))))))
    (. .)))

advmod(come-3, When-1)
nsubj(come-3, you-2)
advcl(ready-13, come-3)
det(ground-7, a-5)
amod(ground-7, middle-6)
prep_to(come-3, ground-7)
prep_for(ground-7, discussion-9)
nsubj(ready-13, you-10)
aux(ready-13, should-11)
cop(ready-13, be-12)
root(ROOT-0, ready-13)
advmod(ready-13, enough-14)
aux(know-16, to-15)
xcomp(ready-13, know-16)
complm(are-19, that-17)
expl(are-19, there-18)
ccomp(know-16, are-19)
nsubj(are-19, answers-20)
nsubj(are-22, answers-20)
rcmod(answers-20, are-22)
poss(own-25, your-24)
prep_unlike(are-22, own-25)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is) (RB n't)
      (NP (DT a) (NN place))
      (SBAR (IN for)
        (S
          (NP (PRP you))
          (VP (TO to)
            (VP (VB preach)
              (PP (TO to)
                (NP (NN everyone))))))))
    (. .)))

nsubj(place-5, This-1)
cop(place-5, is-2)
neg(place-5, n't-3)
det(place-5, a-4)
root(ROOT-0, place-5)
mark(preach-9, for-6)
nsubj(preach-9, you-7)
aux(preach-9, to-8)
advcl(place-5, preach-9)
xcomp(place-5, preach-9)
prep_to(preach-9, everyone-11)

(ROOT
  (S
    (VP (VBG -RRB-)
      (SBAR
        (S
          (NP (PRP You))
          (VP (VBP continue)
            (S
              (VP (TO to)
                (VP (VB live)
                  (PP (IN without)
                    (NP (NNP GodAlright))))))))))
    (: ...)))

nsubj(continue-3, You-2)
xsubj(live-5, You-2)
root(ROOT-0, continue-3)
aux(live-5, to-4)
xcomp(continue-3, live-5)
prep_without(live-5, GodAlright-7)

(ROOT
  (S
    (ADVP (RB -RRB-))
    (NP (PRP You))
    (VP (VBP die))
    (. .)))

nsubj(die-3, You-2)
root(ROOT-0, die-3)

(ROOT
  (X (JJ Ok) (. .) (NNP -RRB-)))

root(ROOT-0, Ok-1)

(ROOT
  (X
    (ADVP (RB Now))
    (NP (WP what))
    (. ?)))

dep(what-2, Now-1)
root(ROOT-0, what-2)

(ROOT
  (S
    (PP (VBG According)
      (PP (TO to)
        (NP (NN observation))))
    (, ,)
    (NP (DT the) (NN body))
    (VP (VBZ decomposes))
    (. .)))

prepc_according_to(decomposes-7, to-2)
pobj(decomposes-7, observation-3)
det(body-6, the-5)
nsubj(decomposes-7, body-6)
root(ROOT-0, decomposes-7)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBZ rot)
      (PP (IN in)
        (NP (DT the) (NN ground))))
    (. ?)))

nsubj(rot-2, You-1)
root(ROOT-0, rot-2)
det(ground-5, the-4)
prep_in(rot-2, ground-5)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ depends)
      (PP (IN on)
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (PRP you))
            (VP (VBD put)
              (NP (DT the) (NN body))
              (, ,)
              (SBAR
                (SBAR
                  (S
                    (NP (PRP I))
                    (VP (VBP guess))))
                (, ,)
                (CC or)
                (SBAR
                  (WHADVP (WRB where))
                  (S
                    (NP (PRP you))
                    (VP (VBP die))))))))))
    (. .)))

nsubj(depends-2, It-1)
root(ROOT-0, depends-2)
advmod(put-6, where-4)
nsubj(put-6, you-5)
prepc_on(depends-2, put-6)
det(body-8, the-7)
dobj(put-6, body-8)
nsubj(guess-11, I-10)
dep(put-6, guess-11)
advmod(die-16, where-14)
nsubj(die-16, you-15)
dep(put-6, die-16)
conj_or(guess-11, die-16)

(ROOT
  (S
    (NP (JJS Most) (NNS people))
    (VP (VBP do) (RB n't)
      (VP (VB die)
        (PP (IN in)
          (NP (DT the) (NN ground)))))
    (. .)))

amod(people-2, Most-1)
nsubj(die-5, people-2)
aux(die-5, do-3)
neg(die-5, n't-4)
root(ROOT-0, die-5)
det(ground-8, the-7)
prep_in(die-5, ground-8)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB live)
              (PP (IN for)
                (NP (RB then))))))))
    (. ?)))

dep(have-4, What-1)
aux(have-4, do-2)
nsubj(have-4, you-3)
xsubj(live-6, you-3)
root(ROOT-0, have-4)
aux(live-6, to-5)
xcomp(have-4, live-6)
prep(live-6, for-7)
pobj(for-7, then-8)

