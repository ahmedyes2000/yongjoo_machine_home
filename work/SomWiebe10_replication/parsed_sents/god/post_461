(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (VP (VBP let)
      (PRN
        (S
          (NP (PRP me))
          (VP (VBP say)
            (VP (VB thank)
              (NP (PRP you))
              (PP (IN for)
                (S
                  (VP (VBG leaving)
                    (NP (DT a) (NN response))
                    (PP (RB instead) (IN of)
                      (S
                        (ADVP (RB simply))
                        (VP (VBG voting)
                          (NP (PRP me))
                          (PRT (RP down))
                          (PP (IN like)
                            (NP
                              (NP (DT the) (NN rest))
                              (PP (IN of)
                                (NP (DT these) (NNS jerks))))))))
                    (: :)))))))
        (-RRB- -RRB-))
      (NP (RB Now))
      (ADVP (RB then)))
    (: ...)))

advmod(let-3, First-1)
root(ROOT-0, let-3)
nsubj(say-5, me-4)
parataxis(let-3, say-5)
xcomp(say-5, thank-6)
dobj(thank-6, you-7)
prepc_for(thank-6, leaving-9)
det(response-11, a-10)
dobj(leaving-9, response-11)
advmod(voting-15, simply-14)
prepc_instead_of(leaving-9, voting-15)
dobj(voting-15, me-16)
prt(voting-15, down-17)
det(rest-20, the-19)
prep_like(voting-15, rest-20)
det(jerks-23, these-22)
prep_of(rest-20, jerks-23)
dobj(let-3, Now-26)
advmod(let-3, then-27)

(ROOT
  (S ('' '')
    (S
      (SBAR
        (WHADVP (WRB How))
        (S
          (VP (VBP do))))
      (NP (PRP you))
      (VP (VBP suppose)))
    (PRN
      (NP (DT the) (NNP Big) (NNP Bang))
      (VP (VBD came)))
    (S
      (NP (TO to))
      (VP (VBP be)))
    (. ?)))

advmod(do-3, How-2)
dep(suppose-5, do-3)
nsubj(suppose-5, you-4)
root(ROOT-0, suppose-5)
det(Bang-8, the-6)
nn(Bang-8, Big-7)
nsubj(came-9, Bang-8)
dep(suppose-5, came-9)
nsubj(be-11, to-10)
ccomp(suppose-5, be-11)

(ROOT
  (NP ('' '')
    (CC And)
    (NP
      (NP (WP what))
      (VP (IN about)
        (VP (VBZ miracles))))
    (. ?)))

cc(what-3, And-2)
root(ROOT-0, what-3)
dep(miracles-5, about-4)
dep(what-3, miracles-5)

(ROOT
  (S (`` ``)
    (NP (DT A) (`` ``) (NN miracle) ('' ''))
    (VP (VBZ is)
      (ADVP (RB just))
      (NP
        (NP (NN something))
        (SBAR
          (S
            (NP (PRP we))
            (VP (VBP have) (RB n't)
              (VP (VBN found)
                (NP
                  (NP (DT the) (NN cause))
                  (PP (IN of)
                    (NP (RB yet))))))))))
    (. .)))

det(miracle-4, A-2)
nsubj(something-8, miracle-4)
cop(something-8, is-6)
advmod(something-8, just-7)
root(ROOT-0, something-8)
nsubj(found-12, we-9)
aux(found-12, have-10)
neg(found-12, n't-11)
rcmod(something-8, found-12)
det(cause-14, the-13)
dobj(found-12, cause-14)
prep(cause-14, of-15)
pobj(of-15, yet-16)

(ROOT
  (SQ (VBP Do)
    (NP (PRP you))
    (VP (VB have)
      (NP (DT any) (JJ particular) (NNS examples)))
    (. ?)))

aux(have-3, Do-1)
nsubj(have-3, you-2)
root(ROOT-0, have-3)
det(examples-6, any-4)
amod(examples-6, particular-5)
dobj(have-3, examples-6)

(ROOT
  (S
    (VP
      (VP (VB See)
        (ADVP (RB also)))
      (: :)
      (VP (NN confirmation)
        (NP (NN bias))))
    (. .)))

root(ROOT-0, See-1)
advmod(See-1, also-2)
dep(See-1, confirmation-4)
dobj(confirmation-4, bias-5)

(ROOT
  (S
    (VP (`` ``) (VB look)
      (PP (IN at)
        (NP (DT the) (NN intricacy)))
      (PP (IN of)
        (NP (DT the) (NN trees) (, ,) (FW etc.) ('' '')))
      (SBAR
        (S
          (NP (DT This))
          (VP (VBZ is)
            (NP
              (NP (DT the) (NN Argument))
              (PP (IN from)
                (NP (NNP Design))))))))
    (. .)))

root(ROOT-0, look-2)
det(intricacy-5, the-4)
prep_at(look-2, intricacy-5)
det(trees-8, the-7)
prep_of(look-2, trees-8)
dep(trees-8, etc.-10)
nsubj(Argument-15, This-12)
cop(Argument-15, is-13)
det(Argument-15, the-14)
ccomp(look-2, Argument-15)
prep_from(Argument-15, Design-17)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP respond)
      (PP (IN with)
        (NP (DT the) (NNP Argument)))
      (PP (IN from)
        (NP (NNP Poor) (NNP Design))))
    (. .)))

nsubj(respond-2, I-1)
root(ROOT-0, respond-2)
det(Argument-5, the-4)
prep_with(respond-2, Argument-5)
nn(Design-8, Poor-7)
prep_from(respond-2, Design-8)

(ROOT
  (FRAG
    (NP
      (NP (CD One) (NN example))
      (PP (IN of)
        (NP (JJ poor) (NN design))))
    (: :)
    (S
      (PP (IN In)
        (NP (JJ human) (NNS females)))
      (, ,)
      (NP (DT the) (NN birth) (NN canal))
      (VP (VBZ passes)
        (PP (IN through)
          (NP (DT the) (NNS pelvis)))))
    (. .)))

num(example-2, One-1)
root(ROOT-0, example-2)
amod(design-5, poor-4)
prep_of(example-2, design-5)
amod(females-9, human-8)
prep_in(passes-14, females-9)
det(canal-13, the-11)
nn(canal-13, birth-12)
nsubj(passes-14, canal-13)
dep(example-2, passes-14)
det(pelvis-17, the-16)
prep_through(passes-14, pelvis-17)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP
            (NP (DT an) (NN infant) (POS 's))
            (NN head))
          (VP (VBZ is)
            (ADJP (RB too) (JJ big)))))
      (NP (PRP they))
      (VP (MD will) (RB not)
        (VP (VB fit))))
    (CC and)
    (ADVP (RB before))
    (S
      (NP
        (NP (JJ c-sections) (NN death))
        (PP (IN for)
          (NP (DT the) (NN mother))))
      (VP (VBD was)
        (NP (DT the) (JJ usual) (NN result))))
    (. .)))

mark(big-8, If-1)
det(infant-3, an-2)
poss(head-5, infant-3)
nsubj(big-8, head-5)
cop(big-8, is-6)
advmod(big-8, too-7)
advcl(fit-12, big-8)
nsubj(fit-12, they-9)
aux(fit-12, will-10)
neg(fit-12, not-11)
root(ROOT-0, fit-12)
advmod(fit-12, before-14)
conj_and(fit-12, before-14)
amod(death-16, c-sections-15)
nsubj(result-23, death-16)
det(mother-19, the-18)
prep_for(death-16, mother-19)
cop(result-23, was-20)
det(result-23, the-21)
amod(result-23, usual-22)
ccomp(fit-12, result-23)
conj_and(fit-12, result-23)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (NP
        (NP (JJ many) (, ,) (JJ many) (JJ other) (NNS examples))
        (PP (IN of)
          (NP (JJ poor) (NN design)))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
amod(examples-7, many-3)
amod(examples-7, many-5)
amod(examples-7, other-6)
nsubj(are-2, examples-7)
amod(design-10, poor-9)
prep_of(examples-7, design-10)

(ROOT
  (S
    (PP (TO To)
      (NP (PRP me)))
    (NP (DT the) (NN evidence))
    (VP (VBZ points)
      (PP (RB not)
        (PP (TO to)
          (NP
            (NP (DT an) (JJ all-powerful) (, ,) (JJ benevolent) (NN designer))
            (, ,)
            (CONJP (CC but)
              (RB rather))
            (NP
              (NP (DT a) (NN universe))
              (VP (VBN ruled)
                (PP (IN by)
                  (NP
                    (NP (JJ non-intelligent) (NNS patterns))
                    (VP (VBG emerging)
                      (PP (IN from)
                        (NP (NN chaos))))))))))))
    (. .)))

prep_to(points-5, me-2)
det(evidence-4, the-3)
nsubj(points-5, evidence-4)
root(ROOT-0, points-5)
neg(points-5, not-6)
det(designer-12, an-8)
amod(designer-12, all-powerful-9)
amod(designer-12, benevolent-11)
prep_to(points-5, designer-12)
det(universe-17, a-16)
prep_to(points-5, universe-17)
conj_negcc(designer-12, universe-17)
partmod(universe-17, ruled-18)
amod(patterns-21, non-intelligent-20)
agent(ruled-18, patterns-21)
partmod(patterns-21, emerging-22)
prep_from(emerging-22, chaos-24)

(ROOT
  (S (`` ``)
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB know)))
    (. .)))

nsubj(know-5, I-2)
aux(know-5, do-3)
neg(know-5, n't-4)
root(ROOT-0, know-5)

(ROOT
  (S (CC And)
    (NP (DT neither))
    (VP (VBP do)
      (NP (PRP you)))
    (. .)))

cc(do-3, And-1)
nsubj(do-3, neither-2)
root(ROOT-0, do-3)
dobj(do-3, you-4)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP (JJ impossible)
        (S
          (VP (TO to)
            (VP (VB answer)
              (NP (DT this) (NN question)))))))
    (. .)))

nsubj(impossible-3, It-1)
cop(impossible-3, is-2)
root(ROOT-0, impossible-3)
aux(answer-5, to-4)
xcomp(impossible-3, answer-5)
det(question-7, this-6)
dobj(answer-5, question-7)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD could)
      (VP (VB have)
        (VP (VBN been)
          (NP (NNP God)))))
    (. .)))

nsubj(God-5, It-1)
aux(God-5, could-2)
aux(God-5, have-3)
cop(God-5, been-4)
root(ROOT-0, God-5)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD could)
      (VP (VB have)
        (VP (VBN been)
          (NP (NN space) (NNS aliens)))))
    (. .)))

nsubj(aliens-6, It-1)
aux(aliens-6, could-2)
aux(aliens-6, have-3)
cop(aliens-6, been-4)
nn(aliens-6, space-5)
root(ROOT-0, aliens-6)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD could)
      (VP (VB have)
        (VP (VBN been)
          (NP
            (NP (CD ten) (JJ dimensional) (NN space) (NNS rocks))
            (VP (VBG crashing)
              (ADVP (RB together)))))))
    (. .)))

nsubj(rocks-8, It-1)
aux(rocks-8, could-2)
aux(rocks-8, have-3)
cop(rocks-8, been-4)
num(rocks-8, ten-5)
amod(rocks-8, dimensional-6)
nn(rocks-8, space-7)
root(ROOT-0, rocks-8)
partmod(rocks-8, crashing-9)
advmod(crashing-9, together-10)

(ROOT
  (S
    (NP (DT The) (NN universe))
    (VP (MD could)
      (ADVP (RB simply))
      (VP (VB have)
        (VP
          (ADVP (RB always))
          (VBN existed))))
    (. .)))

det(universe-2, The-1)
nsubj(existed-7, universe-2)
aux(existed-7, could-3)
advmod(existed-7, simply-4)
aux(existed-7, have-5)
advmod(existed-7, always-6)
root(ROOT-0, existed-7)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (NP
        (NP (DT an) (JJ infinite) (NN number))
        (PP (IN of)
          (NP (JJ possible) (NNS explanations)))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
det(number-5, an-3)
amod(number-5, infinite-4)
nsubj(are-2, number-5)
amod(explanations-8, possible-7)
prep_of(number-5, explanations-8)

