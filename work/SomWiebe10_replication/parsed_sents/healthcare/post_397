(ROOT
  (SQ
    (S
      (NP (PRP You))
      (VP (VBP work)
        (PP (IN in)
          (NP (DT the) (NN insurance) (NN business)))))
    (, ,)
    (SQ (MD would)
      (NP (PRP you))
      (VP (VB support)
        (NP (JJ universal) (NN health) (NN care))
        (S
          (VP (VBG knowing)
            (SBAR
              (S
                (NP (PRP it))
                (VP (MD would)
                  (VP (VB result)
                    (PP (IN in)
                      (S
                        (NP (PRP you))
                        (VP (VBG losing)
                          (NP (PRP$ your) (NN job)))))))))))))
    (. ?)))

nsubj(work-2, You-1)
dep(support-10, work-2)
det(business-6, the-4)
nn(business-6, insurance-5)
prep_in(work-2, business-6)
aux(support-10, would-8)
nsubj(support-10, you-9)
root(ROOT-0, support-10)
amod(care-13, universal-11)
nn(care-13, health-12)
dobj(support-10, care-13)
xcomp(support-10, knowing-14)
nsubj(result-17, it-15)
aux(result-17, would-16)
ccomp(knowing-14, result-17)
nsubj(losing-20, you-19)
prepc_in(result-17, losing-20)
poss(job-22, your-21)
dobj(losing-20, job-22)

(ROOT
  (S
    (NP (NNS People))
    (VP (VBP are)
      (VP
        (VP (VBG becoming)
          (ADJP (RBR more) (JJ aware)))
        (CC and)
        (VP
          (ADVP (RB actually))
          (VBG doing)
          (NP (DT some) (NN work)
            (S
              (VP (TO to)
                (VP (VB find)
                  (PRT (RP out))
                  (SBAR
                    (WHNP (WP what))
                    (S
                      (VP (VBZ is)
                        (VP (VBG going)
                          (PRT (RP on)))))))))))))
    (. .)))

nsubj(becoming-3, People-1)
nsubj(doing-8, People-1)
aux(becoming-3, are-2)
root(ROOT-0, becoming-3)
advmod(aware-5, more-4)
acomp(becoming-3, aware-5)
advmod(doing-8, actually-7)
conj_and(becoming-3, doing-8)
det(work-10, some-9)
dobj(doing-8, work-10)
aux(find-12, to-11)
infmod(work-10, find-12)
prt(find-12, out-13)
nsubj(going-16, what-14)
aux(going-16, is-15)
ccomp(find-12, going-16)
prt(going-16, on-17)

(ROOT
  (S
    (NP (PRP I))
    (VP
      (VP (VBP am)
        (ADJP (VBN retired)))
      (CC and)
      (VP (MD will)
        (VP (VB gain)
          (NP (NN nothing))
          (ADVP (RB regardless)
            (PP (IN of)
              (SBAR
                (WHADVP (WRB how))
                (S
                  (NP (DT this) (NN issue))
                  (VP (VBZ goes)))))))))
    (. .)))

nsubjpass(retired-3, I-1)
nsubj(gain-6, I-1)
auxpass(retired-3, am-2)
root(ROOT-0, retired-3)
aux(gain-6, will-5)
conj_and(retired-3, gain-6)
dobj(gain-6, nothing-7)
advmod(goes-13, how-10)
det(issue-12, this-11)
nsubj(goes-13, issue-12)
prepc_regardless_of(gain-6, goes-13)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP have)
      (NP
        (NP (NN insurance))
        (PP (IN from)
          (NP
            (NP (DT the) (NN company))
            (SBAR
              (S
                (NP (PRP I))
                (VP (VBD retired)
                  (PP (IN from)))))))))
    (. .)))

nsubj(have-2, I-1)
root(ROOT-0, have-2)
dobj(have-2, insurance-3)
det(company-6, the-5)
prep_from(insurance-3, company-6)
prep_from(retired-8, company-6)
nsubj(retired-8, I-7)
rcmod(company-6, retired-8)

(ROOT
  (S (CC But)
    (PP (IN unlike)
      (NP (DT some)))
    (NP (PRP I))
    (VP
      (VP (VBP have)
        (NP
          (NP (NN compassion))
          (PP (IN for)
            (NP (DT the) (JJ many)))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (MD need)
                (VP (VB help)))))))
      (CC and)
      (VP (VBP are)
        (ADJP (JJ unable)
          (S
            (VP (TO to)
              (VP (VB get)
                (NP (PRP it))))))))
    (. .)))

prep_unlike(have-5, some-3)
nsubj(have-5, I-4)
nsubj(unable-15, I-4)
root(ROOT-0, have-5)
dobj(have-5, compassion-6)
nsubj(need-11, compassion-6)
det(many-9, the-8)
prep_for(compassion-6, many-9)
rcmod(compassion-6, need-11)
dep(need-11, help-12)
cop(unable-15, are-14)
conj_and(have-5, unable-15)
aux(get-17, to-16)
xcomp(unable-15, get-17)
dobj(get-17, it-18)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP$ my) (JJ fellow) (NNS Americans))
          (VP (MD should)
            (VP (VB be)
              (VP (VBN helped)
                (PP (IN like)
                  (NP
                    (NP (DT the) (JJ Canadian) (NN system))
                    (SBAR
                      (S
                        (NP (PRP it))
                        (VP (VBZ does) (RB not)
                          (VP (VB see)
                            (NP
                              (NP (DT a) (NN difference))
                              (PP (IN between)
                                (NP
                                  (NP (DT the) (JJ poor))
                                  (CC or)
                                  (NP (DT any) (JJ other) (NN sector))))
                              (SBAR
                                (S
                                  (NP (PRP they))
                                  (RB all)
                                  (VP (VB get)
                                    (NP (DT the) (JJ same) (NN quality) (NN care))))))))))))))))))
    (. .)))

nsubj(think-2, I-1)
root(ROOT-0, think-2)
poss(Americans-5, my-3)
amod(Americans-5, fellow-4)
nsubjpass(helped-8, Americans-5)
aux(helped-8, should-6)
auxpass(helped-8, be-7)
ccomp(think-2, helped-8)
det(system-12, the-10)
amod(system-12, Canadian-11)
prep_like(helped-8, system-12)
nsubj(see-16, it-13)
aux(see-16, does-14)
neg(see-16, not-15)
rcmod(system-12, see-16)
det(difference-18, a-17)
dobj(see-16, difference-18)
det(poor-21, the-20)
prep_between(difference-18, poor-21)
det(sector-25, any-23)
amod(sector-25, other-24)
prep_between(difference-18, sector-25)
conj_or(poor-21, sector-25)
nsubj(get-28, they-26)
advmod(get-28, all-27)
rcmod(difference-18, get-28)
det(care-32, the-29)
amod(care-32, same-30)
nn(care-32, quality-31)
dobj(get-28, care-32)

(ROOT
  (S
    (NP (PRP$ Our) (NN system))
    (VP (VBZ is)
      (ADVP (DT all) (IN about))
      (VP (VBG making)
        (NP (NN money))
        (S (RB not)
          (VP (VBG giving)
            (NP (NN care))))))
    (. .)))

poss(system-2, Our-1)
nsubj(making-6, system-2)
aux(making-6, is-3)
dep(about-5, all-4)
advmod(making-6, about-5)
root(ROOT-0, making-6)
dobj(making-6, money-7)
neg(giving-9, not-8)
xcomp(making-6, giving-9)
dobj(giving-9, care-10)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB even))
    (VP (VBP have)
      (NP (DT a) (NN plan)
        (S
          (VP (TO to)
            (VP (VB cover)
              (NP (DT the) (JJ entire) (NN cost))
              (PP (IN without)
                (NP (NN tax) (NN money))))))))
    (. !)))

nsubj(have-3, I-1)
advmod(have-3, even-2)
root(ROOT-0, have-3)
det(plan-5, a-4)
dobj(have-3, plan-5)
aux(cover-7, to-6)
infmod(plan-5, cover-7)
det(cost-10, the-8)
amod(cost-10, entire-9)
dobj(cover-7, cost-10)
nn(money-13, tax-12)
prep_without(cover-7, money-13)

(ROOT
  (S
    (NP (DT The)
      (ADJP (JJ poor)
        (CC and)
        (JJ powerless))
      (NN need))
    (VP (VBP help)
      (PP (IN in)
        (NP
          (NP (DT this) (NN country))
          (SBAR
            (S
              (NP (PRP you))
              (VP (MD should)
                (VP (VB get)
                  (PRT (RP out))
                  (NP (JJR more) (NNS !!)))))))))))

det(need-5, The-1)
amod(need-5, poor-2)
conj_and(poor-2, powerless-4)
amod(need-5, powerless-4)
nsubj(help-6, need-5)
root(ROOT-0, help-6)
det(country-9, this-8)
prep_in(help-6, country-9)
nsubj(get-12, you-10)
aux(get-12, should-11)
rcmod(country-9, get-12)
prt(get-12, out-13)
amod(!!-15, more-14)
dobj(get-12, !!-15)

