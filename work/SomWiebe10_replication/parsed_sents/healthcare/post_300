(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB think)
        (PRN
          (S
            (NP (PRP you))
            (VP (VBP are)
              (VP (VBG understanding)
                (NP (DT the) (NN argument))
                (, ,)
                (S
                  (VP (VB let)
                    (S
                      (NP (PRP me))
                      (VP (VB see)
                        (SBAR (IN if)
                          (S
                            (NP (PRP I))
                            (VP (MD can)
                              (VP (VB lend)
                                (NP (DT some) (NN clarity))
                                (NP (CD .1)))))))))))))
          (-RRB- -RRB-))
        (SBAR
          (S
            (NP (NNP Health) (NN care))
            (VP (VBZ is) (RB not)
              (NP (DT a) (`` ``) (NN right)))))))
    (. .)))

nsubj(think-4, I-1)
aux(think-4, do-2)
neg(think-4, n't-3)
root(ROOT-0, think-4)
nsubj(understanding-7, you-5)
aux(understanding-7, are-6)
parataxis(think-4, understanding-7)
det(argument-9, the-8)
dobj(understanding-7, argument-9)
dep(understanding-7, let-11)
nsubj(see-13, me-12)
ccomp(let-11, see-13)
mark(lend-17, if-14)
nsubj(lend-17, I-15)
aux(lend-17, can-16)
advcl(see-13, lend-17)
det(clarity-19, some-18)
iobj(lend-17, clarity-19)
dobj(lend-17, .1-20)
nn(care-23, Health-22)
nsubj(right-28, care-23)
cop(right-28, is-24)
neg(right-28, not-25)
det(right-28, a-26)
ccomp(think-4, right-28)

(ROOT
  (S ('' '')
    (NP (NNP Rights))
    (VP (VBP are)
      (NP
        (NP (NNS freedoms))
        (PP (IN of)
          (NP
            (NP (NN action))
            (PP (IN in)
              (NP (DT a) (JJ social) (NN context)))))))
    (. .)))

nsubj(freedoms-4, Rights-2)
cop(freedoms-4, are-3)
root(ROOT-0, freedoms-4)
prep_of(freedoms-4, action-6)
det(context-10, a-8)
amod(context-10, social-9)
prep_in(action-6, context-10)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (DT all) (NNS countries))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP
            (VP (VBP provide))
            (CC or)
            (VP (VBP have)
              (VP (VBN provided)
                (NP (JJ universal) (NN health) (NN care))))))))
    (VP (VBP have)
      (VP (VBN struggled)
        (CC or)
        (VBN collapsed)))
    (. .)))

advmod(struggled-14, However-1)
det(countries-4, all-3)
nsubj(provide-6, countries-4)
nsubj(provided-9, countries-4)
nsubj(struggled-14, countries-4)
nsubj(collapsed-16, countries-4)
rcmod(countries-4, provide-6)
aux(provided-9, have-8)
rcmod(countries-4, provided-9)
conj_or(provide-6, provided-9)
amod(care-12, universal-10)
nn(care-12, health-11)
dobj(provided-9, care-12)
aux(struggled-14, have-13)
root(ROOT-0, struggled-14)
conj_or(struggled-14, collapsed-16)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ does) (RB n't)
        (VP (VB mean)
          (SBAR
            (S
              (NP (PRP we))
              (VP (MD should)
                (VP (VB give)
                  (PRT (RP up))
                  (NP (NN health) (NN care)))))))))
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ does)
        (S
          (VP (VB mean)
            (SBAR
              (S
                (NP (PRP we))
                (VP (MD should) (RB n't)
                  (VP (VB try)
                    (S
                      (VP (TO to)
                        (VP (VB emulate)
                          (S
                            (VP (VBG faltering)
                              (NP (NNS systems)))))))))))))))
    (. .)))

nsubj(mean-4, This-1)
aux(mean-4, does-2)
neg(mean-4, n't-3)
root(ROOT-0, mean-4)
nsubj(give-7, we-5)
aux(give-7, should-6)
ccomp(mean-4, give-7)
prt(give-7, up-8)
nn(care-10, health-9)
dobj(give-7, care-10)
nsubj(does-13, it-12)
conj_but(mean-4, does-13)
ccomp(does-13, mean-14)
nsubj(try-18, we-15)
xsubj(emulate-20, we-15)
aux(try-18, should-16)
neg(try-18, n't-17)
ccomp(mean-14, try-18)
aux(emulate-20, to-19)
xcomp(try-18, emulate-20)
xcomp(emulate-20, faltering-21)
dobj(faltering-21, systems-22)

(ROOT
  (SQ (MD Could)
    (NP (PRP we))
    (VP (VB improve))
    (. ?)))

aux(improve-3, Could-1)
nsubj(improve-3, we-2)
root(ROOT-0, improve-3)

(ROOT
  (FRAG
    (ADVP (RB Possibly))
    (. .)))

root(ROOT-0, Possibly-1)

(ROOT
  (SQ (MD Will)
    (NP (PRP we))
    (VP (VB improve))
    (. ?)))

aux(improve-3, Will-1)
nsubj(improve-3, we-2)
root(ROOT-0, improve-3)

(ROOT
  (S
    (ADVP (RB Maybe))
    (, ,)
    (NP (DT no) (NN one))
    (VP (VBZ 's)
      (VP (VBN done)
        (S
          (NP (PRP it))
          (ADVP (RB yet)))
        (ADVP (RB though))))
    (. .)))

advmod(done-6, Maybe-1)
det(one-4, no-3)
nsubjpass(done-6, one-4)
auxpass(done-6, 's-5)
root(ROOT-0, done-6)
dep(done-6, it-7)
advmod(it-7, yet-8)
advmod(done-6, though-9)

(ROOT
  (SQ (NNP Does)
    (NP (DT this))
    (VP (VB mean)
      (SBAR
        (S
          (NP (PRP we))
          (VP (MD should)
            (ADVP (RB coercively))
            (VP (VB enlist)
              (NP (DT all) (NNS people))
              (PP (IN into)
                (NP (DT a) (JJ single) (NN system)))
              (SBAR (IN that)
                (S
                  (NP (PRP we))
                  (VP (MD ca) (RB n't)
                    (VP (VB guarantee)
                      (SBAR
                        (S
                          (VP (VBZ is)
                            (ADJP (JJR better))
                            (SBAR
                              (WHADVP (WRB when))
                              (S
                                (NP (DT all) (NN evidence))
                                (VP (VBZ shows)
                                  (SBAR
                                    (S
                                      (NP (PRP it))
                                      (VP (VBZ creates)
                                        (NP (JJR more) (NNS problems))))))))))))))))))))
    (. ?)))

dep(mean-3, Does-1)
nsubj(mean-3, this-2)
root(ROOT-0, mean-3)
nsubj(enlist-7, we-4)
aux(enlist-7, should-5)
advmod(enlist-7, coercively-6)
ccomp(mean-3, enlist-7)
det(people-9, all-8)
dobj(enlist-7, people-9)
det(system-13, a-11)
amod(system-13, single-12)
prep_into(enlist-7, system-13)
complm(guarantee-18, that-14)
nsubj(guarantee-18, we-15)
aux(guarantee-18, ca-16)
neg(guarantee-18, n't-17)
ccomp(enlist-7, guarantee-18)
cop(better-20, is-19)
ccomp(guarantee-18, better-20)
advmod(shows-24, when-21)
det(evidence-23, all-22)
nsubj(shows-24, evidence-23)
advcl(better-20, shows-24)
nsubj(creates-26, it-25)
ccomp(shows-24, creates-26)
amod(problems-28, more-27)
dobj(creates-26, problems-28)

(ROOT
  (S
    (S
      (VP (VBG No.)
        (S
          (NP (CD 3))
          (-RRB- -RRB-)
          (NP (PRP It) (NNS 's))
          ('' ''))))
    (VP (VBD Socialized)
      (NP (NNP Medicine) ('' '')))
    (. .)))

csubj(Socialized-7, No.-1)
dep('s-5, 3-2)
dep('s-5, It-4)
dep(No.-1, 's-5)
root(ROOT-0, Socialized-7)
dobj(Socialized-7, Medicine-8)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP are) (RB n't)
      (VP (VBG paying)
        (SBAR
          (WHADVP (RB only) (WRB when))
          (FRAG
            (NP
              (NP (PRP$ its))
              (NP (DT an) (NN emergency)))))))
    (. .)))

nsubj(paying-4, We-1)
aux(paying-4, are-2)
neg(paying-4, n't-3)
root(ROOT-0, paying-4)
advmod(when-6, only-5)
advmod(its-7, when-6)
advcl(paying-4, its-7)
det(emergency-9, an-8)
dep(its-7, emergency-9)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (MD would)
      (NP (PRP we))
      (VP (VB expect)
        (NP
          (NP (JJR more))
          (PP (IN of)
            (NP (DT the) (JJ same))))
        (S
          (VP (TO to)
            (VP (VB work)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (PRP it))
                  (VP (VBZ has) (RB n't)
                    (VP
                      (ADVP (RB anywhere) (RB else)))))))))))
    (. ?)))

advmod(expect-4, Why-1)
aux(expect-4, would-2)
nsubj(expect-4, we-3)
root(ROOT-0, expect-4)
dobj(expect-4, more-5)
det(same-8, the-7)
prep_of(more-5, same-8)
aux(work-10, to-9)
xcomp(expect-4, work-10)
advmod(else-16, when-11)
nsubj(else-16, it-12)
aux(else-16, has-13)
neg(else-16, n't-14)
advmod(else-16, anywhere-15)
advcl(work-10, else-16)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (MD should)
      (NP (PRP we))
      (VP (VB avoid)
        (NP
          (NP (DT a) (NN system))
          (, ,)
          (NP (DT the) (JJ free) (NN market))
          (, ,)
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (PRP it))
              (VP (VBZ has)
                (VP (VBN worked))))))
        (ADVP (IN in) (DT every))
        (SBAR
          (WHADVP (WRB where))
          (S
            (ADJP (RB else))))))
    (. ?)))

advmod(avoid-4, Why-1)
aux(avoid-4, should-2)
nsubj(avoid-4, we-3)
root(ROOT-0, avoid-4)
det(system-6, a-5)
dobj(avoid-4, system-6)
tmod(worked-15, system-6)
det(market-10, the-8)
amod(market-10, free-9)
appos(system-6, market-10)
advmod(worked-15, when-12)
nsubj(worked-15, it-13)
aux(worked-15, has-14)
dep(system-6, worked-15)
advmod(avoid-4, in-16)
dep(in-16, every-17)
advmod(else-19, where-18)
advcl(avoid-4, else-19)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP are) (RB not)
      (NP
        (NP (DT an) (NN obligation))
        (PP (IN on)
          (NP (NNS others)
            (S
              (VP (TO to)
                (VP (VB provide)
                  (NP (NNS goods)
                    (CC or)
                    (NNS services)))))))))
    (. .)))

nsubj(obligation-5, They-1)
cop(obligation-5, are-2)
neg(obligation-5, not-3)
det(obligation-5, an-4)
root(ROOT-0, obligation-5)
prep_on(obligation-5, others-7)
aux(provide-9, to-8)
infmod(others-7, provide-9)
dobj(provide-9, goods-10)
dobj(provide-9, services-12)
conj_or(goods-10, services-12)

(ROOT
  (S
    (VP
      (VP (VBP Do) (RB n't)
        (VP (VB confuse)
          (NP (DT a) (JJ free) (NN market) (NN system))
          (PP (IN with)
            (NP (DT a) (NN charity) (JJ free) (NN system)))))
      (CC and)
      (VP (VBP do) (RB n't)
        (VP (VB confuse)
          (NP (DT a) (JJ socialist) (NN system))
          (PP (IN with)
            (NP (DT a) (JJ free) (NN charity) (NN system))))))
    (. .)))

aux(confuse-3, Do-1)
neg(confuse-3, n't-2)
root(ROOT-0, confuse-3)
det(system-7, a-4)
amod(system-7, free-5)
nn(system-7, market-6)
dobj(confuse-3, system-7)
det(system-12, a-9)
nn(system-12, charity-10)
amod(system-12, free-11)
prep_with(confuse-3, system-12)
aux(confuse-16, do-14)
neg(confuse-16, n't-15)
conj_and(confuse-3, confuse-16)
det(system-19, a-17)
amod(system-19, socialist-18)
dobj(confuse-16, system-19)
det(system-24, a-21)
amod(system-24, free-22)
nn(system-24, charity-23)
prep_with(confuse-16, system-24)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (PRP we))
        (VP (VBP need))))
    (VP (VBZ is)
      (NP
        (NP
          (NP (DT a) (JJ voluntary) (NN solution))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ emphasizes)
                (NP (DT the) (NN patient))))))
        (, ,) (RB not)
        (NP
          (NP (DT a) (JJ coerced) (NN monopoly))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ dehumanizes)
                (S
                  (NP (PRP us))
                  (NP (DT all)))))))))
    (. .)))

dobj(need-3, What-1)
nsubj(need-3, we-2)
csubj(solution-7, need-3)
cop(solution-7, is-4)
det(solution-7, a-5)
amod(solution-7, voluntary-6)
root(ROOT-0, solution-7)
nsubj(emphasizes-9, solution-7)
rcmod(solution-7, emphasizes-9)
det(patient-11, the-10)
dobj(emphasizes-9, patient-11)
neg(solution-7, not-13)
det(monopoly-16, a-14)
amod(monopoly-16, coerced-15)
dep(solution-7, monopoly-16)
nsubj(dehumanizes-18, monopoly-16)
rcmod(monopoly-16, dehumanizes-18)
nsubj(all-20, us-19)
xcomp(dehumanizes-18, all-20)

(ROOT
  (S
    (INTJ (UH Yes))
    (, ,)
    (NP
      (NP (PRP$ your) (NN right))
      (PP (TO to)
        (NP (NN life) (, ,) (NN liberty)
          (CC and)
          (NN pursuit)))
      (PP (IN of)
        (NP (NN happiness))))
    (VP (VBZ does)
      (VP (VB mean)
        (SBAR (IN that)
          (S
            (NP (PRP you))
            (VP (VBP have)
              (NP (DT the) (NN right)
                (S
                  (VP (TO to)
                    (VP (VB seek)
                      (NP (JJ medical) (NNS services)))))))))))
    (. .)))

dep(mean-14, Yes-1)
poss(right-4, your-3)
nsubj(mean-14, right-4)
prep_to(right-4, life-6)
prep_to(right-4, liberty-8)
conj_and(life-6, liberty-8)
prep_to(right-4, pursuit-10)
conj_and(life-6, pursuit-10)
prep_of(right-4, happiness-12)
aux(mean-14, does-13)
root(ROOT-0, mean-14)
complm(have-17, that-15)
nsubj(have-17, you-16)
ccomp(mean-14, have-17)
det(right-19, the-18)
dobj(have-17, right-19)
aux(seek-21, to-20)
infmod(right-19, seek-21)
amod(services-23, medical-22)
dobj(seek-21, services-23)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ does) (RB not)
      (VP (VB mean)
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP have)
              (S
                (VP (TO to)
                  (VP (VB violate)
                    (NP
                      (NP (DT the) (NN right))
                      (PP (TO to)
                        (NP (NN life) (, ,) (NN liberty)
                          (CC and)
                          (NN pursuit)))
                      (PP (IN of)
                        (NP
                          (NP (NN happiness))
                          (PP (IN of)
                            (NP (NNS others))))))
                    (PP (IN by)
                      (S
                        (VP (VBG demanding)
                          (S
                            (NP (PRP they))
                            (VP (VB provide)
                              (NP (PRP it)))))))))))))))
    (. .)))

nsubj(mean-4, It-1)
aux(mean-4, does-2)
neg(mean-4, not-3)
root(ROOT-0, mean-4)
nsubj(have-6, you-5)
xsubj(violate-8, you-5)
ccomp(mean-4, have-6)
aux(violate-8, to-7)
xcomp(have-6, violate-8)
det(right-10, the-9)
dobj(violate-8, right-10)
prep_to(right-10, life-12)
prep_to(right-10, liberty-14)
conj_and(life-12, liberty-14)
prep_to(right-10, pursuit-16)
conj_and(life-12, pursuit-16)
prep_of(right-10, happiness-18)
prep_of(happiness-18, others-20)
prepc_by(violate-8, demanding-22)
nsubj(provide-24, they-23)
ccomp(demanding-22, provide-24)
dobj(provide-24, it-25)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP have)
        (NP
          (NP (DT the) (NN freedom))
          (PP (IN of)
            (NP (NN speech))))))
    (CC but)
    (S
      (NP (DT this))
      (VP (VBZ does) (RB not)
        (VP (VB put)
          (NP
            (NP (DT an) (NN obligation))
            (PP (IN on)
              (NP (NNS others))))
          (S
            (VP (TO to)
              (VP
                (VP (VB reply)
                  (SBAR
                    (WHNP (WP what))
                    (S
                      (NP (PRP you))
                      (VP (VBD said)
                        (PP (IN on)
                          (NP (NN TV)))))))
                (CC and)
                (VP (VB make)
                  (S
                    (NP (NNS others))
                    (VP (VB watch))))))))))
    (. .)))

nsubj(have-2, We-1)
root(ROOT-0, have-2)
det(freedom-4, the-3)
dobj(have-2, freedom-4)
prep_of(freedom-4, speech-6)
nsubj(put-11, this-8)
aux(put-11, does-9)
neg(put-11, not-10)
conj_but(have-2, put-11)
det(obligation-13, an-12)
dobj(put-11, obligation-13)
prep_on(obligation-13, others-15)
aux(reply-17, to-16)
xcomp(put-11, reply-17)
dobj(said-20, what-18)
nsubj(said-20, you-19)
ccomp(reply-17, said-20)
prep_on(said-20, TV-22)
xcomp(put-11, make-24)
conj_and(reply-17, make-24)
nsubj(watch-26, others-25)
ccomp(make-24, watch-26)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP have)
        (NP
          (NP (DT the) (NN freedom))
          (PP (IN of)
            (NP (DT the) (NN press))))))
    (CC but)
    (S
      (NP (DT this))
      (VP (VBZ does) (RB not)
        (VP (VB mean)
          (SBAR
            (SBAR
              (S
                (NP (DT the) (NN government))
                (VP (MD should)
                  (VP (VB create)
                    (NP (NNS newspapers))
                    (PP (IN for)
                      (NP
                        (NP (DT each))
                        (PP (IN of)
                          (NP (PRP us)))))))))
            (, ,)
            (CC or)
            (SBAR (IN that)
              (S
                (NP (PRP I))
                (VP (MD can)
                  (VP (VB force)
                    (S
                      (NP (DT the) (NNP New) (NNP York) (NNP Times))
                      (VP (TO to)
                        (VP (VB print)
                          (NP (PRP$ my) (NNS views)))))))))))))
    (. .)))

nsubj(have-2, We-1)
root(ROOT-0, have-2)
det(freedom-4, the-3)
dobj(have-2, freedom-4)
det(press-7, the-6)
prep_of(freedom-4, press-7)
nsubj(mean-12, this-9)
aux(mean-12, does-10)
neg(mean-12, not-11)
conj_but(have-2, mean-12)
det(government-14, the-13)
nsubj(create-16, government-14)
aux(create-16, should-15)
ccomp(mean-12, create-16)
dobj(create-16, newspapers-17)
prep_for(create-16, each-19)
prep_of(each-19, us-21)
complm(force-27, that-24)
nsubj(force-27, I-25)
aux(force-27, can-26)
ccomp(mean-12, force-27)
conj_or(create-16, force-27)
det(Times-31, the-28)
nn(Times-31, New-29)
nn(Times-31, York-30)
nsubj(print-33, Times-31)
aux(print-33, to-32)
xcomp(force-27, print-33)
poss(views-35, my-34)
dobj(print-33, views-35)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP have)
        (NP
          (NP (DT the) (NN freedom))
          (PP (IN of)
            (NP (NN religion))))))
    (CC but)
    (S
      (NP (DT this))
      (VP (VBZ does) (RB not)
        (VP (VB mean)
          (SBAR
            (S
              (NP (DT the) (NN government))
              (VP (MD ought)
                (S
                  (VP (TO to)
                    (VP (VB build)
                      (NP
                        (NP (NNS churches))
                        (PP (IN at)
                          (NP
                            (NP (NN someone) (RB else) (POS 's))
                            (NN cost)
                            (CC or)
                            (NN force) (NN everyone))))
                      (PP (IN into)
                        (NP (DT a) (JJ single) (JJ monolithic) (NN religion))))))))))))
    (. .)))

nsubj(have-2, We-1)
root(ROOT-0, have-2)
det(freedom-4, the-3)
dobj(have-2, freedom-4)
prep_of(freedom-4, religion-6)
nsubj(mean-11, this-8)
aux(mean-11, does-9)
neg(mean-11, not-10)
conj_but(have-2, mean-11)
det(government-13, the-12)
nsubj(ought-14, government-13)
xsubj(build-16, government-13)
ccomp(mean-11, ought-14)
aux(build-16, to-15)
xcomp(ought-14, build-16)
dobj(build-16, churches-17)
poss(cost-22, someone-19)
advmod(someone-19, else-20)
prep_at(churches-17, cost-22)
nn(everyone-25, force-24)
prep_at(churches-17, everyone-25)
conj_or(cost-22, everyone-25)
det(religion-30, a-27)
amod(religion-30, single-28)
amod(religion-30, monolithic-29)
prep_into(build-16, religion-30)

(ROOT
  (S
    (PP (IN Like)
      (ADJP (JJ wise)))
    (, ,)
    (NP (PRP$ your) (NN freedom)
      (S
        (VP (TO to)
          (VP (VB contract)
            (PP (IN with)
              (NP (NNS others)))
            (S
              (VP (TO to)
                (VP (VB attain)
                  (NP (NNS goods)
                    (CC and)
                    (NNS services)))))))))
    (VP (VBZ does) (RB not)
      (VP (VB mean)
        (SBAR (IN that)
          (PRN
            (S
              (NP (NNS others))
              (VP (VBP are)
                (VP (VBN obligated)
                  (S
                    (VP (TO to)
                      (VP (VB provide)
                        (NP (DT those) (NNS goods)
                          (CC and)
                          (NNS services))
                        (NP (CD .2))))))))
            (-RRB- -RRB-))
          (S
            (NP (JJ Other) (NNS countries))
            (VP (VBP are) (RB n't)
              (VP (VBG doing)
                (NP (PRP it))
                (SBAR
                  (ADVP (RB well))
                  (IN so)
                  (S
                    (NP (PRP we))
                    (VP (MD should) (RB n't)
                      (VP (VB do)
                        (NP (PRP it))
                        (ADVP (IN at) (DT all))))))))))))
    (. .)))

prep_like(mean-17, wise-2)
poss(freedom-5, your-4)
nsubj(mean-17, freedom-5)
aux(contract-7, to-6)
infmod(freedom-5, contract-7)
prep_with(contract-7, others-9)
aux(attain-11, to-10)
xcomp(contract-7, attain-11)
dobj(attain-11, goods-12)
dobj(attain-11, services-14)
conj_and(goods-12, services-14)
aux(mean-17, does-15)
neg(mean-17, not-16)
root(ROOT-0, mean-17)
complm(doing-34, that-18)
nsubjpass(obligated-21, others-19)
xsubj(provide-23, others-19)
auxpass(obligated-21, are-20)
dep(doing-34, obligated-21)
aux(provide-23, to-22)
xcomp(obligated-21, provide-23)
det(goods-25, those-24)
iobj(provide-23, goods-25)
iobj(provide-23, services-27)
conj_and(goods-25, services-27)
dobj(provide-23, .2-28)
amod(countries-31, Other-30)
nsubj(doing-34, countries-31)
aux(doing-34, are-32)
neg(doing-34, n't-33)
ccomp(mean-17, doing-34)
dobj(doing-34, it-35)
advmod(do-41, well-36)
dep(do-41, so-37)
nsubj(do-41, we-38)
aux(do-41, should-39)
neg(do-41, n't-40)
dep(doing-34, do-41)
dobj(do-41, it-42)
advmod(do-41, at-43)
pobj(at-43, all-44)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP 're)
      (ADJP (JJ right)
        (PP (IN in)
          (NP (PRP$ your) (NN assertion))))
      (SBAR (IN that)
        (S
          (SBAR (RB just) (IN because)
            (S
              (NP (NN someone) (RB else))
              (VP (VBZ fails)
                (PP (IN at)
                  (NP (NN something))))))
          (VP (VBZ does) (RB not)
            (VP (VB mean)
              (SBAR
                (S
                  (NP (PRP we))
                  (VP (MD will)
                    (ADVP (RB as) (RB well))))))))))
    (. .)))

nsubj(right-3, You-1)
cop(right-3, 're-2)
root(ROOT-0, right-3)
poss(assertion-6, your-5)
prep_in(right-3, assertion-6)
complm(mean-17, that-7)
advmod(fails-12, just-8)
dep(fails-12, because-9)
nsubj(fails-12, someone-10)
advmod(someone-10, else-11)
advcl(mean-17, fails-12)
csubj(mean-17, fails-12)
prep_at(fails-12, something-14)
aux(mean-17, does-15)
neg(mean-17, not-16)
ccomp(right-3, mean-17)
nsubj(will-19, we-18)
ccomp(mean-17, will-19)
advmod(well-21, as-20)
mwe(well-21, as-20)
advmod(will-19, well-21)

