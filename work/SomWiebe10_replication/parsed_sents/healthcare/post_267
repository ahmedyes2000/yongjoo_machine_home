(ROOT
  (S
    (S
      (NP (RB Not) (JJ only))
      (VP (VBP do)
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP fail)
              (S
                (VP (TO to)
                  (VP (VB make)
                    (NP (DT any) (NNS arguments))
                    (ADVP (IN at) (DT all))))))))))
    (CC but)
    (S
      (NP (PRP you))
      (VP (VBP appeal)
        (ADJP (RB purely)
          (PP (TO to)
            (NP (NN emotion))))))
    (. .)))

neg(only-2, Not-1)
nsubj(do-3, only-2)
root(ROOT-0, do-3)
nsubj(fail-5, you-4)
xsubj(make-7, you-4)
ccomp(do-3, fail-5)
aux(make-7, to-6)
xcomp(fail-5, make-7)
det(arguments-9, any-8)
dobj(make-7, arguments-9)
advmod(make-7, at-10)
pobj(at-10, all-11)
nsubj(appeal-14, you-13)
conj_but(do-3, appeal-14)
acomp(appeal-14, purely-15)
prep_to(purely-15, emotion-17)

(ROOT
  (S
    (PP (IN Since)
      (SBAR
        (WHADVP (WRB when))
        (S
          (VP (VBZ is)
            (VP (VBG making)
              (NP (DT a) (JJ big) (NN decision)))))))
    (NP (DT that))
    (VP (VBZ affects)
      (NP (NN everyone))
      (ADVP (RBR better))
      (S
        (VP (TO to)
          (VP (VB do)
            (PP (IN by)
              (NP (NNS instinct\/feelings)))))))
    (. ?)))

dep(affects-9, Since-1)
advmod(making-4, when-2)
aux(making-4, is-3)
pcomp(Since-1, making-4)
det(decision-7, a-5)
amod(decision-7, big-6)
dobj(making-4, decision-7)
nsubj(affects-9, that-8)
xsubj(do-13, that-8)
root(ROOT-0, affects-9)
dobj(affects-9, everyone-10)
advmod(affects-9, better-11)
aux(do-13, to-12)
xcomp(affects-9, do-13)
prep_by(do-13, instinct\/feelings-15)

(ROOT
  (S
    (S
      (NP (NNS Drugs))
      (VP (VBP are)
        (ADJP (JJ available)
          (PP (TO to)
            (NP (RB almost) (NN everyone))))))
    (CC and)
    (S
      (NP (DT the) (NNS prices))
      (VP (VBP are)
        (ADJP (JJ low)
          (SBAR (IN because)
            (S
              (NP (PRP it))
              (ADVP (RB truly))
              (VP (VBZ is)
                (NP (DT a) (JJ free) (NN market))))))))
    (. .)))

nsubj(available-3, Drugs-1)
cop(available-3, are-2)
root(ROOT-0, available-3)
advmod(everyone-6, almost-5)
prep_to(available-3, everyone-6)
det(prices-9, the-8)
nsubj(low-11, prices-9)
cop(low-11, are-10)
conj_and(available-3, low-11)
mark(market-18, because-12)
nsubj(market-18, it-13)
advmod(market-18, truly-14)
cop(market-18, is-15)
det(market-18, a-16)
amod(market-18, free-17)
ccomp(low-11, market-18)

(ROOT
  (SQ (VBZ Is) (RB n't)
    (NP (PRP it))
    (NP
      (NP (JJ silly))
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP allow)
            (S
              (NP (DT these) (NNS things))
              (VP (TO to)
                (VP (VB be)
                  (ADJP (JJ available)
                    (CC and)
                    (JJ cheap))
                  (SBAR (IN while)
                    (S
                      (NP (PRP we))
                      (VP (VB regulate)
                        (S
                          (NP (NN everything))
                          (ADJP (RB else)))))))))))))
    (. ?)))

cop(silly-4, Is-1)
neg(silly-4, n't-2)
nsubj(silly-4, it-3)
root(ROOT-0, silly-4)
dobj(allow-7, silly-4)
complm(allow-7, that-5)
nsubj(allow-7, we-6)
dep(silly-4, allow-7)
det(things-9, these-8)
nsubj(available-12, things-9)
nsubj(cheap-14, things-9)
aux(available-12, to-10)
cop(available-12, be-11)
xcomp(allow-7, available-12)
xcomp(allow-7, cheap-14)
conj_and(available-12, cheap-14)
mark(regulate-17, while-15)
nsubj(regulate-17, we-16)
advcl(available-12, regulate-17)
nsubj(else-19, everything-18)
xcomp(regulate-17, else-19)

(ROOT
  (FRAG
    (PP (IN Like)
      (NP
        (NP (DT the) (NN fact))
        (SBAR (IN that)
          (S
            (NP (DT the) (JJ new) (-LRB- -LRB-) (NN potential) (-RRB- -RRB-) (NN sugar) (NN tax))
            (VP (MD would)
              (VP (VB increase)
                (NP (NNS prices))
                (PP (IN for)
                  (S
                    (NP (DT the) (JJS cheapest) (NNS foods))
                    (ADVP (RB thus))
                    (VP (VBG making)
                      (S
                        (NP (PRP it))
                        (ADJP
                          (ADJP (RB even) (RBR more) (JJ difficult))
                          (PP (IN for)
                            (NP (DT the) (JJR lower) (NN class))))
                        (S
                          (VP (TO to)
                            (VP (VB afford)
                              (NP (NN food)))))))))))))))
    (. ?)))

root(ROOT-0, Like-1)
det(fact-3, the-2)
pobj(Like-1, fact-3)
complm(increase-13, that-4)
det(tax-11, the-5)
amod(tax-11, new-6)
nn(tax-11, potential-8)
nn(tax-11, sugar-10)
nsubj(increase-13, tax-11)
aux(increase-13, would-12)
dep(fact-3, increase-13)
dobj(increase-13, prices-14)
det(foods-18, the-16)
amod(foods-18, cheapest-17)
nsubj(making-20, foods-18)
advmod(making-20, thus-19)
prepc_for(increase-13, making-20)
nsubj(afford-30, it-21)
advmod(difficult-24, even-22)
advmod(difficult-24, more-23)
dep(afford-30, difficult-24)
det(class-28, the-26)
amod(class-28, lower-27)
prep_for(difficult-24, class-28)
aux(afford-30, to-29)
xcomp(making-20, afford-30)
dobj(afford-30, food-31)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP agree)
        (NP
          (NP (DT the) (JJ free) (NN market))
          (SBAR
            (S
              (VP (VBZ is) (RB not)
                (NP
                  (NP (DT the) (NN answer))
                  (PP
                    (PP (TO to)
                      (NP (NN everything)))
                    (CC but)
                    (PP (IN with)
                      (NP (DT a) (JJ little) (NN regulation)))))))))
        (PRN (-LRB- -LRB-)
          (ADJP
            (ADJP (RB far) (JJR less))
            (SBAR (IN than)
              (S
                (NP (PRP we))
                (ADVP (RB currently))
                (VP (VBP have)
                  (NP (NN today))))))
          (-RRB- -RRB-))))
    (, ,)
    (NP (DT the) (JJ free) (NN market))
    (VP (VBZ does)
      (VP
        (VP (VB make)
          (S
            (NP (NNS products)
              (CC and)
              (NNS services))
            (ADJP (JJ available)
              (PP (TO to)
                (NP (NN everyone))))))
        (CC and)
        (VP (VB keep)
          (NP (NNS prices))
          (ADVP (RB down) (RBR better) (IN than)))
        (NP (NN price) (NNS caps))
        (PRN (-LRB- -LRB-)
          (S
            (NP (DT those))
            (VP (VBP have)
              (NP
                (NP (NN side))
                (SBAR
                  (S
                    (VP (VBZ affects)))))))
          (-RRB- -RRB-))))
    (. .)))

nsubj(agree-2, I-1)
ccomp(make-31, agree-2)
det(market-5, the-3)
amod(market-5, free-4)
dobj(agree-2, market-5)
cop(answer-9, is-6)
neg(answer-9, not-7)
det(answer-9, the-8)
rcmod(market-5, answer-9)
rcmod(market-5, answer-9')
conj_but(answer-9, answer-9')
prep_to(answer-9, everything-11)
det(regulation-16, a-14)
amod(regulation-16, little-15)
prep_with(answer-9', regulation-16)
advmod(less-19, far-18)
dep(agree-2, less-19)
mark(have-23, than-20)
nsubj(have-23, we-21)
advmod(have-23, currently-22)
dep(less-19, have-23)
tmod(have-23, today-24)
det(market-29, the-27)
amod(market-29, free-28)
nsubj(make-31, market-29)
nsubj(keep-39, market-29)
aux(make-31, does-30)
root(ROOT-0, make-31)
nsubj(available-35, products-32)
conj_and(products-32, services-34)
nsubj(available-35, services-34)
xcomp(make-31, available-35)
prep_to(available-35, everyone-37)
conj_and(make-31, keep-39)
dobj(keep-39, prices-40)
advmod(than-43, down-41)
advmod(than-43, better-42)
advmod(keep-39, than-43)
nn(caps-45, price-44)
dobj(make-31, caps-45)
nsubj(have-48, those-47)
parataxis(make-31, have-48)
parataxis(keep-39, have-48)
dobj(have-48, side-49)
rcmod(side-49, affects-50)

(ROOT
  (S
    (NP (NNP Let) (POS 's))
    (VP (VBP review))
    (. .)))

nsubj(review-3, Let-1)
possessive(Let-1, 's-2)
root(ROOT-0, review-3)

(ROOT
  (S ('' '')
    (S
      (S
        (VP (VB Let)
          (NP (DT the) (JJ uninsured))
          (VP (VB die) ('' '')
            (NP (PRP You)))))
      (VP (VBP are)
        (VP (VBG saying)
          (NP
            (NP (DT this))
            (PP (IN with)
              (NP (NN sarcasm)))))))
    (IN so)
    (S
      (NP (PRP you))
      (VP (VBP think)
        (SBAR
          (S
            (NP (DT the) (JJ uninsured))
            (VP (MD should) (RB n't)
              (VP (VB die)))))))
    (. ?)))

csubj(saying-9, Let-2)
det(uninsured-4, the-3)
dobj(Let-2, uninsured-4)
dep(Let-2, die-5)
dobj(die-5, You-7)
aux(saying-9, are-8)
root(ROOT-0, saying-9)
dobj(saying-9, this-10)
prep_with(this-10, sarcasm-12)
dep(saying-9, so-13)
nsubj(think-15, you-14)
ccomp(saying-9, think-15)
det(uninsured-17, the-16)
nsubj(die-20, uninsured-17)
aux(die-20, should-18)
neg(die-20, n't-19)
ccomp(think-15, die-20)

(ROOT
  (FRAG
    (NP (NNP Newsflash))
    (: :)
    (S
      (NP (NN everybody))
      (VP (VBZ dies)))
    (. .)))

root(ROOT-0, Newsflash-1)
nsubj(dies-4, everybody-3)
dep(Newsflash-1, dies-4)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (NP
      (NP (NNS people))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBP die)
            (SBAR (IN because)
              (S
                (NP (PRP they))
                (VP (MD ca) (RB n't)
                  (VP (VB afford)
                    (S
                      (NP (NN health) (NN insurance))
                      (VP
                        (ADVP (RB actually))
                        (VB die)
                        (PP (IN from)
                          (NP (JJ natural) (NNS causes)))
                        (SBAR (IN because)
                          (S
                            (SBAR (IN if)
                              (S
                                (NP (PRP it))
                                (VP (VBD was)
                                  (NP (DT an) (NN accident)))))
                            (, ,)
                            (NP (PRP they))
                            (VP (VBP go)
                              (PP (TO to)
                                (NP (DT the) (NN emergency) (NN room)))
                              (SBAR
                                (WHADVP (WRB where))
                                (S
                                  (NP (PRP they))
                                  (VP (VBP receive)))))))))))))))))
    (VP (VBP care)
      (NP
        (NP (DT no) (NN matter))
        (SBAR
          (WHNP (WP what)))))
    (. .)))

advmod(care-34, Also-1)
nsubj(die-5, people-3)
nsubj(care-34, people-3)
rcmod(people-3, die-5)
mark(afford-10, because-6)
nsubj(afford-10, they-7)
aux(afford-10, ca-8)
neg(afford-10, n't-9)
advcl(die-5, afford-10)
nn(insurance-12, health-11)
nsubj(die-14, insurance-12)
advmod(die-14, actually-13)
ccomp(afford-10, die-14)
amod(causes-17, natural-16)
prep_from(die-14, causes-17)
mark(go-26, because-18)
mark(accident-23, if-19)
nsubj(accident-23, it-20)
cop(accident-23, was-21)
det(accident-23, an-22)
advcl(go-26, accident-23)
nsubj(go-26, they-25)
advcl(die-14, go-26)
det(room-30, the-28)
nn(room-30, emergency-29)
prep_to(go-26, room-30)
advmod(receive-33, where-31)
nsubj(receive-33, they-32)
advcl(go-26, receive-33)
root(ROOT-0, care-34)
det(matter-36, no-35)
dobj(care-34, matter-36)
rcmod(matter-36, what-37)

(ROOT
  (S ('' '')
    (S
      (ADVP (RB Then))
      (ADVP (RB only))
      (NP (DT the) (NN insured))
      (VP (MD will)
        (VP (VB populate)
          (NP (DT the) (NN country) ('' ''))
          (ADVP (RB Again)))))
    (, ,)
    (NP (NN everybody))
    (VP (VBZ dies))
    (. .)))

advmod(populate-7, Then-2)
advmod(populate-7, only-3)
det(insured-5, the-4)
nsubj(populate-7, insured-5)
aux(populate-7, will-6)
ccomp(dies-14, populate-7)
det(country-9, the-8)
dobj(populate-7, country-9)
advmod(populate-7, Again-11)
nsubj(dies-14, everybody-13)
root(ROOT-0, dies-14)

(ROOT
  (S (CC And)
    (NP (DT this))
    (VP (VBZ is)
      (ADVP (RB just))
      (NP (DT a) (JJ ridiculous) (NN statement)
        (S
          (VP (TO to)
            (VP (VB appeal)
              (PP (TO to)
                (NP (NN emotion))))))))
    (. .)))

cc(statement-7, And-1)
nsubj(statement-7, this-2)
cop(statement-7, is-3)
advmod(statement-7, just-4)
det(statement-7, a-5)
amod(statement-7, ridiculous-6)
root(ROOT-0, statement-7)
aux(appeal-9, to-8)
infmod(statement-7, appeal-9)
prep_to(appeal-9, emotion-11)

(ROOT
  (S
    (NP
      (NP (DT The) (RB only) (JJ other) (NN point))
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBP think)))))
    (VP (VBZ needs)
      (SBAR
        (S
          (NP (DT a) (NN response))
          (VP (VBZ is)
            (NP
              (NP (PRP$ your) (JJ tactless) (NN criticism))
              (PP (IN of)
                (NP (NN capitalism))))))))
    (. .)))

det(point-4, The-1)
advmod(point-4, only-2)
amod(point-4, other-3)
dobj(think-6, point-4)
nsubj(needs-7, point-4)
nsubj(think-6, I-5)
rcmod(point-4, think-6)
root(ROOT-0, needs-7)
det(response-9, a-8)
nsubj(criticism-13, response-9)
cop(criticism-13, is-10)
poss(criticism-13, your-11)
amod(criticism-13, tactless-12)
ccomp(needs-7, criticism-13)
prep_of(criticism-13, capitalism-15)

(ROOT
  (S
    (S
      (ADVP (RB However))
      (, ,)
      (ADVP (JJ contrary)
        (PP (TO to)
          (NP (DT the) (NN point))))
      (NP (PRP I))
      (VP (VBP think)
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBD were)
              (VP (VBG trying)
                (S
                  (VP (TO to)
                    (VP (VB make))))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (ADJP (JJ correct)))
    (. .)))

advmod(think-8, However-1)
det(point-6, the-5)
prep_contrary_to(think-8, point-6)
nsubj(think-8, I-7)
ccomp(correct-17, think-8)
nsubj(trying-11, you-9)
xsubj(make-13, you-9)
aux(trying-11, were-10)
ccomp(think-8, trying-11)
aux(make-13, to-12)
xcomp(trying-11, make-13)
nsubj(correct-17, you-15)
cop(correct-17, are-16)
root(ROOT-0, correct-17)

