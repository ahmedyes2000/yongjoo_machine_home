(ROOT
  (S
    (VP (VB Use)
      (NP
        (NP (DT the) (JJ correct) (NNS words))
        (PP (IN for)
          (SBAR
            (WHNP (WP what))
            (S
              (S
                (NP (NNS people))
                (VP (VBP are)
                  (VP (VBG asking)
                    (PP (IN for)))))
              (CC and)
              (S
                (ADVP (RB maybe))
                (NP (DT the) (NN argument))
                (VP (MD will)
                  (VP (VB simmer)
                    (PRT (RP down))))))))))
    (. .)))

root(ROOT-0, Use-1)
det(words-4, the-2)
amod(words-4, correct-3)
dobj(Use-1, words-4)
dep(asking-9, what-6)
nsubj(asking-9, people-7)
aux(asking-9, are-8)
prepc_for(words-4, asking-9)
prep(asking-9, for-10)
advmod(simmer-16, maybe-12)
det(argument-14, the-13)
nsubj(simmer-16, argument-14)
aux(simmer-16, will-15)
prepc_for(words-4, simmer-16)
conj_and(asking-9, simmer-16)
prt(simmer-16, down-17)

(ROOT
  (S ('' '')
    (S
      (NP (NNP Universal) (NNP Healthcare))
      ('' '')
      (VP (VBZ is)
        (ADVP (RB simply))
        (NP (DT a)
          (ADJP (RB politically) (JJ correct))
          (NN term))))
    (IN for)
    (S
      (S
        (VP (VBG letting)
          (NP (DT the) (VBG ruling) (JJ political) (NN party))))
      (VP (VBP decide)
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBZ dies)
              (PP (IN during)
                (NP (DT the) (JJ current) (JJ fiscal) (NN year))))))))
    (. .)))

nn(Healthcare-3, Universal-2)
nsubj(term-10, Healthcare-3)
cop(term-10, is-5)
advmod(term-10, simply-6)
det(term-10, a-7)
advmod(correct-9, politically-8)
amod(term-10, correct-9)
root(ROOT-0, term-10)
dep(term-10, for-11)
csubj(decide-17, letting-12)
det(party-16, the-13)
amod(party-16, ruling-14)
amod(party-16, political-15)
dobj(letting-12, party-16)
ccomp(term-10, decide-17)
nsubj(dies-19, who-18)
ccomp(decide-17, dies-19)
det(year-24, the-21)
amod(year-24, current-22)
amod(year-24, fiscal-23)
prep_during(dies-19, year-24)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP
          (NP (DT the) (NN cost))
          (PP (IN of)
            (NP (NN cancer) (NNS drugs))))
        (VP (VBZ is)
          (ADVP (RBR more) (IN than))
          (NP
            (NP (DT the) (JJ economic) (NN return))
            (PP (IN on)
              (NP
                (NP (DT the) (NNS people))
                (SBAR
                  (WHNP (WP who))
                  (S
                    (VP (VBP need)
                      (NP (PRP them)))))))))))
    (, ,)
    (NP (DT the) (NN government))
    (VP (MD will)
      (VP
        (VP (VB stop)
          (S
            (VP (VBG paying)
              (PP (IN for)
                (NP (DT the) (NNS drugs))))))
        (CC and)
        (VP (VB let)
          (S
            (NP (DT the) (NNS people))
            (VP (VB die))))))
    (. .)))

advmod(return-12, When-1)
det(cost-3, the-2)
nsubj(return-12, cost-3)
nn(drugs-6, cancer-5)
prep_of(cost-3, drugs-6)
cop(return-12, is-7)
advmod(than-9, more-8)
advmod(return-12, than-9)
det(return-12, the-10)
amod(return-12, economic-11)
advcl(stop-23, return-12)
det(people-15, the-14)
prep_on(return-12, people-15)
nsubj(need-17, people-15)
rcmod(people-15, need-17)
dobj(need-17, them-18)
det(government-21, the-20)
nsubj(stop-23, government-21)
nsubj(let-29, government-21)
aux(stop-23, will-22)
root(ROOT-0, stop-23)
xcomp(stop-23, paying-24)
det(drugs-27, the-26)
prep_for(paying-24, drugs-27)
conj_and(stop-23, let-29)
det(people-31, the-30)
nsubj(die-32, people-31)
ccomp(let-29, die-32)

(ROOT
  (S
    (S
      (VP (VBP Do) (RB n't)
        (VP (VB get)
          (ADJP (RB too) (JJ sick)
            (S
              (VP (TO to)
                (VP (VB pay)
                  (NP (NNS taxes)))))))))
    (CC or)
    (S
      (NP (PRP you))
      (VP (MD will)
        (VP (VB be)
          (ADJP (JJ dead)
            (PP (IN within)
              (NP (CD 1) (NN election) (NN cycle)))))))
    (. .)))

aux(sick-5, Do-1)
neg(sick-5, n't-2)
dep(sick-5, get-3)
advmod(sick-5, too-4)
root(ROOT-0, sick-5)
aux(pay-7, to-6)
xcomp(sick-5, pay-7)
dobj(pay-7, taxes-8)
nsubj(dead-13, you-10)
aux(dead-13, will-11)
cop(dead-13, be-12)
conj_or(sick-5, dead-13)
num(cycle-17, 1-15)
nn(cycle-17, election-16)
prep_within(dead-13, cycle-17)

(ROOT
  (S
    (VP
      (VP (VB Look)
        (PP (IN at)
          (NP
            (NP (NNP England))
            (CC and)
            (NP
              (NP (DT the) (JJ other) (NNS countries))
              (NP (DT that) (NN share)))))
        (NP (PRP$ our) (`` ``) (NNS values) ('' '')))
      (CC and)
      (VP (VB have)
        (VP (VBN made)
          (S
            (VP (VBG healthcare)
              (NP (DT a) (JJ universal) (NN right)))))))
    (. .)))

root(ROOT-0, Look-1)
prep_at(Look-1, England-3)
det(countries-7, the-5)
amod(countries-7, other-6)
prep_at(Look-1, countries-7)
conj_and(England-3, countries-7)
det(share-9, that-8)
dep(countries-7, share-9)
poss(values-12, our-10)
dobj(Look-1, values-12)
aux(made-16, have-15)
conj_and(Look-1, made-16)
xcomp(made-16, healthcare-17)
det(right-20, a-18)
amod(right-20, universal-19)
dobj(healthcare-17, right-20)

(ROOT
  (S
    (NP (DT The) (NN government))
    (VP (VBZ decides)
      (SBAR
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBZ lives))))
        (CC and)
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBZ dies))))))
    (. .)))

det(government-2, The-1)
nsubj(decides-3, government-2)
root(ROOT-0, decides-3)
nsubj(lives-5, who-4)
dep(decides-3, lives-5)
nsubj(dies-8, who-7)
dep(decides-3, dies-8)
conj_and(lives-5, dies-8)

(ROOT
  (S
    (NP
      (NP (NNP Today))
      (, ,)
      (NP
        (NP (DT the) (NNP British))
        (CC and)
        (NP
          (NP (DT the) (NNPS Canadians))
          (PP (IN with)
            (NP (JJ enough) (NN money)))))
      (, ,))
    (VP (MD can)
      (VP
        (VP (VB go)
          (PP (TO to)
            (NP (NNP America)
              (CC or)
              (NNP India))))
        (CC and)
        (VP (VB get)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (PRP they))
              (VP (VBP need)
                (PP (IN by)
                  (S
                    (VP (VBG paying)
                      (PP (IN for)
                        (NP (PRP it)))
                      (PP (IN with)
                        (SBAR
                          (WHNP (WP what) (JJ little) (NN money))
                          (S
                            (NP (PRP they))
                            (VP (VBP have)
                              (VP (VBN left)
                                (PP (IN after)
                                  (NP (NNS taxes)))))))))))))))))
    (. .)))

nsubj(go-13, Today-1)
nsubj(get-19, Today-1)
det(British-4, the-3)
appos(Today-1, British-4)
det(Canadians-7, the-6)
appos(Today-1, Canadians-7)
conj_and(British-4, Canadians-7)
amod(money-10, enough-9)
prep_with(Canadians-7, money-10)
aux(go-13, can-12)
root(ROOT-0, go-13)
prep_to(go-13, America-15)
prep_to(go-13, India-17)
conj_or(America-15, India-17)
conj_and(go-13, get-19)
dobj(need-22, what-20)
nsubj(need-22, they-21)
ccomp(get-19, need-22)
prepc_by(need-22, paying-24)
prep_for(paying-24, it-26)
det(money-30, what-28)
amod(money-30, little-29)
dobj(left-33, money-30)
nsubj(left-33, they-31)
aux(left-33, have-32)
prepc_with(paying-24, left-33)
prep_after(left-33, taxes-35)

(ROOT
  (S
    (NP (JJS Most))
    (VP (MD ca) (RB n't)
      (PP (IN because)
        (NP (DT the) (NN tax) (NN burden)))
      (VP (VBZ is)
        (ADJP (RB very) (JJ high)
          (S
            (VP (TO to)
              (VP (VB pay)
                (PP (IN for)
                  (NP (DT this) (`` ``) (JJ free) ('' '') (NN care)))))))))
    (. .)))

nsubj(high-10, Most-1)
aux(high-10, ca-2)
neg(high-10, n't-3)
det(burden-7, the-5)
nn(burden-7, tax-6)
prep_because(high-10, burden-7)
cop(high-10, is-8)
advmod(high-10, very-9)
root(ROOT-0, high-10)
aux(pay-12, to-11)
xcomp(high-10, pay-12)
det(care-18, this-14)
amod(care-18, free-16)
prep_for(pay-12, care-18)

