(ROOT
  (NP
    (NP (NNP Universal))
    (PP (IN without)
      (NP (DT a) (NN doubt)))
    (PP (IN in)
      (NP (PRP$ my) (NN mind)))
    (. .)))

root(ROOT-0, Universal-1)
det(doubt-4, a-3)
prep_without(Universal-1, doubt-4)
poss(mind-7, my-6)
prep_in(Universal-1, mind-7)

(ROOT
  (S
    (NP
      (QP (JJR more) (IN than) (CD 40) (CD million))
      (NNPS Americans))
    (VP (VBP go)
      (PP (IN in)
        (NP
          (NP (NN fear))
          (PP (IN of)
            (S
              (VP
                (VP (VBG getting)
                  (S
                    (VP (VBN hurt))))
                (CC or)
                (VP (VBG becoming)
                  (ADJP (JJ sick) (RB due)
                    (S
                      (VP (TO to)
                        (VP (RB not)
                          (S
                            (VP (VBG being)
                              (ADJP (JJ able)
                                (S
                                  (VP (TO to)
                                    (VP (VB afford)
                                      (PP (TO to)))))))))))))))))))
    (. .)))

mwe(than-2, more-1)
quantmod(million-4, than-2)
number(million-4, 40-3)
num(Americans-5, million-4)
nsubj(go-6, Americans-5)
root(ROOT-0, go-6)
prep_in(go-6, fear-8)
prepc_of(fear-8, getting-10)
dep(getting-10, hurt-11)
prepc_of(fear-8, becoming-13)
conj_or(getting-10, becoming-13)
acomp(becoming-13, sick-14)
advmod(sick-14, due-15)
aux(not-17, to-16)
xcomp(sick-14, not-17)
cop(able-19, being-18)
xcomp(not-17, able-19)
aux(afford-21, to-20)
xcomp(able-19, afford-21)
prep(afford-21, to-22)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP
          (VP (VBP lose)
            (NP (DT a) (NN finger)))
          (CC and)
          (VP (VBP want)
            (SBAR (IN that)
              (S
                (NP (NN finger))
                (VP (VBD put)
                  (ADVP (RB back))
                  (PP (IN on)
                    (NP (PRP$ its)
                      (QP (JJR more) (IN than) (CD 50) (CD thousand))
                      (NNS dollars)))
                  (S
                    (VP (TO to)
                      (VP (VB replace)
                        (NP (PRP it))))))))))))
    (, ,)
    (NP (DT that))
    (VP (VBZ is)
      (ADJP (JJ ridiculous))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (NN surgery))
          (VP (VBZ is)
            (ADJP (JJ free)
              (PP (IN in)
                (NP (NNP England))))))))
    (. .)))

mark(lose-3, If-1)
nsubj(lose-3, you-2)
nsubj(want-7, you-2)
advcl(ridiculous-25, lose-3)
det(finger-5, a-4)
dobj(lose-3, finger-5)
conj_and(lose-3, want-7)
advcl(ridiculous-25, want-7)
complm(put-10, that-8)
nsubj(put-10, finger-9)
xsubj(replace-20, finger-9)
ccomp(want-7, put-10)
advmod(put-10, back-11)
poss(dollars-18, its-13)
mwe(than-15, more-14)
quantmod(thousand-17, than-15)
number(thousand-17, 50-16)
num(dollars-18, thousand-17)
prep_on(put-10, dollars-18)
aux(replace-20, to-19)
xcomp(put-10, replace-20)
dobj(replace-20, it-21)
nsubj(ridiculous-25, that-23)
cop(ridiculous-25, is-24)
root(ROOT-0, ridiculous-25)
advmod(free-29, when-26)
nsubj(free-29, surgery-27)
cop(free-29, is-28)
advcl(ridiculous-25, free-29)
prep_in(free-29, England-31)

(ROOT
  (S
    (NP (CD 50) (NN Gs))
    (VP (VBZ is)
      (ADJP (JJ enough)
        (S
          (VP (TO to)
            (VP (VB put)
              (NP
                (ADJP (JJ middle)
                  (CC or)
                  (JJR lower))
                (NN class) (NN person))
              (PP (IN into)
                (NP (NN debt)))
              (PP (IN with)
                (NP (NN ease))))))))
    (. .)))

num(Gs-2, 50-1)
nsubj(enough-4, Gs-2)
cop(enough-4, is-3)
root(ROOT-0, enough-4)
aux(put-6, to-5)
xcomp(enough-4, put-6)
amod(person-11, middle-7)
conj_or(middle-7, lower-9)
amod(person-11, lower-9)
nn(person-11, class-10)
dobj(put-6, person-11)
prep_into(put-6, debt-13)
prep_with(put-6, ease-15)

(ROOT
  (S
    (NP (DT The) (NN question) (NN becomes) ('' ''))
    (VP (MD should)
      (SBAR
        (SBAR
          (S
            (NP (PRP I))
            (ADVP (RB just))
            (VP (VBP lose)
              (NP (PRP$ my) (NN finger)))))
        (CC or)
        (SBAR
          (SINV (MD should)
            (NP (PRP I))
            (VP (VB file)
              (PP (IN for)
                (NP (NN bankruptcy) ('' ''))))))))))

det(becomes-3, The-1)
nn(becomes-3, question-2)
nsubj(should-5, becomes-3)
root(ROOT-0, should-5)
nsubj(lose-8, I-6)
advmod(lose-8, just-7)
dep(should-5, lose-8)
poss(finger-10, my-9)
dobj(lose-8, finger-10)
aux(file-14, should-12)
nsubj(file-14, I-13)
dep(should-5, file-14)
conj_or(lose-8, file-14)
prep_for(file-14, bankruptcy-16)

