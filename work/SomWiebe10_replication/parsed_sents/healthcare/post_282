(ROOT
  (S (`` ``)
    (S
      (NP (NNP GDP))
      (VP (VBZ is)
        (NP (DT a) (NNP GROSS) (NN measurement))))
    (, ,)
    (CC and)
    (S
      (SBAR (IN as)
        (S
          (VP (VBN seen)
            (PP (IN in)
              (NP
                (NP (DT the) (JJ above) (NN article))
                (SBAR
                  (S
                    (NP (JJ Canadian) (NNS systems))
                    (VP (VBD SPEND)
                      (NP
                        (QP (JJR less) (IN than) (CD US))
                        (NNS systems))))))))))
      (ADVP (RB yet))
      (NP (DT this))
      (VP (VBZ does) (RB n't)
        (ADVP (RB even))
        (VP (VB prevent)
          (NP (PRP them))
          (PP (IN from)
            (S
              (VP (VBG COSTING)
                (NP (JJR less))))))))
    (. .)))

nsubj(measurement-6, GDP-2)
cop(measurement-6, is-3)
det(measurement-6, a-4)
nn(measurement-6, GROSS-5)
root(ROOT-0, measurement-6)
mark(seen-10, as-9)
advcl(prevent-27, seen-10)
det(article-14, the-12)
amod(article-14, above-13)
prep_in(seen-10, article-14)
amod(systems-16, Canadian-15)
nsubj(SPEND-17, systems-16)
rcmod(article-14, SPEND-17)
mwe(than-19, less-18)
quantmod(US-20, than-19)
num(systems-21, US-20)
dobj(SPEND-17, systems-21)
advmod(prevent-27, yet-22)
nsubj(prevent-27, this-23)
aux(prevent-27, does-24)
neg(prevent-27, n't-25)
advmod(prevent-27, even-26)
conj_and(measurement-6, prevent-27)
dobj(prevent-27, them-28)
prepc_from(prevent-27, COSTING-30)
dobj(COSTING-30, less-31)

(ROOT
  (S ('' '')
    (NP (NNP Please))
    (VP (VBP see)
      (ADVP (RB above)))
    (. .)))

nsubj(see-3, Please-2)
root(ROOT-0, see-3)
advmod(see-3, above-4)

(ROOT
  (S (`` ``)
    (S
      (ADVP (WRB how))
      (NP (JJ active) (DT the) (JJ typical) (JJ American) (NN lifestyle))
      (VP (VBZ is))
      ('' ''))
    (, ,)
    (S
      (SBAR
        (WHADVP (WRB Where))
        (S
          (VP (VBZ is)
            (NP (PRP$ your) (NN evidence)))))
      (NP (DT that) (NNPS Americans))
      (VP (VBP have)
        (NP
          (NP (DT a)
            (ADJP (RBR more) (JJ sedentary))
            (NN lifestyle))
          (PP (IN than)
            (NP (NNPS Canadians) (, ,) (NNP Australians)
              (CC and)
              (DT the) (NNPS British))))))
    (. ?)))

advmod(is-8, how-2)
amod(lifestyle-7, active-3)
det(lifestyle-7, the-4)
amod(lifestyle-7, typical-5)
amod(lifestyle-7, American-6)
nsubj(is-8, lifestyle-7)
root(ROOT-0, is-8)
advmod(evidence-14, Where-11)
cop(evidence-14, is-12)
poss(evidence-14, your-13)
advcl(have-17, evidence-14)
det(Americans-16, that-15)
nsubj(have-17, Americans-16)
ccomp(is-8, have-17)
det(lifestyle-21, a-18)
advmod(sedentary-20, more-19)
amod(lifestyle-21, sedentary-20)
dobj(have-17, lifestyle-21)
nn(Australians-25, Canadians-23)
nn(British-28, Australians-25)
conj_and(Australians-25, the-27)
nn(British-28, the-27)
prep_than(lifestyle-21, British-28)

(ROOT
  (S
    (S (`` ``)
      (NP (NN crime))
      (VP (VBZ rates)
        (PRN (-LRB- -LRB-)
          (PP (IN like)
            (NP (NN murder)))
          (-RRB- -RRB-)))
      ('' ''))
    (, ,)
    (NP (EX There))
    (VP (VBZ is)
      (NP (NN evidence))
      (SBAR (IN that)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP
              (NP (JJR more) (NN gun) (NN crime))
              (PP (IN in)
                (NP (NNP America))))))))
    (. .)))

nsubj(rates-3, crime-2)
ccomp(is-11, rates-3)
dep(rates-3, like-5)
pobj(like-5, murder-6)
expl(is-11, There-10)
root(ROOT-0, is-11)
nsubj(is-11, evidence-12)
complm(is-15, that-13)
expl(is-15, there-14)
ccomp(is-11, is-15)
amod(crime-18, more-16)
nn(crime-18, gun-17)
nsubj(is-15, crime-18)
prep_in(crime-18, America-20)

(ROOT
  (S
    (ADVP (RB Perhaps))
    (NP (PRP you))
    (VP (MD should)
      (VP (VB attempt)
        (S
          (VP (TO to)
            (VP (VB quantify)
              (NP (PRP it))
              (SBAR (IN if)
                (S
                  (NP (PRP you))
                  (VP (VBP want)
                    (S
                      (VP (TO to)
                        (VP (VB argue)
                          (SBAR (IN that)
                            (S
                              (NP (DT this))
                              (VP (VBZ helps)
                                (S
                                  (VP (TO to)
                                    (VP (VB explain)
                                      (NP
                                        (NP (DT some))
                                        (PP (IN of)
                                          (NP
                                            (NP (DT the) (NN difference))
                                            (PP (IN in)
                                              (NP (NN life) (NN expectancy)))))))))))))))))))))))
    (. .)))

advmod(attempt-4, Perhaps-1)
nsubj(attempt-4, you-2)
xsubj(quantify-6, you-2)
aux(attempt-4, should-3)
root(ROOT-0, attempt-4)
aux(quantify-6, to-5)
xcomp(attempt-4, quantify-6)
dobj(quantify-6, it-7)
mark(want-10, if-8)
nsubj(want-10, you-9)
xsubj(argue-12, you-9)
advcl(quantify-6, want-10)
aux(argue-12, to-11)
xcomp(want-10, argue-12)
complm(helps-15, that-13)
nsubj(helps-15, this-14)
xsubj(explain-17, this-14)
ccomp(argue-12, helps-15)
aux(explain-17, to-16)
xcomp(helps-15, explain-17)
dobj(explain-17, some-18)
det(difference-21, the-20)
prep_of(some-18, difference-21)
nn(expectancy-24, life-23)
prep_in(difference-21, expectancy-24)

(ROOT
  (SBARQ
    (S
      (VP (`` ``) (VB accidental)
        (ADVP
          (ADVP (RB deaths))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (NN car) (NNS crashes))
              (PP (IN for)
                (NP (NN instance))))
            (-RRB- -RRB-)))
        ('' '')))
    (, ,)
    (WHNP (WRB Where))
    (SQ (VBZ is)
      (NP
        (NP (PRP$ your) (NN evidence))
        (SBAR (IN that)
          (S
            (NP (EX there))
            (VP (VBP are)
              (NP
                (NP (JJR more) (NN car) (NNS crashes))
                (PP (IN per)
                  (NP
                    (NP (NN capita))
                    (PP (IN in)
                      (NP (NNP America))))))
              (ADVP (IN than)
                (PP (IN in)
                  (NP (NNP Canada) (, ,) (NNP Australia)
                    (CC and)
                    (NNP Great) (NNP Britain)))))))))
    (. ?)))

dep(is-13, accidental-2)
advmod(accidental-2, deaths-3)
nn(crashes-6, car-5)
dep(deaths-3, crashes-6)
prep_for(crashes-6, instance-8)
attr(is-13, Where-12)
root(ROOT-0, is-13)
poss(evidence-15, your-14)
nsubj(is-13, evidence-15)
complm(are-18, that-16)
expl(are-18, there-17)
dep(evidence-15, are-18)
amod(crashes-21, more-19)
nn(crashes-21, car-20)
nsubj(are-18, crashes-21)
prep_per(crashes-21, capita-23)
prep_in(capita-23, America-25)
advmod(are-18, than-26)
nn(Britain-33, Canada-28)
conj_and(Canada-28, Australia-30)
nn(Britain-33, Australia-30)
conj_and(Canada-28, Great-32)
nn(Britain-33, Great-32)
prep_in(than-26, Britain-33)

(ROOT
  (SBARQ
    (WHADVP (WRB Where))
    (SQ (VBZ is)
      (NP
        (NP (PRP$ your) (NN evidence))
        (SBAR (IN that)
          (S
            (NP (EX there))
            (VP (VBP are)
              (NP
                (NP
                  (ADJP (RBR more) (JJ accidental))
                  (NNS deaths))
                (ADJP (IN per) (NN capita)))
              (PP (IN in)
                (NP (NNP America)))
              (PP (IN than)
                (NP (DT the) (JJ other) (CD three) (NNS countries))))))))
    (. ?)))

advmod(is-2, Where-1)
root(ROOT-0, is-2)
poss(evidence-4, your-3)
nsubj(is-2, evidence-4)
complm(are-7, that-5)
expl(are-7, there-6)
dep(evidence-4, are-7)
advmod(accidental-9, more-8)
amod(deaths-10, accidental-9)
nsubj(are-7, deaths-10)
dep(capita-12, per-11)
amod(deaths-10, capita-12)
prep_in(are-7, America-14)
det(countries-19, the-16)
amod(countries-19, other-17)
num(countries-19, three-18)
prep_than(are-7, countries-19)

(ROOT
  (S (`` ``)
    (NP (PRP you))
    (VP (VBP name)
      (NP (PRP it)))
    ('' '') (. .)))

nsubj(name-3, you-2)
root(ROOT-0, name-3)
dobj(name-3, it-4)

(ROOT
  (S
    (ADJP (VB No.))
    (. .)))

root(ROOT-0, No.-1)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP want)
          (S
            (VP (TO to)
              (VP (VB argue)
                (NP (DT a) (NN case))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP name)
      (NP (PRP it)))
    (. .)))

mark(want-3, If-1)
nsubj(want-3, you-2)
xsubj(argue-5, you-2)
advcl(name-10, want-3)
aux(argue-5, to-4)
xcomp(want-3, argue-5)
det(case-7, a-6)
dobj(argue-5, case-7)
nsubj(name-10, you-9)
root(ROOT-0, name-10)
dobj(name-10, it-11)

(ROOT
  (S ('' '')
    (PP (IN Despite)
      (NP
        (NP (DT the) (NN fact))
        (SBAR (IN that)
          (S
            (NP (PDT all) (DT these))
            (VP (VBP need)
              (S
                (VP (TO to)
                  (VP (VB be)
                    (VP (VBN taken)
                      (PP (IN into)))))))))))
    (VP (VBP account)
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP INSIST)
            (SBAR (IN that)
              (S
                (NP (PRP$ your) (JJ precious) (JJ 2-year) (NN difference))
                (VP (VBZ justifies)
                  (NP
                    (NP (DT the) (NN government) (NN takeover))
                    (PP (IN of)
                      (NP (PRP$ our) (JJ entire) (NN healthcare) (NN system)))))))))))
    (. .)))

det(fact-4, the-3)
dobj(need-8, fact-4)
prep_into(taken-11, fact-4)
prep_despite(account-13, fact-4)
complm(need-8, that-5)
predet(these-7, all-6)
nsubj(need-8, these-7)
xsubj(taken-11, these-7)
dep(fact-4, need-8)
aux(taken-11, to-9)
auxpass(taken-11, be-10)
xcomp(need-8, taken-11)
root(ROOT-0, account-13)
nsubj(INSIST-15, you-14)
ccomp(account-13, INSIST-15)
complm(justifies-21, that-16)
poss(difference-20, your-17)
amod(difference-20, precious-18)
amod(difference-20, 2-year-19)
nsubj(justifies-21, difference-20)
ccomp(INSIST-15, justifies-21)
det(takeover-24, the-22)
nn(takeover-24, government-23)
dobj(justifies-21, takeover-24)
poss(system-29, our-26)
amod(system-29, entire-27)
nn(system-29, healthcare-28)
prep_of(takeover-24, system-29)

(ROOT
  (FRAG ('' '')
    (NP (NNP Not))
    (PP (IN at)
      (NP (DT all)))
    (. .)))

root(ROOT-0, Not-2)
dep(Not-2, at-3)
pobj(at-3, all-4)

(ROOT
  (S
    (NP (DT A) (JJ universal) (JJ medical) (NN scheme))
    (VP (VBZ does) (RB not)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB take)
              (PP (IN over)
                (NP (NN everything))))))))
    (. .)))

det(scheme-4, A-1)
amod(scheme-4, universal-2)
amod(scheme-4, medical-3)
nsubj(have-7, scheme-4)
xsubj(take-9, scheme-4)
aux(have-7, does-5)
neg(have-7, not-6)
root(ROOT-0, have-7)
aux(take-9, to-8)
xcomp(have-7, take-9)
prep_over(take-9, everything-11)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (MD ca) (RB n't)
        (VP (VB speak)
          (PP (IN for)
            (NP (NNP Canada))))))
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ 's)
        (ADVP (RB certainly))
        (NP
          (NP (RB not) (DT the) (NN case))
          (PP (IN in)
            (NP (NNP Australia))))))
    (. .)))

nsubj(speak-4, I-1)
aux(speak-4, ca-2)
neg(speak-4, n't-3)
root(ROOT-0, speak-4)
prep_for(speak-4, Canada-6)
nsubj(case-13, it-8)
cop(case-13, 's-9)
advmod(case-13, certainly-10)
neg(case-13, not-11)
det(case-13, the-12)
conj_but(speak-4, case-13)
prep_in(case-13, Australia-15)

(ROOT
  (S
    (NP (NNP GDP))
    (VP (VBZ includes)
      (NP (DT both) (JJ private)
        (CC and)
        (NNP Government) (NN expenditure)))
    (. .)))

nsubj(includes-2, GDP-1)
root(ROOT-0, includes-2)
det(expenditure-7, both-3)
amod(expenditure-7, private-4)
conj_and(private-4, Government-6)
amod(expenditure-7, Government-6)
dobj(includes-2, expenditure-7)

(ROOT
  (S
    (NP (PRP$ Your) (NNS fears))
    (VP (VBP are) (RB not)
      (ADJP (JJ justified)))
    (. .)))

poss(fears-2, Your-1)
nsubj(justified-5, fears-2)
cop(justified-5, are-3)
neg(justified-5, not-4)
root(ROOT-0, justified-5)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBD explained)
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (NNP GDPs))
          (VP
            (VP
              (PP (IN with)
                (NP (DT each) (NN nation)))
              (VBP are)
              (NP (NNP GROSS) (NNS measurements)))
            (CC and)
            (VP
              (ADVP (RB thus))
              (MD would)
              (VP (VB need)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (VP (VBN adjusted)
                        (PP (IN for)
                          (NP
                            (NP (JJ different) (NNS sizes))
                            (PP (IN in)
                              (NP (NNS economies)))))))))
                (SBAR (IN before)
                  (S
                    (NP (PRP you))
                    (VP (MD can)
                      (VP (VB draw)
                        (NP (NNS conclusions))))))))))))
    (. .)))

nsubj(explained-3, I-2)
root(ROOT-0, explained-3)
advmod(measurements-11, why-4)
nsubj(measurements-11, GDPs-5)
nsubj(need-15, GDPs-5)
xsubj(adjusted-18, GDPs-5)
det(nation-8, each-7)
prep_with(measurements-11, nation-8)
cop(measurements-11, are-9)
nn(measurements-11, GROSS-10)
advcl(explained-3, measurements-11)
advmod(need-15, thus-13)
aux(need-15, would-14)
advcl(explained-3, need-15)
conj_and(measurements-11, need-15)
aux(adjusted-18, to-16)
auxpass(adjusted-18, be-17)
xcomp(need-15, adjusted-18)
amod(sizes-21, different-20)
prep_for(adjusted-18, sizes-21)
prep_in(sizes-21, economies-23)
mark(draw-27, before-24)
nsubj(draw-27, you-25)
aux(draw-27, can-26)
advcl(need-15, draw-27)
dobj(draw-27, conclusions-28)

(ROOT
  (S ('' '')
    (S
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (NNP America))
          (VP (VBZ spends)
            (NP
              (NP (DT a) (JJR greater) (NN PROPORTION))
              (PP (IN of)
                (NP (PRP$ its) (NNP Gross) (JJ Domestic) (NN Product))))
            (PP (IN on)
              (NP (NN health))))))
      (VP (VBP care)
        (PP (IN than)
          (NP (JJ other) (NNS countries)))))
    (, ,)
    (CC and)
    (S
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (NNP America))
          (VP (VBZ has)
            (NP
              (NP (DT the) (JJS largest) (NN economy))
              (PP (IN in)
                (NP (DT the) (JJ whole) (NN world)))))))
      (, ,)
      (NP (PRP it))
      (VP (VBZ suggests)
        (SBAR (IN that)
          (S
            (NP (NNP America))
            (VP (VBZ is) (RB not)
              (VP (VBG getting)
                (NP
                  (NP (DT a) (JJ good) (NN deal))
                  (PP (IN for)
                    (NP (NN health) (NN care))))
                (SBAR (IN because)
                  (S
                    (NP (PRP it))
                    (VP (VBZ 's)
                      (VP
                        (VP (VBG paying)
                          (NP (JJR more)))
                        (CC and)
                        (VP (VBG getting)
                          (ADJP (JJR less)))))))))))))
    (. .)))

advmod(spends-4, When-2)
nsubj(spends-4, America-3)
advcl(care-15, spends-4)
csubj(care-15, spends-4)
det(PROPORTION-7, a-5)
amod(PROPORTION-7, greater-6)
dobj(spends-4, PROPORTION-7)
poss(Product-12, its-9)
nn(Product-12, Gross-10)
amod(Product-12, Domestic-11)
prep_of(PROPORTION-7, Product-12)
prep_on(spends-4, health-14)
root(ROOT-0, care-15)
amod(countries-18, other-17)
prep_than(care-15, countries-18)
advmod(has-23, when-21)
nsubj(has-23, America-22)
advcl(suggests-33, has-23)
det(economy-26, the-24)
amod(economy-26, largest-25)
dobj(has-23, economy-26)
det(world-30, the-28)
amod(world-30, whole-29)
prep_in(economy-26, world-30)
nsubj(suggests-33, it-32)
conj_and(care-15, suggests-33)
complm(getting-38, that-34)
nsubj(getting-38, America-35)
aux(getting-38, is-36)
neg(getting-38, not-37)
ccomp(suggests-33, getting-38)
det(deal-41, a-39)
amod(deal-41, good-40)
dobj(getting-38, deal-41)
nn(care-44, health-43)
prep_for(deal-41, care-44)
mark(paying-48, because-45)
nsubj(paying-48, it-46)
nsubj(less-52, it-46)
aux(paying-48, 's-47)
advcl(getting-38, paying-48)
dobj(paying-48, more-49)
dep(less-52, getting-51)
advcl(getting-38, less-52)
conj_and(paying-48, less-52)

(ROOT
  (S
    (ADVP (RB Finally))
    (, ,)
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN difference))
        (PP (IN between)
          (S
            (VP
              (VP (VBG arguing)
                (NP (DT a) (NN point)))
              (CC and)
              (VP
                (VP (VBG making)
                  (NP (DT an) (NN assertion)))
                (CC or)
                (VP (VBG providing)
                  (NP (DT a) (NN link)))))))))
    (. .)))

advmod(is-4, Finally-1)
expl(is-4, there-3)
root(ROOT-0, is-4)
det(difference-6, a-5)
nsubj(is-4, difference-6)
prepc_between(difference-6, arguing-8)
det(point-10, a-9)
dobj(arguing-8, point-10)
prepc_between(difference-6, making-12)
conj_and(arguing-8, making-12)
det(assertion-14, an-13)
dobj(making-12, assertion-14)
conj_and(arguing-8, providing-16)
conj_or(making-12, providing-16)
det(link-18, a-17)
dobj(providing-16, link-18)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP
      (VP (VBP 've)
        (VP (VBN pointed)
          (PP (IN out)
            (NP
              (QP (JJ several) (NNS times)))
            (ADVP (RB already)))
          (SBAR (IN that)
            (S
              (NP
                (NP (DT the) (JJ tiny) (JJ 2-year) (NN difference))
                (SBAR
                  (S
                    (NP (PRP you))
                    (VP (VBP keep)
                      (S
                        (VP (VBG touting)))))))
              (VP (VBZ is) (RB not)
                (ADVP (RB only)
                  (PP (TO to)
                    (NP (RB little))))
                (S
                  (VP (TO to)
                    (VP (VB call)
                      (PP (IN for)
                        (S
                          (VP (VBG scrapping)
                            (PRT (RP out))
                            (NP (JJ entire) (NN system)))))))))))))
      (CC but)
      (VP
        (ADVP (RB also))
        (VBP have)
        (VP (VBN pointed)
          (PRT (RP out))
          (SBAR (IN that)
            (SINV
              (ADVP (IN in)
                (NP (DT no) (NN instance)))
              (VBP have)
              (NP (PRP you))
              (VP
                (ADVP (RB ever))
                (VBN offset)
                (NP
                  (NP (JJ other) (NNS factors))
                  (PP (IN of)
                    (NP
                      (NP (DT a) (VBN given) (NN nation))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (VBP affect)
                            (NP (NN life) (NN expectancy)))))))))
              (. .))))))
    (. .)))

nsubj(pointed-4, I-2)
nsubj(pointed-32, I-2)
aux(pointed-4, 've-3)
root(ROOT-0, pointed-4)
quantmod(times-7, several-6)
prep_out(pointed-4, times-7)
advmod(pointed-4, already-8)
complm(is-17, that-9)
det(difference-13, the-10)
amod(difference-13, tiny-11)
amod(difference-13, 2-year-12)
dobj(keep-15, difference-13)
nsubj(is-17, difference-13)
xsubj(call-23, difference-13)
nsubj(keep-15, you-14)
rcmod(difference-13, keep-15)
xcomp(keep-15, touting-16)
ccomp(pointed-4, is-17)
neg(is-17, not-18)
advmod(is-17, only-19)
prep(only-19, to-20)
pobj(to-20, little-21)
aux(call-23, to-22)
xcomp(is-17, call-23)
prepc_for(call-23, scrapping-25)
prt(scrapping-25, out-26)
amod(system-28, entire-27)
dobj(scrapping-25, system-28)
advmod(pointed-32, also-30)
aux(pointed-32, have-31)
conj_but(pointed-4, pointed-32)
prt(pointed-32, out-33)
complm(offset-41, that-34)
advmod(offset-41, in-35)
det(instance-37, no-36)
pobj(in-35, instance-37)
aux(offset-41, have-38)
nsubj(offset-41, you-39)
advmod(offset-41, ever-40)
dep(pointed-32, offset-41)
amod(factors-43, other-42)
dobj(offset-41, factors-43)
det(nation-47, a-45)
amod(nation-47, given-46)
prep_of(factors-43, nation-47)
nsubj(affect-49, nation-47)
rcmod(nation-47, affect-49)
nn(expectancy-51, life-50)
dobj(affect-49, expectancy-51)

(ROOT
  (S ('' '')
    (ADVP (CC But)
      (RB then))
    (, ,)
    (NP (DT neither))
    (VP (VBP have)
      (NP (PRP you))
      (, ,)
      (PP (IN except)
        (PP (IN for)
          (S
            (VP (VBG suggesting)
              (NP (DT some) (JJ genetic) (NNS differences)))))))
    (. .)))

cc(then-3, But-2)
advmod(have-6, then-3)
nsubj(have-6, neither-5)
root(ROOT-0, have-6)
dobj(have-6, you-7)
prepc_except_for(have-6, for-10)
pcomp(have-6, suggesting-11)
det(differences-14, some-12)
amod(differences-14, genetic-13)
dobj(suggesting-11, differences-14)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (ADVP (RB however))
    (, ,)
    (NP (PRP you))
    (VP (VBP make)
      (NP (DT some) (NNS suggestions)))
    (. .)))

advmod(make-6, Now-1)
advmod(make-6, however-3)
nsubj(make-6, you-5)
root(ROOT-0, make-6)
det(suggestions-8, some-7)
dobj(make-6, suggestions-8)

(ROOT
  (SBARQ (`` ``)
    (SBAR
      (WHNP (WDT which))
      (S
        (VP (VBP include)
          (ADVP (RB dietary))
          (NP (NNS choices))
          ('' ''))))
    (, ,)
    (WHADVP (WRB Where))
    (SQ (VBZ is)
      (NP
        (NP (PRP$ your) (NN evidence))
        (SBAR (IN that)
          (S
            (NP (NNPS Americans))
            (VP (VBP make)
              (NP (JJ different) (NN dietary) (NNS choices))
              (PP (TO to)
                (NP (NNPS Canadians) (, ,) (NNP Australians)
                  (CC and)
                  (DT the) (NNPS British))))))))
    (. ?)))

nsubj(include-3, which-2)
dep(is-9, include-3)
advmod(include-3, dietary-4)
dobj(include-3, choices-5)
advmod(is-9, Where-8)
root(ROOT-0, is-9)
poss(evidence-11, your-10)
nsubj(is-9, evidence-11)
complm(make-14, that-12)
nsubj(make-14, Americans-13)
dep(evidence-11, make-14)
amod(choices-17, different-15)
nn(choices-17, dietary-16)
dobj(make-14, choices-17)
nn(Australians-21, Canadians-19)
nn(British-24, Australians-21)
conj_and(Australians-21, the-23)
nn(British-24, the-23)
prep_to(make-14, British-24)

