(ROOT
  (S
    (NP (JJ Single-payer) (NN health) (NN care))
    (VP (VBZ erodes)
      (NP
        (NP (NN competition))
        (PP (IN in)
          (NP (NN price)
            (CC and)
            (NN value)))
        (SBAR
          (S
            (NP
              (NP (DT The) (NN notion))
              (PP (IN of)
                (NP
                  (NP (DT the) (JJ free) (NNS markets))
                  (PP (IN as)
                    (NP
                      (NP (DT a) (NN source))
                      (PP (IN of)
                        (NP (NN efficiency))))))))
            (VP (VBZ dates)
              (PRT (RP back))
              (PP (TO to)
                (NP (NNP Adam) (NNP Smith))))))))
    (. .)))

amod(care-3, Single-payer-1)
nn(care-3, health-2)
nsubj(erodes-4, care-3)
root(ROOT-0, erodes-4)
dobj(erodes-4, competition-5)
dobj(dates-21, competition-5)
prep_in(competition-5, price-7)
prep_in(competition-5, value-9)
conj_and(price-7, value-9)
det(notion-11, The-10)
nsubj(dates-21, notion-11)
det(markets-15, the-13)
amod(markets-15, free-14)
prep_of(notion-11, markets-15)
det(source-18, a-17)
prep_as(markets-15, source-18)
prep_of(source-18, efficiency-20)
rcmod(competition-5, dates-21)
prt(dates-21, back-22)
nn(Smith-25, Adam-24)
prep_to(dates-21, Smith-25)

(ROOT
  (S
    (NP (DT The) (NN health) (NN care) (NN industry))
    (VP (VBZ is)
      (NP
        (NP (DT no) (NN exception))
        (PP (TO to)
          (NP (DT this) (NN rule)))))
    (. .)))

det(industry-4, The-1)
nn(industry-4, health-2)
nn(industry-4, care-3)
nsubj(exception-7, industry-4)
cop(exception-7, is-5)
det(exception-7, no-6)
root(ROOT-0, exception-7)
det(rule-10, this-9)
prep_to(exception-7, rule-10)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (ADJP (JJ open)
            (PP (TO to)
              (NP (DT the) (NNS free-markets)))))))
    (, ,)
    (NP (NNS consumers))
    (VP (MD will)
      (VP
        (VP (VB shop)
          (PP (IN for)))
        (CC and)
        (VP (VB purchase)
          (NP
            (NP (DT the) (JJS best) (NN price))
            (CC and)
            (NP (NN value))))))
    (. .)))

mark(open-4, If-1)
nsubj(open-4, it-2)
cop(open-4, is-3)
advcl(shop-11, open-4)
det(free-markets-7, the-6)
prep_to(open-4, free-markets-7)
nsubj(shop-11, consumers-9)
nsubj(purchase-14, consumers-9)
aux(shop-11, will-10)
root(ROOT-0, shop-11)
prep(shop-11, for-12)
conj_and(shop-11, purchase-14)
det(price-17, the-15)
amod(price-17, best-16)
dobj(purchase-14, price-17)
dobj(purchase-14, value-19)
conj_and(price-17, value-19)

(ROOT
  (S
    (NP (NN Pressure))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN placed)
          (PP (IN on)
            (NP (NN insurance) (NNS companies)))
          (S
            (VP (TO to)
              (VP
                (VP (VB cut)
                  (NP (NNS costs)))
                (CC and)
                (VP (VB sell)
                  (NP (PRP$ their) (NN surface))
                  (PP (IN at)
                    (NP
                      (NP (DT a) (JJR lower) (NN price))
                      (PP (IN for)
                        (NP (JJR greater) (NN value))))))))))))
    (. .)))

nsubjpass(placed-4, Pressure-1)
aux(placed-4, will-2)
auxpass(placed-4, be-3)
root(ROOT-0, placed-4)
nn(companies-7, insurance-6)
prep_on(placed-4, companies-7)
aux(cut-9, to-8)
xcomp(placed-4, cut-9)
dobj(cut-9, costs-10)
xcomp(placed-4, sell-12)
conj_and(cut-9, sell-12)
poss(surface-14, their-13)
dobj(sell-12, surface-14)
det(price-18, a-16)
amod(price-18, lower-17)
prep_at(sell-12, price-18)
amod(value-21, greater-20)
prep_for(price-18, value-21)

(ROOT
  (S
    (NP (JJ Free) (JJ universal) (NN health) (NN care))
    (VP (MD would)
      (VP
        (VP (VB interrupt)
          (NP (DT this)))
        (, ,)
        (VP (VB reduce)
          (NP (NN efficiency)))
        (, ,)
        (CC and)
        (VP (VB increase)
          (NP (NNS costs)))))
    (. .)))

amod(care-4, Free-1)
amod(care-4, universal-2)
nn(care-4, health-3)
nsubj(interrupt-6, care-4)
nsubj(reduce-9, care-4)
nsubj(increase-13, care-4)
aux(interrupt-6, would-5)
root(ROOT-0, interrupt-6)
dobj(interrupt-6, this-7)
conj_and(interrupt-6, reduce-9)
dobj(reduce-9, efficiency-10)
conj_and(interrupt-6, increase-13)
dobj(increase-13, costs-14)

