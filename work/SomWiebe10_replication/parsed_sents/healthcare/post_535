(ROOT
  (S
    (S
      (INTJ (UH OK))
      (, ,)
      (NP (PRP it))
      (VP (MD would)
        (VP (VB get)
          (ADJP (JJ rid)
            (PP (IN of)
              (NP (DT some) (NNS problems))))
          (PP (IN with)
            (NP (DT the) (JJ current) (NN health) (NN care) (NN system))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (MD would)
        (VP (VB create)
          (NP
            (NP (DT a) (JJ whole) (JJ new) (NN set))
            (PP (IN of)
              (NP (NNS problems)))))))
    (. .)))

dep(rid-6, OK-1)
nsubj(rid-6, it-3)
aux(rid-6, would-4)
dep(rid-6, get-5)
root(ROOT-0, rid-6)
det(problems-9, some-8)
prep_of(rid-6, problems-9)
det(system-15, the-11)
amod(system-15, current-12)
nn(system-15, health-13)
nn(system-15, care-14)
prep_with(rid-6, system-15)
nsubj(create-20, it-18)
aux(create-20, would-19)
conj_but(rid-6, create-20)
det(set-24, a-21)
amod(set-24, whole-22)
amod(set-24, new-23)
dobj(create-20, set-24)
prep_of(set-24, problems-26)

(ROOT
  (S
    (VP (VB Look)
      (PP (IN at)
        (NP
          (NP (DT the) (JJ other) (NNS countries))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBP have)
                (NP (NNP Universal) (NNP Health) (NNP Care))))))))
    (. .)))

root(ROOT-0, Look-1)
det(countries-5, the-3)
amod(countries-5, other-4)
prep_at(Look-1, countries-5)
nsubj(have-7, countries-5)
rcmod(countries-5, have-7)
nn(Care-10, Universal-8)
nn(Care-10, Health-9)
dobj(have-7, Care-10)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (POS 's))
        (VP (VB take)
          (NP (PRP$ your) (NN example)))))
    (, ,)
    (NP (NNP Sweden))
    (. .)))

root(ROOT-0, Let-1)
nsubj(take-3, 's-2)
ccomp(Let-1, take-3)
poss(example-5, your-4)
dobj(take-3, example-5)
dep(Let-1, Sweden-7)

(ROOT
  (S
    (NP (NNP Sweden))
    (VP (VBZ has)
      (NP
        (NP (DT a)
          (ADJP (RB reasonably) (JJ manageable))
          (NN population))
        (PP (IN of)
          (NP
            (QP (RB around) (CD nine) (CD million))))))
    (. .)))

nsubj(has-2, Sweden-1)
root(ROOT-0, has-2)
det(population-6, a-3)
advmod(manageable-5, reasonably-4)
amod(population-6, manageable-5)
dobj(has-2, population-6)
quantmod(million-10, around-8)
number(million-10, nine-9)
prep_of(population-6, million-10)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (ADJP (IN about)
        (NP
          (NP
            (QP (RB as) (JJ much) (IN as) (CD one)))
          (PP (IN of)
            (NP
              (NP (DT the) (JJ many) (JJ large) (JJ metropolitan) (NNS areas))
              (PP (IN in)
                (NP (DT the) (NNP United) (NNPS States))))))))
    (. .)))

nsubj(about-3, That-1)
cop(about-3, 's-2)
root(ROOT-0, about-3)
quantmod(one-7, as-4)
quantmod(one-7, much-5)
quantmod(one-7, as-6)
dep(about-3, one-7)
det(areas-13, the-9)
amod(areas-13, many-10)
amod(areas-13, large-11)
amod(areas-13, metropolitan-12)
prep_of(one-7, areas-13)
det(States-17, the-15)
nn(States-17, United-16)
prep_in(areas-13, States-17)

(ROOT
  (S
    (NP (DT The) (NNP Sweden) (NN government))
    (VP (VBZ does) (RB not)
      (VP (VB need)
        (NP
          (QP (RB nearly) (RB as) (JJ much))
          (NN money))
        (SBAR (IN as)
          (S
            (NP (DT the) (JJ American) (NN government))
            (VP (MD would)
              (S
                (VP (TO to)
                  (VP (VB supply)
                    (NP (PRP$ its) (NN population))
                    (PP (IN with)
                      (NP (NN health) (NN care)))))))))))
    (. .)))

det(government-3, The-1)
nn(government-3, Sweden-2)
nsubj(need-6, government-3)
aux(need-6, does-4)
neg(need-6, not-5)
root(ROOT-0, need-6)
quantmod(much-9, nearly-7)
quantmod(much-9, as-8)
num(money-10, much-9)
dobj(need-6, money-10)
mark(would-15, as-11)
det(government-14, the-12)
amod(government-14, American-13)
nsubj(would-15, government-14)
xsubj(supply-17, government-14)
advcl(need-6, would-15)
aux(supply-17, to-16)
xcomp(would-15, supply-17)
poss(population-19, its-18)
dobj(supply-17, population-19)
nn(care-22, health-21)
prep_with(supply-17, care-22)

(ROOT
  (S
    (NP (DT The) (JJ American) (NN government))
    (VP (MD ca) (RB n't)
      (ADVP (RB even))
      (VP (VB afford)
        (NP
          (NP (DT the) (NNS services))
          (SBAR
            (S
              (NP (PRP it))
              (VP (VBZ offers)
                (ADVP (RB now))))))))
    (. .)))

det(government-3, The-1)
amod(government-3, American-2)
nsubj(afford-7, government-3)
aux(afford-7, ca-4)
neg(afford-7, n't-5)
advmod(afford-7, even-6)
root(ROOT-0, afford-7)
det(services-9, the-8)
dobj(afford-7, services-9)
dobj(offers-11, services-9)
nsubj(offers-11, it-10)
rcmod(services-9, offers-11)
advmod(offers-11, now-12)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT this))
        (VP (VBD were)
          (VP (VBN passed)))))
    (, ,)
    (NP (NNS taxes))
    (VP (MD would)
      (VP (VB be)
        (ADJP (JJ outrageous))))
    (. .)))

mark(passed-4, If-1)
nsubjpass(passed-4, this-2)
auxpass(passed-4, were-3)
advcl(outrageous-9, passed-4)
nsubj(outrageous-9, taxes-6)
aux(outrageous-9, would-7)
cop(outrageous-9, be-8)
root(ROOT-0, outrageous-9)

(ROOT
  (S
    (NP (DT The) (NN country))
    (VP (MD would) (RB either)
      (VP
        (VP (VB take)
          (NP
            (NP (JJR more)
              (CC and)
              (JJR more))
            (PP (IN of)
              (NP
                (NP (PRP$ its) (NN citizen) (POS 's))
                (NN money)))))
        (, ,)
        (CC or)
        (VP (VB become)
          (S
            (NP (NNS trillions)
              (CC and)
              (NNS trillions))
            (NP
              (NP (JJR more) (NNS dollars))
              (PP (IN in)
                (NP (NN debt))))))))
    (. .)))

det(country-2, The-1)
nsubj(take-5, country-2)
nsubj(become-16, country-2)
aux(take-5, would-3)
advmod(take-5, either-4)
root(ROOT-0, take-5)
dobj(take-5, more-6)
dobj(take-5, more-8)
conj_and(more-6, more-8)
poss(citizen-11, its-10)
poss(money-13, citizen-11)
prep_of(more-6, money-13)
conj_or(take-5, become-16)
nsubj(dollars-21, trillions-17)
conj_and(trillions-17, trillions-19)
nsubj(dollars-21, trillions-19)
amod(dollars-21, more-20)
xcomp(become-16, dollars-21)
prep_in(dollars-21, debt-23)

