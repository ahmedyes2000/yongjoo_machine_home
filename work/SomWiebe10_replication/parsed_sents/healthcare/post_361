(ROOT
  (S (`` ``)
    (NP (PRP You))
    (VP (VBP 're)
      (ADJP (RB absolutely) (JJ correct)))
    (. .)))

nsubj(correct-5, You-2)
cop(correct-5, 're-3)
advmod(correct-5, absolutely-4)
root(ROOT-0, correct-5)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP exist)
      (ADVP (RB solely))
      (PP
        (PP (IN on)
          (NP (PRP$ your) (JJ own)))
        (CC and)
        (PP (IN in)
          (NP
            (NP (DT no) (NN way))
            (SBAR
              (S
                (VP (VBP do)
                  (SBAR
                    (S
                      (NP (PRP you))
                      (VP (VBP owe)
                        (NP (NN anything))
                        (NP
                          (NP (RB not) (CD one) (JJ single) (NN thing))
                          (PP (TO to)
                            (NP (DT any) (JJ other) (JJ human) (NN being))))))))))))))
    (. .)))

nsubj(exist-2, You-1)
nsubj(exist-2', You-1)
root(ROOT-0, exist-2)
conj_and(exist-2, exist-2')
advmod(exist-2, solely-3)
poss(own-6, your-5)
prep_on(exist-2, own-6)
det(way-10, no-9)
prep_in(exist-2', way-10)
rcmod(way-10, do-11)
nsubj(owe-13, you-12)
ccomp(do-11, owe-13)
iobj(owe-13, anything-14)
neg(thing-18, not-15)
num(thing-18, one-16)
amod(thing-18, single-17)
dobj(owe-13, thing-18)
det(being-23, any-20)
amod(being-23, other-21)
amod(being-23, human-22)
prep_to(thing-18, being-23)

(ROOT
  (S ('' '')
    (S
      (NP (PRP I))
      (VP (VBP 'm)
        (ADJP (JJ sure)
          (SBAR
            (S
              (NP (PRP they))
              (VP (VBP do)))))))
    (, ,)
    (CC but)
    (S
      (NP (DT this))
      (VP (VBZ does) (RB n't)
        (VP (VB mean)
          (S
            (NP (PRP I))
            (VP
              (ADVP (RB automatically))
              (VB owe)
              (PP (TO to)
                (NP (NNP IRS) (NN money)))
              (SBAR (IN because)
                (S
                  (NP (NN someone) (RB else))
                  (VP
                    (VP (VBD got)
                      (PP (IN in)
                        (NP (DT a) (NN car) (NN wreck))))
                    (, ,)
                    (CC or)
                    (VP (VBD got)
                      (S
                        (ADJP (JJ pregnant))))))))))))
    (. .)))

nsubj(sure-4, I-2)
cop(sure-4, 'm-3)
root(ROOT-0, sure-4)
nsubj(do-6, they-5)
dep(sure-4, do-6)
nsubj(mean-12, this-9)
aux(mean-12, does-10)
neg(mean-12, n't-11)
conj_but(sure-4, mean-12)
nsubj(owe-15, I-13)
advmod(owe-15, automatically-14)
ccomp(mean-12, owe-15)
nn(money-18, IRS-17)
prep_to(owe-15, money-18)
mark(got-22, because-19)
nsubj(got-22, someone-20)
nsubj(got-29, someone-20)
advmod(someone-20, else-21)
advcl(owe-15, got-22)
det(wreck-26, a-24)
nn(wreck-26, car-25)
prep_in(got-22, wreck-26)
advcl(owe-15, got-29)
conj_or(got-22, got-29)
acomp(got-29, pregnant-30)

(ROOT
  (S ('' '')
    (NP (EX There))
    (VP (VBZ 's)
      (UCP
        (NP
          (NP (DT no) (JJ such) (NN thing))
          (PP (IN as)
            (NP (NN society))))
        (CC and)
        (SBAR
          (X (SYM \*))
          (S
            (SBAR (IN if)
              (S
                (NP (EX there))
                (VP (VBD was)
                  (ADJP (JJ \*)))))
            (NP (PRP it))
            (VP (MD would)
              (ADVP (RB only))
              (VP (VB exist)
                (PP (IN as)
                  (NP (DT a) (NN slave) (NN market)))))))))
    (. .)))

expl('s-3, There-2)
root(ROOT-0, 's-3)
det(thing-6, no-4)
amod(thing-6, such-5)
nsubj('s-3, thing-6)
prep_as(thing-6, society-8)
dep(exist-18, \*-10)
mark(was-13, if-11)
expl(was-13, there-12)
advcl(exist-18, was-13)
acomp(was-13, \*-14)
nsubj(exist-18, it-15)
aux(exist-18, would-16)
advmod(exist-18, only-17)
nsubj('s-3, exist-18)
conj_and(thing-6, exist-18)
det(market-22, a-20)
nn(market-22, slave-21)
prep_as(exist-18, market-22)

(ROOT
  (NP ('' '')
    (CC Does)
    (NP
      (NP (DT this))
      (SBAR
        (S
          (VP (VBP have)
            (NP
              (NP (DT any) (NN relevance))
              (SBAR
                (WHPP (TO to)
                  (WHNP (WP what)))
                (S
                  (NP (NNP Nigel))
                  (VP (VBD said)))))))))
    (. ?)))

cc(this-3, Does-2)
root(ROOT-0, this-3)
rcmod(this-3, have-4)
det(relevance-6, any-5)
dobj(have-4, relevance-6)
rel(said-10, what-8)
nsubj(said-10, Nigel-9)
rcmod(relevance-6, said-10)

(ROOT
  (S (`` ``)
    (NP
      (NP (DT The) (NN essence))
      (PP (IN of)
        (NP (NN morality))))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB be)
            (ADJP (RB purely) (JJ selfish) ('' '')
              (SBAR
                (S
                  (VP (VB Definitely) (RB not)))))))))
    (. .)))

det(essence-3, The-2)
nsubj(is-6, essence-3)
xsubj(selfish-10, essence-3)
prep_of(essence-3, morality-5)
root(ROOT-0, is-6)
aux(selfish-10, to-7)
cop(selfish-10, be-8)
advmod(selfish-10, purely-9)
xcomp(is-6, selfish-10)
dep(selfish-10, Definitely-12)
neg(Definitely-12, not-13)

(ROOT
  (S
    (NP (JJ Pure) (NNS selfishness))
    (VP (VBZ is)
      (SBAR
        (WHADJP (RB exactly) (WP what))
        (S
          (NP (PRP you))
          (VP (MD 'll)
            (VP (VB get)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (NNS people))
                  (VP (VBP feel)
                    (SBAR
                      (S
                        (NP (PRP they))
                        (VP (VBP are)
                          (VP (VBN entitled)
                            (PP (TO to)
                              (NP (JJ free) (NN stuff)))
                            (PP (IN at)
                              (NP
                                (NP (NN someone) (RB else) (POS 's))
                                (NN expense)))))))))))))))
    (. .)))

amod(selfishness-2, Pure-1)
nsubj(is-3, selfishness-2)
root(ROOT-0, is-3)
dep(get-8, exactly-4)
dep(exactly-4, what-5)
nsubj(get-8, you-6)
aux(get-8, 'll-7)
ccomp(is-3, get-8)
advmod(feel-11, when-9)
nsubj(feel-11, people-10)
advcl(get-8, feel-11)
nsubjpass(entitled-14, they-12)
auxpass(entitled-14, are-13)
ccomp(feel-11, entitled-14)
amod(stuff-17, free-16)
prep_to(entitled-14, stuff-17)
poss(expense-22, someone-19)
advmod(someone-19, else-20)
prep_at(entitled-14, expense-22)

(ROOT
  (S (`` ``)
    (SBAR
      (WHNP (WDT which))
      (S
        (VP (VBZ means)
          (SBAR (IN that)
            (S
              (NP
                (NP (DT no) (NN one) (RB else))
                (PP (IN on)
                  (NP (DT the) (JJ entire) (NN earth))))
              (VP (VBZ matters)
                (PP (IN except)
                  (NP (PRP yourself)))))))))
    (: ;)
    (NP (DT that))
    (VP (VBZ is)
      (SBAR
        (WHADJP (RB exactly) (WP what))
        (S
          (NP (PRP it))
          (VP (VBZ means)
            (S
              (VP (TO to)
                (VP
                  (ADVP (RB always))
                  (VB act)
                  (PP (IN in)
                    (NP (NN self-interest))))))))))
    (. .)))

nsubj(means-3, which-2)
dep(is-17, means-3)
complm(matters-12, that-4)
det(one-6, no-5)
nsubj(matters-12, one-6)
advmod(one-6, else-7)
det(earth-11, the-9)
amod(earth-11, entire-10)
prep_on(one-6, earth-11)
ccomp(means-3, matters-12)
prep_except(matters-12, yourself-14)
nsubj(is-17, that-16)
root(ROOT-0, is-17)
dep(means-21, exactly-18)
dep(exactly-18, what-19)
nsubj(means-21, it-20)
xsubj(act-24, it-20)
ccomp(is-17, means-21)
aux(act-24, to-22)
advmod(act-24, always-23)
xcomp(means-21, act-24)
prep_in(act-24, self-interest-26)

(ROOT
  (S ('' '')
    (NP (JJ Other) (NNS people))
    (VP (VBP matter)
      (ADVP (RB too))
      (, ,)
      (SBAR (IN as)
        (S
          (SBAR (RB long) (IN as)
            (S
              (NP (PRP they))
              (VP
                (VP (VBP pull)
                  (NP (PRP$ their) (JJ own) (NN weight)))
                (CC and)
                (VP (VBP do) (RB n't)
                  (VP (VB force)
                    (S
                      (NP (NNS people))
                      (VP (TO to)
                        (VP (VB do)
                          (NP (NNS things))))))))))
          (NP (PRP they))
          (VP (VBP do) (RB n't)
            (VP (VB want)
              (PP (TO to)))))))
    (. .)))

amod(people-3, Other-2)
nsubj(matter-4, people-3)
root(ROOT-0, matter-4)
advmod(matter-4, too-5)
mark(want-26, as-7)
advmod(pull-11, long-8)
dep(pull-11, as-9)
nsubj(pull-11, they-10)
nsubj(force-18, they-10)
advcl(want-26, pull-11)
poss(weight-14, their-12)
amod(weight-14, own-13)
dobj(pull-11, weight-14)
aux(force-18, do-16)
neg(force-18, n't-17)
conj_and(pull-11, force-18)
advcl(want-26, force-18)
nsubj(do-21, people-19)
aux(do-21, to-20)
xcomp(force-18, do-21)
dobj(do-21, things-22)
nsubj(want-26, they-23)
aux(want-26, do-24)
neg(want-26, n't-25)
advcl(matter-4, want-26)
prep(want-26, to-27)

(ROOT
  (S ('' '')
    (NP (DT The) (NNS values))
    (ADVP
      (NP (DT that) (NN man))
      (RB requires))
    (VP (VBZ is) (RB not)
      (ADJP (JJ contingent)
        (PP (IN upon)
          (NP
            (NP (DT another) (JJ human) (NN being))
            (PP (IN in)
              (NP
                (NP (DT any) (NN way))
                (, ,)
                (NP (NN shape))
                (, ,)
                (CC or)
                (NP (NN form))))))))
    (. .)))

det(values-3, The-2)
nsubj(contingent-9, values-3)
det(man-5, that-4)
npadvmod(requires-6, man-5)
advmod(contingent-9, requires-6)
cop(contingent-9, is-7)
neg(contingent-9, not-8)
root(ROOT-0, contingent-9)
det(being-13, another-11)
amod(being-13, human-12)
prep_upon(contingent-9, being-13)
det(way-16, any-15)
prep_in(being-13, way-16)
prep_in(being-13, shape-18)
conj_or(way-16, shape-18)
prep_in(being-13, form-21)
conj_or(way-16, form-21)

(ROOT
  (S ('' '')
    (S
      (NP (PRP It))
      (ADVP (RB sure))
      (VP (VBZ is)
        (ADJP (JJ contingent)
          (PP (IN upon)
            (NP (NNS others))))))
    (, ,)
    (VP (VBP do) (RB n't)
      (VP (VB take)
        (PP (IN from)
          (NP (PRP me)))))
    (, ,)
    (CC and)
    (S
      (NP (PRP I))
      (VP (MD wo) (RB n't)
        (VP (VB take)
          (SBAR (IN from)
            (S
              (NP (PRP you))
              (VP (VBZ is)
                (NP (CD one) (JJ such) (NN example))))))))
    (. .)))

nsubj(contingent-5, It-2)
advmod(contingent-5, sure-3)
cop(contingent-5, is-4)
ccomp(take-11, contingent-5)
conj_and(take-11, contingent-5)
prep_upon(contingent-5, others-7)
aux(take-11, do-9)
neg(take-11, n't-10)
root(ROOT-0, take-11)
prep_from(take-11, me-13)
nsubj(take-19, I-16)
aux(take-19, wo-17)
neg(take-19, n't-18)
conj_and(take-11, take-19)
mark(example-25, from-20)
nsubj(example-25, you-21)
cop(example-25, is-22)
num(example-25, one-23)
amod(example-25, such-24)
advcl(take-19, example-25)

(ROOT
  (S ('' '')
    (NP (NNP Society))
    (VP (VBZ is)
      (ADJP (JJ evil))
      (, ,)
      (SBAR (IN as)
        (S
          (VP (VBZ is)
            (NP
              (NP (NN socialism))
              (, ,)
              (SBAR (IN as)
                (S
                  (VP (VBZ is)
                    (NP
                      (NP (NN anything))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (VBZ forces)
                            (S
                              (NP (DT any) (CD one) (NN man))
                              (VP (TO to)
                                (VP (VB have)
                                  (S
                                    (VP (TO to)
                                      (VP (VB interact)
                                        (PP (IN with)
                                          (NP (NNS others)))))))))))))))))))))
    (. .)))

nsubj(evil-4, Society-2)
cop(evil-4, is-3)
root(ROOT-0, evil-4)
mark(socialism-8, as-6)
cop(socialism-8, is-7)
advcl(evil-4, socialism-8)
mark(anything-12, as-10)
cop(anything-12, is-11)
dep(socialism-8, anything-12)
nsubj(forces-14, anything-12)
rcmod(anything-12, forces-14)
det(man-17, any-15)
num(man-17, one-16)
nsubj(have-19, man-17)
xsubj(interact-21, man-17)
aux(have-19, to-18)
xcomp(forces-14, have-19)
aux(interact-21, to-20)
xcomp(have-19, interact-21)
prep_with(interact-21, others-23)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP are)
      (NP (DT an) (NN island)))
    (. .)))

nsubj(island-4, You-1)
cop(island-4, are-2)
det(island-4, an-3)
root(ROOT-0, island-4)

(ROOT
  (S ('' '')
    (S
      (NP
        (NP (NNP Newsflash))
        (: :)
        (NP (NNS People)))
      (VP (VBP do) (RB n't)
        (VP (VB need)
          (S
            (VP (TO to)
              (VP (VB be)
                (VP (VBN taxed)
                  (PRT (RP out))
                  (PP (IN of)
                    (NP (PRP$ their) (NNS minds)))
                  (PP (IN in)
                    (NP (NN order))))))))))
    (IN for)
    (S
      (NP (PRP them))
      (VP (TO to)
        (VP (VB interact)
          (PP (IN with)
            (NP (DT each) (JJ other))))))
    (. .)))

nsubj(need-7, Newsflash-2)
xsubj(taxed-10, Newsflash-2)
dep(Newsflash-2, People-4)
aux(need-7, do-5)
neg(need-7, n't-6)
root(ROOT-0, need-7)
aux(taxed-10, to-8)
auxpass(taxed-10, be-9)
xcomp(need-7, taxed-10)
poss(minds-14, their-13)
prep_out_of(taxed-10, minds-14)
prep_in(taxed-10, order-16)
dep(need-7, for-17)
nsubj(interact-20, them-18)
aux(interact-20, to-19)
dep(need-7, interact-20)
det(other-23, each-22)
prep_with(interact-20, other-23)

(ROOT
  (S
    (NP (NNP Pretty))
    (ADVP (RB sure))
    (NP
      (NP (DT the) (NN market) (POS 's))
      (NN success))
    (VP (VBZ depends)
      (PP (IN upon)
        (NP (JJ human) (NN interaction)))
      (ADVP (RB anyway)))
    (. .)))

nsubj(depends-7, Pretty-1)
advmod(depends-7, sure-2)
det(market-4, the-3)
poss(success-6, market-4)
nsubj(depends-7, success-6)
root(ROOT-0, depends-7)
amod(interaction-10, human-9)
prep_upon(depends-7, interaction-10)
advmod(depends-7, anyway-11)

(ROOT
  (S ('' '')
    (PP (IN Because)
      (S
        (NP (PRP you))
        (VP (VBP are)
          (ADJP (JJ correct))
          (, ,)
          (S
            (NP (NNP Nigel))
            (NP (PRP you))))))
    (VP (VBP 're)
      (NP
        (NP (DT an) (NN island))
        (PP (IN with)
          (NP
            (NP (PRP$ your) (JJ own) (NN mind))
            (, ,)
            (NP (PRP$ your) (JJ own) (NNS goals))
            (, ,)
            (CC and)
            (NP (PRP$ your) (JJ own) (NN life))))))
    (. .)))

nsubj(correct-5, you-3)
cop(correct-5, are-4)
prepc_because(island-11, correct-5)
nsubj(you-8, Nigel-7)
xcomp(correct-5, you-8)
cop(island-11, 're-9)
det(island-11, an-10)
root(ROOT-0, island-11)
poss(mind-15, your-13)
amod(mind-15, own-14)
prep_with(island-11, mind-15)
poss(goals-19, your-17)
amod(goals-19, own-18)
prep_with(island-11, goals-19)
conj_and(mind-15, goals-19)
poss(life-24, your-22)
amod(life-24, own-23)
prep_with(island-11, life-24)
conj_and(mind-15, life-24)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP wish)
      (SBAR (IN that)
        (S
          (VP (VBD was)
            (NP
              (NP (DT the) (NN case))
              (PP (IN for)
                (NP (PRP me))))))))
    (. .)))

nsubj(wish-3, I-2)
root(ROOT-0, wish-3)
complm(case-7, that-4)
cop(case-7, was-5)
det(case-7, the-6)
ccomp(wish-3, case-7)
prep_for(case-7, me-9)

(ROOT
  (PRN (: :)
    (S (-LRB- -LRB-)
      (ADVP
        (NP
          (NP
            (NP (`` ``)
              (NP
                (NP (CC And)
                  (NN might))
                (NP (PRP I)))
              (NP (NN point))
              (PP (IN out)
                (NP (DT that))))
            (NN one))
          (PP (IN of)
            (NP (DT the) (NNS arguments))))
        (RB that))
      (VP (VBZ is)
        (VP (VBN used)
          (PP (IN against)
            (NP
              (NP (NNP Universal) (NNP Health))
              (SBAR
                (S
                  (VP (VBZ is)
                    (SBAR (IN that)
                      (S
                        (NP (EX there))
                        (VP (VBP are)
                          (ADVP (RB currently))
                          (VP (VBG waiting)
                            (NP
                              (NP (NNS lines))
                              (, ,)
                              (NP (NN rationing))
                              (, ,)
                              (CC and)
                              (NP
                                (NP (JJ monumental) (NN incompetence))
                                (CC and)
                                (NP (JJ arrogant) (NN bureaucracy)))))))))))
              (PRN (-LRB- -LRB-)
                (SQ (VBP glad)
                  (NP (PRP you))
                  (VP (VBN spelled)
                    (NP (DT that))
                    (ADVP (RB correctly))
                    (, ,)
                    (ADVP (RB first))))
                (-RRB- -RRB-))))))
      (. .))))

cc(might-5, And-4)
nn(one-10, might-5)
dep(might-5, I-6)
dep(might-5, point-7)
prep_out(might-5, that-9)
npadvmod(that-14, one-10)
det(arguments-13, the-12)
prep_of(one-10, arguments-13)
advmod(used-16, that-14)
auxpass(used-16, is-15)
root(ROOT-0, used-16)
nn(Health-19, Universal-18)
prep_against(used-16, Health-19)
rcmod(Health-19, is-20)
complm(waiting-25, that-21)
expl(waiting-25, there-22)
aux(waiting-25, are-23)
advmod(waiting-25, currently-24)
ccomp(is-20, waiting-25)
dobj(waiting-25, lines-26)
nsubj(waiting-25, lines-26)
dobj(waiting-25, rationing-28)
nsubj(waiting-25, rationing-28)
conj_and(lines-26, rationing-28)
amod(incompetence-32, monumental-31)
dobj(waiting-25, incompetence-32)
nsubj(waiting-25, incompetence-32)
conj_and(lines-26, incompetence-32)
amod(bureaucracy-35, arrogant-34)
conj_and(lines-26, bureaucracy-35)
conj_and(incompetence-32, bureaucracy-35)
aux(spelled-39, glad-37)
nsubj(spelled-39, you-38)
dep(Health-19, spelled-39)
dobj(spelled-39, that-40)
advmod(spelled-39, correctly-41)
advmod(spelled-39, first-43)

(ROOT
  (NP
    (NP
      (NP (NNP '') (NNP Boy))
      (, ,)
      (SBAR
        (WHADVP (WRB where))
        (S
          (VP (TO to)
            (VP (VB start)
              (PP (IN with)
                (NP (DT that) (NN one))))))))
    (: ...)))

root(ROOT-0, Boy-2)
advmod(start-6, where-4)
aux(start-6, to-5)
infmod(Boy-2, start-6)
rcmod(Boy-2, start-6)
det(one-9, that-8)
prep_with(start-6, one-9)

(ROOT
  (NP (JJ http:\/\/willtoexist.com\/universal-health-care_1202) (NNS \/)))

amod(\/-2, http:\/\/willtoexist.com\/universal-health-care_1202-1)
root(ROOT-0, \/-2)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (NP
        (NP (PRP$ your) (JJ own) (NN mind))
        (, ,)
        (NP (PRP$ your) (JJ own) (NNS goals))
        (, ,)
        (CC and)
        (NP
          (NP (PRP$ your) (JJ own) (NN life))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ exists)
                (PP (IN in)
                  (NP (DT a) (NN bubble)))))))))
    (. .)))

nsubj(have-2, You-1)
root(ROOT-0, have-2)
poss(mind-5, your-3)
amod(mind-5, own-4)
dobj(have-2, mind-5)
poss(goals-9, your-7)
amod(goals-9, own-8)
dobj(have-2, goals-9)
conj_and(mind-5, goals-9)
poss(life-14, your-12)
amod(life-14, own-13)
dobj(have-2, life-14)
conj_and(mind-5, life-14)
nsubj(exists-16, life-14)
rcmod(life-14, exists-16)
det(bubble-19, a-18)
prep_in(exists-16, bubble-19)

(ROOT
  (S ('' '')
    (NP (NNP Sure))
    (VP (VBZ sounds)
      (PP (IN like)
        (NP (NN paradise)))
      (PP (TO to)
        (NP (PRP me))))
    (. .)))

nsubj(sounds-3, Sure-2)
root(ROOT-0, sounds-3)
prep_like(sounds-3, paradise-5)
prep_to(sounds-3, me-7)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB owe)
          (NP (NN anyone) (NN anything)))))
    (CC and)
    (S
      (NP (DT no) (NN one))
      (VP (VBZ owes)
        (NP (NN anything))
        (PP (TO to)
          (NP (PRP me)))))
    (. .) ('' '')))

nsubj(owe-4, I-1)
aux(owe-4, do-2)
neg(owe-4, n't-3)
root(ROOT-0, owe-4)
nn(anything-6, anyone-5)
dobj(owe-4, anything-6)
det(one-9, no-8)
nsubj(owes-10, one-9)
conj_and(owe-4, owes-10)
dobj(owes-10, anything-11)
prep_to(owes-10, me-13)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (DT no) (NN way))
        (SBAR
          (S
            (VP (VBZ is)
              (NP (PRP it))
              (ADVP (RB ever))
              (ADJP (JJ possible)))))))
    (NP (DT that) (NN man))
    (VP (VBD survived)
      (PP (IN by)
        (S
          (VP (VBG being)
            (NP (DT a) (JJ social) (NN animal))))))
    (. ...)))

det(way-3, no-2)
prep_in(survived-10, way-3)
cop(possible-7, is-4)
attr(possible-7, it-5)
advmod(possible-7, ever-6)
rcmod(way-3, possible-7)
det(man-9, that-8)
nsubj(survived-10, man-9)
root(ROOT-0, survived-10)
cop(animal-15, being-12)
det(animal-15, a-13)
amod(animal-15, social-14)
prepc_by(survived-10, animal-15)

(ROOT
  (S ('' '')
    (S
      (INTJ (UH Oh))
      (, ,)
      (NP (PRP it))
      (VP (VBZ 's)
        (ADJP (RB perfectly) (JJ possible))))
    (CC but)
    (S
      (NP (DT this))
      (VP (VBZ does) (RB n't)
        (VP (VB mean)
          (NP
            (NP (NNS people))
            (VP
              (ADVP (RB persistently))
              (VBN robbed)
              (NP (DT each) (JJ other))
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (PRP they))
                  (VP (VBD were) (`` ``)
                    (ADJP (JJ needy))))))))))
    (. .)))

dep(possible-7, Oh-2)
nsubj(possible-7, it-4)
cop(possible-7, 's-5)
advmod(possible-7, perfectly-6)
root(ROOT-0, possible-7)
nsubj(mean-12, this-9)
aux(mean-12, does-10)
neg(mean-12, n't-11)
conj_but(possible-7, mean-12)
dobj(mean-12, people-13)
advmod(robbed-15, persistently-14)
partmod(people-13, robbed-15)
det(other-17, each-16)
dobj(robbed-15, other-17)
advmod(needy-22, when-18)
nsubj(needy-22, they-19)
cop(needy-22, were-20)
advcl(robbed-15, needy-22)

(ROOT
  (S
    (S
      (VP (VBG '') ('' '')))
    (: ...)
    (CC and)
    (S
      (ADVP (RB in))
      (NP (DT no) (NN way))
      (VP (VBZ is)
        (NP
          (NP (NN society))
          (VP (VBN derived)
            (PRT (RP out))
            (PP (IN of)
              (S
                (VP (VBG being)
                  (ADJP (JJ social)
                    (PP (IN towards)
                      (NP (CD one) (DT another)))))))))))
    (. .)))

advmod(society-9, in-5)
det(way-7, no-6)
nsubj(society-9, way-7)
cop(society-9, is-8)
conj_and(''-1, society-9)
partmod(society-9, derived-10)
cop(social-14, being-13)
prepc_out_of(derived-10, social-14)
prep_towards(social-14, one-16)
dep(one-16, another-17)

(ROOT
  (S
    (PP
      (ADVP (RB ''))
      (IN In)
      (NP (DT a) (JJ financial) (NN sense)))
    (, ,)
    (VP (VB no.))))

det(sense-5, a-3)
amod(sense-5, financial-4)
prep_in(no.-7, sense-5)
root(ROOT-0, no.-7)

(ROOT
  (S
    (NP (NNP Society))
    (VP (VBZ is)
      (VP (VBN derived)
        (PRT (RP out))
        (PP (IN of)
          (NP
            (NP (DT the) (JJ voluntary) (NN exchange))
            (PP (IN of)
              (S
                (VP (VBG consenting)
                  (NP (NNS individuals)))))))))
    (. .)))

nsubjpass(derived-3, Society-1)
auxpass(derived-3, is-2)
root(ROOT-0, derived-3)
det(exchange-8, the-6)
amod(exchange-8, voluntary-7)
prep_out_of(derived-3, exchange-8)
prepc_of(exchange-8, consenting-10)
dobj(consenting-10, individuals-11)

(ROOT
  (S ('' '')
    (S
      (NP (DT That))
      (VP (MD would)
        (VP (VB have)
          (VP (VBN been)
            (ADJP (RB mass) (JJ enslavement))))))
    (, ,)
    (CC and)
    (S
      (NP (DT no) (NN one))
      (VP (MD would)
        (VP (VB have)
          (ADVP (RB ever))
          (VP (VBN done)
            (S
              (NP (PRP it)))
            (: ...)
            (SBAR (IN because)
              (S
                (NP (DT no) (CD one) (NN man))
                (ADVP (RB ever))
                (VP (VBZ needs)
                  (S
                    (NP (DT another))
                    (VP (TO to)
                      (VP (VB survive)))))))))))
    (. .)))

nsubj(enslavement-7, That-2)
aux(enslavement-7, would-3)
aux(enslavement-7, have-4)
cop(enslavement-7, been-5)
advmod(enslavement-7, mass-6)
root(ROOT-0, enslavement-7)
det(one-11, no-10)
nsubj(done-15, one-11)
aux(done-15, would-12)
aux(done-15, have-13)
advmod(done-15, ever-14)
conj_and(enslavement-7, done-15)
xcomp(done-15, it-16)
mark(needs-23, because-18)
det(man-21, no-19)
num(man-21, one-20)
nsubj(needs-23, man-21)
advmod(needs-23, ever-22)
advcl(done-15, needs-23)
parataxis(done-15, needs-23)
nsubj(survive-26, another-24)
aux(survive-26, to-25)
xcomp(needs-23, survive-26)

