(ROOT
  (S
    (ADVP (RB SocialistBetty))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (NP
        (NP (DT a) (NN hypocrite))
        (PP (IN in)
          (NP
            (NP (DT every) (NN aspect))
            (PP (IN of)
              (NP (DT the) (NN term)))))))
    (. .)))

advmod(hypocrite-6, SocialistBetty-1)
nsubj(hypocrite-6, you-3)
cop(hypocrite-6, are-4)
det(hypocrite-6, a-5)
root(ROOT-0, hypocrite-6)
det(aspect-9, every-8)
prep_in(hypocrite-6, aspect-9)
det(term-12, the-11)
prep_of(aspect-9, term-12)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBD sought)
        (NP (DT a) (NN debate))))
    (CC and)
    (S
      (NP (PRP you))
      (VP (VBD responded)
        (PP (IN with)
          (NP
            (NP (NNS assumptions))
            (CC and)
            (NP (JJ unnecessary) (NNS insults))))))
    (. .)))

nsubj(sought-2, I-1)
root(ROOT-0, sought-2)
det(debate-4, a-3)
dobj(sought-2, debate-4)
nsubj(responded-7, you-6)
conj_and(sought-2, responded-7)
prep_with(responded-7, assumptions-9)
amod(insults-12, unnecessary-11)
prep_with(responded-7, insults-12)
conj_and(assumptions-9, insults-12)

(ROOT
  (S ('' '')
    (NP (PRP We))
    (VP (VBD created)
      (NP (DT this) (NN country)
        (S
          (VP (TO to)
            (VP (VB protect)
              (NP (JJ individual) (NNS freedoms)))))))
    (. .)))

nsubj(created-3, We-2)
root(ROOT-0, created-3)
det(country-5, this-4)
dobj(created-3, country-5)
aux(protect-7, to-6)
infmod(country-5, protect-7)
amod(freedoms-9, individual-8)
dobj(protect-7, freedoms-9)

(ROOT
  (S
    (NP
      (NP (DT Each) (NN person))
      (PP (IN in)
        (NP (DT this) (NN country))))
    (VP (VBZ is)
      (ADJP (JJ free)))
    (. .)))

det(person-2, Each-1)
nsubj(free-7, person-2)
det(country-5, this-4)
prep_in(person-2, country-5)
cop(free-7, is-6)
root(ROOT-0, free-7)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ means)
      (SBAR
        (S
          (NP (PRP they))
          (VP (MD may)
            (VP (VB keep)
              (SBAR
                (WHNP (WP what))
                (S
                  (NP (PRP they))
                  (VP (VBP earn)
                    (CC and)
                    (VBP do))))
              (SBAR
                (WHNP (WP what))
                (S
                  (NP (PRP they))
                  (VP (VBP want)
                    (ADVP
                      (ADVP (RB as) (RB long))
                      (SBAR (IN as)
                        (S
                          (NP (PRP it))
                          (VP (VBZ does) (RB not)
                            (VP (VB impinge)
                              (PRT (RP on))
                              (NP
                                (NP (DT another))
                                (POS 's) (NN freedom)))))))))))))))
    (. .)))

nsubj(means-2, That-1)
root(ROOT-0, means-2)
nsubj(keep-5, they-3)
aux(keep-5, may-4)
ccomp(means-2, keep-5)
dobj(earn-8, what-6)
nsubj(earn-8, they-7)
nsubj(do-10, they-7)
ccomp(keep-5, earn-8)
ccomp(keep-5, do-10)
conj_and(earn-8, do-10)
dobj(want-13, what-11)
nsubj(want-13, they-12)
ccomp(keep-5, want-13)
advmod(long-15, as-14)
advmod(want-13, long-15)
mark(impinge-20, as-16)
nsubj(impinge-20, it-17)
aux(impinge-20, does-18)
neg(impinge-20, not-19)
ccomp(long-15, impinge-20)
prt(impinge-20, on-21)
nn(freedom-24, another-22)
possessive(freedom-24, 's-23)
dobj(impinge-20, freedom-24)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBD did) (RB not)
      (VP (VB do)
        (NP
          (NP (DT a)
            (ADJP (RB very) (JJ good))
            (NN job))
          (VP (VBG protecting)
            (PP (IN from)
              (NP (NN corruption)))
            (SBAR (IN because)
              (S
                (NP (DT the) (NN government))
                (VP (VBZ is)
                  (ADJP (JJ full)
                    (PP (IN of)
                      (NP (PRP it)))))))))))
    (. .)))

nsubj(do-4, We-1)
aux(do-4, did-2)
neg(do-4, not-3)
root(ROOT-0, do-4)
det(job-8, a-5)
advmod(good-7, very-6)
amod(job-8, good-7)
dobj(do-4, job-8)
partmod(job-8, protecting-9)
prep_from(protecting-9, corruption-11)
mark(full-16, because-12)
det(government-14, the-13)
nsubj(full-16, government-14)
cop(full-16, is-15)
advcl(protecting-9, full-16)
prep_of(full-16, it-18)

(ROOT
  (NP
    (NP
      (NP (JJ Accepting) (NNS bribes))
      (, ,)
      (VP (VBG swaying)
        (NP (NNS voters))
        (PP (IN by)
          (S
            (VP
              (VP (VBG lying)
                (PP (TO to)
                  (NP (PRP them))))
              (, ,)
              (VP (VBG creating)
                (NP
                  (NP (NNS laws))
                  (PP (IN for)
                    (NP (NNS unions))))))))))
    (: ...)
    (NP
      (NP (DT all) (NN corruption)
        (CC and)
        (NN out))
      (PP (IN of)
        (NP (NN control))))
    (. .)))

amod(bribes-2, Accepting-1)
root(ROOT-0, bribes-2)
partmod(bribes-2, swaying-4)
dobj(swaying-4, voters-5)
agent(swaying-4, lying-7)
prep_to(lying-7, them-9)
dep(lying-7, creating-11)
dobj(creating-11, laws-12)
prep_for(laws-12, unions-14)
det(corruption-17, all-16)
dep(bribes-2, corruption-17)
dep(bribes-2, out-19)
conj_and(corruption-17, out-19)
prep_of(corruption-17, control-21)

(ROOT
  (S
    (PP (IN As)
      (PP (IN for)
        (NP (NNS companies))))
    (, ,)
    (NP
      (ADJP (RB very) (JJ large))
      (NNS ones))
    (VP (MD may)
      (VP (VB become)
        (ADJP (JJ corrupt)
          (SBAR
            (UCP
              (ADVP (RB obviously))
              (CC but)
              (PP (IN without)
                (NP (NN business))))
            (S
              (NP (PRP we))
              (VP (VBP have)
                (NP (DT no) (NN economy))))))))
    (. .)))

prepc_as_for(corrupt-10, for-2)
pobj(corrupt-10, companies-3)
advmod(large-6, very-5)
amod(ones-7, large-6)
nsubj(corrupt-10, ones-7)
aux(corrupt-10, may-8)
cop(corrupt-10, become-9)
root(ROOT-0, corrupt-10)
dep(have-16, obviously-11)
conj_but(obviously-11, without-13)
dep(have-16, without-13)
pobj(without-13, business-14)
nsubj(have-16, we-15)
dep(corrupt-10, have-16)
det(economy-18, no-17)
dobj(have-16, economy-18)

(ROOT
  (S
    (PP (IN In)
      (NP (NN general)))
    (, ,)
    (NP (JJS most) (NNS businesses))
    (VP (VBP supply)
      (NP (DT a) (NN good)
        (CC or)
        (NN service))
      (PP (IN without)
        (NP
          (NP (NN corruption))
          (PP (IN in)
            (NP
              (NP (NN exchange))
              (PP (IN for)
                (NP (NN money))))))))
    (. .)))

prep_in(supply-6, general-2)
amod(businesses-5, most-4)
nsubj(supply-6, businesses-5)
root(ROOT-0, supply-6)
det(good-8, a-7)
dobj(supply-6, good-8)
dobj(supply-6, service-10)
conj_or(good-8, service-10)
prep_without(supply-6, corruption-12)
prep_in(corruption-12, exchange-14)
prep_for(exchange-14, money-16)

(ROOT
  (S ('' '')
    (NP (PRP We))
    (VP (VBP have)
      (NP (DT no) (NN duty)
        (S
          (VP (TO to)
            (VP (VB protect)
              (NP
                (NP (DT the) (NN interest))
                (PP (IN of)
                  (NP (JJ private) (NNS companies)))))))))
    (. .)))

nsubj(have-3, We-2)
root(ROOT-0, have-3)
det(duty-5, no-4)
dobj(have-3, duty-5)
aux(protect-7, to-6)
infmod(duty-5, protect-7)
det(interest-9, the-8)
dobj(protect-7, interest-9)
amod(companies-12, private-11)
prep_of(interest-9, companies-12)

(ROOT
  (S ('' '')
    (NP (NNP Yes) (PRP we))
    (VP (VBP do)
      (SBAR (IN because)
        (S
          (NP (JJ private) (NNS companies))
          (VP (VBP supply)
            (NP (NNS jobs))))))
    (. .)))

nsubj(do-4, Yes-2)
dep(Yes-2, we-3)
root(ROOT-0, do-4)
mark(supply-8, because-5)
amod(companies-7, private-6)
nsubj(supply-8, companies-7)
advcl(do-4, supply-8)
dobj(supply-8, jobs-9)

(ROOT
  (S
    (NP (NNP Jobs))
    (VP (VBP mean)
      (NP
        (NP (NN income))
        (PP (IN for)
          (NP (NNS individuals)))))
    (. .)))

nsubj(mean-2, Jobs-1)
root(ROOT-0, mean-2)
dobj(mean-2, income-3)
prep_for(income-3, individuals-5)

(ROOT
  (S
    (PP (IN Without)
      (NP (JJ private) (NNS companies)))
    (, ,)
    (NP (NN everyone))
    (VP (VBZ goes)
      (ADJP (JJ bankrupt)))
    (. .)))

amod(companies-3, private-2)
prep_without(goes-6, companies-3)
nsubj(goes-6, everyone-5)
root(ROOT-0, goes-6)
acomp(goes-6, bankrupt-7)

(ROOT
  (S ('' '')
    (PP (IN As)
      (NP
        (NP (NN society))
        (SBAR
          (S
            (VP (VBZ has)
              (VP (VBN gotten)
                (S
                  (ADJP (JJR larger)))
                (, ,)
                (SBAR
                  (WHADVP (WRB why))
                  (S
                    (VP (VBP do)
                      (NP (PRP you)))))))))))
    (VP (VBP expect)
      (NP (NN government))
      (S
        (VP (TO to)
          (VP (VB stay)
            (NP (DT the) (JJ same) (NN size))))))
    (. ?)))

prep_as(expect-11, society-3)
aux(gotten-5, has-4)
rcmod(society-3, gotten-5)
acomp(gotten-5, larger-6)
advmod(do-9, why-8)
advcl(gotten-5, do-9)
dobj(do-9, you-10)
root(ROOT-0, expect-11)
dobj(expect-11, government-12)
aux(size-17, to-13)
cop(size-17, stay-14)
det(size-17, the-15)
amod(size-17, same-16)
xcomp(expect-11, size-17)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP hope)
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP 're)
            (ADJP (JJ proud))))))
    (. .)))

nsubj(hope-2, I-1)
root(ROOT-0, hope-2)
nsubj(proud-5, you-3)
cop(proud-5, 're-4)
ccomp(hope-2, proud-5)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP do) (RB n't))
    (. .)))

nsubj(do-3, I-2)
root(ROOT-0, do-3)
neg(do-3, n't-4)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP expect)
      (S
        (NP (PRP it))
        (VP (TO to)
          (VP (VB grow)
            (PP (IN in)
              (NP (NN proportion)))
            (PP (TO to)
              (NP (DT the) (NN population)
                (S
                  (VP (TO to)
                    (VP (VB serve)
                      (CC and)
                      (VB protect))))))))))
    (. .)))

nsubj(expect-2, I-1)
root(ROOT-0, expect-2)
nsubj(grow-5, it-3)
aux(grow-5, to-4)
xcomp(expect-2, grow-5)
prep_in(grow-5, proportion-7)
det(population-10, the-9)
prep_to(grow-5, population-10)
aux(serve-12, to-11)
infmod(population-10, serve-12)
infmod(population-10, protect-14)
conj_and(serve-12, protect-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB not)
      (VP (VB expect)
        (S
          (NP (PRP it))
          (VP (TO to)
            (VP
              (VP (VB grow)
                (ADVP (RBR faster))
                (PP (IN than)
                  (NP (PRP$ our) (NN population))))
              (CC and)
              (VP (VB spend)
                (NP
                  (NP (NNS billions))
                  (PP (IN of)
                    (NP (PRP$ our) (NNS dollars)
                      (S
                        (VP (TO to)
                          (VP (`` ``) (VB stimulate) ('' '')
                            (NP (PRP us))))))))))))))
    (. .)))

nsubj(expect-4, I-1)
aux(expect-4, do-2)
neg(expect-4, not-3)
root(ROOT-0, expect-4)
nsubj(grow-7, it-5)
nsubj(spend-13, it-5)
aux(grow-7, to-6)
xcomp(expect-4, grow-7)
advmod(grow-7, faster-8)
poss(population-11, our-10)
prep_than(grow-7, population-11)
xcomp(expect-4, spend-13)
conj_and(grow-7, spend-13)
dobj(spend-13, billions-14)
poss(dollars-17, our-16)
prep_of(billions-14, dollars-17)
aux(stimulate-20, to-18)
infmod(dollars-17, stimulate-20)
dobj(stimulate-20, us-22)

(ROOT
  (S ('' '')
    (NP (DT The) (NN government))
    (VP (VBZ provides)
      (PP (IN FOR)
        (NP (DT the) (NNS people))))
    (. .)))

det(government-3, The-2)
nsubj(provides-4, government-3)
root(ROOT-0, provides-4)
det(people-7, the-6)
prep_for(provides-4, people-7)

(ROOT
  (NP (NNS People) (. .)))

root(ROOT-0, People-1)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB apparently))
    (VP (VBP do) (RB not)
      (VP (VB like)
        (NP (DT this))))
    (. .)))

nsubj(like-5, You-1)
advmod(like-5, apparently-2)
aux(like-5, do-3)
neg(like-5, not-4)
root(ROOT-0, like-5)
dobj(like-5, this-6)

(ROOT
  (S ('' '')
    (NP (WP What) (NN I))
    (VP (VBP do) (RB n't)
      (VP (VB like)
        (SBAR (IN about)
          (S
            (NP (DT this))
            (VP (VBZ is)
              (SBAR (IN that)
                (S
                  (NP (PRP you))
                  (VP (VBP say)
                    (SBAR
                      (S
                        (VP (`` ``) (VBZ provides) ('' ''))))))))))))
    (. .)))

dep(I-3, What-2)
nsubj(like-6, I-3)
aux(like-6, do-4)
neg(like-6, n't-5)
root(ROOT-0, like-6)
mark(is-9, about-7)
nsubj(is-9, this-8)
advcl(like-6, is-9)
complm(say-12, that-10)
nsubj(say-12, you-11)
ccomp(is-9, say-12)
ccomp(say-12, provides-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP prefer)
      (SBAR
        (S
          (VP (`` ``)
            (VP (VBZ protects))
            (CC and)
            (VP (VBZ serves))))))
    ('' '') (. .)))

nsubj(prefer-2, I-1)
root(ROOT-0, prefer-2)
ccomp(prefer-2, protects-4)
ccomp(prefer-2, serves-6)
conj_and(protects-4, serves-6)

(ROOT
  (S
    (NP (DT The) (NN government))
    (VP
      (VP (VBZ does)
        (NP (RB not)))
      (CC and)
      (VP (MD should) (RB not)
        (VP (VB feed)
          (NP (PRP us))
          (PP (IN like)
            (NP
              (NP (NNS mice))
              (PP (IN in)
                (NP (DT a) (NN cage))))))))
    (. .)))

det(government-2, The-1)
nsubj(does-3, government-2)
nsubj(feed-8, government-2)
root(ROOT-0, does-3)
dobj(does-3, not-4)
aux(feed-8, should-6)
neg(feed-8, not-7)
conj_and(does-3, feed-8)
dobj(feed-8, us-9)
prep_like(feed-8, mice-11)
det(cage-14, a-13)
prep_in(mice-11, cage-14)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD should)
      (ADVP (RB also))
      (VP (RB not)
        (VP (VB trim)
          (NP (PRP$ our) (NNS nails)))
        (CC and)
        (VP (VB give)
          (NP (PRP us) ('' ''))
          (NP
            (NP (NN health) (NN care))
            ('' '')
            (PP (IN like)
              (NP (NN house) (NNS cats)))))))
    (. .)))

nsubj(trim-5, They-1)
nsubj(give-9, They-1)
aux(trim-5, should-2)
advmod(trim-5, also-3)
neg(trim-5, not-4)
root(ROOT-0, trim-5)
poss(nails-7, our-6)
dobj(trim-5, nails-7)
conj_and(trim-5, give-9)
iobj(give-9, us-10)
nn(care-13, health-12)
dobj(give-9, care-13)
nn(cats-17, house-16)
prep_like(care-13, cats-17)

(ROOT
  (S ('' '')
    (PP (IN Since)
      (S
        (NP (PRP you))
        (VP
          (ADVP (RB actually))
          (VBN quoted)
          (NP (PRP me)))))
    (PRN (, ,)
      (S
        (NP (PRP it))
        (VP (VBZ 's)
          (ADJP (JJ funny))
          (SBAR (IN that)
            (S
              (NP (PRP you))
              (VP (VBD did) (RB n't)
                (ADVP (RB really))
                (VP (VB grasp)
                  (NP (WP what)))))))))
    (NP (PRP I))
    (VP (VBD was)
      (VP (VBG saying)))
    (. .)))

nsubj(quoted-5, you-3)
advmod(quoted-5, actually-4)
prepc_since(saying-20, quoted-5)
dobj(quoted-5, me-6)
nsubj(funny-10, it-8)
cop(funny-10, 's-9)
parataxis(saying-20, funny-10)
complm(grasp-16, that-11)
nsubj(grasp-16, you-12)
aux(grasp-16, did-13)
neg(grasp-16, n't-14)
advmod(grasp-16, really-15)
ccomp(funny-10, grasp-16)
dobj(grasp-16, what-17)
nsubj(saying-20, I-18)
aux(saying-20, was-19)
root(ROOT-0, saying-20)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP are) (RB not)
      (NP (NNS animals))
      (SBAR (IN because)
        (S
          (NP (PRP we))
          (VP (MD can)
            (VP (VB take)
              (NP
                (NP (NN care))
                (PP (IN of)
                  (NP (PRP ourselves))))
              (PRN (-LRB- -LRB-)
                (S
                  (NP (PRP I))
                  (VP (MD can)
                    (ADVP (RB anyway))))
                (-RRB- -RRB-)))))))
    (. .)))

nsubj(animals-4, We-1)
cop(animals-4, are-2)
neg(animals-4, not-3)
root(ROOT-0, animals-4)
mark(take-8, because-5)
nsubj(take-8, we-6)
aux(take-8, can-7)
advcl(animals-4, take-8)
dobj(take-8, care-9)
prep_of(care-9, ourselves-11)
nsubj(can-14, I-13)
parataxis(take-8, can-14)
advmod(can-14, anyway-15)

(ROOT
  (S ('' '')
    (S
      (SBAR (IN If)
        (S
          (NP (PRP you))
          (VP (VBP 're)
            (VP (VBG going)
              (S
                (VP (TO to)
                  (VP
                    (VP (VB sit)
                      (ADVP (RB there)))
                    (CC and)
                    (VP (VB say)
                      (SBAR (IN that)
                        (S
                          (NP (PRP you))
                          (VP (VBP think)
                            (SBAR
                              (S
                                (NP (DT a) (NN child))
                                (VP (VBZ does) (RB not)
                                  (VP (VB deserve)
                                    (NP (NN health) (NN care))
                                    (PP (IN because)
                                      (NP (PRP$ his) (NNS parents))))))))))))))))))
      (VP (VBP work)
        (PP (IN at)
          (NP (NNP Burger) (NNP King)
            (CC and)
            (NNP Walmart)))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (ADJP (RB disgustingly) (JJ wrong)))
    (. .)))

mark(going-5, If-2)
nsubj(going-5, you-3)
xsubj(sit-7, you-3)
aux(going-5, 're-4)
csubj(work-24, going-5)
aux(sit-7, to-6)
xcomp(going-5, sit-7)
advmod(sit-7, there-8)
xcomp(going-5, say-10)
conj_and(sit-7, say-10)
complm(think-13, that-11)
nsubj(think-13, you-12)
ccomp(say-10, think-13)
det(child-15, a-14)
nsubj(deserve-18, child-15)
aux(deserve-18, does-16)
neg(deserve-18, not-17)
ccomp(think-13, deserve-18)
nn(care-20, health-19)
dobj(deserve-18, care-20)
poss(parents-23, his-22)
prep_because(deserve-18, parents-23)
ccomp(wrong-34, work-24)
nn(King-27, Burger-26)
prep_at(work-24, King-27)
prep_at(work-24, Walmart-29)
conj_and(King-27, Walmart-29)
nsubj(wrong-34, you-31)
cop(wrong-34, are-32)
advmod(wrong-34, disgustingly-33)
root(ROOT-0, wrong-34)

(ROOT
  (S ('' '')
    (NP (DT That))
    (VP (VBZ 's)
      (NP (PRP$ your) (NN opinion)))
    (. .)))

nsubj(opinion-5, That-2)
cop(opinion-5, 's-3)
poss(opinion-5, your-4)
root(ROOT-0, opinion-5)

(ROOT
  (S
    (PP (IN In)
      (NP (PRP$ my) (NN opinion)))
    (, ,)
    (NP (NN everyone))
    (VP (VBZ has)
      (NP (DT the) (NN freedom)
        (S
          (VP (TO to)
            (VP (VB work)
              (CC and)
              (VB earn)
              (NP (JJR more) (NN money)))))))
    (. .)))

poss(opinion-3, my-2)
prep_in(has-6, opinion-3)
nsubj(has-6, everyone-5)
root(ROOT-0, has-6)
det(freedom-8, the-7)
dobj(has-6, freedom-8)
aux(work-10, to-9)
infmod(freedom-8, work-10)
infmod(freedom-8, earn-12)
conj_and(work-10, earn-12)
amod(money-14, more-13)
dobj(work-10, money-14)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is) (RB not)
      (NP
        (NP (PRP$ my) (NN fault))
        (SBAR
          (S
            (NP (PRP they))
            (VP (VBP work)
              (PP (IN for)
                (NP
                  (NP (JJ minimum) (NN wage))
                  (CC or)
                  (NP (PRP$ my) (NN responsibility)
                    (S
                      (VP (TO to)
                        (VP (VB pay)
                          (PP (IN for)
                            (NP (JJ other) (NNS people))))))))))))))
    (. .)))

nsubj(fault-5, It-1)
cop(fault-5, is-2)
neg(fault-5, not-3)
poss(fault-5, my-4)
root(ROOT-0, fault-5)
dobj(work-7, fault-5)
nsubj(work-7, they-6)
rcmod(fault-5, work-7)
amod(wage-10, minimum-9)
prep_for(work-7, wage-10)
poss(responsibility-13, my-12)
prep_for(work-7, responsibility-13)
conj_or(wage-10, responsibility-13)
aux(pay-15, to-14)
infmod(responsibility-13, pay-15)
amod(people-18, other-17)
prep_for(pay-15, people-18)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB never))
    (VP
      (ADVP (RB anywhere))
      (VBD said)
      (SBAR (IN that)
        (S
          (NP (NNS people))
          (VP (VBP are) (RB not)
            (ADJP (JJ equal))))))
    (. .)))

nsubj(said-4, I-1)
neg(said-4, never-2)
advmod(said-4, anywhere-3)
root(ROOT-0, said-4)
complm(equal-9, that-5)
nsubj(equal-9, people-6)
cop(equal-9, are-7)
neg(equal-9, not-8)
ccomp(said-4, equal-9)

(ROOT
  (S
    (NP (NN Everyone))
    (VP (VBZ is)
      (VP (VBN CREATED)
        (S
          (ADJP (JJ equal)))))
    (. .)))

nsubjpass(CREATED-3, Everyone-1)
auxpass(CREATED-3, is-2)
root(ROOT-0, CREATED-3)
acomp(CREATED-3, equal-4)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (PRP they))
        (VP (VBP make)
          (PP (IN of)
            (NP (PRP themselves))))))
    (PRN (-LRB- -LRB-)
      (SBAR (IN because)
        (S
          (ADVP (RB luckily))
          (NP (PRP we))
          (VP (VBP have)
            (NP
              (NP (DT the) (NN freedom))
              (PP (IN of)
                (NP (NN choice)))))))
      (-RRB- -RRB-))
    (VP (VBZ is)
      (ADVP (RB up)
        (PP (TO to)
          (NP (PRP them)))))
    (. .)))

dobj(make-3, What-1)
nsubj(make-3, they-2)
csubj(is-16, make-3)
prep_of(make-3, themselves-5)
mark(have-10, because-7)
advmod(have-10, luckily-8)
nsubj(have-10, we-9)
parataxis(is-16, have-10)
det(freedom-12, the-11)
dobj(have-10, freedom-12)
prep_of(freedom-12, choice-14)
root(ROOT-0, is-16)
advmod(is-16, up-17)
prep_to(up-17, them-19)

(ROOT
  (S
    (S
      (SBAR (IN As)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (ADVP (RB up)
              (PP (TO to)
                (NP (PRP me))))
            (NP (WP what)))))
      (NP (PRP I))
      (VP (VBP do)
        (PP (IN with)
          (NP (PRP$ my) (NN life)))))
    (CC and)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADVP (RB up)
          (PP (TO to)
            (NP (PRP you))))
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (VBP do)
              (PP (IN with)
                (NP (NNP yours))))))))
    (. .)))

mark(what-7, As-1)
nsubj(what-7, it-2)
cop(what-7, is-3)
advmod(what-7, up-4)
prep_to(up-4, me-6)
advcl(do-9, what-7)
nsubj(do-9, I-8)
root(ROOT-0, do-9)
poss(life-12, my-11)
prep_with(do-9, life-12)
nsubj(is-15, it-14)
conj_and(do-9, is-15)
advmod(is-15, up-16)
prep_to(up-16, you-18)
dobj(do-21, what-19)
nsubj(do-21, you-20)
ccomp(is-15, do-21)
prep_with(do-21, yours-23)

(ROOT
  (S
    (NP (DT A) (NN murderer))
    (VP (VBZ is) (RB not)
      (ADJP (JJ equal)
        (PP (TO to)
          (NP
            (NP (DT a) (NN doctor))
            (PP (IN in)
              (NP (PRP$ my) (NN opinion))))))
      (SBAR (IN because)
        (S
          (NP (PRP they))
          (VP (VBD chose)
            (NP (JJ different) (NNS paths))))))
    (. .)))

det(murderer-2, A-1)
nsubj(equal-5, murderer-2)
cop(equal-5, is-3)
neg(equal-5, not-4)
root(ROOT-0, equal-5)
det(doctor-8, a-7)
prep_to(equal-5, doctor-8)
poss(opinion-11, my-10)
prep_in(doctor-8, opinion-11)
mark(chose-14, because-12)
nsubj(chose-14, they-13)
advcl(equal-5, chose-14)
amod(paths-16, different-15)
dobj(chose-14, paths-16)

(ROOT
  (S
    (NP
      (NP (NNP Wealth))
      (CC and)
      (NP (NN power)))
    (VP (VBP are)
      (VP (VBN kept)
        (PP (IN in)
          (NP
            (NP (DT the) (JJS smallest) (NN number))
            (PP (IN of)
              (NP
                (NP (NNS hands))
                (ADJP (JJ possible))))))))
    (. .)))

nsubjpass(kept-5, Wealth-1)
conj_and(Wealth-1, power-3)
nsubjpass(kept-5, power-3)
auxpass(kept-5, are-4)
root(ROOT-0, kept-5)
det(number-9, the-7)
amod(number-9, smallest-8)
prep_in(kept-5, number-9)
prep_of(number-9, hands-11)
amod(hands-11, possible-12)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD can) (RB not)
      (VP (VB be)
        (VP (VBN treated)
          (NP (DT the) (JJ same))
          (PP (IN because)
            (NP (NN society) (NNS benefits)))
          (PP (RBR more) (IN from)
            (NP
              (NP
                (NP (DT the) (NN doctor) (POS 's))
                (NN life))
              (PP (IN than)
                (NP (DT the) (NN murderer) (POS 's))))))))
    (. .)))

nsubjpass(treated-5, They-1)
aux(treated-5, can-2)
neg(treated-5, not-3)
auxpass(treated-5, be-4)
root(ROOT-0, treated-5)
det(same-7, the-6)
dobj(treated-5, same-7)
nn(benefits-10, society-9)
prep_because(treated-5, benefits-10)
advmod(treated-5, more-11)
det(doctor-14, the-13)
poss(life-16, doctor-14)
prep_from(treated-5, life-16)
det(murderer-19, the-18)
prep_than(life-16, murderer-19)
possessive(murderer-19, 's-20)

(ROOT
  (S
    (NP (JJ Free) (NN market) (NN economy))
    (VP (VBZ is)
      (ADJP (JJ fair)
        (CC and)
        (RB just)))
    (. .)))

amod(economy-3, Free-1)
nn(economy-3, market-2)
nsubj(fair-5, economy-3)
cop(fair-5, is-4)
root(ROOT-0, fair-5)
advmod(fair-5, just-7)
conj_and(fair-5, just-7)

(ROOT
  (S
    (NP (RB Here))
    (VP (VBZ 's)
      (NP (DT an) (NN article)
        (S
          (VP (TO to)
            (VP (VB help)
              (VP (VB explain)
                (NP (PRP$ my) (NN point))))))))
    (. .)))

nsubj(article-4, Here-1)
cop(article-4, 's-2)
det(article-4, an-3)
root(ROOT-0, article-4)
aux(help-6, to-5)
infmod(article-4, help-6)
xcomp(help-6, explain-7)
poss(point-9, my-8)
dobj(explain-7, point-9)

(ROOT
  (S
    (NP
      (NP (JJ http:\/\/pajamasmedia.com\/blog\/the-free-market-is-not-another-form-of-rationing) (NNS \/))
      (SBAR (`` ``)
        (WHNP (WP What) (DT a) (NN person))
        (S
          (VP (VBZ does)))))
    (VP (VBZ is) (RB not)
      (NP (DT the) (NN question)))
    (. .)))

amod(\/-2, http:\/\/pajamasmedia.com\/blog\/the-free-market-is-not-another-form-of-rationing-1)
det(person-6, \/-2)
nsubj(question-11, \/-2)
det(person-6, a-5)
nsubj(does-7, person-6)
rcmod(\/-2, does-7)
cop(question-11, is-8)
neg(question-11, not-9)
det(question-11, the-10)
root(ROOT-0, question-11)

(ROOT
  (S ('' '')
    (NP (NNP Yes) (PRP it))
    (VP (VBZ is))
    (. .)))

nsubj(is-4, Yes-2)
dep(Yes-2, it-3)
root(ROOT-0, is-4)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT a) (NN person))
        (VP (VBZ chooses)
          (S
            (VP (TO to)
              (VP (VB contribute)
                (PP (TO to)
                  (NP (NN society)))))))))
    (, ,)
    (NP (PRP they))
    (VP (VBP receive)
      (NP
        (NP (NN money))
        (PP (IN in)
          (NP (NN return)))))
    (. .)))

mark(chooses-4, If-1)
det(person-3, a-2)
nsubj(chooses-4, person-3)
xsubj(contribute-6, person-3)
advcl(receive-11, chooses-4)
aux(contribute-6, to-5)
xcomp(chooses-4, contribute-6)
prep_to(contribute-6, society-8)
nsubj(receive-11, they-10)
root(ROOT-0, receive-11)
dobj(receive-11, money-12)
prep_in(money-12, return-14)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT a) (NN person))
        (VP (VBZ chooses)
          (S
            (VP (TO to)
              (VP
                (VP (VB be)
                  (ADJP (JJ lazy)))
                (CC and)
                (VP (VB do)
                  (NP (NN nothing))
                  (PP (IN for)
                    (NP (NN anyone) (RB else))))))))))
    (, ,)
    (NP (PRP they))
    (VP (VBP do) (RB n't)
      (VP (VB get)
        (NP (NN money))))
    (. .)))

mark(chooses-4, If-1)
det(person-3, a-2)
nsubj(chooses-4, person-3)
xsubj(lazy-7, person-3)
advcl(get-18, chooses-4)
aux(lazy-7, to-5)
cop(lazy-7, be-6)
xcomp(chooses-4, lazy-7)
xcomp(chooses-4, do-9)
conj_and(lazy-7, do-9)
dobj(do-9, nothing-10)
prep_for(do-9, anyone-12)
advmod(anyone-12, else-13)
nsubj(get-18, they-15)
aux(get-18, do-16)
neg(get-18, n't-17)
root(ROOT-0, get-18)
dobj(get-18, money-19)

(ROOT
  (NP
    (NP (DT Another) (NN article))
    (, ,)
    (NP
      (NP (DT this) (NN one))
      (VP (VBN written)
        (PP (IN by)
          (NP (PRP me)))))
    (. .)))

det(article-2, Another-1)
root(ROOT-0, article-2)
det(one-5, this-4)
appos(article-2, one-5)
partmod(one-5, written-6)
agent(written-6, me-8)

(ROOT
  (S
    (NP
      (NP (NN http:\/\/hubpages.com\/hub\/Money---Examining-the-Concept) ('' ''))
      (SBAR
        (S
          (NP
            (NP (DT The) (NNS people))
            (SBAR
              (S
                (NP (PRP you))
                (VP (VBP are)
                  (VP (VBG saying))))))
          (VP (VBP do) (RB n't)
            (VP (VB deserve)
              (S
                (VP (TO to)
                  (VP (RB not)
                    (VP (VB go)
                      (PP (IN into)
                        (NP (NN bankruptcy))))
                    (CC and)
                    (VP (VB lose)
                      (NP (PRP$ their) (NNS homes)))))))))))
    (VP (VBP are)
      (NP
        (NP (DT the) (NNS people))
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP depend)
              (PRT (RP on)))))))
    (. .)))

dobj(deserve-10, http:\/\/hubpages.com\/hub\/Money---Examining-the-Concept-1)
nsubj(people-22, http:\/\/hubpages.com\/hub\/Money---Examining-the-Concept-1)
det(people-4, The-3)
dobj(saying-7, people-4)
nsubj(deserve-10, people-4)
xsubj(go-13, people-4)
nsubj(saying-7, you-5)
aux(saying-7, are-6)
rcmod(people-4, saying-7)
aux(deserve-10, do-8)
neg(deserve-10, n't-9)
rcmod(http:\/\/hubpages.com\/hub\/Money---Examining-the-Concept-1, deserve-10)
aux(go-13, to-11)
neg(go-13, not-12)
xcomp(deserve-10, go-13)
prep_into(go-13, bankruptcy-15)
xcomp(deserve-10, lose-17)
conj_and(go-13, lose-17)
poss(homes-19, their-18)
dobj(lose-17, homes-19)
cop(people-22, are-20)
det(people-22, the-21)
root(ROOT-0, people-22)
dobj(depend-24, people-22)
nsubj(depend-24, you-23)
rcmod(people-22, depend-24)
prt(depend-24, on-25)

(ROOT
  (S ('' '')
    (ADVP (RB Yes))
    (, ,)
    (NP (PRP they))
    (VP (VBP are))
    (. .)))

advmod(are-5, Yes-2)
nsubj(are-5, they-4)
root(ROOT-0, are-5)

(ROOT
  (S (CC And)
    (ADJP (RB strangely) (JJ enough))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (VP (VB pay)
        (NP (PRP them))
        (PP (IN for)
          (NP (PRP$ their) (NN service)))))
    (: ...)))

cc(pay-7, And-1)
advmod(enough-3, strangely-2)
dep(pay-7, enough-3)
nsubj(pay-7, I-5)
aux(pay-7, would-6)
root(ROOT-0, pay-7)
dobj(pay-7, them-8)
poss(service-11, their-10)
prep_for(pay-7, service-11)

(ROOT
  (S
    (PP (IN Except)
      (PP (IN at)
        (NP (DT the) (NN moment))))
    (NP (PRP I))
    (VP (MD ca) (RB n't)
      (VP (VB afford)
        (S
          (VP (TO to)
            (VP (VB purchase)
              (NP (PRP$ their) (NNS services)))))))
    (. .)))

prep(afford-8, Except-1)
pcomp(Except-1, at-2)
det(moment-4, the-3)
prep_at(Except-1, moment-4)
nsubj(afford-8, I-5)
xsubj(purchase-10, I-5)
aux(afford-8, ca-6)
neg(afford-8, n't-7)
root(ROOT-0, afford-8)
aux(purchase-10, to-9)
xcomp(afford-8, purchase-10)
poss(services-12, their-11)
dobj(purchase-10, services-12)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBD understood)
      (SBAR
        (WHADJP (RB exactly) (WP what))
        (S
          (NP (PRP you))
          (VP (VBD meant)))))
    (. .)))

nsubj(understood-3, I-2)
root(ROOT-0, understood-3)
dep(meant-7, exactly-4)
dep(exactly-4, what-5)
nsubj(meant-7, you-6)
ccomp(understood-3, meant-7)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD would)
      (SBAR (IN if)
        (S
          (NP (PRP I))
          (VP (VBD had)
            (NP
              (NP (DT a) (NN job))
              (PP (IN at)
                (NP (CD one)))
              (PP (IN of)
                (NP
                  (NP (DT the) (JJ big) (NNS corporations))
                  (SBAR
                    (S
                      (NP (PRP you))
                      (RB so)
                      (VP (VB despise)))))))))))
    (: ...)))

nsubj(would-2, I-1)
root(ROOT-0, would-2)
mark(had-5, if-3)
nsubj(had-5, I-4)
advcl(would-2, had-5)
det(job-7, a-6)
dobj(had-5, job-7)
prep_at(job-7, one-9)
det(corporations-13, the-11)
amod(corporations-13, big-12)
prep_of(job-7, corporations-13)
nsubj(despise-16, you-14)
advmod(despise-16, so-15)
rcmod(corporations-13, despise-16)

(ROOT
  (FRAG (CC but)
    (PP (IN for)
      (SBAR (RB now)
        (S
          (NP (PRP I))
          (VP (VBP guess)
            (SBAR
              (S
                (NP (PRP they))
                (VP (VBP 're)
                  (ADJP (JJ unemployed)
                    (SBAR (IN because)
                      (S
                        (ADVP (RB so))
                        (VP (VBP am)
                          (NP (NN I.)))))))))))))))

root(ROOT-0, but-1)
dep(but-1, for-2)
advmod(guess-5, now-3)
nsubj(guess-5, I-4)
pcomp(for-2, guess-5)
nsubj(unemployed-8, they-6)
cop(unemployed-8, 're-7)
ccomp(guess-5, unemployed-8)
mark(I.-12, because-9)
advmod(I.-12, so-10)
cop(I.-12, am-11)
ccomp(unemployed-8, I.-12)

(ROOT
  (PRN (-LRB- -LRB-)
    (S
      (NP (PRP I))
      (VP (VBP 'm)
        (VP (VBG exaggerating)
          (NP (DT a) (JJ little))
          (, ,)
          (SBAR
            (SBAR
              (S
                (NP (PRP I))
                (VP (VBP am)
                  (ADVP (RB still))
                  (PP (IN in)
                    (NP (NNP Grad) (NNP School))))))
            (, ,)
            (CC so)
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBZ 's)
                  (SBAR
                    (WHADVP (WRB why))
                    (S
                      (NP (PRP I))
                      (VP (VBP 'm)
                        (ADVP (RB broke))))))))))))
    (-RRB- -RRB-)))

nsubj(exaggerating-4, I-2)
aux(exaggerating-4, 'm-3)
root(ROOT-0, exaggerating-4)
det(little-6, a-5)
dobj(exaggerating-4, little-6)
nsubj(am-9, I-8)
dep(exaggerating-4, am-9)
advmod(am-9, still-10)
nn(School-13, Grad-12)
prep_in(am-9, School-13)
nsubj('s-17, that-16)
dep(exaggerating-4, 's-17)
conj_so(am-9, 's-17)
advmod('m-20, why-18)
nsubj('m-20, I-19)
advcl('s-17, 'm-20)
advmod('m-20, broke-21)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP think)
      (SBAR
        (S
          (NP
            (NP (DT the) (JJS wealthiest) (NNS people))
            (PP (IN in)
              (NP (DT the) (NN country))))
          (VP (VBP are)
            (NP
              (NP (DT the) (JJ greediest) (NNS people))
              (PP (IN in)
                (NP (DT the) (NN country))))))))
    (. .)))

nsubj(think-2, You-1)
root(ROOT-0, think-2)
det(people-5, the-3)
amod(people-5, wealthiest-4)
nsubj(people-12, people-5)
det(country-8, the-7)
prep_in(people-5, country-8)
cop(people-12, are-9)
det(people-12, the-10)
amod(people-12, greediest-11)
ccomp(think-2, people-12)
det(country-15, the-14)
prep_in(people-12, country-15)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB have)
          (NP (NN time))
          (ADVP (RB right) (RB now))
          (S
            (VP (TO to)
              (VP (VB go)
                (VP (VB find)
                  (NP (DT the) (NNS statistics))
                  (SBAR (IN that)
                    (S
                      (NP (PRP I))
                      (VP (VBP 've)
                        (VP (VBN mentioned))))))))))))
    (CC but)
    (ADVP (RB maybe) (RB later))
    (S
      (NP (PRP I))
      (VP (MD will)
        (VP (VB get)
          (PRT (RP around))
          (PP (TO to)
            (S
              (VP (VBG posting)
                (NP (DT the) (NN link))))))))
    (. .)))

nsubj(have-4, I-1)
xsubj(go-9, I-1)
aux(have-4, do-2)
neg(have-4, n't-3)
root(ROOT-0, have-4)
dobj(have-4, time-5)
advmod(now-7, right-6)
advmod(have-4, now-7)
aux(go-9, to-8)
xcomp(have-4, go-9)
xcomp(go-9, find-10)
det(statistics-12, the-11)
dobj(find-10, statistics-12)
complm(mentioned-16, that-13)
nsubj(mentioned-16, I-14)
aux(mentioned-16, 've-15)
ccomp(find-10, mentioned-16)
advmod(later-19, maybe-18)
advmod(have-4, later-19)
conj_but(have-4, later-19)
nsubj(get-22, I-20)
aux(get-22, will-21)
ccomp(have-4, get-22)
conj_but(have-4, get-22)
prt(get-22, around-23)
prepc_to(get-22, posting-25)
det(link-27, the-26)
dobj(posting-25, link-27)

(ROOT
  (S ('' '')
    (NP (PRP We))
    (VP (VBD created)
      (NP (DT this) (NN country)
        (S
          (VP (TO to)
            (VP (VB protect)
              (NP
                (NP (DT the) (NNS individuals))
                (: ...)
                (NP
                  (NP (DT all))
                  (PP (IN of)
                    (NP (PRP them))))))))))
    (. ...)))

nsubj(created-3, We-2)
root(ROOT-0, created-3)
det(country-5, this-4)
dobj(created-3, country-5)
aux(protect-7, to-6)
infmod(country-5, protect-7)
det(individuals-9, the-8)
dobj(protect-7, individuals-9)
dep(individuals-9, all-11)
prep_of(all-11, them-13)

(ROOT
  (S
    (VP
      (PP (IN from)
        (NP
          (NP (NN greed)
            (CC and)
            (NN corruption))
          (FRAG
            (ADJP
              (WHADVP (WRB whenever))
              (JJ possible))))))
    (. .)))

root(ROOT-0, from-1)
pobj(from-1, greed-2)
pobj(from-1, corruption-4)
conj_and(greed-2, corruption-4)
advmod(possible-6, whenever-5)
dep(greed-2, possible-6)

