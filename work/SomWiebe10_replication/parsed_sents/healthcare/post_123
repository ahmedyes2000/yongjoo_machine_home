(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP (JJ impossible)
        (S
          (VP (TO to)
            (VP (VB answer)
              (SBAR (IN whether)
                (S
                  (NP (JJ universal) (NN health) (NN care))
                  (VP (VBZ fosters)
                    (NP (JJR greater) (NN equality))))))))))
    (. .)))

nsubj(impossible-3, It-1)
cop(impossible-3, is-2)
root(ROOT-0, impossible-3)
aux(answer-5, to-4)
xcomp(impossible-3, answer-5)
complm(fosters-10, whether-6)
amod(care-9, universal-7)
nn(care-9, health-8)
nsubj(fosters-10, care-9)
ccomp(answer-5, fosters-10)
amod(equality-12, greater-11)
dobj(fosters-10, equality-12)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (NP (DT the) (NN word) (NN equality))
        (VP (VBZ necessitates)
          (NP (DT a) (NN value) (NN judgment))
          (PP (IN as)
            (PP (TO to)
              (SBAR
                (WHNP (WP what))
                (S
                  (VP (VBZ is) (`` ``)
                    (ADJP (JJ equal))
                    ('' '')
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (NP (PRP it))
                        (VP (VBZ comes)
                          (PP (TO to)
                            (NP
                              (NP (NN health) (NN care))
                              (CC and)
                              (NP (NN class) (NN status)))))))))))))))
    (, ,)
    (NP (DT a) (JJ universal) (NN definition))
    (VP (VBZ is) (RB not)
      (ADJP (JJ possible)))
    (. .)))

mark(necessitates-5, Since-1)
det(equality-4, the-2)
nn(equality-4, word-3)
nsubj(necessitates-5, equality-4)
advcl(possible-31, necessitates-5)
det(judgment-8, a-6)
nn(judgment-8, value-7)
dobj(necessitates-5, judgment-8)
prepc_as_to(necessitates-5, to-10)
nsubj(equal-14, what-11)
cop(equal-14, is-12)
pcomp(necessitates-5, equal-14)
advmod(comes-18, when-16)
nsubj(comes-18, it-17)
advcl(equal-14, comes-18)
nn(care-21, health-20)
prep_to(comes-18, care-21)
nn(status-24, class-23)
prep_to(comes-18, status-24)
conj_and(care-21, status-24)
det(definition-28, a-26)
amod(definition-28, universal-27)
nsubj(possible-31, definition-28)
cop(possible-31, is-29)
neg(possible-31, not-30)
root(ROOT-0, possible-31)

(ROOT
  (SBARQ
    (WHPP (IN For)
      (WHNP (WDT instance)))
    (SQ (MD would)
      (NP (PRP it))
      (VP (VB be)
        (ADJP (JJ equal))
        (SBAR (IN if)
          (S
            (NP (DT no) (NN one))
            (VP (VBD had)
              (NP
                (NP (NN access))
                (PP (TO to)
                  (NP (NNP MRI) (POS 's)))))))))
    (. ?)))

prep_for(equal-6, instance-2)
aux(equal-6, would-3)
nsubj(equal-6, it-4)
cop(equal-6, be-5)
root(ROOT-0, equal-6)
mark(had-10, if-7)
det(one-9, no-8)
nsubj(had-10, one-9)
advcl(equal-6, had-10)
dobj(had-10, access-11)
prep_to(access-11, MRI-13)
possessive(MRI-13, 's-14)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP
          (NP
            (QP (RB only) (CD 80))
            (NN %))
          (PP (IN of)
            (NP
              (NP (DT those))
              (VP (VBG requiring)
                (NP (DT an) (NNP MRI))))))
        (VP (MD could)
          (VP (VB get)
            (NP (PRP it))))))
    (WHNP (WP what))
    (SQ
      (VP (MD would)
        (VP (VB determine)
          (SBAR
            (WHADVP (WRB how))
            (S
              (VP (TO to)
                (VP (VB define)
                  (S
                    (NP (DT those) (NNS individuals))
                    (`` ``)
                    (ADJP (JJ equally))
                    ('' '')))))))))
    (. ?)))

mark(get-11, If-1)
quantmod(80-3, only-2)
num(%-4, 80-3)
nsubj(get-11, %-4)
prep_of(%-4, those-6)
partmod(those-6, requiring-7)
det(MRI-9, an-8)
dobj(requiring-7, MRI-9)
aux(get-11, could-10)
dep(determine-15, get-11)
dobj(get-11, it-12)
nsubj(determine-15, what-13)
aux(determine-15, would-14)
root(ROOT-0, determine-15)
advmod(define-18, how-16)
aux(define-18, to-17)
ccomp(determine-15, define-18)
xcomp(determine-15, define-18)
det(individuals-20, those-19)
dep(equally-22, individuals-20)
dep(define-18, equally-22)

