(ROOT
  (SQ
    (SBAR (`` ``)
      (S
        (NP (PRP You))
        (VP (VBP work)
          (PP (IN in)
            (NP (DT the) (NN insurance) (NN business))))))
    (, ,) (MD would)
    (NP (PRP you))
    (VP (VB support)
      (NP (JJ universal) (NN health) (NN care))
      (S
        (VP (VBG knowing)
          (SBAR
            (S
              (NP (PRP it))
              (VP (MD would)
                (VP (VB result)
                  (PP (IN in)
                    (S
                      (NP (PRP you))
                      (VP (VBG losing)
                        (NP (PRP$ your) (NN job))))))))))))
    (. ?)))

nsubj(work-3, You-2)
dep(support-11, work-3)
det(business-7, the-5)
nn(business-7, insurance-6)
prep_in(work-3, business-7)
aux(support-11, would-9)
nsubj(support-11, you-10)
root(ROOT-0, support-11)
amod(care-14, universal-12)
nn(care-14, health-13)
dobj(support-11, care-14)
xcomp(support-11, knowing-15)
nsubj(result-18, it-16)
aux(result-18, would-17)
ccomp(knowing-15, result-18)
nsubj(losing-21, you-20)
prepc_in(result-18, losing-21)
poss(job-23, your-22)
dobj(losing-21, job-23)

(ROOT
  (SQ
    (SBAR (`` ``)
      (S
        (NP (PRP You))
        (VP (VBP work)
          (PP (IN for)
            (NP (DT the) (NN government))))))
    (, ,) (MD would)
    (NP (PRP you))
    (VP (VB support)
      (NP
        (NP (NNP Universal) (NNP Health) (NNP Care))
        (VP (VBG knowing)
          (S
            (S
              (NP (PRP it))
              (VP (MD would)
                (VP
                  (VP (VB get)
                    (S
                      (NP (PRP you))
                      (NP (DT a) (NN job))))
                  (CC and)
                  (VP (VB allow)
                    (S
                      (NP (PRP you))
                      (VP (TO to)
                        (VP (VB deliver)
                          (NP (JJ menial) (NN service)))))))))
            (CC and)
            (S
              (NP (NNP STILL))
              (VP (VBP get)
                (NP (NN tax) (NN money))
                (PP (IN as)
                  (NP (NN compensation)))))))))
    (. ?)))

nsubj(work-3, You-2)
dep(support-10, work-3)
det(government-6, the-5)
prep_for(work-3, government-6)
aux(support-10, would-8)
nsubj(support-10, you-9)
root(ROOT-0, support-10)
nn(Care-13, Universal-11)
nn(Care-13, Health-12)
dobj(support-10, Care-13)
partmod(Care-13, knowing-14)
nsubj(get-17, it-15)
nsubj(allow-22, it-15)
aux(get-17, would-16)
dep(knowing-14, get-17)
nsubj(job-20, you-18)
det(job-20, a-19)
xcomp(get-17, job-20)
dep(knowing-14, allow-22)
conj_and(get-17, allow-22)
nsubj(deliver-25, you-23)
aux(deliver-25, to-24)
xcomp(allow-22, deliver-25)
amod(service-27, menial-26)
dobj(deliver-25, service-27)
nsubj(get-30, STILL-29)
dep(knowing-14, get-30)
conj_and(get-17, get-30)
nn(money-32, tax-31)
dobj(get-30, money-32)
prep_as(get-30, compensation-34)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP$ my) (JJ fellow) (NNS Americans))
          (VP (MD should)
            (VP (VB be)
              (VP (VBN helped)
                (PP (IN like)
                  (NP
                    (NP (DT the) (JJ Canadian) (NN system))
                    (SBAR
                      (S
                        (NP (PRP it))
                        (VP (VBZ does) (RB not)
                          (VP (VB see)
                            (NP
                              (NP (DT a) (NN difference))
                              (PP (IN between)
                                (NP
                                  (NP (DT the) (JJ poor))
                                  (CC or)
                                  (NP (DT any) (JJ other) (NN sector))))
                              (SBAR
                                (S
                                  (NP (PRP they))
                                  (RB all)
                                  (VP (VB get)
                                    (NP (DT the) (JJ same) (NN quality) (NN care))))))))))))))))))
    (. .)))

nsubj(think-3, I-2)
root(ROOT-0, think-3)
poss(Americans-6, my-4)
amod(Americans-6, fellow-5)
nsubjpass(helped-9, Americans-6)
aux(helped-9, should-7)
auxpass(helped-9, be-8)
ccomp(think-3, helped-9)
det(system-13, the-11)
amod(system-13, Canadian-12)
prep_like(helped-9, system-13)
nsubj(see-17, it-14)
aux(see-17, does-15)
neg(see-17, not-16)
rcmod(system-13, see-17)
det(difference-19, a-18)
dobj(see-17, difference-19)
det(poor-22, the-21)
prep_between(difference-19, poor-22)
det(sector-26, any-24)
amod(sector-26, other-25)
prep_between(difference-19, sector-26)
conj_or(poor-22, sector-26)
nsubj(get-29, they-27)
advmod(get-29, all-28)
rcmod(difference-19, get-29)
det(care-33, the-30)
amod(care-33, same-31)
nn(care-33, quality-32)
dobj(get-29, care-33)

(ROOT
  (S ('' '')
    (NP (PRP They))
    (VP (VBP do) (RB n't)
      (VP (VB get)
        (NP
          (NP (DT the) (JJ same) (NN quality))
          (PP (IN of)
            (NP (NN care))))
        (SBAR (IN though)
          (S
            (NP
              (NP (: :)
                (NP
                  (NP (JJ http:\/\/www.youtube.com\/watch?v=aEXFUbSbg1I) (JJ http:\/\/www.youtube.com\/watch?v=BpsEAVbCkMM&feature=related) (JJ http:\/\/www.youtube.com\/watch?v=refrYKq9tZQ&feature=related) (NNS http:\/\/www.youtube.com\/watch?v=Qzhi))
                  (NP (NNS G0dcwN8)))
                (CC &)
                (NP
                  (NP (NN feature))
                  (SBAR
                    (S
                      (VP (SYM =)
                        (NP (JJ related) (JJ http:\/\/www.youtube.com\/watch?v=Xsp_Jh5EIT0&feature=related) (NNS http:\/\/www.youtube.com\/watch?v=E_KCLm9cekU&feature=related) ('' '')))))))
              (NP (PRP$ Our) (NN system)))
            (VP (VBZ is)
              (ADVP (DT all) (IN about))
              (VP (VBG making)
                (NP (NN money))
                (S (RB not)
                  (VP (VBG giving)
                    (NP (NN care))))))))))
    (. .)))

nsubj(get-5, They-2)
aux(get-5, do-3)
neg(get-5, n't-4)
root(ROOT-0, get-5)
det(quality-8, the-6)
amod(quality-8, same-7)
dobj(get-5, quality-8)
prep_of(quality-8, care-10)
mark(making-30, though-11)
amod(http:\/\/www.youtube.com\/watch?v=Qzhi-16, http:\/\/www.youtube.com\/watch?v=aEXFUbSbg1I-13)
amod(http:\/\/www.youtube.com\/watch?v=Qzhi-16, http:\/\/www.youtube.com\/watch?v=BpsEAVbCkMM&feature=related-14)
amod(http:\/\/www.youtube.com\/watch?v=Qzhi-16, http:\/\/www.youtube.com\/watch?v=refrYKq9tZQ&feature=related-15)
nsubj(making-30, http:\/\/www.youtube.com\/watch?v=Qzhi-16)
dep(http:\/\/www.youtube.com\/watch?v=Qzhi-16, G0dcwN8-17)
conj_and(http:\/\/www.youtube.com\/watch?v=Qzhi-16, feature-19)
nsubj(making-30, feature-19)
dep(http:\/\/www.youtube.com\/watch?v=E_KCLm9cekU&feature=related-23, =-20)
amod(http:\/\/www.youtube.com\/watch?v=E_KCLm9cekU&feature=related-23, related-21)
amod(http:\/\/www.youtube.com\/watch?v=E_KCLm9cekU&feature=related-23, http:\/\/www.youtube.com\/watch?v=Xsp_Jh5EIT0&feature=related-22)
rcmod(feature-19, http:\/\/www.youtube.com\/watch?v=E_KCLm9cekU&feature=related-23)
poss(system-26, Our-25)
dep(http:\/\/www.youtube.com\/watch?v=Qzhi-16, system-26)
aux(making-30, is-27)
dep(about-29, all-28)
advmod(making-30, about-29)
advcl(get-5, making-30)
dobj(making-30, money-31)
neg(giving-33, not-32)
xcomp(making-30, giving-33)
dobj(giving-33, care-34)

(ROOT
  (S ('' '')
    (S
      (SBAR (IN If)
        (S
          (NP (PRP they))
          (VP (VBP do) (RB n't)
            (VP (VB give)))))
      (VP (VBP care)))
    (, ,) (RB then)
    (S
      (NP (PRP they))
      (VP (VBP do) (RB n't)
        (VP (VB get)
          (NP (NN money)))))
    (. .)))

mark(give-6, If-2)
nsubj(give-6, they-3)
aux(give-6, do-4)
neg(give-6, n't-5)
csubj(care-7, give-6)
root(ROOT-0, care-7)
advmod(care-7, then-9)
nsubj(get-13, they-10)
aux(get-13, do-11)
neg(get-13, n't-12)
ccomp(care-7, get-13)
dobj(get-13, money-14)

(ROOT
  (FRAG
    (ADJP (JJ Plain)
      (CC and)
      (JJ simple))
    (. .)))

root(ROOT-0, Plain-1)
conj_and(Plain-1, simple-3)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (ADVP (RB even))
    (VP (VBP have)
      (NP (DT a) (NN plan)
        (S
          (VP (TO to)
            (VP (VB cover)
              (NP (DT the) (JJ entire) (NN cost))
              (PP (IN without)
                (NP (NN tax) (NN money))))))))
    (. !)))

nsubj(have-4, I-2)
advmod(have-4, even-3)
root(ROOT-0, have-4)
det(plan-6, a-5)
dobj(have-4, plan-6)
aux(cover-8, to-7)
infmod(plan-6, cover-8)
det(cost-11, the-9)
amod(cost-11, entire-10)
dobj(cover-8, cost-11)
nn(money-14, tax-13)
prep_without(cover-8, money-14)

(ROOT
  (S (`` ``)
    (NP (PRP I))
    (VP (MD would)
      (VP (VB like)
        (S
          (VP (TO to)
            (VP (VB know)
              (NP (JJR more))
              (PP (IN about)
                (NP (PRP it))))))))
    (. .)))

nsubj(like-4, I-2)
xsubj(know-6, I-2)
aux(like-4, would-3)
root(ROOT-0, like-4)
aux(know-6, to-5)
xcomp(like-4, know-6)
dobj(know-6, more-7)
prep_about(know-6, it-9)

(ROOT
  (S
    (NP
      (UCP
        (VP ('' '')
          (NP (DT The) (JJ poor)))
        (CC and)
        (NP (NN powerless)))
      (NN need))
    (VP (VBP help)
      (PP (IN in)
        (NP
          (NP (DT this) (NN country))
          (SBAR
            (S
              (NP (PRP you))
              (VP (MD should)
                (VP (VB get)
                  (PRT (RP out))
                  (NP (JJR more) (NNS !!)))))))))))

det(poor-3, The-2)
dep(need-6, poor-3)
conj_and(poor-3, powerless-5)
dep(need-6, powerless-5)
nsubj(help-7, need-6)
root(ROOT-0, help-7)
det(country-10, this-9)
prep_in(help-7, country-10)
nsubj(get-13, you-11)
aux(get-13, should-12)
rcmod(country-10, get-13)
prt(get-13, out-14)
amod(!!-16, more-15)
dobj(get-13, !!-16)

(ROOT
  (S (`` ``)
    (ADVP (RB Maybe))
    (NP (PRP I))
    (VP (MD should))
    (. .)))

advmod(should-4, Maybe-2)
nsubj(should-4, I-3)
root(ROOT-0, should-4)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (MD could)
        (VP (VB be)
          (VP (VBN DEAD)
            (ADJP (JJ wrong))
            (PP (IN on)
              (NP (DT this) (NN issue)))))))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (VP (VB like)
        (S
          (VP (TO to)
            (VP (VB know)
              (NP (JJR more))
              (PP (IN about)
                (NP
                  (NP (DT the) (NN plan))
                  (SBAR
                    (S
                      (NP (PRP you))
                      (VP (VBP 're)
                        (VP (VBG elaborating)
                          (PRT (RP on)))))))))))))
    (. .)))

nsubjpass(DEAD-4, I-1)
aux(DEAD-4, could-2)
auxpass(DEAD-4, be-3)
ccomp(like-12, DEAD-4)
acomp(DEAD-4, wrong-5)
det(issue-8, this-7)
prep_on(DEAD-4, issue-8)
nsubj(like-12, I-10)
xsubj(know-14, I-10)
aux(like-12, would-11)
root(ROOT-0, like-12)
aux(know-14, to-13)
xcomp(like-12, know-14)
dobj(know-14, more-15)
det(plan-18, the-17)
prep_about(know-14, plan-18)
dobj(elaborating-21, plan-18)
nsubj(elaborating-21, you-19)
aux(elaborating-21, 're-20)
rcmod(plan-18, elaborating-21)
prt(elaborating-21, on-22)

(ROOT
  (S (`` ``)
    (NP (NNS People))
    (VP (VBP are)
      (VP
        (VP (VBG becoming)
          (ADJP (RBR more) (JJ aware)))
        (CC and)
        (VP
          (ADVP (RB actually))
          (VBG doing)
          (NP (DT some) (NN work)
            (S
              (VP (TO to)
                (VP (VB find)
                  (PRT (RP out))
                  (SBAR
                    (WHNP (WP what))
                    (S
                      (VP (VBZ is)
                        (VP (VBG going)
                          (PRT (RP on)))))))))))))
    (. .)))

nsubj(becoming-4, People-2)
nsubj(doing-9, People-2)
aux(becoming-4, are-3)
root(ROOT-0, becoming-4)
advmod(aware-6, more-5)
acomp(becoming-4, aware-6)
advmod(doing-9, actually-8)
conj_and(becoming-4, doing-9)
det(work-11, some-10)
dobj(doing-9, work-11)
aux(find-13, to-12)
infmod(work-11, find-13)
prt(find-13, out-14)
nsubj(going-17, what-15)
aux(going-17, is-16)
ccomp(find-13, going-17)
prt(going-17, on-18)

(ROOT
  (S ('' '')
    (PP (IN Like)
      (NP
        (NP (DT this) (NN man))
        (: :)
        (NP
          (NP (NN http:\/\/www.sickandsickermovie.com))
          (VP (VBN \/)
            (S (`` ``)
              (NP (PRP I)))))))
    (VP
      (VP (VBP am)
        (ADJP (VBN retired)))
      (CC and)
      (VP (MD will)
        (VP (VB gain)
          (NP (NN nothing))
          (ADVP (RB regardless)
            (PP (IN of)
              (SBAR
                (WHADVP (WRB how))
                (S
                  (NP (DT this) (NN issue))
                  (VP (VBZ goes)))))))))
    (. .)))

det(man-4, this-3)
prep_like(retired-11, man-4)
dep(man-4, http:\/\/www.sickandsickermovie.com-6)
partmod(http:\/\/www.sickandsickermovie.com-6, \/-7)
dep(\/-7, I-9)
auxpass(retired-11, am-10)
root(ROOT-0, retired-11)
aux(gain-14, will-13)
conj_and(retired-11, gain-14)
dobj(gain-14, nothing-15)
advmod(goes-21, how-18)
det(issue-20, this-19)
nsubj(goes-21, issue-20)
prepc_regardless_of(gain-14, goes-21)

(ROOT
  (S ('' '')
    (S
      (NP (PRP I))
      (VP (VBP am)
        (ADJP (JJ healthy))))
    (, ,)
    (VP (VBP do) (RB n't)
      (VP
        (VP (VB do)
          (S
            (NP (NN anything))
            (ADJP (JJ risky))))
        (CC and)
        (ADVP (RB also))
        (VP (VB gain)
          (NP (NN nothing))
          (PP (IN from)
            (NP (DT this) (NN issue))))))
    (. .)))

nsubj(healthy-4, I-2)
cop(healthy-4, am-3)
ccomp(do-8, healthy-4)
aux(do-8, do-6)
neg(do-8, n't-7)
root(ROOT-0, do-8)
nsubj(risky-10, anything-9)
xcomp(do-8, risky-10)
advmod(do-8, also-12)
conj_and(do-8, also-12)
conj_and(do-8, gain-13)
dobj(gain-13, nothing-14)
det(issue-17, this-16)
prep_from(gain-13, issue-17)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP have)
      (NP
        (NP (NN insurance))
        (PP (IN from)
          (NP
            (NP (DT the) (NN company))
            (SBAR
              (S
                (NP (PRP I))
                (VP (VBD retired)
                  (PP (IN from)))))))))
    (. .)))

nsubj(have-3, I-2)
root(ROOT-0, have-3)
dobj(have-3, insurance-4)
det(company-7, the-6)
prep_from(insurance-4, company-7)
prep_from(retired-9, company-7)
nsubj(retired-9, I-8)
rcmod(company-7, retired-9)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (ADVP (RB personally))
    (VP (VBP do) (RB n't)
      (VP (VB need)
        (NP (NN insurance))
        (, ,)
        (ADVP (IN at) (JJS least) (RB not) (RB yet))))
    (. .)))

nsubj(need-6, I-2)
advmod(need-6, personally-3)
aux(need-6, do-4)
neg(need-6, n't-5)
root(ROOT-0, need-6)
dobj(need-6, insurance-7)
advmod(need-6, at-9)
pobj(at-9, least-10)
dep(at-9, not-11)
advmod(at-9, yet-12)

(ROOT
  (S ('' '')
    (S
      (FRAG (CC But)
        (PP (IN unlike)
          (NP (DT some))))
      (NP (PRP I))
      (VP (VBP have)
        (NP (NN compassion))))
    (IN for)
    (S
      (NP
        (NP (DT the) (JJ many))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBP need)))))
      (VP
        (VP (VBP help))
        (CC and)
        (VP (VBP are)
          (ADJP (JJ unable)
            (S
              (VP (TO to)
                (VP (VB get)
                  (NP (PRP it)))))))))
    (. .)))

dep(have-6, But-2)
dep(But-2, unlike-3)
pobj(unlike-3, some-4)
nsubj(have-6, I-5)
root(ROOT-0, have-6)
dobj(have-6, compassion-7)
dep(have-6, for-8)
det(many-10, the-9)
nsubj(need-12, many-10)
nsubj(help-13, many-10)
nsubj(unable-16, many-10)
rcmod(many-10, need-12)
ccomp(have-6, help-13)
cop(unable-16, are-15)
ccomp(have-6, unable-16)
conj_and(help-13, unable-16)
aux(get-18, to-17)
xcomp(unable-16, get-18)
dobj(get-18, it-19)

(ROOT
  (S
    (NP (NNP ''))
    (VP (VBZ Same)
      (ADVP (RB here)))
    (. .)))

root(ROOT-0, Same-2)
advmod(Same-2, here-3)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB only))
    (VP (VBP disagree)
      (PP (IN with)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (DT this))
            (VP (MD can)
              (VP (VB be)
                (VP
                  (ADVP (RBS best))
                  (VBN achieved))))))))
    (. .)))

nsubj(disagree-3, I-1)
advmod(disagree-3, only-2)
root(ROOT-0, disagree-3)
advmod(achieved-10, how-5)
nsubjpass(achieved-10, this-6)
aux(achieved-10, can-7)
auxpass(achieved-10, be-8)
advmod(achieved-10, best-9)
prepc_with(disagree-3, achieved-10)

