(ROOT
  (NP (NNP '') (: ...)))


(ROOT
  (INTJ (UH .)))


(ROOT
  (FRAG
    (NP (NNS thanks))
    (, ,)
    (CC but)
    (SBAR
      (WHNP (WDT that))
      (S
        (VP (VBZ 's) (RB not)
          (NP (NN communism)))))
    (. .)))

root(ROOT-0, thanks-1)
dep(thanks-1, but-3)
nsubj(communism-7, that-4)
cop(communism-7, 's-5)
neg(communism-7, not-6)
dep(thanks-1, communism-7)

(ROOT
  (FRAG
    (NP (NNP ''))
    (WHADJP (WRB How)
      (ADJP (RB so) (JJ ???)))))

advmod(???-4, How-2)
advmod(???-4, so-3)
dep(''-1, ???-4)

(ROOT
  (S (`` ``)
    (CC Or)
    (, ,)
    (PP (RB maybe)
      (NP (PRP you)))
    (VP (VBP have) (RB n't)
      (VP (VBN noticed)
        (SBAR (IN that)
          (S
            (NP (NN production))
            (VP
              (VP (VBZ has)
                (ADVP (DT all)
                  (CC but))
                (VP (VBN ceased)
                  (ADVP (RB here))))
              (CC and)
              (VP (VBZ has)
                (VP (VBN been)
                  (VP (VBN moved)
                    (PP (TO to)
                      (NP
                        (NP (NNS places))
                        (SBAR
                          (WHADVP (WRB where))
                          (S
                            (NP (NN profit))
                            (VP (VBZ is)
                              (VP (VBN maximized)
                                (PP (CC but)
                                  (PP (IN at)
                                    (NP (DT a) (JJ human) (NN cost))))))))))))))))))
    (. ?)))

cc(noticed-8, Or-2)
prep(noticed-8, maybe-4)
pobj(maybe-4, you-5)
aux(noticed-8, have-6)
neg(noticed-8, n't-7)
root(ROOT-0, noticed-8)
complm(ceased-14, that-9)
nsubj(ceased-14, production-10)
nsubjpass(moved-19, production-10)
aux(ceased-14, has-11)
dep(but-13, all-12)
advmod(ceased-14, but-13)
ccomp(noticed-8, ceased-14)
advmod(ceased-14, here-15)
aux(moved-19, has-17)
auxpass(moved-19, been-18)
ccomp(noticed-8, moved-19)
conj_and(ceased-14, moved-19)
prep_to(moved-19, places-21)
advmod(maximized-25, where-22)
nsubjpass(maximized-25, profit-23)
auxpass(maximized-25, is-24)
rcmod(places-21, maximized-25)
cc(maximized-25, but-26)
det(cost-30, a-28)
amod(cost-30, human-29)
prep_at(maximized-25, cost-30)

(ROOT
  (S (`` ``)
    (INTJ (UH Ah) (UH yes))
    (, ,)
    (NP (DT that) (NN human))
    (VP (VBD cost))
    (. .)))

dep(cost-7, Ah-2)
dep(Ah-2, yes-3)
det(human-6, that-5)
nsubj(cost-7, human-6)
root(ROOT-0, cost-7)

(ROOT
  (NP
    (NP (DT That) (JJ horrible) (NN cost))
    (PP (IN of)
      (S
        (VP (VBG giving)
          (NP (NNS people))
          (NP (DT an) (NN incentive)
            (S
              (VP (TO to)
                (VP (VB produce)
                  (NP
                    (ADJP
                      (ADJP (RBR more) (JJ leading)
                        (PP (TO to)
                          (NP (JJR more) (NN compensation))))
                      (CC and)
                      (ADJP (RB soon) (JJR more)))
                    (NN innovation)))))))))
    (. .)))

det(cost-3, That-1)
amod(cost-3, horrible-2)
root(ROOT-0, cost-3)
prepc_of(cost-3, giving-5)
iobj(giving-5, people-6)
det(incentive-8, an-7)
dobj(giving-5, incentive-8)
aux(produce-10, to-9)
infmod(incentive-8, produce-10)
advmod(leading-12, more-11)
amod(innovation-19, leading-12)
amod(compensation-15, more-14)
prep_to(leading-12, compensation-15)
advmod(more-18, soon-17)
conj_and(leading-12, more-18)
amod(innovation-19, more-18)
dobj(produce-10, innovation-19)

(ROOT
  (S ('' '')
    (S
      (FRAG
        (ADVP (RB Now))
        (: ...))
      (NP (PRP it))
      (VP (VBZ 's)
        (NP (DT a) (JJ common) (NN idea))))
    (IN that)
    (S
      (NP (EX there))
      (VP (VBZ 's)
        (NP
          (NP (DT no) (JJ such) (NN thing))
          (PP (IN as)
            (NP (NN altruism))))))
    (. .)))

dep(idea-8, Now-2)
nsubj(idea-8, it-4)
cop(idea-8, 's-5)
det(idea-8, a-6)
amod(idea-8, common-7)
root(ROOT-0, idea-8)
dep(idea-8, that-9)
expl('s-11, there-10)
ccomp(idea-8, 's-11)
det(thing-14, no-12)
amod(thing-14, such-13)
nsubj('s-11, thing-14)
prep_as(thing-14, altruism-16)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (NP (DT an) (NN argument)))
    (. .)))

nsubj(argument-4, It-1)
cop(argument-4, 's-2)
det(argument-4, an-3)
root(ROOT-0, argument-4)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (NP (DT all)))
    (: ...)))

nsubj(all-3, That-1)
cop(all-3, 's-2)
root(ROOT-0, all-3)

(ROOT
  (S (CC and)
    (NP (PRP it))
    (VP (VBZ 's)
      (NP
        (NP
          (NP (DT a)
            (ADJP (RB very) (JJ easy))
            (NN argument))
          (SBAR
            (S
              (VP (TO to)
                (VP (VB make))))))
        (CC and)
        (NP (DT a) (JJ hard) (NN one)
          (S
            (VP (TO to)
              (VP (VB argue)
                (PP (IN against))))))))
    (. .)))

nsubj(argument-7, it-2)
cop(argument-7, 's-3)
det(argument-7, a-4)
advmod(easy-6, very-5)
amod(argument-7, easy-6)
root(ROOT-0, argument-7)
aux(make-9, to-8)
infmod(argument-7, make-9)
det(one-13, a-11)
amod(one-13, hard-12)
conj_and(argument-7, one-13)
aux(argue-15, to-14)
infmod(one-13, argue-15)
prep(argue-15, against-16)

(ROOT
  (S ('' '')
    (S
      (NP (PRP It))
      (VP (VBZ 's)
        (ADJP (JJ easy)
          (S
            (VP (TO to)
              (VP (VB argue)
                (PP (IN against))))))))
    (, ,)
    (CC but)
    (S
      (NP
        (NP (JJ convincing) (NN someone))
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBZ is)
              (ADJP (VBN convinced)
                (SBAR
                  (S
                    (NP (DT no) (JJ such) (NN thing))
                    (VP (VBZ exists)))))))))
      (VP (VBZ is)
        (ADVP (RB indeed))
        (NP
          (NP (DT a) (NN challenge))
          (PRN (-LRB- -LRB-)
            (NP (NNP QED))
            (-RRB- -RRB-)))))
    (. .)))

nsubj(easy-4, It-2)
cop(easy-4, 's-3)
root(ROOT-0, easy-4)
aux(argue-6, to-5)
xcomp(easy-4, argue-6)
prep(argue-6, against-7)
amod(someone-11, convincing-10)
nsubjpass(convinced-14, someone-11)
nsubj(challenge-22, someone-11)
auxpass(convinced-14, is-13)
rcmod(someone-11, convinced-14)
det(thing-17, no-15)
amod(thing-17, such-16)
nsubj(exists-18, thing-17)
dep(convinced-14, exists-18)
cop(challenge-22, is-19)
advmod(challenge-22, indeed-20)
det(challenge-22, a-21)
conj_but(easy-4, challenge-22)
abbrev(challenge-22, QED-24)

(ROOT
  (VP (VB '')
    (FRAG (CC But)
      (WP what) (IN about)
      (NP (NNP Mother) (NNP Theresa))
      (. ?))))

dep(about-4, But-2)
dep(about-4, what-3)
root(ROOT-0, about-4)
nn(Theresa-6, Mother-5)
dep(about-4, Theresa-6)

(ROOT
  (NP (: ...)
    (NP (IN but)
      (NP (WP what)))
    (PP (IN about)
      (NP (DT some) (JJ regular) (NN person)))
    (. ?)))

amod(what-3, but-2)
root(ROOT-0, what-3)
det(person-7, some-5)
amod(person-7, regular-6)
prep_about(what-3, person-7)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (NP (DT a) (NN distortion)))
    (. .)))

nsubj(distortion-4, It-1)
cop(distortion-4, 's-2)
det(distortion-4, a-3)
root(ROOT-0, distortion-4)

(ROOT
  (NP (JJ Greater) (NN reward) (: ...)))

amod(reward-2, Greater-1)
root(ROOT-0, reward-2)

(ROOT
  (S
    (NP (DT that))
    (VP (VBZ 's)
      (FRAG
        (WHADVP (WRB why))))
    (. .)))

nsubj('s-2, that-1)
root(ROOT-0, 's-2)
dep('s-2, why-3)

(ROOT
  (S ('' '')
    (PP (RB So)
      (PP
        (NP
          (NP (DT the) (NNS people))
          (SBAR
            (WHNP (WP who))
            (S
              (VP (VBP risk)
                (NP (NN death))))))
        (IN for)
        (NP (DT no) (NN compensation))))
    (VP (VBP are)
      (VP (VBG doing)
        (NP (PRP it))
        (PP (IN for)
          (NP (DT some) (JJ random) (NN award)))))
    (. ?)))

advmod(doing-12, So-2)
det(people-4, the-3)
nsubj(risk-6, people-4)
npadvmod(doing-12, people-4)
rcmod(people-4, risk-6)
dobj(risk-6, death-7)
det(compensation-10, no-9)
prep_for(doing-12, compensation-10)
aux(doing-12, are-11)
root(ROOT-0, doing-12)
dobj(doing-12, it-13)
det(award-17, some-15)
amod(award-17, random-16)
prep_for(doing-12, award-17)

(ROOT
  (NP (CD Why) (RB so) (. ?)))

root(ROOT-0, Why-1)
advmod(Why-1, so-2)

(ROOT
  (S (`` ``)
    (NP (NNP Mother) (NNP Theresa))
    (VP (VBD did)
      (NP
        (NP (PDT all) (DT those) (NNS things))
        (PP (RB because) (IN of)
          (NP
            (NP (DT the) (JJ ultimate))
            (, ,)
            (CC and)
            (RB purely)
            (NP (JJ selfish) (NN act))))
        (PP (IN of)
          (S
            (VP (VBG getting)
              (PP (IN into)
                (NP (NN heaven))))))))
    (. .)))

nn(Theresa-3, Mother-2)
nsubj(did-4, Theresa-3)
root(ROOT-0, did-4)
predet(things-7, all-5)
det(things-7, those-6)
dobj(did-4, things-7)
det(ultimate-11, the-10)
prep_because_of(things-7, ultimate-11)
prep_because_of(things-7, purely-14)
advmod(ultimate-11, purely-14)
conj_and(ultimate-11, purely-14)
amod(act-16, selfish-15)
dep(ultimate-11, act-16)
prepc_of(things-7, getting-18)
prep_into(getting-18, heaven-20)

(ROOT
  (S ('' '')
    (NP (NNP Why))
    (VP (VBP go)
      (PP (IN through)
        (NP (PDT all) (DT the) (NN trouble)))
      (SBAR (IN that)
        (S
          (NP (PRP she))
          (VP (VBD went)
            (PRT (RP through))
            (SBAR (IN if)
              (S
                (NP (PRP she))
                (VP (MD could)
                  (VP (VB have)
                    (VP
                      (ADVP (RB just))
                      (ADVP (RB as) (RB easily))
                      (VBN achieved)
                      (NP (DT the) (JJ same) (NN means))
                      (PP (IN without)
                        (NP
                          (NP (DT the) (NN hassle))
                          (PP (IN of)
                            (S
                              (VP (VBG helping)
                                (NP (JJ complete) (NNS strangers))))))))))))))))
    (. ?)))

nsubj(go-3, Why-2)
root(ROOT-0, go-3)
predet(trouble-7, all-5)
det(trouble-7, the-6)
prep_through(go-3, trouble-7)
complm(went-10, that-8)
nsubj(went-10, she-9)
ccomp(go-3, went-10)
prt(went-10, through-11)
mark(achieved-19, if-12)
nsubj(achieved-19, she-13)
aux(achieved-19, could-14)
aux(achieved-19, have-15)
advmod(achieved-19, just-16)
advmod(easily-18, as-17)
advmod(achieved-19, easily-18)
advcl(went-10, achieved-19)
det(means-22, the-20)
amod(means-22, same-21)
dobj(achieved-19, means-22)
det(hassle-25, the-24)
prep_without(achieved-19, hassle-25)
prepc_of(hassle-25, helping-27)
amod(strangers-29, complete-28)
dobj(helping-27, strangers-29)

(ROOT
  (S (`` ``)
    (NP (PRP It))
    (VP (VBZ does) (RB n't)
      (VP (VB mean)
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP do) (RB n't)
              (VP (VB appreciate)
                (NP (JJ human) (NN life))))))))
    (: ...)))

nsubj(mean-5, It-2)
aux(mean-5, does-3)
neg(mean-5, n't-4)
root(ROOT-0, mean-5)
nsubj(appreciate-9, you-6)
aux(appreciate-9, do-7)
neg(appreciate-9, n't-8)
ccomp(mean-5, appreciate-9)
amod(life-11, human-10)
dobj(appreciate-9, life-11)

(ROOT
  (S (CC but)
    (S
      (VP (VBG acting)
        (PP (IN in)
          (NP (NN self-interest)))))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN reason))
        (PP (IN behind)
          (NP (JJS most) (NNS actions)))))
    (. .)))

cc(reason-7, but-1)
csubj(reason-7, acting-2)
prep_in(acting-2, self-interest-4)
cop(reason-7, is-5)
det(reason-7, the-6)
root(ROOT-0, reason-7)
amod(actions-10, most-9)
prep_behind(reason-7, actions-10)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (MD can)
      (VP (VB agree)
        (PP (IN with)
          (NP (DT this) (NN statement)))
        (PP (TO to)
          (NP (DT an) (NN extent)))))
    (. .)))

nsubj(agree-4, I-2)
aux(agree-4, can-3)
root(ROOT-0, agree-4)
det(statement-7, this-6)
prep_with(agree-4, statement-7)
det(extent-10, an-9)
prep_to(agree-4, extent-10)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB How))
      (S
        (NP (DT a) (JJ non-capitalist) (NN society))
        (VP (MD can)
          (VP (`` ``) (VB solve) ('' '')
            (NP (DT this) (`` ``) (NN problem) ('' ''))))))
    (VP (VBZ is)
      (PP (IN beyond)
        (NP (PRP me))))
    (. .) ('' '')))

advmod(solve-7, How-1)
det(society-4, a-2)
amod(society-4, non-capitalist-3)
nsubj(solve-7, society-4)
aux(solve-7, can-5)
csubj(is-13, solve-7)
det(problem-11, this-9)
dobj(solve-7, problem-11)
root(ROOT-0, is-13)
prep_beyond(is-13, me-15)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBD made)
        (SBAR
          (S
            (NP (PRP$ my) (JJ new) (NNS neighbors) (NN vegan))
            (VP (VBZ brownies)
              (SBAR (IN because)
                (S
                  (NP (PRP I))
                  (VP (VBP want)
                    (S
                      (NP (PRP them))
                      (VP (TO to)
                        (VP (VB like)
                          (NP (PRP me)))))))))))))
    (: ...)
    (S
      (ADVP (DT that) (NN way))
      (NP (PRP they))
      (VP (MD 'll)
        (VP (VB call)
          (NP (CD 911))
          (SBAR (IN if)
            (S
              (NP (PRP$ my) (NN house))
              (VP (VBZ is)
                (PP (IN on)
                  (NP (NN fire)))))))))
    (. .)))

nsubj(made-2, I-1)
root(ROOT-0, made-2)
poss(vegan-6, my-3)
amod(vegan-6, new-4)
nn(vegan-6, neighbors-5)
nsubj(brownies-7, vegan-6)
ccomp(made-2, brownies-7)
mark(want-10, because-8)
nsubj(want-10, I-9)
advcl(brownies-7, want-10)
nsubj(like-13, them-11)
aux(like-13, to-12)
xcomp(want-10, like-13)
dobj(like-13, me-14)
dep(way-17, that-16)
advmod(call-20, way-17)
nsubj(call-20, they-18)
aux(call-20, 'll-19)
parataxis(made-2, call-20)
dobj(call-20, 911-21)
mark(is-25, if-22)
poss(house-24, my-23)
nsubj(is-25, house-24)
advcl(call-20, is-25)
prep_on(is-25, fire-27)

(ROOT
  (S ('' '')
    (S
      (NP (PRP It))
      (VP (VBZ 's)
        (ADJP (JJ okay))))
    (, ,)
    (NP (JJ other) (NNS people))
    (VP (VBP have)
      (VP (VBN tried)
        (S
          (VP (TO to)
            (VP (VB insist)
              (NP (DT the) (JJ same) (NN thing)))))))
    (. .)))

nsubj(okay-4, It-2)
cop(okay-4, 's-3)
ccomp(tried-9, okay-4)
amod(people-7, other-6)
nsubj(tried-9, people-7)
xsubj(insist-11, people-7)
aux(tried-9, have-8)
root(ROOT-0, tried-9)
aux(insist-11, to-10)
xcomp(tried-9, insist-11)
det(thing-14, the-12)
amod(thing-14, same-13)
dobj(insist-11, thing-14)

(ROOT
  (S ('' '')
    (NP (NNP Do) (PRP you))
    (VP (VBP know)
      (PP (IN FOR)
        (NP (NNP SURE)))
      (SBAR (IN that)
        (S
          (NP (PRP they))
          (VP (MD will)
            (VP (VB call)
              (NP (CD 911))
              (SBAR (IN if)
                (S
                  (NP (PRP$ your) (NN house))
                  (VP (VBZ catches)
                    (NP (NN fire))))))))))
    (. ?)))

nsubj(know-4, Do-2)
dep(Do-2, you-3)
root(ROOT-0, know-4)
prep_for(know-4, SURE-6)
complm(call-10, that-7)
nsubj(call-10, they-8)
aux(call-10, will-9)
ccomp(know-4, call-10)
dobj(call-10, 911-11)
mark(catches-15, if-12)
poss(house-14, your-13)
nsubj(catches-15, house-14)
advcl(call-10, catches-15)
dobj(catches-15, fire-16)

(ROOT
  (S (`` ``)
    (NP (NNP Purely))
    (VP (VBZ selfish))
    (: ...)))

nsubj(selfish-3, Purely-2)
root(ROOT-0, selfish-3)

(ROOT
  (S (CC but)
    (S
      (NP (PRP I))
      (VP (VBP do)
        (SBAR
          (S
            (VP (VBP think)
              (SBAR
                (S
                  (NP (PRP they))
                  (VP (VBP 're)
                    (NP (JJ nice) (NNS people))))))))))
    (CC and)
    (S
      (NP (PRP I))
      (VP (VBP hope)
        (SBAR
          (S
            (NP (PRP they))
            (VP (VBP enjoy)
              (NP
                (NP (DT the) (NNS brownies))
                (PRN (-LRB- -LRB-)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBD were) (RB Not)
                        (ADJP (JJ goopy))
                        (, ,)
                        (ADJP (JJ amazingly)))))
                  (-RRB- -RRB-))))))))
    (. .)))

nsubj(do-3, I-2)
root(ROOT-0, do-3)
ccomp(do-3, think-4)
nsubj(people-8, they-5)
cop(people-8, 're-6)
amod(people-8, nice-7)
ccomp(think-4, people-8)
nsubj(hope-11, I-10)
conj_and(do-3, hope-11)
nsubj(enjoy-13, they-12)
ccomp(hope-11, enjoy-13)
det(brownies-15, the-14)
dobj(enjoy-13, brownies-15)
nsubj(goopy-20, which-17)
cop(goopy-20, were-18)
neg(goopy-20, Not-19)
dep(brownies-15, goopy-20)
acomp(goopy-20, amazingly-22)

(ROOT
  (S ('' '')
    (NP (DT That))
    (VP (VBZ 's)
      (NP
        (NP (NN nothing))
        (PP (VBN compared)
          (PP (TO to)
            (S
              (VP (VBG baking)
                (NP
                  (NP (DT a) (NN chicken))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ is) (RB n't)
                        (ADJP (JJ dry))))))))))
        (PRN (-LRB- -LRB-)
          (PP
            (ADVP (IN at) (JJS least))
            (IN for)
            (NP
              (NP (PRP me))
              (SBAR
                (S
                  (NP (PRP it))
                  (VP (VBZ is))))))
          (-RRB- -RRB-))))
    (. .)))

nsubj(nothing-4, That-2)
cop(nothing-4, 's-3)
root(ROOT-0, nothing-4)
prepc_compared_to(nothing-4, to-6)
pcomp(nothing-4, baking-7)
det(chicken-9, a-8)
dobj(baking-7, chicken-9)
nsubj(dry-13, chicken-9)
cop(dry-13, is-11)
neg(dry-13, n't-12)
rcmod(chicken-9, dry-13)
advmod(for-17, at-15)
pobj(at-15, least-16)
dep(nothing-4, for-17)
pobj(for-17, me-18)
nsubj(is-20, it-19)
rcmod(me-18, is-20)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP I))
        (VP (VBD supported)
          (NP
            (NP (DT a) (NN type))
            (PP (IN of)
              (NP (NN society)))
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (VBD killed)
                  (NP (NNS millions)))))))))
    (NP (PRP I))
    (VP (MD would)
      (ADVP (RB probably))
      (VP (VB say)
        (NP (DT the) (JJ same) (NN thing))))
    (. .)))

mark(supported-3, If-1)
nsubj(supported-3, I-2)
advcl(say-14, supported-3)
det(type-5, a-4)
dobj(supported-3, type-5)
nsubj(killed-9, type-5)
prep_of(type-5, society-7)
rcmod(type-5, killed-9)
dobj(killed-9, millions-10)
nsubj(say-14, I-11)
aux(say-14, would-12)
advmod(say-14, probably-13)
root(ROOT-0, say-14)
det(thing-17, the-15)
amod(thing-17, same-16)
dobj(say-14, thing-17)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ main) (NN advantage))
      (SBAR
        (S
          (NP
            (NP (DT the) (NNS authors))
            (PP (IN of)
              (NP (DT this) (NN book))))
          (VP (VBD had)
            (PP (IN over)
              (NP (NNS others)))))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP they))
          (VP (VBD had)
            (NP
              (NP (JJ full) (NN access))
              (PP (TO to)
                (NP (NNP KGB) (NNS archives))))
            (, ,)
            (PP (IN among)
              (NP (JJ other) (NNS things)))))))
    (. .)))

det(advantage-3, The-1)
amod(advantage-3, main-2)
dobj(had-9, advantage-3)
nsubj(is-12, advantage-3)
det(authors-5, the-4)
nsubj(had-9, authors-5)
det(book-8, this-7)
prep_of(authors-5, book-8)
rcmod(advantage-3, had-9)
prep_over(had-9, others-11)
root(ROOT-0, is-12)
complm(had-15, that-13)
nsubj(had-15, they-14)
ccomp(is-12, had-15)
amod(access-17, full-16)
dobj(had-15, access-17)
nn(archives-20, KGB-19)
prep_to(access-17, archives-20)
amod(things-24, other-23)
prep_among(had-15, things-24)

(ROOT
  (S ('' '')
    (S
      (FRAG
        (WHADVP (WRB How))
        (ADJP (JJ many)))
      (NP (NNS people))
      (VP (VBD died)))
    (IN under)
    (S
      (NP (DT the))
      (VP (VBN distortion)
        (PP (IN of)
          (NP (NN capitalism)))))
    (. ?)))

dep(many-3, How-2)
dep(died-5, many-3)
nsubj(died-5, people-4)
root(ROOT-0, died-5)
dep(died-5, under-6)
nsubj(distortion-8, the-7)
dep(died-5, distortion-8)
prep_of(distortion-8, capitalism-10)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB know))))
    (: ...)
    (FRAG (CC but)
      (NP (RB quite) (DT a) (NN lot)))
    (. .)))

nsubj(know-4, I-1)
aux(know-4, do-2)
neg(know-4, n't-3)
root(ROOT-0, know-4)
dep(lot-9, but-6)
advmod(lot-9, quite-7)
det(lot-9, a-8)
dep(know-4, lot-9)

(ROOT
  (S ('' '')
    (NP (NNP Probably))
    (VP (VBD had)
      (S
        (NP (NN nothing))
        (VP (TO to)
          (VP (VB do)
            (PP (IN with)
              (NP (NN capitalism))))))
      (SBAR (IN though) (, ,)
        (S
          (NP (PRP I))
          (VP (VBP 'm)
            (ADJP (RB pretty) (JJ sure)
              (PP (IN of)
                (NP (DT that))))))))
    (. .)))

nsubj(had-3, Probably-2)
root(ROOT-0, had-3)
nsubj(do-6, nothing-4)
aux(do-6, to-5)
ccomp(had-3, do-6)
xcomp(had-3, do-6)
prep_with(do-6, capitalism-8)
mark(sure-14, though-9)
nsubj(sure-14, I-11)
cop(sure-14, 'm-12)
advmod(sure-14, pretty-13)
advcl(had-3, sure-14)
prep_of(sure-14, that-16)

(ROOT
  (S ('' '')
    (NP (NNS People))
    (ADVP (RB still))
    (VP (VBP do)
      (SBAR (IN because)
        (S
          (NP (`` ``) (NN capitalism) ('' ''))
          (VP (VBZ supports)
            (NP (`` ``) (NN communism) ('' ''))))))
    (. .)))

nsubj(do-4, People-2)
advmod(do-4, still-3)
root(ROOT-0, do-4)
mark(supports-9, because-5)
nsubj(supports-9, capitalism-7)
advcl(do-4, supports-9)
dobj(supports-9, communism-11)

