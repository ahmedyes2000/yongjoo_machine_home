(ROOT
  (S
    (S
      (VP (VBP Do) (RB n't)
        (VP (VB worry))))
    (, ,)
    (NP (PRP I))
    (VP (VBP 'm)
      (ADJP (JJ sure)
        (SBAR
          (S
            (NP (EX there))
            (VP (VBP are)
              (NP
                (NP (JJ many) (NNS visions))
                (PP (IN for)
                  (NP
                    (NP (JJ universal) (NN health) (NN care))
                    (PP (IN in)
                      (NP (DT this) (NN country)))))))))))
    (. .)))

aux(worry-3, Do-1)
neg(worry-3, n't-2)
ccomp(sure-7, worry-3)
nsubj(sure-7, I-5)
cop(sure-7, 'm-6)
root(ROOT-0, sure-7)
expl(are-9, there-8)
dep(sure-7, are-9)
amod(visions-11, many-10)
nsubj(are-9, visions-11)
amod(care-15, universal-13)
nn(care-15, health-14)
prep_for(visions-11, care-15)
det(country-18, this-17)
prep_in(care-15, country-18)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ seems)
      (PP (TO to)
        (NP (PRP me)))
      (SBAR (IN that)
        (S
          (SBAR
            (WHNP (WP what))
            (S
              (NP (JJS most) (NNS supporters))
              (VP (VBP want))))
          (VP (VBZ is)
            (NP
              (NP (DT an) (NN outcome))
              (SBAR
                (WHADVP (WRB where))
                (S
                  (NP (NN everybody))
                  (VP (MD can)
                    (VP (VB get)
                      (CC and)
                      (VB afford)
                      (NP (NN health) (NN care)))))))))))
    (. .)))

nsubj(seems-2, It-1)
root(ROOT-0, seems-2)
prep_to(seems-2, me-4)
complm(outcome-12, that-5)
dobj(want-9, what-6)
amod(supporters-8, most-7)
nsubj(want-9, supporters-8)
csubj(outcome-12, want-9)
cop(outcome-12, is-10)
det(outcome-12, an-11)
ccomp(seems-2, outcome-12)
advmod(get-16, where-13)
nsubj(get-16, everybody-14)
nsubj(afford-18, everybody-14)
aux(get-16, can-15)
rcmod(outcome-12, get-16)
rcmod(outcome-12, afford-18)
conj_and(get-16, afford-18)
nn(care-20, health-19)
dobj(get-16, care-20)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (ADJP (JJ sure)
        (SBAR
          (S
            (NP (DT all) (NNS employers))
            (VP (MD would)
              (VP (VB love)
                (S
                  (VP (TO to)
                    (VP (VB get)
                      (S
                        (NP (DT the) (NN health) (NN care))
                        (VP (VB benefit)
                          (PRT (RP off))
                          (NP (PRP$ their) (NNS books)))))))))))))
    (. .)))

nsubj(sure-3, I-1)
cop(sure-3, 'm-2)
root(ROOT-0, sure-3)
det(employers-5, all-4)
nsubj(love-7, employers-5)
xsubj(get-9, employers-5)
aux(love-7, would-6)
dep(sure-3, love-7)
aux(get-9, to-8)
xcomp(love-7, get-9)
det(care-12, the-10)
nn(care-12, health-11)
nsubj(benefit-13, care-12)
ccomp(get-9, benefit-13)
prt(benefit-13, off-14)
poss(books-16, their-15)
dobj(benefit-13, books-16)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD could)
      (ADVP (RB still))
      (VP (VB offer)
        (NP (NN sweeter) (NNS deals))
        (PP (IN as)
          (NP (NN recruitment) (NNS tools)))))
    (. .)))

nsubj(offer-4, They-1)
aux(offer-4, could-2)
advmod(offer-4, still-3)
root(ROOT-0, offer-4)
nn(deals-6, sweeter-5)
dobj(offer-4, deals-6)
nn(tools-9, recruitment-8)
prep_as(offer-4, tools-9)

(ROOT
  (S (CC But)
    (SBAR (IN once)
      (S
        (NP (DT this))
        (VP (VBZ gets)
          (ADJP (VBN passed)))))
    (, ,)
    (VP (VBP watch)
      (S
        (NP (PRP$ our) (NN economy))
        (VP (VB take)
          (PRT (RP off)))))
    (. .)))

cc(watch-7, But-1)
mark(passed-5, once-2)
nsubjpass(passed-5, this-3)
auxpass(passed-5, gets-4)
dep(watch-7, passed-5)
root(ROOT-0, watch-7)
poss(economy-9, our-8)
nsubj(take-10, economy-9)
ccomp(watch-7, take-10)
prt(take-10, off-11)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ potential) (NN growth))
      (PP (IN in)
        (NP (DT the) (NNP GDP))))
    (VP (MD could)
      (VP (VB absorb)
        (NP
          (NP (DT the) (JJ absurd) (NN debt))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBP are)
                (VP (VBN forced)
                  (PP (IN into)))))))))
    (. .)))

det(growth-3, The-1)
amod(growth-3, potential-2)
nsubj(absorb-8, growth-3)
det(GDP-6, the-5)
prep_in(growth-3, GDP-6)
aux(absorb-8, could-7)
root(ROOT-0, absorb-8)
det(debt-11, the-9)
amod(debt-11, absurd-10)
dobj(absorb-8, debt-11)
prep_into(forced-14, debt-11)
nsubjpass(forced-14, we-12)
auxpass(forced-14, are-13)
rcmod(debt-11, forced-14)

(ROOT
  (FRAG
    (PP (IN As)
      (PP (IN for)
        (NP (DT the) (NN draft))))
    (. .)))

root(ROOT-0, As-1)
pcomp(As-1, for-2)
det(draft-4, the-3)
prep_for(As-1, draft-4)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBD did) (RB n't)
      (VP (VB go)
        (PP (TO to)
          (NP (NNP Canada)))
        (SBAR (IN because)
          (S
            (NP (PRP I))
            (VP
              (VP (VBP like)
                (NP (NNP America)))
              (CC and)
              (VP (VBD had)
                (NP (DT no) (NN reason)
                  (S
                    (VP (TO to)
                      (VP (VB believe)
                        (SBAR (IN that)
                          (S
                            (NP (DT an) (NN amnesty))
                            (VP (MD would)
                              (VP (VB be)
                                (VP (VBN offered)
                                  (ADVP (RB later) (RB on)))))))))))))))))
    (. .)))

nsubj(go-4, I-1)
aux(go-4, did-2)
neg(go-4, n't-3)
root(ROOT-0, go-4)
prep_to(go-4, Canada-6)
mark(like-9, because-7)
nsubj(like-9, I-8)
nsubj(had-12, I-8)
advcl(go-4, like-9)
dobj(like-9, America-10)
advcl(go-4, had-12)
conj_and(like-9, had-12)
det(reason-14, no-13)
dobj(had-12, reason-14)
aux(believe-16, to-15)
infmod(reason-14, believe-16)
complm(offered-22, that-17)
det(amnesty-19, an-18)
nsubjpass(offered-22, amnesty-19)
aux(offered-22, would-20)
auxpass(offered-22, be-21)
ccomp(believe-16, offered-22)
advmod(on-24, later-23)
advmod(offered-22, on-24)

(ROOT
  (S (CC But)
    (ADVP (RB even) (RB so))
    (, ,)
    (PP (IN at)
      (NP (DT the) (NN time)))
    (NP (PRP I))
    (VP (VBD believed)
      (SBAR (IN that)
        (S
          (NP (NNS countries))
          (VP (VBP have)
            (NP (DT the) (NN right)
              (S
                (VP (TO to)
                  (VP (VB conscript)
                    (NP (NNS armies))
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (ADJP (JJ necessary))))))))))))
    (. .)))

cc(believed-9, But-1)
advmod(so-3, even-2)
advmod(believed-9, so-3)
det(time-7, the-6)
prep_at(believed-9, time-7)
nsubj(believed-9, I-8)
root(ROOT-0, believed-9)
complm(have-12, that-10)
nsubj(have-12, countries-11)
ccomp(believed-9, have-12)
det(right-14, the-13)
dobj(have-12, right-14)
aux(conscript-16, to-15)
infmod(right-14, conscript-16)
dobj(conscript-16, armies-17)
advmod(necessary-19, when-18)
advcl(conscript-16, necessary-19)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (ADVP (RB still))
      (VP (VBG thinking)
        (NP (DT a)
          (ADJP (CD 2) (NN year))
          (NN government) (NN service) (NN requirement))
        (SBAR (IN for)
          (S
            (NP (DT all))
            (VP (MD would) (RB n't)
              (VP (VB be)
                (NP (DT a) (JJ bad) (NN thing))))))))
    (. .)))

nsubj(thinking-4, I-1)
aux(thinking-4, 'm-2)
advmod(thinking-4, still-3)
root(ROOT-0, thinking-4)
det(requirement-10, a-5)
number(year-7, 2-6)
amod(requirement-10, year-7)
nn(requirement-10, government-8)
nn(requirement-10, service-9)
dobj(thinking-4, requirement-10)
mark(thing-18, for-11)
nsubj(thing-18, all-12)
aux(thing-18, would-13)
neg(thing-18, n't-14)
cop(thing-18, be-15)
det(thing-18, a-16)
amod(thing-18, bad-17)
advcl(thinking-4, thing-18)

(ROOT
  (S
    (NP (RB Almost) (DT all) (JJ moral) (NNS systems))
    (VP (VBP allow)
      (PP (IN for)
        (NP (NN obligation)))
      (PP (TO to)
        (NP (DT the) (JJR greater) (NN society))))
    (. .)))

advmod(systems-4, Almost-1)
det(systems-4, all-2)
amod(systems-4, moral-3)
nsubj(allow-5, systems-4)
root(ROOT-0, allow-5)
prep_for(allow-5, obligation-7)
det(society-11, the-9)
amod(society-11, greater-10)
prep_to(allow-5, society-11)

(ROOT
  (S (CC But)
    (NP (DT this))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ great) (NN topic))
        (PP (IN for)
          (NP (DT another) (VBN heated) (NN thread)))))
    (. .)))

cc(topic-6, But-1)
nsubj(topic-6, this-2)
cop(topic-6, is-3)
det(topic-6, a-4)
amod(topic-6, great-5)
root(ROOT-0, topic-6)
det(thread-10, another-8)
amod(thread-10, heated-9)
prep_for(topic-6, thread-10)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (MD 'll)
        (VP (VB read)
          (NP (PRP$ your) (NN link))
          (ADVP (RB later)))))
    (, ,)
    (CC but)
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB cast)
          (NP (PRP$ my) (NN argument))
          (PP (IN for)
            (NP (NNP UHC)))
          (PP
            (PP (IN on)
              (NP (JJ moral) (NNS grounds)))
            (, ,) (RB rather)
            (PP (IN on)
              (NP
                (NP
                  (ADJP (JJ practical)
                    (CC and)
                    (JJ economic))
                  (NNS benefits))
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (NP (PRP I))
                    (VP (VBP believe)
                      (SBAR
                        (S
                          (NP (DT all))
                          (VP (MD will)
                            (VP (VB enjoy)
                              (SBAR (IN once)
                                (S
                                  (NP (DT this) (NN paradigm))
                                  (VP (VBZ gets)
                                    (VP (VBN shifted))))))))))))))))))
    (. .)))

nsubj(read-3, I-1)
aux(read-3, 'll-2)
root(ROOT-0, read-3)
poss(link-5, your-4)
dobj(read-3, link-5)
advmod(read-3, later-6)
nsubj(cast-12, I-9)
aux(cast-12, do-10)
neg(cast-12, n't-11)
conj_but(read-3, cast-12)
poss(argument-14, my-13)
dobj(cast-12, argument-14)
prep_for(cast-12, UHC-16)
amod(grounds-19, moral-18)
prep_on(cast-12, grounds-19)
advmod(cast-12, rather-21)
amod(benefits-26, practical-23)
conj_and(practical-23, economic-25)
amod(benefits-26, economic-25)
prep_on(cast-12, benefits-26)
dobj(enjoy-32, benefits-26)
rel(believe-29, which-27)
nsubj(believe-29, I-28)
rcmod(benefits-26, believe-29)
nsubj(enjoy-32, all-30)
aux(enjoy-32, will-31)
ccomp(believe-29, enjoy-32)
mark(shifted-37, once-33)
det(paradigm-35, this-34)
nsubjpass(shifted-37, paradigm-35)
auxpass(shifted-37, gets-36)
advcl(enjoy-32, shifted-37)

(ROOT
  (S
    (PP (IN In)
      (NP (PRP$ my) (NN case)))
    (NP (PRP I))
    (VP (VBP have)
      (VP (VBN had)
        (NP
          (NP (NN heart)
            (CC and)
            (NN vascular) (NN surgery))
          (PRN (-LRB- -LRB-)
            (PP (IN among)
              (NP (NNS others)))
            (-RRB- -RRB-))
          (SBAR
            (WHNP (WDT which))
            (S
              (VP (VBP make)
                (S
                  (NP (PRP me))
                  (ADJP (JJ uninsurable)))))))))
    (. .)))

poss(case-3, my-2)
prep_in(had-6, case-3)
nsubj(had-6, I-4)
aux(had-6, have-5)
root(ROOT-0, had-6)
nn(surgery-10, heart-7)
conj_and(heart-7, vascular-9)
nn(surgery-10, vascular-9)
dobj(had-6, surgery-10)
nsubj(make-16, surgery-10)
dep(surgery-10, among-12)
pobj(among-12, others-13)
rcmod(surgery-10, make-16)
nsubj(uninsurable-18, me-17)
xcomp(make-16, uninsurable-18)

(ROOT
  (S
    (NP
      (NP (PRP I))
      (PP (IN for)
        (NP (CD one))))
    (VP (VBP support)
      (NP
        (NP (DT a) (NN voucher) (NN system))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (MD would)
              (VP (VB allow)
                (NP (NN everyone))
                (S
                  (VP (TO to)
                    (VP (VB choose)
                      (NP (PRP$ their) (NN provider)))))))))))
    (. .)))

nsubj(support-4, I-1)
prep_for(I-1, one-3)
root(ROOT-0, support-4)
det(system-7, a-5)
nn(system-7, voucher-6)
dobj(support-4, system-7)
nsubj(allow-10, system-7)
aux(allow-10, would-9)
rcmod(system-7, allow-10)
dobj(allow-10, everyone-11)
aux(choose-13, to-12)
xcomp(allow-10, choose-13)
poss(provider-15, their-14)
dobj(choose-13, provider-15)

(ROOT
  (S
    (S
      (NP (DT The) (NN government))
      (VP (MD would)
        (VP (VB have)
          (S
            (VP (TO to)
              (VP (VB open)
                (NP (PRP$ their) (NN employee) (NN health) (NN system))
                (PP (IN at)
                  (NP (DT the) (NN voucher) (NN price)))
                (PRN (-LRB- -LRB-)
                  (ADVP (RB ie))
                  (ADJP (JJ free)
                    (PP (TO to)
                      (NP (DT all))))
                  (-RRB- -RRB-))))))))
    (, ,)
    (CC but)
    (S
      (NP (JJ private) (NNS insurers))
      (VP (MD could)
        (VP (VB compete)
          (ADVP (RB freely))
          (PP (IN for)
            (NP (DT the) (NN voucher) (NN payment)))
          (PP (IN by)
            (S
              (VP (VBG offering)
                (NP (JJR better) (NNS products))))))))
    (. .)))

det(government-2, The-1)
nsubj(have-4, government-2)
xsubj(open-6, government-2)
aux(have-4, would-3)
root(ROOT-0, have-4)
aux(open-6, to-5)
xcomp(have-4, open-6)
poss(system-10, their-7)
nn(system-10, employee-8)
nn(system-10, health-9)
dobj(open-6, system-10)
det(price-14, the-12)
nn(price-14, voucher-13)
prep_at(open-6, price-14)
dep(free-17, ie-16)
dep(open-6, free-17)
prep_to(free-17, all-19)
amod(insurers-24, private-23)
nsubj(compete-26, insurers-24)
aux(compete-26, could-25)
conj_but(have-4, compete-26)
advmod(compete-26, freely-27)
det(payment-31, the-29)
nn(payment-31, voucher-30)
prep_for(compete-26, payment-31)
prepc_by(compete-26, offering-33)
amod(products-35, better-34)
dobj(offering-33, products-35)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBD did) (RB n't)
      (VP (VB know)
        (SBAR
          (S
            (NP (PRP you))
            (VP (MD could) (RB n't)
              (VP (VB purchase)
                (NP (NN health) (NN insurance))
                (PP (IN across)
                  (NP (NN state) (NNS lines)))))))))
    (. .)))

nsubj(know-4, I-1)
aux(know-4, did-2)
neg(know-4, n't-3)
root(ROOT-0, know-4)
nsubj(purchase-8, you-5)
aux(purchase-8, could-6)
neg(purchase-8, n't-7)
ccomp(know-4, purchase-8)
nn(insurance-10, health-9)
dobj(purchase-8, insurance-10)
nn(lines-13, state-12)
prep_across(purchase-8, lines-13)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (NP
        (NP
          (NP (JJ many) (JJ valid) (NN point))
          (NP (DT the) (`` ``)
            (INTJ (UH no))
            ('' '') (NN side)))
        (SBAR
          (S
            (VP (VBP bring)
              (PRT (RP up)))))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
amod(point-5, many-3)
amod(point-5, valid-4)
nsubj(are-2, point-5)
det(side-10, the-6)
dep(side-10, no-8)
dep(point-5, side-10)
rcmod(point-5, bring-11)
prt(bring-11, up-12)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD would)
      (VP (VB accept)
        (NP (NN tort) (NN reform))
        (PP (IN as)
          (NP
            (NP (NN part))
            (PP (IN of)
              (NP (DT the) (NN solution)))))))
    (. .)))

nsubj(accept-3, I-1)
aux(accept-3, would-2)
root(ROOT-0, accept-3)
nn(reform-5, tort-4)
dobj(accept-3, reform-5)
prep_as(accept-3, part-7)
det(solution-10, the-9)
prep_of(part-7, solution-10)

(ROOT
  (S
    (NP
      (NP
        (NP (DT The) (NN strength))
        (PP (IN of)
          (NP (PRP$ our) (NN democracy))))
      (, ,)
      (CC and)
      (NP (DT this) (JJ new) (NN way)
        (S
          (VP (TO to)
            (VP (VB converse)
              (VP (VBN called)
                (NP (DT the) (NN Internet)))))))
      (, ,))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (MD can)
            (VP (VB blend)
              (NP
                (NP (DT the) (JJS best) (NNS ideas))
                (PP (IN from)
                  (NP (DT all))))
              (S
                (VP (TO to)
                  (VP (VB arrive)
                    (PP (IN at)
                      (NP (DT a) (JJR better) (NN way)))))))))))
    (. .)))

det(strength-2, The-1)
nsubj(is-17, strength-2)
poss(democracy-5, our-4)
prep_of(strength-2, democracy-5)
det(way-10, this-8)
amod(way-10, new-9)
conj_and(strength-2, way-10)
nsubj(is-17, way-10)
aux(converse-12, to-11)
infmod(way-10, converse-12)
dep(converse-12, called-13)
det(Internet-15, the-14)
dobj(called-13, Internet-15)
root(ROOT-0, is-17)
complm(blend-21, that-18)
nsubj(blend-21, we-19)
aux(blend-21, can-20)
ccomp(is-17, blend-21)
det(ideas-24, the-22)
amod(ideas-24, best-23)
dobj(blend-21, ideas-24)
prep_from(ideas-24, all-26)
aux(arrive-28, to-27)
xcomp(blend-21, arrive-28)
det(way-32, a-30)
amod(way-32, better-31)
prep_at(arrive-28, way-32)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD would) (RB n't)
      (VP (VB want)
        (NP (NN anyone))
        (S
          (VP (TO to)
            (VP (VB feel)
              (SBAR
                (S
                  (NP (PRP they))
                  (VP (VBD were)
                    (VP (`` ``) (VBN drafted) ('' '')
                      (PP (IN into)
                        (NP (DT a) (NN health) (NN insurance) (NN system))))))))))
        (SBAR (IN that)
          (S
            (NP (PRP they))
            (VP (VBD did) (RB n't)
              (VP (VB want)))))))
    (. .)))

nsubj(want-4, I-1)
aux(want-4, would-2)
neg(want-4, n't-3)
root(ROOT-0, want-4)
dobj(want-4, anyone-5)
aux(feel-7, to-6)
xcomp(want-4, feel-7)
nsubjpass(drafted-11, they-8)
auxpass(drafted-11, were-9)
ccomp(feel-7, drafted-11)
det(system-17, a-14)
nn(system-17, health-15)
nn(system-17, insurance-16)
prep_into(drafted-11, system-17)
complm(want-22, that-18)
nsubj(want-22, they-19)
aux(want-22, did-20)
neg(want-22, n't-21)
ccomp(want-4, want-22)

