(ROOT
  (S
    (S
      (NP
        (NP (PRP$ Your) (NN right))
        (PP (TO to)
          (NP (NN life))))
      (VP (VBZ imposes)
        (NP
          (NP (NN nothing))
          (PP (IN on)
            (NP (PRP$ your) (JJ would-be) (NN murderer))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ imposes)
        (NP
          (NP
            (NP (NN something))
            (PP (IN on)
              (NP (DT a) (JJ third) (NN party))))
          (: :)
          (NP
            (NP (DT the) (NN taxpayer))
            (, ,)
            (SBAR
              (WHNP (WP who))
              (S
                (VP (MD must)
                  (VP (VB fund)
                    (NP
                      (NP (DT the) (NN police))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (MD will)
                            (VP
                              (VP (VB arrest)
                                (NP (PRP$ your) (JJ would-be) (NN murderer)))
                              (CC and)
                              (ADVP (RB thus))
                              (VP (VB protect)
                                (NP (PRP$ your) (NN right))
                                (PP (TO to)
                                  (NP (NN life)))))))))))))))))
    (. .)))

poss(right-2, Your-1)
nsubj(imposes-5, right-2)
prep_to(right-2, life-4)
root(ROOT-0, imposes-5)
dobj(imposes-5, nothing-6)
poss(murderer-10, your-8)
amod(murderer-10, would-be-9)
prep_on(nothing-6, murderer-10)
nsubj(imposes-14, it-13)
conj_but(imposes-5, imposes-14)
dobj(imposes-14, something-15)
det(party-19, a-17)
amod(party-19, third-18)
prep_on(something-15, party-19)
det(taxpayer-22, the-21)
dep(something-15, taxpayer-22)
nsubj(fund-26, taxpayer-22)
aux(fund-26, must-25)
rcmod(taxpayer-22, fund-26)
det(police-28, the-27)
dobj(fund-26, police-28)
nsubj(arrest-31, police-28)
nsubj(protect-37, police-28)
aux(arrest-31, will-30)
rcmod(police-28, arrest-31)
poss(murderer-34, your-32)
amod(murderer-34, would-be-33)
dobj(arrest-31, murderer-34)
rcmod(police-28, thus-36)
advmod(arrest-31, thus-36)
conj_and(arrest-31, thus-36)
rcmod(police-28, protect-37)
conj_and(arrest-31, protect-37)
poss(right-39, your-38)
dobj(protect-37, right-39)
prep_to(protect-37, life-41)

(ROOT
  (S
    (ADVP (RB Likewise))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP (VB want)
            (NP (DT a) (NN crook)
              (S
                (VP (TO to)
                  (VP (VB steal)
                    (NP (PRP$ your) (NN property))))))))))
    (, ,)
    (NP (PRP you))
    (VP (MD must)
      (VP (DT either)
        (VP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (VB defend)
          (NP (PRP$ your) (NN property))
          (S
            (PP (IN by)
              (NP
                (NP (PRP yourself))
                (, ,)
                (VP (VBG using)
                  (NP (PRP$ your) (JJ own) (NN money)
                    (CC and)
                    (NNS abilities)))
                (, ,)))))
        (CC or)
        (VP
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (VB force)
          (NP (NNS taxpayers))
          (S
            (VP (TO to)
              (VP (VB give)
                (NP (NN money))
                (S
                  (VP (TO to)
                    (VP (VB support)
                      (NP
                        (NP (DT a) (NN police) (NN force)
                          (CC and)
                          (NN court) (NN system))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (MD will)
                              (VP (VB defend)
                                (NP (PRP$ your) (NN property))))))))))))))))
    (. .)))

advmod(defend-21, Likewise-1)
mark(want-7, if-3)
nsubj(want-7, you-4)
aux(want-7, do-5)
neg(want-7, n't-6)
advcl(defend-21, want-7)
det(crook-9, a-8)
dobj(want-7, crook-9)
aux(steal-11, to-10)
infmod(crook-9, steal-11)
poss(property-13, your-12)
dobj(steal-11, property-13)
nsubj(defend-21, you-15)
nsubj(force-38, you-15)
aux(defend-21, must-16)
preconj(defend-21, either-17)
dep(defend-21, a-19)
root(ROOT-0, defend-21)
poss(property-23, your-22)
dobj(defend-21, property-23)
dep(defend-21, by-24)
pobj(by-24, yourself-25)
partmod(yourself-25, using-27)
poss(money-30, your-28)
amod(money-30, own-29)
dobj(using-27, money-30)
dobj(using-27, abilities-32)
conj_and(money-30, abilities-32)
dep(force-38, b-36)
conj_or(defend-21, force-38)
dobj(force-38, taxpayers-39)
aux(give-41, to-40)
xcomp(force-38, give-41)
dobj(give-41, money-42)
aux(support-44, to-43)
xcomp(give-41, support-44)
det(force-47, a-45)
nn(force-47, police-46)
dobj(support-44, force-47)
nsubj(defend-53, force-47)
nn(system-50, court-49)
dobj(support-44, system-50)
conj_and(force-47, system-50)
nsubj(defend-53, system-50)
aux(defend-53, will-52)
rcmod(force-47, defend-53)
poss(property-55, your-54)
dobj(defend-53, property-55)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP suggest)
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBD read)
            (NP
              (NP
                (NP (NNP David) (NNP Hume))
                (, ,)
                (SBAR
                  (WHNP (WP who))
                  (S
                    (VP (VBZ explains)
                      (SBAR
                        (WHADVP (WRB why))
                        (S
                          (NP (PRP you))
                          (VP (MD can) (RB not)
                            (VP (VB derive)
                              (SBAR
                                (S
                                  (NP
                                    (NP (DT an) (`` ``) (NN ought) ('' ''))
                                    (PP (IN from)
                                      (NP (DT an))))
                                  (`` ``)
                                  (VP (VBZ is))
                                  (, ,) ('' '')))))))
                      (PRN (-LRB- -LRB-)
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (VP (VBZ is)
                              (SBAR
                                (WHNP (WP what))
                                (S
                                  (NP (NNP Rand))
                                  (VP (VBZ tries)
                                    (S
                                      (VP (TO to)
                                        (VP (VB do))))))))))
                        (-RRB- -RRB-)))))
                (, ,))
              (CONJP (RB as) (RB well) (IN as))
              (NP
                (NP (NNP Jeremy) (NNP Bentham))
                (, ,)
                (NP (NNP Jean-Jacques) (NNP Rousseau))
                (, ,)
                (NP (NNP John) (NNP Stuart) (NNP Mill))
                (, ,)
                (NP (NNP Immanuel) (NNP Kant))
                (CC and)
                (NP (NNP John) (NNP Rawls))))))))
    (. .)))

nsubj(suggest-2, I-1)
root(ROOT-0, suggest-2)
nsubj(read-4, you-3)
ccomp(suggest-2, read-4)
nn(Hume-6, David-5)
dobj(read-4, Hume-6)
nsubj(explains-9, Hume-6)
rcmod(Hume-6, explains-9)
advmod(derive-14, why-10)
nsubj(derive-14, you-11)
aux(derive-14, can-12)
neg(derive-14, not-13)
advcl(explains-9, derive-14)
det(ought-17, an-15)
nsubj(is-22, ought-17)
prep_from(ought-17, an-20)
ccomp(derive-14, is-22)
nsubj(is-27, which-26)
parataxis(explains-9, is-27)
dep(tries-30, what-28)
nsubj(tries-30, Rand-29)
xsubj(do-32, Rand-29)
ccomp(is-27, tries-30)
aux(do-32, to-31)
xcomp(tries-30, do-32)
nn(Bentham-39, Jeremy-38)
dobj(read-4, Bentham-39)
conj_and(Hume-6, Bentham-39)
nsubj(explains-9, Bentham-39)
nn(Rousseau-42, Jean-Jacques-41)
conj_and(Hume-6, Rousseau-42)
conj_and(Bentham-39, Rousseau-42)
nn(Mill-46, John-44)
nn(Mill-46, Stuart-45)
conj_and(Hume-6, Mill-46)
conj_and(Bentham-39, Mill-46)
nn(Kant-49, Immanuel-48)
conj_and(Hume-6, Kant-49)
conj_and(Bentham-39, Kant-49)
nn(Rawls-52, John-51)
conj_and(Hume-6, Rawls-52)
conj_and(Bentham-39, Rawls-52)

(ROOT
  (S
    (NP (PRP They))
    (ADVP (DT all))
    (VP
      (VP (VBP have)
        (NP
          (NP (JJ different) (NNS conceptions))
          (PP (IN of)
            (NP (NNS rights)))))
      (CC and)
      (VP (VBP provide)
        (NP (JJ different) (NNS arguments))
        (S
          (VP (TO to)
            (VP (VB support)
              (NP (DT those) (NNS views)))))))
    (. .)))

nsubj(have-3, They-1)
nsubj(provide-9, They-1)
advmod(have-3, all-2)
root(ROOT-0, have-3)
amod(conceptions-5, different-4)
dobj(have-3, conceptions-5)
prep_of(conceptions-5, rights-7)
conj_and(have-3, provide-9)
amod(arguments-11, different-10)
dobj(provide-9, arguments-11)
aux(support-13, to-12)
xcomp(provide-9, support-13)
det(views-15, those-14)
dobj(support-13, views-15)

(ROOT
  (S
    (NP (DT The) (NN point))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP
            (NP (DT the) (NN issue))
            (PP (IN of)
              (NP (`` ``)
                (NP (NNS rights))
                (, ,) ('' '')
                (CC and)
                (NP
                  (NP (DT the) (NN question))
                  (SBAR
                    (WHPP (IN of)
                      (WHNP (WDT which)))
                    (S
                      (NP (NNS rights))
                      (VP (VBP are)
                        (ADJP (JJ legitimate)))))))))
          (, ,)
          (VP (VBZ is)
            (NP
              (NP (DT an)
                (ADJP (RB extremely) (RB long) (JJ philosophical))
                (NN discussion))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ has)
                    (NP
                      (NP (JJ occupied) (NNS hundreds))
                      (PP (IN of)
                        (NP (NNS books))))))))))))
    (. .)))

det(point-2, The-1)
nsubj(is-3, point-2)
root(ROOT-0, is-3)
complm(discussion-26, that-4)
det(issue-6, the-5)
nsubj(discussion-26, issue-6)
prep_of(issue-6, rights-9)
det(question-14, the-13)
prep_of(issue-6, question-14)
conj_and(rights-9, question-14)
rel(legitimate-19, which-16)
nsubj(legitimate-19, rights-17)
cop(legitimate-19, are-18)
rcmod(question-14, legitimate-19)
cop(discussion-26, is-21)
det(discussion-26, an-22)
advmod(philosophical-25, extremely-23)
advmod(philosophical-25, long-24)
amod(discussion-26, philosophical-25)
ccomp(is-3, discussion-26)
nsubj(has-28, discussion-26)
rcmod(discussion-26, has-28)
amod(hundreds-30, occupied-29)
dobj(has-28, hundreds-30)
prep_of(hundreds-30, books-32)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP (RB unbelievably) (JJ arrogant))
      (S
        (VP (TO to)
          (VP (VB claim)
            (SBAR (IN that)
              (S
                (NP (PRP you))
                (VP (VBP have)
                  (NP
                    (NP (DT the) (JJ final) (NN word))
                    (PP (IN on)
                      (NP (DT the) (NN matter)))))))))))
    (. .)))

nsubj(arrogant-4, It-1)
xsubj(claim-6, It-1)
cop(arrogant-4, is-2)
advmod(arrogant-4, unbelievably-3)
root(ROOT-0, arrogant-4)
aux(claim-6, to-5)
xcomp(arrogant-4, claim-6)
complm(have-9, that-7)
nsubj(have-9, you-8)
ccomp(claim-6, have-9)
det(word-12, the-10)
amod(word-12, final-11)
dobj(have-9, word-12)
det(matter-15, the-14)
prep_on(word-12, matter-15)

(ROOT
  (S
    (PP (IN If)
      (PRN (-LRB- -LRB-)
        (NP (NNP b))
        (-RRB- -RRB-)))
    (, ,)
    (ADVP (RB then))
    (NP (PRP$ your) (NNS rights))
    (VP (VBP place)
      (NP
        (NP (DT a) (JJ positive) (NN obligation))
        (PP (IN on)
          (NP (JJ other) (NNS people)))))
    (. .)))

prep(place-9, If-1)
dep(If-1, b-3)
advmod(place-9, then-6)
poss(rights-8, your-7)
nsubj(place-9, rights-8)
root(ROOT-0, place-9)
det(obligation-12, a-10)
amod(obligation-12, positive-11)
dobj(place-9, obligation-12)
amod(people-15, other-14)
prep_on(obligation-12, people-15)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP
          (NP
            (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
            (, ,)
            (NP
              (NP (RB then))
              (SBAR
                (S
                  (NP (PRP$ your) (NNS rights))
                  (ADVP (RB only))
                  (VP (VBP exist)
                    (ADVP
                      (ADVP (RB as) (RB long))
                      (SBAR (IN as)
                        (S
                          (NP (PRP you))
                          (VP (MD can)
                            (VP (VB defend)
                              (NP (PRP yourself))
                              (PP (IN from)
                                (NP (JJ violent) (NNS attackers)))))))))))))
          (ADVP (RB so)))
        (VP (MD might))))
    (VP (VBZ makes)
      (ADJP (JJ right)))
    (. .)))

mark(might-22, If-1)
dep(then-6, a-3)
dobj(exist-10, then-6)
nsubj(might-22, then-6)
poss(rights-8, your-7)
nsubj(exist-10, rights-8)
advmod(exist-10, only-9)
rcmod(then-6, exist-10)
advmod(long-12, as-11)
advmod(exist-10, long-12)
mark(defend-16, as-13)
nsubj(defend-16, you-14)
aux(defend-16, can-15)
ccomp(long-12, defend-16)
dobj(defend-16, yourself-17)
amod(attackers-20, violent-19)
prep_from(defend-16, attackers-20)
advmod(then-6, so-21)
csubj(makes-23, might-22)
root(ROOT-0, makes-23)
acomp(makes-23, right-24)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP (DT no) (JJ other) (NN choice)))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(choice-5, no-3)
amod(choice-5, other-4)
nsubj(is-2, choice-5)

(ROOT
  (S
    (S
      (NP (DT Either) (NN might))
      (VP (VBZ makes)
        (ADJP (JJ right))))
    (, ,)
    (CC or)
    (S
      (NP (PRP you))
      (VP (MD must)
        (VP (VB force)
          (NP (JJ other) (NNS people))
          (S
            (VP (TO to)
              (VP (VB pay)
                (NP (NN money))
                (PP (IN for)
                  (NP
                    (NP (DT the) (NN protection))
                    (PP (IN of)
                      (NP (PRP$ your) (NNS rights)))))))))))
    (. .)))

det(might-2, Either-1)
nsubj(makes-3, might-2)
root(ROOT-0, makes-3)
acomp(makes-3, right-4)
nsubj(force-9, you-7)
aux(force-9, must-8)
conj_or(makes-3, force-9)
amod(people-11, other-10)
dobj(force-9, people-11)
aux(pay-13, to-12)
xcomp(force-9, pay-13)
dobj(pay-13, money-14)
det(protection-17, the-16)
prep_for(pay-13, protection-17)
poss(rights-20, your-19)
prep_of(protection-17, rights-20)

(ROOT
  (S
    (PP (IN Of)
      (NP (NN course)))
    (NP
      (NP (DT the) (NN military))
      (CC and)
      (NP
        (NP (DT those))
        (PP (IN in)
          (NP (DT the) (NN justice) (NN system)))))
    (VP (VBP are) (RB not)
      (ADJP (`` ``) (JJ forced) ('' '')
        (S
          (VP (TO to)
            (VP (VB act)
              (PP (IN on)
                (NP (PRP$ your) (NN behalf)))
              (SBAR (RB just) (IN like)
                (S
                  (NP (NNS doctors))
                  (VP (MD would) (RB not)
                    (VP (VB be) (`` ``)
                      (ADJP (JJ forced))
                      ('' '')
                      (S
                        (VP (TO to)
                          (VP (VB act)
                            (PP (IN on)
                              (NP
                                (NP (PRP$ your) (NN behalf))
                                (PP (IN in)
                                  (NP (DT a) (JJ universal) (NN health) (NN care) (NN system)))))))))))))))))
    (. .)))

prep_of(forced-14, course-2)
det(military-4, the-3)
nsubj(forced-14, military-4)
conj_and(military-4, those-6)
nsubj(forced-14, those-6)
det(system-10, the-8)
nn(system-10, justice-9)
prep_in(those-6, system-10)
cop(forced-14, are-11)
neg(forced-14, not-12)
root(ROOT-0, forced-14)
aux(act-17, to-16)
xcomp(forced-14, act-17)
poss(behalf-20, your-19)
prep_on(act-17, behalf-20)
advmod(forced-28, just-21)
dep(forced-28, like-22)
nsubj(forced-28, doctors-23)
aux(forced-28, would-24)
neg(forced-28, not-25)
cop(forced-28, be-26)
ccomp(act-17, forced-28)
aux(act-31, to-30)
xcomp(forced-28, act-31)
poss(behalf-34, your-33)
prep_on(act-31, behalf-34)
det(system-40, a-36)
amod(system-40, universal-37)
nn(system-40, health-38)
nn(system-40, care-39)
prep_in(behalf-34, system-40)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBD was)
      (ADVP (RB merely))
      (VP (VBG using)
        (NP (DT an) (NN analogy)
          (S
            (VP (TO to)
              (VP (VB point)
                (PRT (RP out))
                (SBAR (IN that)
                  (S
                    (NP (PRP$ your) (JJ original) (NN argument))
                    (VP (VBD was)
                      (ADJP (JJ absurd)))))))))))
    (. .)))

nsubj(using-4, I-1)
aux(using-4, was-2)
advmod(using-4, merely-3)
root(ROOT-0, using-4)
det(analogy-6, an-5)
dobj(using-4, analogy-6)
aux(point-8, to-7)
infmod(analogy-6, point-8)
prt(point-8, out-9)
complm(absurd-15, that-10)
poss(argument-13, your-11)
amod(argument-13, original-12)
nsubj(absurd-15, argument-13)
cop(absurd-15, was-14)
ccomp(point-8, absurd-15)

(ROOT
  (S
    (NP
      (NP (DT The) (NN status))
      (PP (IN of)
        (NP
          (NP (NNS doctors))
          (PP (IN in)
            (NP (DT a) (JJ universal) (NN health) (NN care) (NN system))))))
    (VP (VBZ is)
      (NP
        (NP (RB exactly) (DT the) (JJ same))
        (PP (IN as)
          (NP
            (NP (DT the) (NN status))
            (PP (IN of)
              (NP
                (NP (NNS judges))
                (PP (IN in)
                  (NP (DT the) (JJ current) (NN justice) (NN system)))))))))
    (. .)))

det(status-2, The-1)
nsubj(same-14, status-2)
prep_of(status-2, doctors-4)
det(system-10, a-6)
amod(system-10, universal-7)
nn(system-10, health-8)
nn(system-10, care-9)
prep_in(doctors-4, system-10)
cop(same-14, is-11)
advmod(same-14, exactly-12)
det(same-14, the-13)
root(ROOT-0, same-14)
det(status-17, the-16)
prep_as(same-14, status-17)
prep_of(status-17, judges-19)
det(system-24, the-21)
amod(system-24, current-22)
nn(system-24, justice-23)
prep_in(judges-19, system-24)

(ROOT
  (S
    (PP (IN As)
      (PP (IN for)
        (NP (NNP Ayn) (NNP Rand))))
    (, ,)
    (NP (PRP she))
    (VP (VBD was)
      (NP
        (NP (DT a) (JJ second-rate) (, ,) (JJ incompetent) (NN philosopher))
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBD ignored)
              (NP
                (NP (DT any) (NN argument))
                (SBAR
                  (S
                    (NP (PRP she))
                    (VP (VBD did) (RB n't)
                      (VP (VB like)))))))))))
    (. .)))

prepc_as_for(philosopher-12, for-2)
nn(Rand-4, Ayn-3)
pobj(philosopher-12, Rand-4)
nsubj(philosopher-12, she-6)
cop(philosopher-12, was-7)
det(philosopher-12, a-8)
amod(philosopher-12, second-rate-9)
amod(philosopher-12, incompetent-11)
root(ROOT-0, philosopher-12)
nsubj(ignored-14, philosopher-12)
rcmod(philosopher-12, ignored-14)
det(argument-16, any-15)
dobj(ignored-14, argument-16)
dobj(like-20, argument-16)
nsubj(like-20, she-17)
aux(like-20, did-18)
neg(like-20, n't-19)
rcmod(argument-16, like-20)

