(ROOT
  (S
    (NP
      (NP (DT All))
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBP 'm)
            (VP (VBG saying))))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (DT the) (NN government))
          (VP (MD should) (RB not)
            (VP (VB give)
              (NP (NNS handouts)))))))
    (. .)))

dobj(saying-4, All-1)
nsubj(is-5, All-1)
nsubj(saying-4, I-2)
aux(saying-4, 'm-3)
rcmod(All-1, saying-4)
root(ROOT-0, is-5)
complm(give-11, that-6)
det(government-8, the-7)
nsubj(give-11, government-8)
aux(give-11, should-9)
neg(give-11, not-10)
ccomp(is-5, give-11)
dobj(give-11, handouts-12)

(ROOT
  (S
    (NP (JJ Former) (NNS soldiers))
    (VP (VBD earned)
      (NP (PRP$ their) (NN health) (NN care)))
    (. .)))

amod(soldiers-2, Former-1)
nsubj(earned-3, soldiers-2)
root(ROOT-0, earned-3)
poss(care-6, their-4)
nn(care-6, health-5)
dobj(earned-3, care-6)

(ROOT
  (S
    (NP (NNS People))
    (VP (MD should) (RB not)
      (VP (VB get)
        (NP (`` ``) (JJ free) ('' '') (NN money))))
    (. .)))

nsubj(get-4, People-1)
aux(get-4, should-2)
neg(get-4, not-3)
root(ROOT-0, get-4)
amod(money-8, free-6)
dobj(get-4, money-8)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD should) (RB either)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP
              (VP (VB pay)
                (NP (PRP it))
                (ADVP (RB back)))
              (, ,)
              (CC or)
              (VP (VB work)
                (PP (IN for)
                  (NP
                    (NP (PRP it))
                    (CC or)
                    (NP (NN something))))))))))
    (. .)))

nsubj(have-4, They-1)
xsubj(pay-6, They-1)
aux(have-4, should-2)
advmod(have-4, either-3)
root(ROOT-0, have-4)
aux(pay-6, to-5)
xcomp(have-4, pay-6)
dobj(pay-6, it-7)
advmod(pay-6, back-8)
xcomp(have-4, work-11)
conj_or(pay-6, work-11)
prep_for(work-11, it-13)
prep_for(work-11, something-15)
conj_or(it-13, something-15)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD should) (RB n't)
      (ADVP (RB just))
      (VP (VB be)
        (VP (VBN handed)
          (PP (TO to)
            (NP (PRP them))))))
    (. .)))

nsubjpass(handed-6, It-1)
aux(handed-6, should-2)
neg(handed-6, n't-3)
advmod(handed-6, just-4)
auxpass(handed-6, be-5)
root(ROOT-0, handed-6)
prep_to(handed-6, them-8)

