(ROOT
  (S
    (NP
      (NP (NN Competition))
      (PP (IN in)
        (NP (JJ private) (NN insurance))))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN improved)
          (PP (IN without)
            (NP (JJ public) (NN plan))))))
    (. .)))

nsubjpass(improved-7, Competition-1)
amod(insurance-4, private-3)
prep_in(Competition-1, insurance-4)
aux(improved-7, can-5)
auxpass(improved-7, be-6)
root(ROOT-0, improved-7)
amod(plan-10, public-9)
prep_without(improved-7, plan-10)

(ROOT
  (S
    (SBAR (IN While)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (ADJP (JJ true))
          (SBAR (IN that)
            (S
              (NP (DT the) (JJ private) (NN insurance) (NN industry))
              (VP (VBZ does)
                (VP (VB have)
                  (NP
                    (NP (DT some) (JJ anti) (JJ competitive) (NNS monopolies))
                    (, ,)
                    (NP (NNS conglomerations))
                    (, ,)
                    (CC and)
                    (NP (NNP State) (NN boundary) (NNS issues))))))))))
    (, ,)
    (NP (DT this))
    (VP (VBZ does) (RB not)
      (VP (VB mean)
        (SBAR (IN that)
          (S
            (NP (DT a)
              (ADJP (RBR more) (JJ competitive))
              (NN environment))
            (VP (MD can) (RB not)
              (VP (VB be)
                (VP (VBN created))))))))
    (. .)))

mark(true-4, While-1)
nsubj(true-4, it-2)
cop(true-4, is-3)
advcl(mean-27, true-4)
complm(have-11, that-5)
det(industry-9, the-6)
amod(industry-9, private-7)
nn(industry-9, insurance-8)
nsubj(have-11, industry-9)
aux(have-11, does-10)
ccomp(true-4, have-11)
det(monopolies-15, some-12)
amod(monopolies-15, anti-13)
amod(monopolies-15, competitive-14)
dobj(have-11, monopolies-15)
dobj(have-11, conglomerations-17)
conj_and(monopolies-15, conglomerations-17)
nn(issues-22, State-20)
nn(issues-22, boundary-21)
dobj(have-11, issues-22)
conj_and(monopolies-15, issues-22)
nsubj(mean-27, this-24)
aux(mean-27, does-25)
neg(mean-27, not-26)
root(ROOT-0, mean-27)
complm(created-36, that-28)
det(environment-32, a-29)
advmod(competitive-31, more-30)
amod(environment-32, competitive-31)
nsubjpass(created-36, environment-32)
aux(created-36, can-33)
neg(created-36, not-34)
auxpass(created-36, be-35)
ccomp(mean-27, created-36)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (MD can)
        (CC and)
        (MD should)
        (VP (VB be)
          (VP (VBN done)))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP (JJ unnecessary)
          (S
            (VP (TO to)
              (VP (VB inject)
                (PP (IN into)
                  (NP
                    (NP (DT the) (NN equation))
                    (NP (DT a) (JJ public) (NN insurer))))))))))
    (. .)))

nsubjpass(done-6, This-1)
aux(done-6, can-2)
aux(done-6, should-4)
conj_and(done-6, should-4)
auxpass(done-6, be-5)
root(ROOT-0, done-6)
nsubj(unnecessary-11, it-9)
cop(unnecessary-11, is-10)
conj_but(done-6, unnecessary-11)
aux(inject-13, to-12)
xcomp(unnecessary-11, inject-13)
det(equation-16, the-15)
prep_into(inject-13, equation-16)
det(insurer-19, a-17)
amod(insurer-19, public-18)
dep(equation-16, insurer-19)

