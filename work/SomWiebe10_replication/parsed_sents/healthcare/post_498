(ROOT
  (NP (NNP #originalTopic) (NNP =) (NNP So_you_still_want_Nationalized_Health_Care)))

nn(So_you_still_want_Nationalized_Health_Care-3, #originalTopic-1)
nn(So_you_still_want_Nationalized_Health_Care-3, =-2)
root(ROOT-0, So_you_still_want_Nationalized_Health_Care-3)

(ROOT
  (S
    (NP (DT No) (NN system))
    (VP (VBZ is)
      (ADJP (RB fail) (JJ safe)))
    (. .)))

det(system-2, No-1)
nsubj(safe-5, system-2)
cop(safe-5, is-3)
advmod(safe-5, fail-4)
root(ROOT-0, safe-5)

(ROOT
  (S
    (NP
      (NP (DT The) (NN system))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP suggest)))))
    (VP (MD will) (RB not)
      (ADVP (RB really))
      (VP (VB help)
        (NP (PRP them))
        (ADVP (IN at) (DT all))))
    (. .)))

det(system-2, The-1)
dobj(suggest-4, system-2)
nsubj(help-8, system-2)
nsubj(suggest-4, you-3)
rcmod(system-2, suggest-4)
aux(help-8, will-5)
neg(help-8, not-6)
advmod(help-8, really-7)
root(ROOT-0, help-8)
dobj(help-8, them-9)
advmod(help-8, at-10)
pobj(at-10, all-11)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD should)
      (VP (VB be)
        (ADJP (JJ enough))
        (SBAR (IN if)
          (S
            (NP (PRP they))
            (VP (VBP do) (RB n't)
              (VP (VB have)
                (S
                  (VP (TO to)
                    (VP (VB pay)
                      (NP (PRP it))
                      (PRT (RP back))
                      (PP (IN with)
                        (NP (NN interest))))))))))))
    (. .)))

nsubj(enough-4, It-1)
aux(enough-4, should-2)
cop(enough-4, be-3)
root(ROOT-0, enough-4)
mark(have-9, if-5)
nsubj(have-9, they-6)
aux(have-9, do-7)
neg(have-9, n't-8)
advcl(enough-4, have-9)
aux(pay-11, to-10)
xcomp(have-9, pay-11)
dobj(pay-11, it-12)
prt(pay-11, back-13)
prep_with(pay-11, interest-15)

(ROOT
  (S
    (S
      (NP (DT That))
      (VP (VBZ is)
        (ADJP (RB just) (JJ outrageous))))
    (, ,)
    (NP (PRP they))
    (VP
      (VP (VBD got)
        (VP (VBN laid)
          (PRT (RP off))))
      (CC or)
      (VP (VBP are)
        (VP (VBG starving)
          (SBAR (IN so)
            (S
              (NP (PRP they))
              (VP (MD should)
                (VP (VB be)
                  (ADJP (JJ thankful)
                    (SBAR
                      (S
                        (NP (PRP they))
                        (VP (VBP are)
                          (VP (VBG drowning)
                            (PP (IN in)
                              (NP (NN debt)))
                            (ADVP (RB just))
                            (PP (IN because)
                              (NP (PRP$ its) (RB not)))
                            (PP (IN with)
                              (NP (NN interest)))))))))))))))
    (. ?)))

nsubj(outrageous-4, That-1)
cop(outrageous-4, is-2)
advmod(outrageous-4, just-3)
ccomp(laid-8, outrageous-4)
nsubjpass(laid-8, they-6)
nsubjpass(starving-12, they-6)
auxpass(laid-8, got-7)
root(ROOT-0, laid-8)
prt(laid-8, off-9)
aux(starving-12, are-11)
conj_or(laid-8, starving-12)
mark(thankful-17, so-13)
nsubj(thankful-17, they-14)
aux(thankful-17, should-15)
cop(thankful-17, be-16)
advcl(starving-12, thankful-17)
nsubj(drowning-20, they-18)
aux(drowning-20, are-19)
dep(thankful-17, drowning-20)
prep_in(drowning-20, debt-22)
advmod(drowning-20, just-23)
prep(drowning-20, because-24)
poss(not-26, its-25)
pobj(because-24, not-26)
prep_with(drowning-20, interest-28)

(ROOT
  (S
    (NP (DT A) (NN government))
    (VP (VBZ is) (RB not)
      (ADVP (RB truly))
      (VP (VBG doing)
        (NP (PRP$ its) (NN job))
        (SBAR (IN if)
          (S
            (NP (PRP it))
            (VP (VBZ is) (RB not)
              (VP (VBG taking)
                (NP
                  (NP (NN care))
                  (PP (IN of)
                    (NP (PRP$ its) (NNS people))))))))))
    (. .)))

det(government-2, A-1)
nsubj(doing-6, government-2)
aux(doing-6, is-3)
neg(doing-6, not-4)
advmod(doing-6, truly-5)
root(ROOT-0, doing-6)
poss(job-8, its-7)
dobj(doing-6, job-8)
mark(taking-13, if-9)
nsubj(taking-13, it-10)
aux(taking-13, is-11)
neg(taking-13, not-12)
advcl(doing-6, taking-13)
dobj(taking-13, care-14)
poss(people-17, its-16)
prep_of(care-14, people-17)

