(ROOT
  (S
    (NP (NNP Insurance) (NNS companies))
    (VP (VBP are) (RB n't)
      (VP (VBG doing)
        (NP (DT that))))
    (. .)))

nn(companies-2, Insurance-1)
nsubj(doing-5, companies-2)
aux(doing-5, are-3)
neg(doing-5, n't-4)
root(ROOT-0, doing-5)
dobj(doing-5, that-6)

(ROOT
  (S
    (NP (JJ Medicare\/caid) (, ,) (NN schip)
      (CC and)
      (JJ other) (NN government) (NNS programs))
    (VP (VBP are)
      (VP (VBG driving)
        (PRT (RP up))
        (NP
          (NP (DT the) (NN cost))
          (PP (IN of)
            (NP (NN health) (NN care))))))
    (. .)))

amod(schip-3, Medicare\/caid-1)
nn(programs-7, schip-3)
conj_and(schip-3, other-5)
nn(programs-7, other-5)
nn(programs-7, government-6)
nsubj(driving-9, programs-7)
aux(driving-9, are-8)
root(ROOT-0, driving-9)
prt(driving-9, up-10)
det(cost-12, the-11)
dobj(driving-9, cost-12)
nn(care-15, health-14)
prep_of(cost-12, care-15)

(ROOT
  (SQ (VBP Do)
    (NP (PRP you))
    (VP (VB know)
      (SBAR
        (WHNP (WP what))
        (S
          (VP (VBZ happens)
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (PRP you))
                (VP (VBP take)
                  (NP (NN cost))
                  (ADVP (RB down)
                    (PP (TO to)
                      (NP (DT a) (NN minimum)))))))))))
    (. ?)))

aux(know-3, Do-1)
nsubj(know-3, you-2)
root(ROOT-0, know-3)
nsubj(happens-5, what-4)
ccomp(know-3, happens-5)
advmod(take-8, when-6)
nsubj(take-8, you-7)
advcl(happens-5, take-8)
dobj(take-8, cost-9)
advmod(take-8, down-10)
det(minimum-13, a-12)
prep_to(down-10, minimum-13)

(ROOT
  (S
    (NP (NN Demand))
    (VP (VBZ goes)
      (PRT (RP up)))
    (. .)))

nsubj(goes-2, Demand-1)
root(ROOT-0, goes-2)
prt(goes-2, up-3)

(ROOT
  (SBAR (IN If)
    (S
      (NP (PRP you))
      (VP (VBP have)
        (NP
          (NP (DT a) (NN segment))
          (PP (IN of)
            (NP
              (NP
                (NP (DT the) (NN population))
                (VP (VBG getting)
                  (NP
                    (ADJP (RB nearly) (JJ free))
                    (NN product))
                  (PRN (-LRB- -LRB-)
                    (S
                      (NP (NN health) (NN care))
                      (VP (VBP int)
                        (NP (PRP$ his) (NN case))))
                    (-RRB- -RRB-))))
              (CC and)
              (NP
                (NP (DT the) (NN rest))
                (VP (VBG paying)
                  (PP (IN for)
                    (NP (DT the) (NN product))))))))))
    (: ...)))

mark(have-3, If-1)
nsubj(have-3, you-2)
root(ROOT-0, have-3)
det(segment-5, a-4)
dobj(have-3, segment-5)
det(population-8, the-7)
prep_of(segment-5, population-8)
partmod(population-8, getting-9)
advmod(free-11, nearly-10)
amod(product-12, free-11)
dobj(getting-9, product-12)
nn(care-15, health-14)
nsubj(int-16, care-15)
parataxis(getting-9, int-16)
poss(case-18, his-17)
dobj(int-16, case-18)
det(rest-22, the-21)
prep_of(segment-5, rest-22)
conj_and(population-8, rest-22)
partmod(rest-22, paying-23)
det(product-26, the-25)
prep_for(paying-23, product-26)

(ROOT
  (INTJ (UH .)))


(ROOT
  (SBARQ
    (ADVP (RB guess))
    (WHNP (WP what))
    (SQ
      (VP (VBZ happens)))
    (. ?)))

advmod(happens-3, guess-1)
nsubj(happens-3, what-2)
root(ROOT-0, happens-3)

(ROOT
  (S
    (NP
      (NP (DT Those))
      (VP (VBG getting)
        (NP
          (ADJP (RB nearly) (JJ free))
          (NN health) (NN care))))
    (VP (VBP suck)
      (PRT (RP up))
      (NP
        (NP
          (NP
            (QP (RB as) (JJ much)))
          (PP (IN of)
            (NP
              (NP (DT the) (NN product))
              (SBAR (IN as)
                (S
                  (NP (PRP they))
                  (VP (MD can)))))))
        (CC and)
        (NP
          (NP (DT those))
          (PP (IN of)
            (NP
              (NP (NN use))
              (VP (VBG paying)
                (SBAR (IN for)
                  (S
                    (NP (PRP it))
                    (VP (VBP are)
                      (VP (VBN forced)
                        (S
                          (VP (TO to)
                            (VP (VB pay)
                              (NP (NN premium) (NNS prices))
                              (PP (IN for)
                                (NP (DT the)
                                  (ADJP (RB artificially) (JJ reduced))
                                  (NN supply))))))))))))))))
    (. .)))

nsubj(suck-7, Those-1)
partmod(Those-1, getting-2)
advmod(free-4, nearly-3)
amod(care-6, free-4)
nn(care-6, health-5)
dobj(getting-2, care-6)
root(ROOT-0, suck-7)
prt(suck-7, up-8)
quantmod(much-10, as-9)
dobj(suck-7, much-10)
det(product-13, the-12)
prep_of(much-10, product-13)
dobj(can-16, product-13)
mark(can-16, as-14)
nsubj(can-16, they-15)
dep(product-13, can-16)
dobj(suck-7, those-18)
conj_and(much-10, those-18)
prep_of(those-18, use-20)
partmod(use-20, paying-21)
mark(forced-25, for-22)
nsubjpass(forced-25, it-23)
xsubj(pay-27, it-23)
auxpass(forced-25, are-24)
advcl(paying-21, forced-25)
aux(pay-27, to-26)
xcomp(forced-25, pay-27)
nn(prices-29, premium-28)
dobj(pay-27, prices-29)
det(supply-34, the-31)
advmod(reduced-33, artificially-32)
amod(supply-34, reduced-33)
prep_for(pay-27, supply-34)

