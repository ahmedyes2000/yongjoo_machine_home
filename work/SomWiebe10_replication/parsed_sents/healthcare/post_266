(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB just))
    (VP (VBD had)
      (NP
        (NP (DT the) (`` ``) (NN aha) ('' '') (NN moment))
        (PP (IN while)
          (S
            (VP (VBG reading)
              (NP (PRP$ your) (NN response)))))))
    (. .)))

nsubj(had-3, I-1)
advmod(had-3, just-2)
root(ROOT-0, had-3)
det(moment-8, the-4)
nn(moment-8, aha-6)
dobj(had-3, moment-8)
prepc_while(moment-8, reading-10)
poss(response-12, your-11)
dobj(reading-10, response-12)

(ROOT
  (S
    (INTJ (UH Yes))
    (, ,)
    (NP (PRP we))
    (VP (MD should)
      (VP (VB turn)
        (PRT (RP away))
        (NP (DT all) (NNS non-emergencies))
        (PP (IN from)
          (NP (DT the) (NN emergency) (NNS rooms)))))
    (. .)))

dep(turn-5, Yes-1)
nsubj(turn-5, we-3)
aux(turn-5, should-4)
root(ROOT-0, turn-5)
prt(turn-5, away-6)
det(non-emergencies-8, all-7)
dobj(turn-5, non-emergencies-8)
det(rooms-12, the-10)
nn(rooms-12, emergency-11)
prep_from(turn-5, rooms-12)

(ROOT
  (S
    (S
      (NP (NNS Dams))
      (VP (VBP hold)
        (NP (NN water))
        (S
          (VP (TO to)
            (VP
              (VP (VB prevent)
                (NP (NN flooding)))
              (CC and)
              (VP (VB provide)
                (NP (NN drinking) (NN water))))))))
    (, ,)
    (CC but)
    (S
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (DT the) (NN hell))
          (VP (MD should))))
      (NP (PRP we))
      (VP (VBP pay)
        (PP (IN for)
          (NP (PRP them)))))
    (. ?)))

nsubj(hold-2, Dams-1)
root(ROOT-0, hold-2)
dobj(hold-2, water-3)
aux(prevent-5, to-4)
xcomp(hold-2, prevent-5)
dobj(prevent-5, flooding-6)
xcomp(hold-2, provide-8)
conj_and(prevent-5, provide-8)
nn(water-10, drinking-9)
dobj(provide-8, water-10)
advmod(should-16, why-13)
det(hell-15, the-14)
nsubj(should-16, hell-15)
advcl(pay-18, should-16)
nsubj(pay-18, we-17)
conj_but(hold-2, pay-18)
prep_for(pay-18, them-20)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (JJ free) (NN market))
        (VP (MD ca) (RB n't)
          (VP (VB provide)
            (NP
              (ADJP (JJ economical)
                (CC and)
                (JJ safe))
              (NN water))
            (PP (TO to)
              (NP (DT the) (NNS people)))))))
    (, ,)
    (ADVP (RB then))
    (VP (VB let)
      (S
        (NP (PRP them))
        (VP (VB drink)
          (NP (NN beer)))))
    (. .)))

mark(provide-7, If-1)
det(market-4, the-2)
amod(market-4, free-3)
nsubj(provide-7, market-4)
aux(provide-7, ca-5)
neg(provide-7, n't-6)
advcl(let-17, provide-7)
amod(water-11, economical-8)
conj_and(economical-8, safe-10)
amod(water-11, safe-10)
dobj(provide-7, water-11)
det(people-14, the-13)
prep_to(provide-7, people-14)
advmod(let-17, then-16)
root(ROOT-0, let-17)
nsubj(drink-19, them-18)
ccomp(let-17, drink-19)
dobj(drink-19, beer-20)

(ROOT
  (S (CC And)
    (NP (NN traffic))
    (VP (VBZ lights))
    (. .)))

cc(lights-3, And-1)
nsubj(lights-3, traffic-2)
root(ROOT-0, lights-3)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ
      (VP (VBZ 's)
        (ADVP (RB up))
        (PP (IN with)
          (NP (DT that)))))
    (. ?)))

nsubj('s-2, What-1)
root(ROOT-0, 's-2)
advmod('s-2, up-3)
prep_with('s-2, that-5)

(ROOT
  (S
    (NP (DT The) (NN military))
    (SBAR (IN if)
      (S
        (NP (PRP we))
        (ADVP (DT all))
        (VP
          (VP (VBD had)
            (NP (NNS guns)))
          (CC and)
          (VP (VBD were)
            (ADJP
              (ADJP (JJ willing)
                (S
                  (VP (TO to)
                    (VP (VB use)
                      (NP (PRP them))))))
              (, ,)
              (CC and)
              (ADJP (JJ willing)
                (S
                  (VP (TO to)
                    (VP (VB buy)
                      (NP (NNS tickets))
                      (PP (TO to)
                        (NP (NNP Iraq)
                          (CC and)
                          (NNP Afghanistan))))))))))))
    (NP (PRP we))
    (VP (MD would) (RB n't)
      (VP (VB waste)
        (NP (PDT all) (DT that) (NN money))
        (PP (IN on)
          (NP (JJ stealth) (NNS bombers)
            (CC and)
            (NN stuff)))))
    (. .)))

det(military-2, The-1)
nsubj(waste-27, military-2)
mark(had-6, if-3)
nsubj(had-6, we-4)
nsubj(willing-10, we-4)
advmod(had-6, all-5)
dep(waste-27, had-6)
dobj(had-6, guns-7)
cop(willing-10, were-9)
conj_and(had-6, willing-10)
dep(waste-27, willing-10)
aux(use-12, to-11)
xcomp(willing-10, use-12)
dobj(use-12, them-13)
conj_and(had-6, willing-16)
conj_and(willing-10, willing-16)
aux(buy-18, to-17)
xcomp(willing-16, buy-18)
dobj(buy-18, tickets-19)
prep_to(buy-18, Iraq-21)
prep_to(buy-18, Afghanistan-23)
conj_and(Iraq-21, Afghanistan-23)
nsubj(waste-27, we-24)
aux(waste-27, would-25)
neg(waste-27, n't-26)
root(ROOT-0, waste-27)
predet(money-30, all-28)
det(money-30, that-29)
dobj(waste-27, money-30)
amod(bombers-33, stealth-32)
prep_on(waste-27, bombers-33)
prep_on(waste-27, stuff-35)
conj_and(bombers-33, stuff-35)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP 've)
        (VP (VBN been)
          (VP (VBG reading)
            (PRT (RP up))
            (PP (IN on)
              (NP (DT the) (JJ free) (NN market)))))))
    (CC and)
    (S
      (NP (PRP it))
      (VP (VBZ seems)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (NP
                (NP (DT the) (NN answer))
                (PP (TO to)
                  (NP (NN everything)))))))))
    (. .)))

nsubj(reading-4, I-1)
aux(reading-4, 've-2)
aux(reading-4, been-3)
root(ROOT-0, reading-4)
prt(reading-4, up-5)
det(market-9, the-7)
amod(market-9, free-8)
prep_on(reading-4, market-9)
nsubj(seems-12, it-11)
conj_and(reading-4, seems-12)
nsubj(answer-16, it-13)
cop(answer-16, is-14)
det(answer-16, the-15)
ccomp(seems-12, answer-16)
prep_to(answer-16, everything-18)

(ROOT
  (S
    (ADVP (RB Actually))
    (NP (JJ black) (NNS markets))
    (VP (VBP are)
      (ADJP
        (ADJP (DT the) (JJS best))
        (SBAR (IN because)
          (S
            (NP (PRP they))
            (VP (VBP are)
              (NP
                (NP (DT the) (JJ purest) (NN form))
                (PP (IN of)
                  (NP (JJ free) (NN enterprise)))))))))
    (. .)))

advmod(best-6, Actually-1)
amod(markets-3, black-2)
nsubj(best-6, markets-3)
cop(best-6, are-4)
dep(best-6, the-5)
root(ROOT-0, best-6)
mark(form-12, because-7)
nsubj(form-12, they-8)
cop(form-12, are-9)
det(form-12, the-10)
amod(form-12, purest-11)
ccomp(best-6, form-12)
amod(enterprise-15, free-14)
prep_of(form-12, enterprise-15)

(ROOT
  (S (IN So)
    (NP (PRP it))
    (VP (VBZ follows)
      (SBAR (IN that)
        (S
          (NP (DT the) (NN pot)
            (CC and)
            (NN meth) (NNS dealers))
          (VP (VBP are)
            (NP
              (NP (DT the) (NNS paragons))
              (PP (IN of)
                (NP (JJ free) (NN market) (NNS economics))))))))
    (. .)))

dep(follows-3, So-1)
nsubj(follows-3, it-2)
root(ROOT-0, follows-3)
complm(paragons-12, that-4)
det(dealers-9, the-5)
nn(dealers-9, pot-6)
conj_and(pot-6, meth-8)
nn(dealers-9, meth-8)
nsubj(paragons-12, dealers-9)
cop(paragons-12, are-10)
det(paragons-12, the-11)
ccomp(follows-3, paragons-12)
amod(economics-16, free-14)
nn(economics-16, market-15)
prep_of(paragons-12, economics-16)

(ROOT
  (S
    (NP (NNP Adam) (NNP Smith))
    (VP (VBZ rocks))
    (. .)))

nn(Smith-2, Adam-1)
nsubj(rocks-3, Smith-2)
root(ROOT-0, rocks-3)

(ROOT
  (S
    (VP (VB Let)
      (NP (DT the) (JJ uninsured) (NN die)))
    (. .)))

root(ROOT-0, Let-1)
det(die-4, the-2)
amod(die-4, uninsured-3)
dobj(Let-1, die-4)

(ROOT
  (S (RB Then)
    (ADVP (RB only))
    (NP (DT the) (NN insured))
    (VP (MD will)
      (VP (VB populate)
        (NP (DT the) (NN country))
        (, ,)
        (S
          (VP (VBG eliminating)
            (NP (DT the) (JJ whole) (NN health) (NN care) (NN problem) (NN thing))))))
    (. .)))

advmod(populate-6, Then-1)
advmod(populate-6, only-2)
det(insured-4, the-3)
nsubj(populate-6, insured-4)
aux(populate-6, will-5)
root(ROOT-0, populate-6)
det(country-8, the-7)
dobj(populate-6, country-8)
partmod(populate-6, eliminating-10)
xcomp(populate-6, eliminating-10)
det(thing-16, the-11)
amod(thing-16, whole-12)
nn(thing-16, health-13)
nn(thing-16, care-14)
nn(thing-16, problem-15)
dobj(eliminating-10, thing-16)

(ROOT
  (NP
    (NP (NN Freakin) ('' ''))
    (NP (JJ brilliant))
    (. .)))

root(ROOT-0, Freakin-1)
dep(Freakin-1, brilliant-3)

(ROOT
  (S
    (NP (NNP Compassion))
    (VP
      (VP (VBZ is)
        (NP (DT a) (JJ religious) (NN value)))
      (CC and)
      (VP (VBP therefor)
        (NP
          (NP (DT a) (NN violation))
          (PP (IN of)
            (NP (DT that) (NNP Church)
              (CC and)
              (NNP State) (NNP thingee))))))
    (. .)))

nsubj(value-5, Compassion-1)
nsubj(therefor-7, Compassion-1)
cop(value-5, is-2)
det(value-5, a-3)
amod(value-5, religious-4)
root(ROOT-0, value-5)
conj_and(value-5, therefor-7)
det(violation-9, a-8)
dobj(therefor-7, violation-9)
det(thingee-15, that-11)
nn(thingee-15, Church-12)
conj_and(Church-12, State-14)
nn(thingee-15, State-14)
prep_of(violation-9, thingee-15)

(ROOT
  (S
    (S
      (VP (VB Let)
        (S
          (NP (NNP Darwin))
          (VP (VB be)
            (VP (VBN Darwin))))))
    (CC and)
    (S
      (ADVP (RB soon))
      (NP (PRP we))
      (VP (MD 'll)
        (ADVP (RB only))
        (VP (VB have)
          (NP (DT the) (JJR lower) (NN middle) (NN class))
          (S
            (VP (TO to)
              (VP (VB worry)
                (PRT (RP about))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubjpass(Darwin-4, Darwin-2)
auxpass(Darwin-4, be-3)
ccomp(Let-1, Darwin-4)
advmod(have-10, soon-6)
nsubj(have-10, we-7)
aux(have-10, 'll-8)
advmod(have-10, only-9)
conj_and(Let-1, have-10)
det(class-14, the-11)
amod(class-14, lower-12)
nn(class-14, middle-13)
dobj(have-10, class-14)
aux(worry-16, to-15)
xcomp(have-10, worry-16)
prt(worry-16, about-17)

(ROOT
  (S
    (ADVP (RB Hell))
    (, ,)
    (S
      (NP (PRP they))
      (VP (VBP do) (RB n't)
        (ADVP (RB even))
        (VP (VB vote))))
    (, ,) (IN so)
    (S
      (NP (PRP they))
      (VP (MD wo) (RB n't)
        (VP (VB be)
          (NP
            (NP (RB much))
            (PP (IN of)
              (NP (DT a) (NN problem)))))))
    (. .)))

advmod(vote-7, Hell-1)
nsubj(vote-7, they-3)
aux(vote-7, do-4)
neg(vote-7, n't-5)
advmod(vote-7, even-6)
root(ROOT-0, vote-7)
dep(vote-7, so-9)
nsubj(much-14, they-10)
aux(much-14, wo-11)
neg(much-14, n't-12)
cop(much-14, be-13)
ccomp(vote-7, much-14)
det(problem-17, a-16)
prep_of(much-14, problem-17)

(ROOT
  (S (CC And)
    (NP
      (NP (DT that) (NN comment))
      (PP (IN about)
        (NP
          (NP (NN something))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ benefits)
                (NP
                  (NP
                    (NP (NN society))
                    (VP
                      (ADVP (RB not) (RB necessarily))
                      (VBG being)
                      (VP (VBN mandated))))
                  (, ,)
                  (CC and)
                  (NP
                    (NP (DT the) (NN argument))
                    (PP (IN for)
                      (NP (PRP it)))))))))))
    (VP (RB not)
      (S
        (VP (VBG holding)
          (NP (NN water)))))
    (. .)))

cc(not-19, And-1)
det(comment-3, that-2)
nsubj(not-19, comment-3)
prep_about(comment-3, something-5)
nsubj(benefits-7, something-5)
rcmod(something-5, benefits-7)
dobj(benefits-7, society-8)
dep(necessarily-10, not-9)
advmod(mandated-12, necessarily-10)
auxpass(mandated-12, being-11)
partmod(society-8, mandated-12)
det(argument-16, the-15)
dobj(benefits-7, argument-16)
conj_and(society-8, argument-16)
prep_for(argument-16, it-18)
root(ROOT-0, not-19)
xcomp(not-19, holding-20)
dobj(holding-20, water-21)

(ROOT
  (S
    (INTJ (UH Oh))
    (, ,)
    (NP (NN hell))
    (VP (VBP yeah))
    (. .)))

dep(yeah-4, Oh-1)
nsubj(yeah-4, hell-3)
root(ROOT-0, yeah-4)

