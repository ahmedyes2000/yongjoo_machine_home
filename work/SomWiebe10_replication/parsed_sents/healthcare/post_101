(ROOT
  (S
    (S
      (VP (VBG Following)
        (NP (NN majority) (NN support))
        (PP (IN for)
          (NP (JJ public) (NN option)))))
    (VP (VBZ is)
      (NP
        (NP (NN tyranny))
        (PP (IN of)
          (NP (NN majority)))))
    (. .)))

csubj(tyranny-8, Following-1)
nn(support-3, majority-2)
dobj(Following-1, support-3)
amod(option-6, public-5)
prep_for(Following-1, option-6)
cop(tyranny-8, is-7)
root(ROOT-0, tyranny-8)
prep_of(tyranny-8, majority-10)

(ROOT
  (S
    (NP
      (NP (NNP Appeal))
      (PP (TO to)
        (NP (DT the) (NN majority))))
    (VP
      (VP
        (VP (VBZ is)
          (ADVP (NN nothing))
          (NP
            (NP
              (QP (JJR more) (IN than) (CD tyranny)))
            (PP (IN of)
              (NP (DT the) (NN majority)))))
        (CC and)
        (VP (VBZ means)
          (NP (RB absolutely) (NN nothing))
          (PP (TO to)
            (SBAR (IN whether)
              (S
                (NP (DT a) (JJ public) (NN insurance) (NN option))
                (VP (VBZ is)
                  (ADJP (JJ worth)))))))
        (NP (PRP it)))
      (CC or)
      (VP (MD will)
        (ADVP (RB even))
        (VP (VB help))))
    (. .)))

nsubj(tyranny-9, Appeal-1)
nsubj(means-14, Appeal-1)
nsubj(help-29, Appeal-1)
det(majority-4, the-3)
prep_to(Appeal-1, majority-4)
cop(tyranny-9, is-5)
advmod(tyranny-9, nothing-6)
mwe(than-8, more-7)
quantmod(tyranny-9, than-8)
root(ROOT-0, tyranny-9)
det(majority-12, the-11)
prep_of(tyranny-9, majority-12)
conj_and(tyranny-9, means-14)
advmod(nothing-16, absolutely-15)
dobj(means-14, nothing-16)
complm(worth-24, whether-18)
det(option-22, a-19)
amod(option-22, public-20)
nn(option-22, insurance-21)
nsubj(worth-24, option-22)
cop(worth-24, is-23)
prepc_to(means-14, worth-24)
dobj(tyranny-9, it-25)
aux(help-29, will-27)
advmod(help-29, even-28)
conj_or(tyranny-9, help-29)

(ROOT
  (SQ
    (PP (RB Just) (IN in)
      (NP
        (NP (NN case))
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP do) (RB n't)
              (VP
                (VP (VB believe)
                  (NP (DT this)))
                (, ,)
                (VP (VB ask)
                  (S
                    (NP (PRP yourself))
                    (NP (DT this)))
                  (: ...)
                  (SBAR (IN if)
                    (S
                      (NP
                        (NP (CD 51) (NN %))
                        (PP (IN of)
                          (NP (DT the) (JJ public) (NN thought) (NN slavery))))
                      (VP (VBD was)
                        (ADJP (JJ good))))))))))))
    (, ,) (MD would)
    (NP (PRP you))
    (VP (VB use)
      (NP (DT that))
      (PP (IN as)
        (NP
          (NP (DT an) (NN argument))
          (PP (IN for)
            (NP
              (NP (DT a) (NN change))
              (PP (IN in)
                (NP (JJ equal) (NNS rights) ('' '') (NNS laws))))))))
    (. ?)))

advmod(use-27, Just-1)
advcl(use-27, in-2)
prep_in(use-27, case-3)
nsubj(believe-7, you-4)
aux(believe-7, do-5)
neg(believe-7, n't-6)
rcmod(case-3, believe-7)
dobj(believe-7, this-8)
dep(believe-7, ask-10)
nsubj(this-12, yourself-11)
xcomp(ask-10, this-12)
mark(good-23, if-14)
num(%-16, 51-15)
nsubj(good-23, %-16)
det(slavery-21, the-18)
amod(slavery-21, public-19)
nn(slavery-21, thought-20)
prep_of(%-16, slavery-21)
cop(good-23, was-22)
advcl(ask-10, good-23)
parataxis(ask-10, good-23)
aux(use-27, would-25)
nsubj(use-27, you-26)
root(ROOT-0, use-27)
dobj(use-27, that-28)
det(argument-31, an-30)
prep_as(use-27, argument-31)
det(change-34, a-33)
prep_for(argument-31, change-34)
amod(laws-39, equal-36)
nn(laws-39, rights-37)
prep_in(change-34, laws-39)

