(ROOT
  (S
    (NP (PRP You))
    (VP (VBP 're)
      (ADJP (RB absolutely) (JJ correct)))
    (. .)))

nsubj(correct-4, You-1)
cop(correct-4, 're-2)
advmod(correct-4, absolutely-3)
root(ROOT-0, correct-4)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP exist)
      (ADVP (RB solely))
      (PP
        (PP (IN on)
          (NP (PRP$ your) (JJ own)))
        (CC and)
        (PP (IN in)
          (NP
            (NP (DT no) (NN way))
            (SBAR
              (S
                (VP (VBP do)
                  (SBAR
                    (S
                      (NP (PRP you))
                      (VP (VBP owe)
                        (NP (NN anything))
                        (NP
                          (NP (RB not) (CD one) (JJ single) (NN thing))
                          (PP (TO to)
                            (NP (DT any) (JJ other) (JJ human) (NN being))))))))))))))
    (. .)))

nsubj(exist-2, You-1)
nsubj(exist-2', You-1)
root(ROOT-0, exist-2)
conj_and(exist-2, exist-2')
advmod(exist-2, solely-3)
poss(own-6, your-5)
prep_on(exist-2, own-6)
det(way-10, no-9)
prep_in(exist-2', way-10)
rcmod(way-10, do-11)
nsubj(owe-13, you-12)
ccomp(do-11, owe-13)
iobj(owe-13, anything-14)
neg(thing-18, not-15)
num(thing-18, one-16)
amod(thing-18, single-17)
dobj(owe-13, thing-18)
det(being-23, any-20)
amod(being-23, other-21)
amod(being-23, human-22)
prep_to(thing-18, being-23)

(ROOT
  (S
    (SBAR (IN Because)
      (S
        (NP (PRP you))
        (VP (VBP are)
          (ADJP (JJ correct)))))
    (, ,)
    (NP (NNP Nigel) (PRP you))
    (VP (VBP 're)
      (NP
        (NP (DT an) (NN island))
        (PP (IN with)
          (NP
            (NP (PRP$ your) (JJ own) (NN mind))
            (, ,)
            (NP (PRP$ your) (JJ own) (NNS goals))
            (, ,)
            (CC and)
            (NP (PRP$ your) (JJ own) (NN life))))))
    (. .)))

mark(correct-4, Because-1)
nsubj(correct-4, you-2)
cop(correct-4, are-3)
advcl(island-10, correct-4)
nsubj(island-10, Nigel-6)
dep(Nigel-6, you-7)
cop(island-10, 're-8)
det(island-10, an-9)
root(ROOT-0, island-10)
poss(mind-14, your-12)
amod(mind-14, own-13)
prep_with(island-10, mind-14)
poss(goals-18, your-16)
amod(goals-18, own-17)
prep_with(island-10, goals-18)
conj_and(mind-14, goals-18)
poss(life-23, your-21)
amod(life-23, own-22)
prep_with(island-10, life-23)
conj_and(mind-14, life-23)

(ROOT
  (SQ (CC And)
    (MD might)
    (NP (PRP I))
    (VP (VB point)
      (PRT (RP out))
      (SBAR (IN that)
        (S
          (NP
            (NP (CD one))
            (PP (IN of)
              (NP
                (NP (DT the) (NNS arguments))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ is)
                      (VP (VBN used)
                        (PP (IN against)
                          (NP (NNP Universal) (NNP Health))))))))))
          (VP (VBZ is)
            (SBAR (IN that)
              (S
                (NP (EX there))
                (VP (VBP are)
                  (ADVP (RB currently))
                  (VP (VBG waiting)
                    (NP
                      (NP (NNS lines))
                      (, ,)
                      (NP (NN rationing))
                      (, ,)
                      (CC and)
                      (NP
                        (NP (JJ monumental) (NN incompetence))
                        (CC and)
                        (NP
                          (NP (JJ arrogant) (NN bureaucracy))
                          (PRN (-LRB- -LRB-)
                            (SQ (VBP glad)
                              (NP (PRP you))
                              (VP (VBN spelled)
                                (NP (DT that))
                                (ADVP (RB correctly))
                                (, ,)
                                (ADVP (RB first))))
                            (-RRB- -RRB-)))))))))))))
    (. .)))

cc(point-4, And-1)
aux(point-4, might-2)
nsubj(point-4, I-3)
root(ROOT-0, point-4)
prt(point-4, out-5)
complm(is-17, that-6)
nsubj(is-17, one-7)
det(arguments-10, the-9)
prep_of(one-7, arguments-10)
nsubjpass(used-13, arguments-10)
auxpass(used-13, is-12)
rcmod(arguments-10, used-13)
nn(Health-16, Universal-15)
prep_against(used-13, Health-16)
ccomp(point-4, is-17)
complm(waiting-22, that-18)
expl(waiting-22, there-19)
aux(waiting-22, are-20)
advmod(waiting-22, currently-21)
ccomp(is-17, waiting-22)
dobj(waiting-22, lines-23)
nsubj(waiting-22, lines-23)
dobj(waiting-22, rationing-25)
nsubj(waiting-22, rationing-25)
conj_and(lines-23, rationing-25)
amod(incompetence-29, monumental-28)
dobj(waiting-22, incompetence-29)
nsubj(waiting-22, incompetence-29)
conj_and(lines-23, incompetence-29)
amod(bureaucracy-32, arrogant-31)
conj_and(lines-23, bureaucracy-32)
conj_and(incompetence-29, bureaucracy-32)
aux(spelled-36, glad-34)
nsubj(spelled-36, you-35)
dep(bureaucracy-32, spelled-36)
dobj(spelled-36, that-37)
advmod(spelled-36, correctly-38)
advmod(spelled-36, first-40)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP are)
      (NP (DT an) (NN island)))
    (. .)))

nsubj(island-4, You-1)
cop(island-4, are-2)
det(island-4, an-3)
root(ROOT-0, island-4)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (NP
        (NP (PRP$ your) (JJ own) (NN mind))
        (, ,)
        (NP (PRP$ your) (JJ own) (NNS goals))
        (, ,)
        (CC and)
        (NP
          (NP (PRP$ your) (JJ own) (NN life))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ exists)
                (PP (IN in)
                  (NP (DT a) (NN bubble)))))))))
    (. .)))

nsubj(have-2, You-1)
root(ROOT-0, have-2)
poss(mind-5, your-3)
amod(mind-5, own-4)
dobj(have-2, mind-5)
poss(goals-9, your-7)
amod(goals-9, own-8)
dobj(have-2, goals-9)
conj_and(mind-5, goals-9)
poss(life-14, your-12)
amod(life-14, own-13)
dobj(have-2, life-14)
conj_and(mind-5, life-14)
nsubj(exists-16, life-14)
rcmod(life-14, exists-16)
det(bubble-19, a-18)
prep_in(exists-16, bubble-19)

(ROOT
  (S
    (SBAR (IN In)
      (S
        (NP (DT no) (NN way))
        (VP (VBZ is)
          (NP (PRP it))
          (ADVP (RB ever))
          (ADJP (JJ possible))
          (SBAR
            (SBAR (IN that)
              (S
                (NP (NN man))
                (VP (VBD survived)
                  (PP (IN by)
                    (S
                      (VP (VBG being)
                        (NP (DT a) (JJ social) (NN animal))))))))
            (: ...)
            (CC and)
            (SBAR (IN in)
              (S
                (NP (DT no) (NN way))
                (VP (VBZ is)
                  (NP (NN society)))))))))
    (VP (VBD derived)
      (PRT (RP out))
      (PP (IN of)
        (S
          (VP (VBG being)
            (ADJP (JJ social)
              (PP (IN towards)
                (NP (CD one) (DT another))))))))
    (. .)))

mark(possible-7, In-1)
det(way-3, no-2)
nsubj(possible-7, way-3)
cop(possible-7, is-4)
attr(possible-7, it-5)
advmod(possible-7, ever-6)
csubj(derived-23, possible-7)
complm(survived-10, that-8)
nsubj(survived-10, man-9)
ccomp(possible-7, survived-10)
cop(animal-15, being-12)
det(animal-15, a-13)
amod(animal-15, social-14)
prepc_by(survived-10, animal-15)
mark(society-22, in-18)
det(way-20, no-19)
nsubj(society-22, way-20)
cop(society-22, is-21)
ccomp(possible-7, society-22)
conj_and(survived-10, society-22)
root(ROOT-0, derived-23)
cop(social-27, being-26)
prepc_out_of(derived-23, social-27)
prep_towards(social-27, one-29)
dep(one-29, another-30)

(ROOT
  (S
    (S
      (NP (DT That))
      (VP (MD would)
        (VP (VB have)
          (VP (VBN been)
            (ADJP (RB mass) (JJ enslavement))))))
    (, ,)
    (CC and)
    (S
      (NP (DT no) (NN one))
      (VP (MD would)
        (VP (VB have)
          (ADVP (RB ever))
          (VP (VBN done)
            (S
              (NP (PRP it)))
            (: ...)
            (SBAR (IN because)
              (S
                (NP (DT no) (CD one) (NN man))
                (ADVP (RB ever))
                (VP (VBZ needs)
                  (S
                    (NP (DT another))
                    (VP (TO to)
                      (VP (VB survive)))))))))))
    (. .)))

nsubj(enslavement-6, That-1)
aux(enslavement-6, would-2)
aux(enslavement-6, have-3)
cop(enslavement-6, been-4)
advmod(enslavement-6, mass-5)
root(ROOT-0, enslavement-6)
det(one-10, no-9)
nsubj(done-14, one-10)
aux(done-14, would-11)
aux(done-14, have-12)
advmod(done-14, ever-13)
conj_and(enslavement-6, done-14)
xcomp(done-14, it-15)
mark(needs-22, because-17)
det(man-20, no-18)
num(man-20, one-19)
nsubj(needs-22, man-20)
advmod(needs-22, ever-21)
advcl(done-14, needs-22)
parataxis(done-14, needs-22)
nsubj(survive-25, another-23)
aux(survive-25, to-24)
xcomp(needs-22, survive-25)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ 's)
      (UCP
        (NP
          (NP (DT no) (JJ such) (NN thing))
          (PP (IN as)
            (NP (NN society))))
        (CC and)
        (SBAR
          (X (SYM \*))
          (S
            (SBAR (IN if)
              (S
                (NP (EX there))
                (VP (VBD was)
                  (ADJP (JJ \*)))))
            (NP (PRP it))
            (VP (MD would)
              (ADVP (RB only))
              (VP (VB exist)
                (PP (IN as)
                  (NP (DT a) (NN slave) (NN market)))))))))
    (. .)))

expl('s-2, There-1)
root(ROOT-0, 's-2)
det(thing-5, no-3)
amod(thing-5, such-4)
nsubj('s-2, thing-5)
prep_as(thing-5, society-7)
dep(exist-17, \*-9)
mark(was-12, if-10)
expl(was-12, there-11)
advcl(exist-17, was-12)
acomp(was-12, \*-13)
nsubj(exist-17, it-14)
aux(exist-17, would-15)
advmod(exist-17, only-16)
nsubj('s-2, exist-17)
conj_and(thing-5, exist-17)
det(market-21, a-19)
nn(market-21, slave-20)
prep_as(exist-17, market-21)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (NN essence))
        (PP (IN of)
          (NP (NN morality))))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (RB purely) (JJ selfish)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ means)
                      (SBAR (IN that)
                        (S
                          (NP
                            (NP (DT no) (NN one) (RB else))
                            (PP (IN on)
                              (NP (DT the) (JJ entire) (NN earth))))
                          (VP (VBZ matters)
                            (PP (IN except)
                              (NP (PRP yourself)))))))))))))))
    (: ;)
    (S
      (NP (DT that))
      (VP (VBZ is)
        (SBAR
          (WHADJP (RB exactly) (WP what))
          (S
            (NP (PRP it))
            (VP (VBZ means)
              (S
                (VP (TO to)
                  (VP
                    (ADVP (RB always))
                    (VB act)
                    (PP (IN in)
                      (NP (NN self-interest)))))))))))
    (. .)))

det(essence-2, The-1)
nsubj(is-5, essence-2)
xsubj(selfish-9, essence-2)
prep_of(essence-2, morality-4)
root(ROOT-0, is-5)
aux(selfish-9, to-6)
cop(selfish-9, be-7)
advmod(selfish-9, purely-8)
xcomp(is-5, selfish-9)
nsubj(means-11, which-10)
dep(selfish-9, means-11)
complm(matters-20, that-12)
det(one-14, no-13)
nsubj(matters-20, one-14)
advmod(one-14, else-15)
det(earth-19, the-17)
amod(earth-19, entire-18)
prep_on(one-14, earth-19)
ccomp(means-11, matters-20)
prep_except(matters-20, yourself-22)
nsubj(is-25, that-24)
parataxis(is-5, is-25)
dep(means-29, exactly-26)
dep(exactly-26, what-27)
nsubj(means-29, it-28)
xsubj(act-32, it-28)
ccomp(is-25, means-29)
aux(act-32, to-30)
advmod(act-32, always-31)
xcomp(means-29, act-32)
prep_in(act-32, self-interest-34)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS values))
      (SBAR (IN that)
        (S
          (NP (NN man))
          (VP (VBZ requires)))))
    (VP (VBZ is) (RB not)
      (ADJP (JJ contingent)
        (PP (IN upon)
          (NP
            (NP (DT another) (JJ human) (NN being))
            (PP (IN in)
              (NP
                (NP (DT any) (NN way))
                (, ,)
                (NP (NN shape))
                (, ,)
                (CC or)
                (NP (NN form))))))))
    (. .)))

det(values-2, The-1)
dobj(requires-5, values-2)
nsubj(contingent-8, values-2)
complm(requires-5, that-3)
nsubj(requires-5, man-4)
dep(values-2, requires-5)
cop(contingent-8, is-6)
neg(contingent-8, not-7)
root(ROOT-0, contingent-8)
det(being-12, another-10)
amod(being-12, human-11)
prep_upon(contingent-8, being-12)
det(way-15, any-14)
prep_in(being-12, way-15)
prep_in(being-12, shape-17)
conj_or(way-15, shape-17)
prep_in(being-12, form-20)
conj_or(way-15, form-20)

(ROOT
  (S
    (NP (NNP Society))
    (VP (VBZ is)
      (ADJP (JJ evil))
      (, ,)
      (SBAR (IN as)
        (S
          (VP (VBZ is)
            (NP
              (NP (NN socialism))
              (, ,)
              (SBAR (IN as)
                (S
                  (VP (VBZ is)
                    (NP
                      (NP (NN anything))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (VBZ forces)
                            (S
                              (NP (DT any) (CD one) (NN man))
                              (VP (TO to)
                                (VP (VB have)
                                  (S
                                    (VP (TO to)
                                      (VP (VB interact)
                                        (PP (IN with)
                                          (NP (NNS others)))))))))))))))))))))
    (. .)))

nsubj(evil-3, Society-1)
cop(evil-3, is-2)
root(ROOT-0, evil-3)
mark(socialism-7, as-5)
cop(socialism-7, is-6)
advcl(evil-3, socialism-7)
mark(anything-11, as-9)
cop(anything-11, is-10)
dep(socialism-7, anything-11)
nsubj(forces-13, anything-11)
rcmod(anything-11, forces-13)
det(man-16, any-14)
num(man-16, one-15)
nsubj(have-18, man-16)
xsubj(interact-20, man-16)
aux(have-18, to-17)
xcomp(forces-13, have-18)
aux(interact-20, to-19)
xcomp(have-18, interact-20)
prep_with(interact-20, others-22)

