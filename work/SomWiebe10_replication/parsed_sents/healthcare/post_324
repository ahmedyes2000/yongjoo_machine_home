(ROOT
  (SINV (`` ``)
    (S
      (NP (NNP Noone))
      (VP (VBZ is)
        (VP (VBN secured)
          (S
            (VP (TO to)
              (VP
                (VP (VB have)
                  (NP
                    (NP
                      (NP (NN job))
                      (CC or)
                      (NP (JJ economic) (NN security)))
                    (, ,)
                    (CC and)
                    (NP
                      (NP (JJ ordinary) (NNS citizens))
                      (SBAR
                        (WHNP (WP who))
                        (S
                          (VP (VBD worked)
                            (ADVP (RB hard))
                            (PP (IN for)
                              (NP (DT a) (NN living)))))))))
                (CC and)
                (VP (VB save)
                  (NP
                    (NP (DT a) (NN lot))
                    (PP (IN for)
                      (NP (PRP$ their) (NN retirement)))))))))))
    (, ,)
    (VP (VBD ended)
      (PRT (RP up)))
    (NP (DT a) (NN victim))
    (. .)))

nsubjpass(secured-4, Noone-2)
xsubj(have-6, Noone-2)
auxpass(secured-4, is-3)
ccomp(ended-29, secured-4)
aux(have-6, to-5)
xcomp(secured-4, have-6)
dobj(have-6, job-7)
amod(security-10, economic-9)
dobj(have-6, security-10)
conj_or(job-7, security-10)
amod(citizens-14, ordinary-13)
dobj(have-6, citizens-14)
conj_and(job-7, citizens-14)
nsubj(worked-16, citizens-14)
rcmod(citizens-14, worked-16)
advmod(worked-16, hard-17)
det(living-20, a-19)
prep_for(worked-16, living-20)
xcomp(secured-4, save-22)
conj_and(have-6, save-22)
det(lot-24, a-23)
dobj(save-22, lot-24)
poss(retirement-27, their-26)
prep_for(lot-24, retirement-27)
root(ROOT-0, ended-29)
prt(ended-29, up-30)
det(victim-32, a-31)
nsubj(ended-29, victim-32)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (MD could)
      (NP (PRP we))
      (VP (VB be)
        (ADJP (JJ sure))
        (SBAR (IN that)
          (S
            (NP (PRP$ our) (NNS children))
            (`` ``)
            (VP (VBZ s)
              (NP
                (NP (NNS children))
                (SBAR
                  (S
                    (VP (MD will)
                      (VP (VB have)
                        (NP (DT the) (JJ same) (NN opportunity))
                        (SBAR (IN as)
                          (S
                            (NP (PRP we))
                            (VP (VBP do)
                              (S
                                (VP (VBG having)
                                  (NP
                                    (NP (JJ adequate) (JJ medical) (NN insurance))
                                    (PP (RB because) (IN of)
                                      (NP
                                        (NP (PRP$ our) (NN job))
                                        (CC or)
                                        (NP (JJ financial) (NN status))))))))))))))))))))
    (. ?)))

advmod(sure-5, How-1)
aux(sure-5, could-2)
nsubj(sure-5, we-3)
cop(sure-5, be-4)
root(ROOT-0, sure-5)
complm(children-11, that-6)
poss(children-8, our-7)
nsubj(children-11, children-8)
cop(children-11, s-10)
ccomp(sure-5, children-11)
aux(have-13, will-12)
rcmod(children-11, have-13)
det(opportunity-16, the-14)
amod(opportunity-16, same-15)
dobj(have-13, opportunity-16)
mark(do-19, as-17)
nsubj(do-19, we-18)
advcl(have-13, do-19)
xcomp(do-19, having-20)
amod(insurance-23, adequate-21)
amod(insurance-23, medical-22)
dobj(having-20, insurance-23)
poss(job-27, our-26)
prep_because_of(insurance-23, job-27)
amod(status-30, financial-29)
prep_because_of(insurance-23, status-30)
conj_or(job-27, status-30)

(ROOT
  (S
    (S (CC And)
      (VP (VB let)
        (NP (PRP 's))
        (RB not)
        (VP (VB fool)
          (NP (PRP ourselves))
          (ADVP (RB here)))))
    (, ,)
    (NP (NN reality))
    (VP (VBZ is)
      (SBAR
        (WHNP (WP what))
        (S
          (NP (PRP we))
          (VP (VBP live)
            (PRT (RP in))))))
    (. .)))

cc(let-2, And-1)
ccomp(is-10, let-2)
dobj(let-2, 's-3)
neg(let-2, not-4)
dep(let-2, fool-5)
dobj(fool-5, ourselves-6)
advmod(fool-5, here-7)
nsubj(is-10, reality-9)
root(ROOT-0, is-10)
dobj(live-13, what-11)
nsubj(live-13, we-12)
ccomp(is-10, live-13)
prt(live-13, in-14)

(ROOT
  (SBARQ
    (SBAR (IN As)
      (FRAG
        (PP (IN for)
          (NP
            (NP (PRP$ your) (NNS arguments))
            (PP (IN about)
              (NP (JJ uninsured) (NNS Americans)))))))
    (, ,)
    (WHADVP (WRB why))
    (SQ (VBP are)
      (NP (PRP they))
      (ADJP (JJ uninsured)))
    (. ?)))

mark(for-2, As-1)
advcl(uninsured-12, for-2)
poss(arguments-4, your-3)
pobj(for-2, arguments-4)
amod(Americans-7, uninsured-6)
prep_about(arguments-4, Americans-7)
advmod(uninsured-12, why-9)
cop(uninsured-12, are-10)
nsubj(uninsured-12, they-11)
root(ROOT-0, uninsured-12)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD can) (RB not)
      (VP (VB afford)
        (NP (PRP it))))
    (. .)))

nsubj(afford-4, They-1)
aux(afford-4, can-2)
neg(afford-4, not-3)
root(ROOT-0, afford-4)
dobj(afford-4, it-5)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (MD ca) (RB n't)
      (NP (PRP they))
      (VP (VB afford)
        (NP (PRP it))))
    (. ?)))

advmod(afford-5, Why-1)
aux(afford-5, ca-2)
neg(afford-5, n't-3)
nsubj(afford-5, they-4)
root(ROOT-0, afford-5)
dobj(afford-5, it-6)

(ROOT
  (FRAG
    (SBAR (IN Because)
      (S
        (NP (PRP they))
        (VP (VBP do) (RB n't)
          (VP (VB make)
            (NP (JJ enough) (NN money))))))
    (. .)))

mark(make-5, Because-1)
nsubj(make-5, they-2)
aux(make-5, do-3)
neg(make-5, n't-4)
root(ROOT-0, make-5)
amod(money-7, enough-6)
dobj(make-5, money-7)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (PRP I))
        (ADVP (RB explicitly))
        (VP (VBD pointed)
          (ADVP (IN out) (RB earlier)))))
    (, ,)
    (NP (NN money))
    (VP (VBZ is)
      (NP (DT a) (NN symbol)))
    (. .)))

mark(pointed-4, As-1)
nsubj(pointed-4, I-2)
advmod(pointed-4, explicitly-3)
advcl(symbol-11, pointed-4)
advmod(pointed-4, out-5)
advmod(out-5, earlier-6)
nsubj(symbol-11, money-8)
cop(symbol-11, is-9)
det(symbol-11, a-10)
root(ROOT-0, symbol-11)

(ROOT
  (S (IN So)
    (NP (DT the) (JJ real) (NN reason))
    (VP (VBZ is)
      (SBAR (IN because)
        (S
          (NP (PRP they))
          (VP (VBP do) (RB n't)
            (VP (VB contribute)
              (ADVP (RB enough)
                (PP (TO to)
                  (NP (NN society))))
              (S
                (VP (TO to)
                  (VP (VB purchase)
                    (NP (NN health) (NN care) (NNS services))
                    (PP (IN from)
                      (NP (NN someone) (RB else)))))))))))
    (. .)))

dep(is-5, So-1)
det(reason-4, the-2)
amod(reason-4, real-3)
nsubj(is-5, reason-4)
root(ROOT-0, is-5)
mark(contribute-10, because-6)
nsubj(contribute-10, they-7)
xsubj(purchase-15, they-7)
aux(contribute-10, do-8)
neg(contribute-10, n't-9)
advcl(is-5, contribute-10)
advmod(contribute-10, enough-11)
prep_to(enough-11, society-13)
aux(purchase-15, to-14)
xcomp(contribute-10, purchase-15)
nn(services-18, health-16)
nn(services-18, care-17)
dobj(purchase-15, services-18)
prep_from(purchase-15, someone-20)
advmod(someone-20, else-21)

(ROOT
  (S
    (ADVP (RB Therefore))
    (, ,)
    (S
      (NP (DT the) (JJ uninsured) (NNS Americans))
      (VP (VBP do) (RB not)
        (VP (VB earn)
          (NP (NN insurance)))))
    (, ,)
    (CC and)
    (S
      (NP (PRP they))
      (VP (MD should) (RB n't)
        (VP (VB have)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (PRP they))
              (VP (VBP do) (RB n't)
                (VP (VB earn))))))))
    (. .)))

advmod(earn-8, Therefore-1)
det(Americans-5, the-3)
amod(Americans-5, uninsured-4)
nsubj(earn-8, Americans-5)
aux(earn-8, do-6)
neg(earn-8, not-7)
root(ROOT-0, earn-8)
dobj(earn-8, insurance-9)
nsubj(have-15, they-12)
aux(have-15, should-13)
neg(have-15, n't-14)
conj_and(earn-8, have-15)
dobj(earn-20, what-16)
nsubj(earn-20, they-17)
aux(earn-20, do-18)
neg(earn-20, n't-19)
ccomp(have-15, earn-20)

(ROOT
  (NP
    (NP (NN End))
    (PP (IN of)
      (NP (NN story)))
    (. .)))

root(ROOT-0, End-1)
prep_of(End-1, story-3)

(ROOT
  (S ('' '')
    (NP (NNP UHC))
    (VP (VBP plan)
      (SBAR
        (S
          (S
            (VP (VBN based)
              (NP (PRP$ its) (NN argument))
              (PP (IN on)
                (NP (DT the) (NN premise)))
              (SBAR (IN that)
                (S
                  (NP (DT the) (NN health) (NN care) (NN system))
                  (VP (MD can)
                    (VP (VB be)
                      (VP (VBN cured)
                        (PP (IN by)
                          (S
                            (VP (VBG taking)
                              (NP (DT the) (NN profit) (NN motive))
                              (PRT (RP out))
                              (PP (IN of)
                                (NP
                                  (NP (DT the) (NN system))
                                  (PP (IN as)
                                    (NP (JJ other) (NNS countries)))))))))))))))
          (VP (VBP do)))))
    (. .)))

nsubj(plan-3, UHC-2)
root(ROOT-0, plan-3)
csubj(do-30, based-4)
poss(argument-6, its-5)
dobj(based-4, argument-6)
det(premise-9, the-8)
prep_on(based-4, premise-9)
complm(cured-17, that-10)
det(system-14, the-11)
nn(system-14, health-12)
nn(system-14, care-13)
nsubjpass(cured-17, system-14)
aux(cured-17, can-15)
auxpass(cured-17, be-16)
ccomp(based-4, cured-17)
agent(cured-17, taking-19)
det(motive-22, the-20)
nn(motive-22, profit-21)
dobj(taking-19, motive-22)
det(system-26, the-25)
prep_out_of(taking-19, system-26)
amod(countries-29, other-28)
prep_as(system-26, countries-29)
ccomp(plan-3, do-30)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP have)
      (NP (DT a) (NN lot)
        (S
          (VP (TO to)
            (VP (VB say)
              (PP (IN about)
                (NP (DT this) (NN one))))))))
    (. .)))

nsubj(have-3, I-2)
root(ROOT-0, have-3)
det(lot-5, a-4)
dobj(have-3, lot-5)
aux(say-7, to-6)
infmod(lot-5, say-7)
det(one-10, this-9)
prep_about(say-7, one-10)

(ROOT
  (S ('' '')
    (NP (NN Simple))
    (VP (VBP answer)
      (SBAR
        (S
          (NP (PRP we))
          (VP (MD ca) (RB n't)
            (VP (VB be)
              (ADJP (JJ sure)))))))
    (. .)))

nsubj(answer-3, Simple-2)
root(ROOT-0, answer-3)
nsubj(sure-8, we-4)
aux(sure-8, ca-5)
neg(sure-8, n't-6)
cop(sure-8, be-7)
ccomp(answer-3, sure-8)

(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (NP (PRP we))
    (VP (MD can) (RB not)
      (VP (VB compare)
        (NP (NNP America))
        (PP (TO to)
          (NP (JJ other) (NNS countries)))))
    (. .)))

advmod(compare-6, First-1)
nsubj(compare-6, we-3)
aux(compare-6, can-4)
neg(compare-6, not-5)
root(ROOT-0, compare-6)
dobj(compare-6, America-7)
amod(countries-10, other-9)
prep_to(compare-6, countries-10)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP are)
      (ADJP
        (ADJP (JJR bigger))
        (, ,)
        (ADJP (RBR more) (JJ divided))
        (, ,)
        (ADJP (RBR more) (JJ diverse))
        (, ,)
        (CC and)
        (ADJP (RBR more) (JJ free))))
    (. .)))

nsubj(bigger-3, We-1)
nsubj(divided-6, We-1)
nsubj(diverse-9, We-1)
nsubj(free-13, We-1)
cop(bigger-3, are-2)
root(ROOT-0, bigger-3)
advmod(divided-6, more-5)
conj_and(bigger-3, divided-6)
advmod(diverse-9, more-8)
conj_and(bigger-3, diverse-9)
advmod(free-13, more-12)
conj_and(bigger-3, free-13)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (NP
        (NP (NNS apples))
        (PP (TO to)
          (NP (NNS oranges)))))
    (. .)))

nsubj(apples-3, It-1)
cop(apples-3, 's-2)
root(ROOT-0, apples-3)
prep_to(apples-3, oranges-5)

(ROOT
  (S
    (ADVP (LS Second))
    (, ,)
    (VP (VBG taking)
      (NP (DT the) (NN profit) (NN motive))
      (PRT (RP out)))
    (VP (VBZ accomplishes)
      (NP
        (NP (JJ several) (NNS things))
        (, ,)
        (SBAR
          (WHNP
            (NP (NN none))
            (WHPP (IN of)
              (WHNP (WDT which))))
          (S
            (VP (VB cure)
              (NP (PRP$ our) (NN system)))))))
    (. .)))

advmod(taking-3, Second-1)
root(ROOT-0, taking-3)
det(motive-6, the-4)
nn(motive-6, profit-5)
dobj(taking-3, motive-6)
prt(taking-3, out-7)
dep(taking-3, accomplishes-8)
amod(things-10, several-9)
dobj(accomplishes-8, things-10)
prep_of(none-12, things-10)
nsubj(cure-15, none-12)
rcmod(things-10, cure-15)
poss(system-17, our-16)
dobj(cure-15, system-17)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ takes)
      (PRT (RP out))
      (NP (DT the) (NN motive)
        (S
          (VP (TO to)
            (VP (VB keep)
              (NP (NN spending))
              (PRT (RP down)))))))
    (. .)))

nsubj(takes-2, It-1)
root(ROOT-0, takes-2)
prt(takes-2, out-3)
det(motive-5, the-4)
dobj(takes-2, motive-5)
aux(keep-7, to-6)
infmod(motive-5, keep-7)
dobj(keep-7, spending-8)
prt(keep-7, down-9)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP (DT no) (NN need)
            (S
              (VP (TO to)
                (VP (VB turn)
                  (NP (DT a) (NN profit)))))))))
    (, ,)
    (NP (EX there))
    (VP (VBZ is)
      (NP (DT no) (NN need)
        (S
          (VP (TO to)
            (VP (VB cut)
              (NP (NN spending))
              (, ,)
              (ADVP (RB ever)))))))
    (. .)))

mark(is-3, If-1)
expl(is-3, there-2)
advcl(is-12, is-3)
det(need-5, no-4)
nsubj(is-3, need-5)
aux(turn-7, to-6)
infmod(need-5, turn-7)
det(profit-9, a-8)
dobj(turn-7, profit-9)
expl(is-12, there-11)
root(ROOT-0, is-12)
det(need-14, no-13)
nsubj(is-12, need-14)
aux(cut-16, to-15)
infmod(need-14, cut-16)
dobj(cut-16, spending-17)
advmod(cut-16, ever-19)

(ROOT
  (S
    (NP (PRP It))
    (ADVP (RB also))
    (VP (VBZ reduces)
      (NP (DT the) (NN motive)
        (S
          (VP (TO to)
            (VP (VB keep)
              (S
                (NP (NNS consumers))
                (ADJP (JJ happy))))))))
    (. .)))

nsubj(reduces-3, It-1)
advmod(reduces-3, also-2)
root(ROOT-0, reduces-3)
det(motive-5, the-4)
dobj(reduces-3, motive-5)
aux(keep-7, to-6)
infmod(motive-5, keep-7)
nsubj(happy-9, consumers-8)
xcomp(keep-7, happy-9)

(ROOT
  (S
    (NP (JJ Happy) (NNS customers))
    (VP (VBZ means)
      (SBAR
        (S
          (NP (VBG returning) (NNS customers))
          (VP (VBZ means)
            (NP (NN profit))))))
    (. .)))

amod(customers-2, Happy-1)
nsubj(means-3, customers-2)
root(ROOT-0, means-3)
amod(customers-5, returning-4)
nsubj(means-6, customers-5)
ccomp(means-3, means-6)
dobj(means-6, profit-7)

(ROOT
  (S
    (NP (DT No) (NN profit))
    (VP (VBZ means)
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBZ cares)
            (SBAR (IN if)
              (S
                (NP (DT the) (NNS customers))
                (VP (VBP are)
                  (ADJP (JJ happy)))))))))
    (. .)))

det(profit-2, No-1)
nsubj(means-3, profit-2)
root(ROOT-0, means-3)
nsubj(cares-5, who-4)
ccomp(means-3, cares-5)
mark(happy-10, if-6)
det(customers-8, the-7)
nsubj(happy-10, customers-8)
cop(happy-10, are-9)
advcl(cares-5, happy-10)

(ROOT
  (FRAG
    (ADJP (RB Especially) (JJ scary)
      (PP (IN in)
        (NP (DT this) (NN case))))
    (SBAR (IN because)
      (S
        (NP (PRP we))
        (VP
          (VP (MD will)
            (VP (VB be)
              (VP (VBG paying)
                (PP (IN for)
                  (NP (PRP it)))
                (SBAR (IN whether)
                  (S
                    (NP (PRP we))
                    (VP (VB accept)
                      (NP (DT the) (NN gov) (NN insurance))
                      (CC or)
                      (RB not)))))))
          (PRN (-LRB- -LRB-)
            (FRAG
              (ADVP (RB again))
              (, ,)
              (S
                (NP (DT the) (NN cost))
                (VP (VBZ is)
                  (VP (VBN shifted)
                    (PRT (RP out))
                    (PP (IN of)
                      (NP
                        (NP (NN sight))
                        (PP (IN in)
                          (NP (NNS taxes)))))
                    (, ,)
                    (SBAR
                      (S
                        (NP (PRP it))
                        (VP (VBZ does) (RB n't)))))))
              (: disappear))
            (-RRB- -RRB-))
          (S
            (VP (VBG Taking)
              (PRT (RP out))
              (NP
                (NP (DT the) (NN profit) (NN motive))
                (PP (IN in)
                  (NP (DT no) (NN way))))
              (PP (IN at)
                (NP
                  (NP (DT all) (NNS guarantees))
                  (VP (VBN reduced)
                    (NP (JJ administrative) (NNS costs))))))))))
    (. .)))

advmod(scary-2, Especially-1)
root(ROOT-0, scary-2)
det(case-5, this-4)
prep_in(scary-2, case-5)
mark(paying-10, because-6)
nsubj(paying-10, we-7)
aux(paying-10, will-8)
aux(paying-10, be-9)
dep(scary-2, paying-10)
prep_for(paying-10, it-12)
complm(accept-15, whether-13)
nsubj(accept-15, we-14)
ccomp(paying-10, accept-15)
det(insurance-18, the-16)
nn(insurance-18, gov-17)
dobj(accept-15, insurance-18)
ccomp(paying-10, not-20)
conj_or(accept-15, not-20)
neg(accept-15, not-20)
dep(paying-10, again-22)
det(cost-25, the-24)
nsubjpass(shifted-27, cost-25)
auxpass(shifted-27, is-26)
dep(again-22, shifted-27)
prt(shifted-27, out-28)
prep_of(shifted-27, sight-30)
prep_in(sight-30, taxes-32)
nsubj(does-35, it-34)
ccomp(shifted-27, does-35)
neg(does-35, n't-36)
punct(again-22, disappear-37)
xcomp(paying-10, Taking-39)
prt(Taking-39, out-40)
det(motive-43, the-41)
nn(motive-43, profit-42)
dobj(Taking-39, motive-43)
det(way-46, no-45)
prep_in(motive-43, way-46)
det(guarantees-49, all-48)
prep_at(Taking-39, guarantees-49)
partmod(guarantees-49, reduced-50)
amod(costs-52, administrative-51)
dobj(reduced-50, costs-52)

(ROOT
  (S
    (S
      (NP (NN Nobody))
      (VP (VBZ has)
        (ADVP (RB ever))
        (VP (VBN been)
          (ADJP (JJ sure)))))
    (CC and)
    (S
      (NP (NN nobody))
      (VP (MD will)
        (ADVP (RB ever))
        (VP (VB be)
          (ADJP (JJ sure)))))
    (. .)))

nsubj(sure-5, Nobody-1)
aux(sure-5, has-2)
advmod(sure-5, ever-3)
cop(sure-5, been-4)
root(ROOT-0, sure-5)
nsubj(sure-11, nobody-7)
aux(sure-11, will-8)
advmod(sure-11, ever-9)
cop(sure-11, be-10)
conj_and(sure-5, sure-11)

(ROOT
  (S
    (ADVP (LS Third))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (NNP UHC))
        (VP (VBD based)
          (NP (PRP$ its) (NN argument))
          (PP (IN on)
            (NP (DT this) (NN premise))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (ADVP (RB clearly))
      (NP (DT a)
        (ADJP (RB very) (RB very) (JJ stupid))
        (NN idea)))
    (. .)))

advmod(idea-19, Third-1)
mark(based-5, if-3)
nsubj(based-5, UHC-4)
advcl(idea-19, based-5)
poss(argument-7, its-6)
dobj(based-5, argument-7)
det(premise-10, this-9)
prep_on(based-5, premise-10)
nsubj(idea-19, it-12)
cop(idea-19, is-13)
advmod(idea-19, clearly-14)
det(idea-19, a-15)
advmod(stupid-18, very-16)
advmod(stupid-18, very-17)
amod(idea-19, stupid-18)
root(ROOT-0, idea-19)

(ROOT
  (S
    (NP (JJ Good) (NN job))
    (VP (VBG using)
      (NP
        (NP (NNP CA))
        (PP (IN as)
          (NP (DT an) (NN example)))))
    (: ...)))

amod(job-2, Good-1)
nsubj(using-3, job-2)
root(ROOT-0, using-3)
dobj(using-3, CA-4)
det(example-7, an-6)
prep_as(CA-4, example-7)

(ROOT
  (S
    (S
      (VP (VB wait)))
    (, ,)
    (VP (VBP are) (RB n't)
      (ADJP
        (NP (PRP they))
        (JJ bankrupt)))
    (. ?)))

ccomp(bankrupt-6, wait-1)
cop(bankrupt-6, are-3)
neg(bankrupt-6, n't-4)
npadvmod(bankrupt-6, they-5)
root(ROOT-0, bankrupt-6)

(ROOT
  (S
    (INTJ (UH Yeah))
    (, ,)
    (NP (JJ good) (NN idea))
    (, ,)
    (VP (VB let)
      (S
        (NP (POS 's))
        (VP (VB do)
          (NP (DT that)))))
    (. !)))

dep(let-6, Yeah-1)
amod(idea-4, good-3)
nsubj(let-6, idea-4)
root(ROOT-0, let-6)
nsubj(do-8, 's-7)
ccomp(let-6, do-8)
dobj(do-8, that-9)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB point)
          (PRT (RP out))
          (SBAR
            (WHADVP (WRB why))
            (S
              (NP (PRP they))
              (VP (VBP are)
                (ADJP (JJ bankrupt)
                  (PP (IN in)
                    (NP (DT a) (RB very) (VBN simplified) (NN way))))))))))
    (: :)
    (S
      (NP (PRP They))
      (VP (VBD increased)
        (NP
          (NP (NNS taxes))
          (PP (IN on)
            (NP (DT the) (JJ rich))))
        (ADVP
          (ADVP (RB so) (RB much))
          (SBAR (IN that)
            (S
              (NP (DT the) (JJ rich) (NNS people))
              (VP (VBD got)
                (VP
                  (VP (VBN fed)
                    (PRT (RP up)))
                  (CC and)
                  (VP (VBN moved)
                    (ADVP (RB out))
                    (PRN (-LRB- -LRB-)
                      (ADVP (RB rightly) (RB so))
                      (-RRB- -RRB-))))))))))
    (. .)))

aux(point-2, To-1)
root(ROOT-0, point-2)
prt(point-2, out-3)
advmod(bankrupt-7, why-4)
nsubj(bankrupt-7, they-5)
cop(bankrupt-7, are-6)
advcl(point-2, bankrupt-7)
det(way-12, a-9)
advmod(way-12, very-10)
amod(way-12, simplified-11)
prep_in(bankrupt-7, way-12)
nsubj(increased-15, They-14)
parataxis(point-2, increased-15)
dobj(increased-15, taxes-16)
det(rich-19, the-18)
prep_on(taxes-16, rich-19)
advmod(much-21, so-20)
advmod(increased-15, much-21)
dep(fed-27, that-22)
det(people-25, the-23)
amod(people-25, rich-24)
nsubjpass(fed-27, people-25)
nsubjpass(moved-30, people-25)
auxpass(fed-27, got-26)
ccomp(much-21, fed-27)
prt(fed-27, up-28)
ccomp(much-21, moved-30)
conj_and(fed-27, moved-30)
advmod(moved-30, out-31)
advmod(so-34, rightly-33)
dep(moved-30, so-34)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBD stopped)
      (S
        (VP (VBG raking)
          (PP (IN in)
            (NP (NN money)))))
      (SBAR (IN because)
        (S
          (NP (EX there))
          (VP (VBD was)
            (NP
              (NP (DT no) (NN money))
              (VP (VBN left)
                (PP (IN in)
                  (NP (DT the) (NN state)))))))))
    (. .)))

nsubj(stopped-2, They-1)
root(ROOT-0, stopped-2)
xcomp(stopped-2, raking-3)
prep_in(raking-3, money-5)
mark(was-8, because-6)
expl(was-8, there-7)
advcl(stopped-2, was-8)
det(money-10, no-9)
nsubj(was-8, money-10)
partmod(money-10, left-11)
det(state-14, the-13)
prep_in(left-11, state-14)

(ROOT
  (SBAR (IN If)
    (S
      (NP (NNS taxes))
      (VP (VBP are)
        (VP (VBN increased)
          (ADVP (RB still))
          (PP
            (ADVP (RBR further))
            (IN for)
            (NP
              (NP (DT the) (JJ rich))
              (PP (IN in)
                (NP (DT the) (JJ whole) (NN country))))))))
    (: ...)))

mark(increased-4, If-1)
nsubjpass(increased-4, taxes-2)
auxpass(increased-4, are-3)
root(ROOT-0, increased-4)
advmod(increased-4, still-5)
advmod(increased-4, further-6)
det(rich-9, the-8)
prep_for(increased-4, rich-9)
det(country-13, the-11)
amod(country-13, whole-12)
prep_in(rich-9, country-13)

(ROOT
  (S
    (VP (VBG AND)
      (SBAR (IN if)
        (S
          (NP
            (NP (DT the) (NN quality))
            (PP (IN of)
              (NP (PRP$ their) (NN health) (NN care))))
          (VP (VBZ decreases)))))
    (: ...)))

root(ROOT-0, AND-1)
mark(decreases-9, if-2)
det(quality-4, the-3)
nsubj(decreases-9, quality-4)
poss(care-8, their-6)
nn(care-8, health-7)
prep_of(quality-4, care-8)
advcl(AND-1, decreases-9)

(ROOT
  (SINV (VBP do)
    (NP (PRP you))
    (VP
      (ADVP (RB really))
      (VB want)
      (S
        (VP (TO to)
          (VP (VB piss)
            (PRT (RP off))
            (NP
              (NP (DT the) (NNS people))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBP pay)
                    (PP (IN for)
                      (NP (PRP$ your) (NN government) (NN ????)))))))))))))

aux(want-4, do-1)
nsubj(want-4, you-2)
xsubj(piss-6, you-2)
advmod(want-4, really-3)
root(ROOT-0, want-4)
aux(piss-6, to-5)
xcomp(want-4, piss-6)
prt(piss-6, off-7)
det(people-9, the-8)
dobj(piss-6, people-9)
nsubj(pay-11, people-9)
rcmod(people-9, pay-11)
poss(????-15, your-13)
nn(????-15, government-14)
prep_for(pay-11, ????-15)

(ROOT
  (FRAG
    (NP (DT The) (NNS people))
    (SBAR
      (WHNP (WDT that))
      (S
        (ADVP (RB actually))
        (VP (VBP have)
          (NP (NN money)
            (S
              (VP (TO to)
                (VP (VB spend)
                  (PP (IN in)
                    (NP (DT this) (NN country) (NN ????))))))))))))

det(people-2, The-1)
root(ROOT-0, people-2)
nsubj(have-5, that-3)
advmod(have-5, actually-4)
dep(people-2, have-5)
dobj(have-5, money-6)
aux(spend-8, to-7)
infmod(money-6, spend-8)
det(????-12, this-10)
nn(????-12, country-11)
prep_in(spend-8, ????-12)

(ROOT
  (S (`` ``)
    (NP (DT This))
    (VP (MD will)
      (VP
        (VP (VB make)
          (S
            (NP (NN health) (NN care))
            (ADJP
              (ADJP (JJ affordable))
              (, ,)
              (ADJP (JJR cheaper)))))
        (CC and)
        (VP (VB provide)
          (NP (NN access))
          (PP (IN for)
            (NP (DT all))))))
    (. .)))

nsubj(make-4, This-2)
nsubj(provide-11, This-2)
aux(make-4, will-3)
root(ROOT-0, make-4)
nn(care-6, health-5)
nsubj(affordable-7, care-6)
xcomp(make-4, affordable-7)
dep(affordable-7, cheaper-9)
conj_and(make-4, provide-11)
dobj(provide-11, access-12)
prep_for(provide-11, all-14)

(ROOT
  (S
    (NP (DT The) (JJS best) (NN solution))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB teach)
            (NP (PRP$ your) (NNS kids))
            (SBAR
              (WHADVP (WRB how))
              (S
                (VP (TO to)
                  (VP
                    (VP (VB work)
                      (ADJP (JJ hard)))
                    (CC and)
                    (VP (VB do)
                      (ADVP (RB well)))))))))))
    (. .)))

det(solution-3, The-1)
amod(solution-3, best-2)
nsubj(is-4, solution-3)
xsubj(teach-6, solution-3)
root(ROOT-0, is-4)
aux(teach-6, to-5)
xcomp(is-4, teach-6)
poss(kids-8, your-7)
dobj(teach-6, kids-8)
advmod(work-11, how-9)
aux(work-11, to-10)
xcomp(teach-6, work-11)
acomp(work-11, hard-12)
xcomp(teach-6, do-14)
conj_and(work-11, do-14)
advmod(do-14, well-15)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP hate)
      (S
        (VP (TO to)
          (VP (VB sound)
            (ADVP (NN cold))
            (SBAR
              (SBAR (IN because)
                (S
                  (NP (PRP I))
                  (VP (VBP care)
                    (PP (IN about)
                      (NP (NNS people)))
                    (ADVP
                      (ADVP (RB so) (RB much))
                      (SBAR (IN that)
                        (S
                          (NP (PRP I))
                          (ADVP (RB actually))
                          (VP (VBP want)
                            (S
                              (NP (DT this) (NN country))
                              (VP (TO to)
                                (VP (VB thrive)))))))))))
              (, ,)
              (CC but)
              (SBAR
                (WHADVP (WRB why))
                (S
                  (VP (VBP do)
                    (SBAR
                      (S
                        (NP (PRP we))
                        (VP (VBP care)
                          (PP (IN about)
                            (NP (NNP ALL))))))))))))))
    (. ?)))

nsubj(hate-3, I-2)
xsubj(sound-5, I-2)
root(ROOT-0, hate-3)
aux(sound-5, to-4)
xcomp(hate-3, sound-5)
advmod(sound-5, cold-6)
mark(care-9, because-7)
nsubj(care-9, I-8)
nsubj(do-25, I-8)
dep(sound-5, care-9)
prep_about(care-9, people-11)
advmod(much-13, so-12)
advmod(care-9, much-13)
dep(want-17, that-14)
nsubj(want-17, I-15)
advmod(want-17, actually-16)
ccomp(much-13, want-17)
det(country-19, this-18)
nsubj(thrive-21, country-19)
aux(thrive-21, to-20)
xcomp(want-17, thrive-21)
advmod(do-25, why-24)
dep(sound-5, do-25)
conj_but(care-9, do-25)
nsubj(care-27, we-26)
ccomp(do-25, care-27)
prep_about(care-27, ALL-29)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADVP (RB so))
      (: ...)
      (ADVP (VBD socialist)))
    (. .)))

nsubj('s-2, It-1)
root(ROOT-0, 's-2)
advmod('s-2, so-3)
advmod('s-2, socialist-5)

(ROOT
  (PRN (-LRB- -LRB-)
    (NP
      (NP (DT the) (NN stage))
      (PP (VBG following)
        (NP
          (NP (NN capitalism))
          (PP (IN in)
            (NP
              (NP (DT the) (NN transition))
              (PP (IN of)
                (NP
                  (NP (DT a) (NN society))
                  (PP (TO to)
                    (NP (NN communism)))))))
          (, ,)
          (VP (VBN characterized)
            (PP (IN by)
              (NP
                (NP (DT the)
                  (ADJP (JJ imperfect))
                  (NN implementation))
                (PP (IN of)
                  (NP (JJ collectivist) (NNS principles) (NN dictionary.com)))))))))
    (-RRB- -RRB-)))

det(stage-3, the-2)
root(ROOT-0, stage-3)
prep_following(stage-3, capitalism-5)
det(transition-8, the-7)
prep_in(capitalism-5, transition-8)
det(society-11, a-10)
prep_of(transition-8, society-11)
prep_to(society-11, communism-13)
partmod(capitalism-5, characterized-15)
det(implementation-19, the-17)
amod(implementation-19, imperfect-18)
agent(characterized-15, implementation-19)
amod(dictionary.com-23, collectivist-21)
nn(dictionary.com-23, principles-22)
prep_of(implementation-19, dictionary.com-23)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBP provide)
          (S
            (NP (NN health) (NN insurance))
            (`` ``)
            (ADJP
              (ADVP (IN for))
              (JJ free))
            ('' ''))
          (PRN (-LRB- -LRB-)
            (SBAR
              (WHNP (WDT which))
              (S
                (ADVP (RB simply))
                (VP (VBZ means)
                  (SBAR
                    (S
                      (NP (DT the) (NN cost))
                      (VP (VBZ is)
                        (VP (VBN hidden)
                          (PP (IN from)
                            (NP
                              (NP (NN view))
                              (PP (IN in)
                                (NP (NNS taxes))))))))))))
            (-RRB- -RRB-)))))
    (, ,)
    (NP (PRP it))
    (VP (MD will) (RB not)
      (VP (VB encourage)
        (S
          (NP (NNS people))
          (VP (TO to)
            (VP (VB work)
              (ADVP (RB hard))
              (PP (IN for)
                (NP (PRP it))))))))
    (. .)))

mark(provide-3, If-1)
nsubj(provide-3, we-2)
advcl(encourage-27, provide-3)
nn(insurance-5, health-4)
dep(free-8, insurance-5)
advmod(free-8, for-7)
dep(provide-3, free-8)
nsubj(means-13, which-11)
advmod(means-13, simply-12)
parataxis(provide-3, means-13)
det(cost-15, the-14)
nsubjpass(hidden-17, cost-15)
auxpass(hidden-17, is-16)
ccomp(means-13, hidden-17)
prep_from(hidden-17, view-19)
prep_in(view-19, taxes-21)
nsubj(encourage-27, it-24)
aux(encourage-27, will-25)
neg(encourage-27, not-26)
root(ROOT-0, encourage-27)
nsubj(work-30, people-28)
aux(work-30, to-29)
xcomp(encourage-27, work-30)
advmod(work-30, hard-31)
prep_for(work-30, it-33)

(ROOT
  (S (RB Then)
    (NP (PRP we))
    (VP (MD would)
      (VP (VB end)
        (PRT (RP up))
        (PP (IN with)
          (NP
            (NP (DT a) (NN country))
            (PP (JJ full) (IN of)
              (NP (JJ lazy) (NNS slackers)))))
        (: ...)
        (S
          (INTJ (UH oh))
          (VP (VB wait) (, ,)
            (SBAR (IN that)
              (S
                (VP (VBZ sounds)
                  (PP (IN like)
                    (NP (PRP$ my) (NN generation))))))))))
    (. .)))

advmod(end-4, Then-1)
nsubj(end-4, we-2)
aux(end-4, would-3)
root(ROOT-0, end-4)
prt(end-4, up-5)
det(country-8, a-7)
prep_with(end-4, country-8)
dep(country-8, full-9)
amod(slackers-12, lazy-11)
prep_of(country-8, slackers-12)
dep(wait-15, oh-14)
ccomp(end-4, wait-15)
parataxis(end-4, wait-15)
complm(sounds-18, that-17)
ccomp(wait-15, sounds-18)
poss(generation-21, my-20)
prep_like(sounds-18, generation-21)

(ROOT
  (S
    (NP (NNS oops))
    (, ,)
    (ADVP (RB already))
    (VP (VBD happened))
    (. .)))

nsubj(happened-4, oops-1)
advmod(happened-4, already-3)
root(ROOT-0, happened-4)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADVP (RB really))
      (NP
        (NP (DT a) (JJ simple) (NN concept))
        (: :)
        (SBARQ
          (SBAR (IN if)
            (S
              (NP (PRP you))
              (VP (VBD were)
                (VP (VBN offered)
                  (NP ($ $) (CD 5))
                  (S
                    (VP (TO to)
                      (VP (VB mow)
                        (S
                          (NP
                            (NP (DT a) (NN lawn))
                            (CC or)
                            (NP ($ $) (CD 5)))
                          (VP (TO to)
                            (VP (VB do)
                              (NP (NN nothing))))))))))))
          (, ,)
          (WHNP (WDT which))
          (SQ (MD would)
            (NP (PRP you))
            (VP (VB choose)))
          (. ?))))))

nsubj(concept-6, It-1)
cop(concept-6, 's-2)
advmod(concept-6, really-3)
det(concept-6, a-4)
amod(concept-6, simple-5)
root(ROOT-0, concept-6)
mark(offered-11, if-8)
nsubjpass(offered-11, you-9)
auxpass(offered-11, were-10)
advcl(choose-28, offered-11)
dobj(offered-11, $-12)
num($-12, 5-13)
aux(mow-15, to-14)
xcomp(offered-11, mow-15)
det(lawn-17, a-16)
nsubj(do-22, lawn-17)
conj_or(lawn-17, $-19)
nsubj(do-22, $-19)
num($-19, 5-20)
aux(do-22, to-21)
xcomp(mow-15, do-22)
dobj(do-22, nothing-23)
dobj(choose-28, which-25)
aux(choose-28, would-26)
nsubj(choose-28, you-27)
dep(concept-6, choose-28)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (VP (VBN applied)
          (PP (TO to)
            (NP (DT the) (JJ general) (NN population))))))
    (, ,)
    (WHNP
      (WHADJP (WRB how) (JJ many))
      (NNS lawns))
    (SQ
      (VP (MD would)
        (VP (VB get)
          (ADJP (JJ mowed)))))
    (. ?)))

mark(applied-2, If-1)
advcl(mowed-13, applied-2)
det(population-6, the-4)
amod(population-6, general-5)
prep_to(applied-2, population-6)
advmod(many-9, how-8)
amod(lawns-10, many-9)
nsubj(mowed-13, lawns-10)
aux(mowed-13, would-11)
dep(mowed-13, get-12)
root(ROOT-0, mowed-13)

