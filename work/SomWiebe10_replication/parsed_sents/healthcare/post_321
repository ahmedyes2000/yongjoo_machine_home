(ROOT
  (S (CC but)
    (NP (PRP I))
    (VP (VBP have)
      (VP (VBN read)
        (NP (DT the) (NN bill))))
    (. .)))

cc(read-4, but-1)
nsubj(read-4, I-2)
aux(read-4, have-3)
root(ROOT-0, read-4)
det(bill-6, the-5)
dobj(read-4, bill-6)

(ROOT
  (S
    (NP (NNP No))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB try)
            (S
              (VP (TO to)
                (VP (VB interpret)
                  (NP (PRP it))
                  (PP (IN for)
                    (NP (PRP me))))))))))
    (. .)))

nsubj(need-2, No-1)
xsubj(try-4, No-1)
root(ROOT-0, need-2)
aux(try-4, to-3)
xcomp(need-2, try-4)
aux(interpret-6, to-5)
xcomp(try-4, interpret-6)
dobj(interpret-6, it-7)
prep_for(interpret-6, me-9)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP seem)
      (S
        (VP (TO to)
          (VP (VB have)
            (NP
              (NP (DT no) (NN idea))
              (SBAR
                (WHADVP (WRB how))
                (S
                  (NP (DT a) (JJ free) (NN market))
                  (VP (VBZ works)))))))))
    (. .)))

nsubj(seem-2, You-1)
xsubj(have-4, You-1)
root(ROOT-0, seem-2)
aux(have-4, to-3)
xcomp(seem-2, have-4)
det(idea-6, no-5)
dobj(have-4, idea-6)
advmod(works-11, how-7)
det(market-10, a-8)
amod(market-10, free-9)
nsubj(works-11, market-10)
dep(idea-6, works-11)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (RB not) (JJ only))
    (VP (VBZ is)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBD expected)
            (SBAR (IN that)
              (S
                (NP (PRP they))
                (VP (MD 'll)
                  (VP (VB live)))))))
        (, ,)
        (CC but)
        (S
          (NP (PRP it))
          (VP (MD must)
            (VP (VB be)
              (NP (JJ free) (NNS ????)))))))))

advmod(is-5, Now-1)
neg(only-4, not-3)
nsubj(is-5, only-4)
root(ROOT-0, is-5)
nsubj(expected-7, it-6)
ccomp(is-5, expected-7)
complm(live-11, that-8)
nsubj(live-11, they-9)
aux(live-11, 'll-10)
ccomp(expected-7, live-11)
nsubj(????-18, it-14)
aux(????-18, must-15)
cop(????-18, be-16)
amod(????-18, free-17)
ccomp(is-5, ????-18)
conj_but(expected-7, ????-18)

(ROOT
  (S
    (S
      (NP (DT A) (NN doctor))
      (VP (VBZ says) (, ,) (`` ``)
        (S
          (NP (PRP I))
          (VP (MD can)
            (VP (VB save)
              (NP (PRP$ your) (NN life)))))))
    (CC but)
    (S
      (NP (PRP it))
      (VP (MD will)
        (VP (VB cost)
          (NP
            (NP ($ $) (CD 1,000))
            (PP (IN for)
              (NP
                (NP (DT the) (NN equipment))
                (CC and)
                (NP (DT the) (NN time))))))))
    (CC and)
    (S
      (NP
        (NP (DT the) (NN education))
        (VP (VBN required)
          (S
            (VP (TO to)
              (VP (VB save)
                (NP
                  (NP (PRP$ your) (NN life))
                  ('' '')
                  (CC and)
                  (NP (NNS people))))))))
      (VP (VBP are)
        (VP (VBN upset)
          (S
            (ADJP (JJ ???????))))))))

det(doctor-2, A-1)
nsubj(says-3, doctor-2)
root(ROOT-0, says-3)
nsubj(save-8, I-6)
aux(save-8, can-7)
ccomp(says-3, save-8)
poss(life-10, your-9)
dobj(save-8, life-10)
nsubj(cost-14, it-12)
aux(cost-14, will-13)
conj_but(says-3, cost-14)
dobj(cost-14, $-15)
num($-15, 1,000-16)
det(equipment-19, the-18)
prep_for($-15, equipment-19)
det(time-22, the-21)
prep_for($-15, time-22)
conj_and(equipment-19, time-22)
det(education-25, the-24)
xsubj(save-28, education-25)
nsubjpass(upset-35, education-25)
partmod(education-25, required-26)
aux(save-28, to-27)
xcomp(required-26, save-28)
poss(life-30, your-29)
dobj(save-28, life-30)
dobj(save-28, people-33)
conj_and(life-30, people-33)
auxpass(upset-35, are-34)
conj_and(says-3, upset-35)
acomp(upset-35, ???????-36)

(ROOT
  (SINV (VBZ Are)
    (NP (PRP they))
    (VP (VB upset)
      (SBAR (IN that)
        (S
          (NP (NNS people))
          (VP (VBP have)
            (VP (VBN developed)
              (NP (DT the) (NN technology)
                (S
                  (VP (TO to)
                    (VP (VB save)
                      (S
                        (NP (PRP them))
                        (ADJP (JJ ?????))))))))))))))

aux(upset-3, Are-1)
nsubj(upset-3, they-2)
root(ROOT-0, upset-3)
complm(developed-7, that-4)
nsubj(developed-7, people-5)
aux(developed-7, have-6)
ccomp(upset-3, developed-7)
det(technology-9, the-8)
dobj(developed-7, technology-9)
aux(save-11, to-10)
infmod(technology-9, save-11)
nsubj(?????-13, them-12)
xcomp(save-11, ?????-13)

(ROOT
  (S
    (S
      (NP (DT The) (NN technology))
      (VP (VBZ is) (RB not)
        (ADJP (JJ free))))
    (CC and)
    (S
      (NP (DT neither))
      (VP (VBZ is)
        (NP (NN life))))
    (. .)))

det(technology-2, The-1)
nsubj(free-5, technology-2)
cop(free-5, is-3)
neg(free-5, not-4)
root(ROOT-0, free-5)
nsubj(life-9, neither-7)
cop(life-9, is-8)
conj_and(free-5, life-9)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ costs)
      (NP (NN money))
      (S
        (VP (TO to)
          (VP (VB live)
            (SBAR (IN because)
              (S
                (NP (NN money))
                (VP (VBZ is)
                  (NP (DT a) (NN symbol))
                  (SBAR (IN that)
                    (S
                      (NP (DT a) (NN person))
                      (VP (VBZ has)
                        (VP (VBN contributed)
                          (NP (NN something))
                          (PP (TO to)
                            (NP (NN society))))))))))))))
    (. .)))

nsubj(costs-2, It-1)
root(ROOT-0, costs-2)
dobj(costs-2, money-3)
aux(live-5, to-4)
xcomp(costs-2, live-5)
mark(symbol-10, because-6)
nsubj(symbol-10, money-7)
cop(symbol-10, is-8)
det(symbol-10, a-9)
advcl(live-5, symbol-10)
complm(contributed-15, that-11)
det(person-13, a-12)
nsubj(contributed-15, person-13)
aux(contributed-15, has-14)
ccomp(symbol-10, contributed-15)
dobj(contributed-15, something-16)
prep_to(contributed-15, society-18)

(ROOT
  (S
    (SQ
      (NP (PRP It))
      (VP (VBZ is)
        (NP
          (NP (RB simply) (DT a) (NN symbol))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ says)))))))
    ('' '')
    (NP (PRP I))
    (VP (VBP have)
      (VP (VBN done)
        (NP
          (NP ($ $) (CD 20))
          (PP (JJ worth) (IN of)
            (NP
              (NP (NN something))
              (PP (IN for)
                (NP (NN someone) (RB else))))))
        (, ,)
        (SBAR (IN so)
          (S
            (NP (RB here))
            (VP (VBZ 's)
              (NP
                (NP ($ $) (CD 20))
                (PP (TO to)
                  (NP (PRP you)))
                (SBAR
                  (WHPP (IN for)
                    (WHNP (WP what)))
                  (S
                    (NP (PRP you))
                    (VP (VBP 're)
                      (VP (VBG going)
                        (S
                          (VP (TO to)
                            (VP (VB do)
                              (PP (IN for)
                                (NP (PRP me))))))))))))))))
    (. .) ('' '')))

nsubj(symbol-5, It-1)
cop(symbol-5, is-2)
advmod(symbol-5, simply-3)
det(symbol-5, a-4)
nsubj(says-7, symbol-5)
dep(done-11, symbol-5)
rcmod(symbol-5, says-7)
nsubj(done-11, I-9)
aux(done-11, have-10)
root(ROOT-0, done-11)
dobj(done-11, $-12)
num($-12, 20-13)
dep($-12, worth-14)
prep_of($-12, something-16)
prep_for(something-16, someone-18)
advmod(someone-18, else-19)
mark($-24, so-21)
nsubj($-24, here-22)
cop($-24, 's-23)
advcl(done-11, $-24)
num($-24, 20-25)
prep_to($-24, you-27)
rel(going-32, what-29)
nsubj(going-32, you-30)
xsubj(do-34, you-30)
aux(going-32, 're-31)
rcmod($-24, going-32)
aux(do-34, to-33)
xcomp(going-32, do-34)
prep_for(do-34, me-36)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (NN money))
        (VP (VBZ represents)
          (SBAR
            (S
              (VP (VBZ means)
                (SBAR (IN that)
                  (S
                    (NP (PRP it))
                    (VP (MD should) (RB not)
                      (VP (VB be)
                        (VP (VBN redistributed) (`` ``)
                          (ADVP (RB equally))
                          ('' '')
                          (PP (RB because) (IN by)
                            (NP (NN nature))))))))))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (ADVP (RB already))
      (VP (VBN distributed)
        (S
          (ADJP (RB truly) (RB equally)))))
    (. .)))

dep(represents-3, What-1)
nsubj(means-4, What-1)
nsubj(represents-3, money-2)
dep(distributed-21, represents-3)
ccomp(represents-3, means-4)
complm(redistributed-10, that-5)
nsubjpass(redistributed-10, it-6)
aux(redistributed-10, should-7)
neg(redistributed-10, not-8)
auxpass(redistributed-10, be-9)
ccomp(means-4, redistributed-10)
advmod(redistributed-10, equally-12)
advmod(redistributed-10, because-14)
agent(redistributed-10, nature-16)
nsubjpass(distributed-21, it-18)
auxpass(distributed-21, is-19)
advmod(distributed-21, already-20)
root(ROOT-0, distributed-21)
advmod(equally-23, truly-22)
dep(distributed-21, equally-23)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP
          (NP (NN complex))
          (PP (IN as)
            (NP (PRP$ our) (NN society))))
        (VP (VBZ is))))
    (, ,)
    (NP
      (NP (DT the) (NN nature)
        (CC and)
        (NN origin))
      (PP (IN of)
        (NP (NN money))))
    (VP (VBZ is)
      (ADVP (RB really))
      (ADJP (RB very) (JJ simple)))
    (. .)))

mark(is-6, As-1)
nsubj(is-6, complex-2)
poss(society-5, our-4)
prep_as(complex-2, society-5)
advcl(simple-17, is-6)
det(nature-9, the-8)
nsubj(simple-17, nature-9)
conj_and(nature-9, origin-11)
nsubj(simple-17, origin-11)
prep_of(nature-9, money-13)
cop(simple-17, is-14)
advmod(simple-17, really-15)
advmod(simple-17, very-16)
root(ROOT-0, simple-17)

(ROOT
  (FRAG
    (NP (NNP Trade))
    (. .)))

root(ROOT-0, Trade-1)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB want)
        (S
          (VP (TO to)
            (VP (VB waste)
              (NP (NN time))
              (S
                (VP (VBG giving)
                  (NP (PRP you))
                  (NP
                    (NP (DT a) (NN lesson))
                    (PP (IN in)
                      (NP (NNS economics))))
                  (SBAR (IN because)
                    (S
                      (NP (PRP you))
                      (VP (VBP are) (RB not)
                        (VP (VBG going)
                          (S
                            (VP (TO to)
                              (VP (VB trust)
                                (NP (PRP me))
                                (PP (IN as)
                                  (NP (DT a) (JJ viable) (NN source)))
                                (ADVP (RB anyway))))))))))))))))
    (. .)))

nsubj(want-4, I-1)
xsubj(waste-6, I-1)
aux(want-4, do-2)
neg(want-4, n't-3)
root(ROOT-0, want-4)
aux(waste-6, to-5)
xcomp(want-4, waste-6)
dobj(waste-6, time-7)
xcomp(waste-6, giving-8)
iobj(giving-8, you-9)
det(lesson-11, a-10)
dobj(giving-8, lesson-11)
prep_in(lesson-11, economics-13)
mark(going-18, because-14)
nsubj(going-18, you-15)
xsubj(trust-20, you-15)
aux(going-18, are-16)
neg(going-18, not-17)
advcl(giving-8, going-18)
aux(trust-20, to-19)
xcomp(going-18, trust-20)
dobj(trust-20, me-21)
det(source-25, a-23)
amod(source-25, viable-24)
prep_as(trust-20, source-25)
advmod(trust-20, anyway-26)

(ROOT
  (S
    (ADVP (RB Therefore))
    (, ,)
    (NP (PRP I))
    (VP (MD will)
      (VP (VB try)
        (S
          (VP (TO to)
            (VP (VB make)
              (NP
                (NP (PRP$ my) (NN point))
                (NP (DT another) (NN way))))))))
    (. .)))

advmod(try-5, Therefore-1)
nsubj(try-5, I-3)
xsubj(make-7, I-3)
aux(try-5, will-4)
root(ROOT-0, try-5)
aux(make-7, to-6)
xcomp(try-5, make-7)
poss(point-9, my-8)
dobj(make-7, point-9)
det(way-11, another-10)
dobj(make-7, way-11)
dep(point-9, way-11)

(ROOT
  (S
    (NP (NNP UHC))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN funded)
          (PP (IN by)
            (NP (NNS taxes))))))
    (. .)))

nsubjpass(funded-4, UHC-1)
aux(funded-4, will-2)
auxpass(funded-4, be-3)
root(ROOT-0, funded-4)
agent(funded-4, taxes-6)

(ROOT
  (S
    (NP (NNS Taxes))
    (VP (VBP are)
      (VP (VBN paid)
        (PP (IN by)
          (NP
            (NP (NN everyone))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NN unequally))
                (, ,)
                (NP
                  (NP (DT the) (JJ rich))
                  (VP (VBG paying)
                    (NP (DT a) (JJR higher) (NN percentage)))))
              (-RRB- -RRB-))))))
    (. .)))

nsubjpass(paid-3, Taxes-1)
auxpass(paid-3, are-2)
root(ROOT-0, paid-3)
agent(paid-3, everyone-5)
dep(everyone-5, unequally-7)
det(rich-10, the-9)
appos(unequally-7, rich-10)
partmod(rich-10, paying-11)
det(percentage-14, a-12)
amod(percentage-14, higher-13)
dobj(paying-11, percentage-14)

(ROOT
  (S
    (NP (NN Everyone))
    (VP (MD will) (RB not)
      (VP (VB be)
        (VP (VBG using)
          (NP
            (NP (DT the) (JJ same) (NN amount))
            (PP (IN of)
              (NP (NN health) (NN care)))))))
    (. .)))

nsubj(using-5, Everyone-1)
aux(using-5, will-2)
neg(using-5, not-3)
aux(using-5, be-4)
root(ROOT-0, using-5)
det(amount-8, the-6)
amod(amount-8, same-7)
dobj(using-5, amount-8)
nn(care-11, health-10)
prep_of(amount-8, care-11)

(ROOT
  (S
    (ADVP (RB Therefore))
    (, ,)
    (S
      (NP (DT some) (NNS people))
      (VP (MD will)
        (VP (VB be)
          (VP (VBG paying)
            (ADVP (RBR more))
            (PP (IN than)
              (NP (PRP$ their) (NN share)))))))
    (CC and)
    (S
      (NP (DT some))
      (VP (MD will)
        (VP (VB be)
          (VP (VBG paying)
            (ADJP (JJR less))))))
    (. .)))

advmod(paying-7, Therefore-1)
det(people-4, some-3)
nsubj(paying-7, people-4)
aux(paying-7, will-5)
aux(paying-7, be-6)
root(ROOT-0, paying-7)
advmod(paying-7, more-8)
poss(share-11, their-10)
prep_than(paying-7, share-11)
nsubj(paying-16, some-13)
aux(paying-16, will-14)
aux(paying-16, be-15)
conj_and(paying-7, paying-16)
acomp(paying-16, less-17)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (UCP
        (ADJP (JJ unequal)
          (CC and)
          (JJ unfair))
        (CC and)
        (VP (VBG WRONG))))
    (. .)))

nsubj(unequal-3, This-1)
nsubj(unfair-5, This-1)
nsubj(WRONG-7, This-1)
cop(unequal-3, is-2)
root(ROOT-0, unequal-3)
conj_and(unequal-3, unfair-5)
conj_and(unequal-3, WRONG-7)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (NP (NN health) (NN care))
    (VP (MD should) (RB not)
      (VP (VB be)
        (ADJP (JJ free)
          (PP (IN for)
            (NP (NN anyone))))
        (ADVP (RB ever))))
    (. .)))

advmod(free-8, Also-1)
nn(care-4, health-3)
nsubj(free-8, care-4)
aux(free-8, should-5)
neg(free-8, not-6)
cop(free-8, be-7)
root(ROOT-0, free-8)
prep_for(free-8, anyone-10)
advmod(free-8, ever-11)

(ROOT
  (S
    (NP (JJ Unless) (NN everyone))
    (VP (MD should)
      (VP (VB get)
        (NP
          (NP (DT a) (JJ physical) (NN trainer))
          (PP (IN for)
            (NP
              (NP
                (ADJP (JJ free)
                  (CC or)
                  (JJ healthy))
                (NN food))
              (PP (IN for)
                (NP (JJ free)
                  (CC or)
                  (JJ plastic) (NN surgery))))))
        (PP (IN for)
          (ADJP (JJ free)))))
    (. .)))

amod(everyone-2, Unless-1)
nsubj(get-4, everyone-2)
aux(get-4, should-3)
root(ROOT-0, get-4)
det(trainer-7, a-5)
amod(trainer-7, physical-6)
dobj(get-4, trainer-7)
amod(food-12, free-9)
conj_or(free-9, healthy-11)
amod(food-12, healthy-11)
prep_for(trainer-7, food-12)
amod(surgery-17, free-14)
conj_or(free-14, plastic-16)
amod(surgery-17, plastic-16)
prep_for(food-12, surgery-17)
prep_for(get-4, free-19)

(ROOT
  (S
    (NP
      (NP (RB Even) (NNS services))
      (PP (VBG concerning)
        (NP (DT the) (JJ human) (NN body))))
    (VP (VBD cost)
      (NP (NN money))
      (SBAR (IN because)
        (S
          (NP (PRP they))
          (VP (VBP are)
            (NP (NNS SERVICES))))))
    (. .)))

advmod(services-2, Even-1)
nsubj(cost-7, services-2)
det(body-6, the-4)
amod(body-6, human-5)
prep_concerning(services-2, body-6)
root(ROOT-0, cost-7)
dobj(cost-7, money-8)
mark(SERVICES-12, because-9)
nsubj(SERVICES-12, they-10)
cop(SERVICES-12, are-11)
advcl(cost-7, SERVICES-12)

(ROOT
  (S
    (ADVP
      (NP (CD 20) (NNS years))
      (RB ago))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (NN someone))
        (VP (VBD was)
          (VP (VBN diagnosed)
            (PP (IN with)
              (NP (NN cancer)))))))
    (, ,)
    (NP (PRP it))
    (VP (VBD was)
      (VP (VBN accepted)
        (SBAR (IN that)
          (S
            (NP (PRP they))
            (VP (MD would)
              (VP (VB die)))))))
    (. .)))

num(years-2, 20-1)
npadvmod(ago-3, years-2)
advmod(accepted-14, ago-3)
mark(diagnosed-8, if-5)
nsubjpass(diagnosed-8, someone-6)
auxpass(diagnosed-8, was-7)
advcl(accepted-14, diagnosed-8)
prep_with(diagnosed-8, cancer-10)
nsubjpass(accepted-14, it-12)
auxpass(accepted-14, was-13)
root(ROOT-0, accepted-14)
complm(die-18, that-15)
nsubj(die-18, they-16)
aux(die-18, would-17)
ccomp(accepted-14, die-18)

