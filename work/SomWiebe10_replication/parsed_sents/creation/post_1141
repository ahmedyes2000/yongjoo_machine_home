(ROOT
  (SQ (MD Can)
    (NP (PRP we))
    (VP (VB get)
      (NP (CD one) (NN thing))
      (ADVP (RB straight)))
    (. .)))

aux(get-3, Can-1)
nsubj(get-3, we-2)
root(ROOT-0, get-3)
num(thing-5, one-4)
dobj(get-3, thing-5)
advmod(get-3, straight-6)

(ROOT
  (S
    (NP (NNP Evolution))
    (VP (VBZ is)
      (NP (NN fact)))
    (. .)))

nsubj(fact-3, Evolution-1)
cop(fact-3, is-2)
root(ROOT-0, fact-3)

(ROOT
  (S
    (S
      (NP
        (NP (DT A) (NN theory))
        (PP (IN in)
          (NP (NN science))))
      (, ,)
      (VP (VBZ is)
        (NP
          (NP (DT an) (NN explanation))
          (PP (IN for)
            (NP (NNS observations))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP you))
      (VP (MD can) (RB not)
        (VP (VB deny)
          (SBAR (IN that)
            (S
              (NP (NN evolution))
              (VP (VBZ has)
                (VP (VBN taken)
                  (NP (NN place))
                  (PP (IN over)
                    (NP
                      (NP (DT the) (JJ last) (NNS millions))
                      (PP (IN of)
                        (NP (NNS years))))))))))))
    (. .)))

det(theory-2, A-1)
nsubj(explanation-8, theory-2)
prep_in(theory-2, science-4)
cop(explanation-8, is-6)
det(explanation-8, an-7)
root(ROOT-0, explanation-8)
prep_for(explanation-8, observations-10)
nsubj(deny-16, you-13)
aux(deny-16, can-14)
neg(deny-16, not-15)
conj_and(explanation-8, deny-16)
complm(taken-20, that-17)
nsubj(taken-20, evolution-18)
aux(taken-20, has-19)
ccomp(deny-16, taken-20)
dobj(taken-20, place-21)
det(millions-25, the-23)
amod(millions-25, last-24)
prep_over(taken-20, millions-25)
prep_of(millions-25, years-27)

(ROOT
  (S
    (S
      (NP (CD One) (NN thing) (NN no-one))
      (VP (MD can)
        (VP (VB say)
          (S
            (SBAR (IN for)
              (S
                (ADVP (RB sure))
                (VP (VBZ is)
                  (NP
                    (NP (DT the) (VBG driving) (NN force))
                    (PP (IN behind)
                      (NP (NN evolution)))))))
            (, ,)
            (NP (PRP it))
            (VP (MD could)
              (VP (VB be)
                (ADVP (RB down)
                  (PP (TO to)
                    (NP (DT a) (JJ supreme) (NN deity))))))))))
    (, ,)
    (CC but)
    (S
      (S
        (NP (NN evolution))
        (VP (VBZ is)
          (NP (NN fact))))
      (, ,)
      (CC and)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (PP (IN in)
            (NP (DT no) (NN way)))
          (ADJP (JJ wrong)))))
    (. .)))

num(no-one-3, One-1)
nn(no-one-3, thing-2)
nsubj(say-5, no-one-3)
aux(say-5, can-4)
root(ROOT-0, say-5)
mark(force-11, for-6)
advmod(force-11, sure-7)
cop(force-11, is-8)
det(force-11, the-9)
amod(force-11, driving-10)
advcl(be-17, force-11)
prep_behind(force-11, evolution-13)
nsubj(be-17, it-15)
aux(be-17, could-16)
ccomp(say-5, be-17)
advmod(be-17, down-18)
det(deity-22, a-20)
amod(deity-22, supreme-21)
prep_to(down-18, deity-22)
nsubj(fact-27, evolution-25)
cop(fact-27, is-26)
conj_but(say-5, fact-27)
nsubj(wrong-35, it-30)
cop(wrong-35, is-31)
det(way-34, no-33)
prep_in(wrong-35, way-34)
conj_but(say-5, wrong-35)
conj_and(fact-27, wrong-35)

