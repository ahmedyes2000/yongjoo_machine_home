(ROOT
  (S
    (SBAR
      (PRN (: --)
        (NP (NNP Jim))
        (: --))
      (S
        (S
          (ADVP (RB Finally))
          (, ,)
          (NP (PRP I))
          (ADVP (RB just))
          (VP (VBP want)
            (S
              (VP (TO to)
                (VP (VB say)
                  (SBAR (IN that)
                    (S
                      (NP (PRP it))
                      (VP (VBZ appears)
                        (PP (TO to)
                          (NP (PRP me)))
                        (SBAR (IN that)
                          (S
                            (NP (NNS statements))
                            (VP (VBD made)
                              (PP (IN against)
                                (NP (NNP ID))))))))))))))
        (CC and)
        (S
          (S
            (NP (PRP$ their) (NNS proponents))
            (VP (VBD made)
              (PP (IN by)
                (NP (NNS others)))))
          (, ,) (RB not)
          (S
            (NP (PRP you))
            (VP (VBG regarding)
              (SBAR
                (S
                  (NP (NNP ID))
                  (VP (VBZ has)
                    (VP (VBN been)
                      (VP
                        (ADVP (RB so) (RB emotionally))
                        (VBN charged)))))))))))
    (NP (PRP it))
    (VP (VBZ makes)
      (SBAR
        (S
          (NP (PRP me))
          (VP (VBP feel)
            (SBAR
              (S
                (NP (PRP$ their) (NN judgment))
                (VP (VBZ is)
                  (VP (VBN affected)))))))))
    (. .)))

dep(want-8, Jim-2)
advmod(want-8, Finally-4)
nsubj(want-8, I-6)
xsubj(say-10, I-6)
advmod(want-8, just-7)
dep(makes-38, want-8)
aux(say-10, to-9)
xcomp(want-8, say-10)
complm(appears-13, that-11)
nsubj(appears-13, it-12)
ccomp(say-10, appears-13)
prep_to(appears-13, me-15)
complm(made-18, that-16)
nsubj(made-18, statements-17)
ccomp(appears-13, made-18)
prep_against(made-18, ID-20)
poss(proponents-23, their-22)
nsubj(made-24, proponents-23)
conj_and(want-8, made-24)
dep(makes-38, made-24)
prep_by(made-24, others-26)
neg(made-24, not-28)
nsubj(regarding-30, you-29)
dep(made-24, regarding-30)
nsubjpass(charged-36, ID-31)
aux(charged-36, has-32)
auxpass(charged-36, been-33)
advmod(emotionally-35, so-34)
advmod(charged-36, emotionally-35)
ccomp(regarding-30, charged-36)
nsubj(makes-38, it-37)
root(ROOT-0, makes-38)
nsubj(feel-40, me-39)
ccomp(makes-38, feel-40)
poss(judgment-42, their-41)
nsubjpass(affected-44, judgment-42)
auxpass(affected-44, is-43)
ccomp(feel-40, affected-44)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ seems)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBZ s)
              (NP (DT a)
                (ADJP (RB very) (JJ powerful))
                (NN argument)
                (S
                  (VP (TO to)
                    (VP (VB say)
                      (SBAR (IN if)
                        (S
                          (NP (NN something))
                          (VP (VBZ appears)
                            (VP (VBN designed))))))))))))))
    (, ,)
    (NP (PRP it))
    (VP (MD may)
      (VP (VB be)
        (SBAR (IN because)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (VP (VBN designed)))))))
    (. .)))

nsubj(seems-2, It-1)
ccomp(be-19, seems-2)
complm(argument-9, that-3)
nsubj(argument-9, it-4)
cop(argument-9, s-5)
det(argument-9, a-6)
advmod(powerful-8, very-7)
amod(argument-9, powerful-8)
ccomp(seems-2, argument-9)
aux(say-11, to-10)
infmod(argument-9, say-11)
mark(designed-15, if-12)
nsubjpass(designed-15, something-13)
auxpass(designed-15, appears-14)
advcl(say-11, designed-15)
nsubj(be-19, it-17)
aux(be-19, may-18)
root(ROOT-0, be-19)
mark(designed-23, because-20)
nsubjpass(designed-23, it-21)
auxpass(designed-23, is-22)
advcl(be-19, designed-23)

(ROOT
  (S
    (INTJ (RB Sure))
    (, ,)
    (NP
      (NP (DT the) (NNS arguments))
      (VP (VBG surrounding)
        (NP
          (NP (NNP ID))
          (SBAR
            (S
              (VP (VBP are)
                (ADJP (RB emotionally) (VBN loaded)))))
          (, ,)
          (PP (RB mostly) (RB because) (IN of)
            (NP (DT the) (JJ strong) (NN religious))))))
    (VP (VBZ overtones)
      (NP
        (SBAR
          (WHADVP (RB however))
          (S
            (NP (PRP$ my) (JJ major) (NNS concerns))
            (VP (VBP are) (RB not)
              (PP (IN with)
                (NP
                  (NP (DT the) (JJ theological) (NNS flaws))
                  (PP (IN of)
                    (NP (NNP ID))))))))
        (CONJP (CC but)
          (RB rather))
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (ADJP (VBN doomed)
                (S
                  (VP (TO to)
                    (VP (VB remain)
                      (NP (JJ scientifically) (NNS vacuous)))))))))))
    (. .)))

dep(overtones-17, Sure-1)
det(arguments-4, the-3)
nsubj(overtones-17, arguments-4)
partmod(arguments-4, surrounding-5)
dobj(surrounding-5, ID-6)
auxpass(loaded-9, are-7)
advmod(loaded-9, emotionally-8)
rcmod(ID-6, loaded-9)
advmod(ID-6, mostly-11)
det(religious-16, the-14)
amod(religious-16, strong-15)
prep_because_of(ID-6, religious-16)
root(ROOT-0, overtones-17)
advmod(are-22, however-18)
poss(concerns-21, my-19)
amod(concerns-21, major-20)
nsubj(are-22, concerns-21)
dobj(overtones-17, are-22)
neg(are-22, not-23)
det(flaws-27, the-25)
amod(flaws-27, theological-26)
prep_with(are-22, flaws-27)
prep_of(flaws-27, ID-29)
advmod(doomed-35, how-32)
nsubjpass(doomed-35, it-33)
auxpass(doomed-35, is-34)
dobj(overtones-17, doomed-35)
conj_negcc(are-22, doomed-35)
aux(vacuous-39, to-36)
cop(vacuous-39, remain-37)
amod(vacuous-39, scientifically-38)
xcomp(doomed-35, vacuous-39)

(ROOT
  (S
    (S
      (NP (DT Some))
      (VP (VBP make)
        (NP
          (NP (DT the) (NN statement))
          (SBAR
            (S
              (NP (PRP it))
              (VP (MD may)
                (VP (VB appear)
                  (VP (VBN designed)))))))))
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is) (RB not)))
    (. .)))

nsubj(make-2, Some-1)
root(ROOT-0, make-2)
det(statement-4, the-3)
dobj(make-2, statement-4)
nsubjpass(designed-8, it-5)
aux(designed-8, may-6)
auxpass(designed-8, appear-7)
rcmod(statement-4, designed-8)
nsubj(is-11, it-10)
conj_but(make-2, is-11)
neg(is-11, not-12)

(ROOT
  (FRAG (IN If)
    (SBAR
      (WHNP (WDT that))
      (S
        (VP (VBZ is)
          (ADVP (RB so))
          (, ,)
          (SBAR
            (WHADVP (WRB where))
            (S
              (VP (VBZ s)
                (NP (DT the) (NN proof))))))))
    (. ?)))

root(ROOT-0, If-1)
nsubj(is-3, that-2)
nsubj(proof-9, that-2)
dep(If-1, is-3)
advmod(is-3, so-4)
advmod(proof-9, where-6)
cop(proof-9, s-7)
det(proof-9, the-8)
advcl(is-3, proof-9)

(ROOT
  (S
    (NP
      (NP (RB Just) (NN look))
      (PP (IN at)
        (NP
          (NP (NNP Darwin))
          (SBAR
            (WHNP (WP who))
            (S
              (VP (VBD showed)
                (SBAR
                  (WHADVP (WRB how))
                  (S
                    (NP (WDT what))
                    (ADVP (RB previously))
                    (VP (VBD had)
                      (VP (VBN been)
                        (VP (VBN seen)
                          (PP (IN as)
                            (S
                              (VP (VBG requiring)
                                (NP (NN design))
                                (ADVP (RB now))))))))))))))))
    (ADVP (RB suddenly))
    (VP (VBD did) (RB not)
      (VP (VB necessitate)
        (NP (NN design))))
    (. .)))

advmod(look-2, Just-1)
nsubj(necessitate-20, look-2)
prep_at(look-2, Darwin-4)
nsubj(showed-6, Darwin-4)
rcmod(Darwin-4, showed-6)
advmod(seen-12, how-7)
nsubjpass(seen-12, what-8)
advmod(seen-12, previously-9)
aux(seen-12, had-10)
auxpass(seen-12, been-11)
ccomp(showed-6, seen-12)
prepc_as(seen-12, requiring-14)
dobj(requiring-14, design-15)
advmod(requiring-14, now-16)
advmod(necessitate-20, suddenly-17)
aux(necessitate-20, did-18)
neg(necessitate-20, not-19)
root(ROOT-0, necessitate-20)
dobj(necessitate-20, design-21)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ other) (NNS words)))
    (, ,)
    (SBAR (IN while)
      (S
        (NP
          (NP (NN design))
          (PP (IN in)
            (NP (DT the) (JJR larger) (NN sense))))
        (VP (MD can)
          (ADVP (RB never))
          (VP (VB be)
            (VP (VBN disproven)
              (SBAR (IN since)
                (S
                  (NP (PRP we))
                  (VP (MD can)
                    (ADVP (RB always))
                    (VP (VB propose)
                      (NP
                        (NP (DT a) (NN designer))
                        (SBAR
                          (WHNP (WP who))
                          (S
                            (VP (VBD used)
                              (NP (JJ natural) (NN law)))))))))))))))
    (, ,)
    (NP (PRP it))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN shown)
          (SBAR (IN that)
            (S
              (NP (NN design))
              (VP (VBZ is) (RB not)
                (NP
                  (NP (DT a) (NN requirement))
                  (CC or)
                  (NP (DT a) (JJ necessary) (NN component)))))))))
    (. .)))

amod(words-3, other-2)
prep_in(shown-30, words-3)
mark(disproven-14, while-5)
nsubjpass(disproven-14, design-6)
det(sense-10, the-8)
amod(sense-10, larger-9)
prep_in(design-6, sense-10)
aux(disproven-14, can-11)
neg(disproven-14, never-12)
auxpass(disproven-14, be-13)
advcl(shown-30, disproven-14)
mark(propose-19, since-15)
nsubj(propose-19, we-16)
aux(propose-19, can-17)
advmod(propose-19, always-18)
advcl(disproven-14, propose-19)
det(designer-21, a-20)
dobj(propose-19, designer-21)
nsubj(used-23, designer-21)
rcmod(designer-21, used-23)
amod(law-25, natural-24)
dobj(used-23, law-25)
nsubjpass(shown-30, it-27)
aux(shown-30, can-28)
auxpass(shown-30, be-29)
root(ROOT-0, shown-30)
complm(requirement-36, that-31)
nsubj(requirement-36, design-32)
cop(requirement-36, is-33)
neg(requirement-36, not-34)
det(requirement-36, a-35)
ccomp(shown-30, requirement-36)
det(component-40, a-38)
amod(component-40, necessary-39)
ccomp(shown-30, component-40)
conj_or(requirement-36, component-40)

(ROOT
  (S (CC So)
    (S
      (NP (PRP we))
      (VP (VBP see)
        (SBAR
          (S
            (NP (DT the) (NN evidence))
            (ADVP (RB strongly))
            (VP (VBP point)
              (PP (TO to)
                (NP
                  (NP (DT the) (NN fact))
                  (PP (IN of)
                    (NP (NN evolution))))))))))
    (PRN (-LRB- -LRB-)
      (VP (VB change)
        (PP (IN over)
          (NP
            (NP (NN time))
            (, ,)
            (NP (JJ common) (NN ancestry)))))
      (-RRB- -RRB-))
    (CC and)
    (ADVP (RB thus))
    (S
      (NP (EX there))
      (VP (VBZ is)
        (NP
          (NP (JJ strong) (NN evidence))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ suggests)
                (SBAR (IN that)
                  (S
                    (NP
                      (NP (NN design))
                      (PP (IN in)
                        (NP (DT these) (NNS cases))))
                    (VP (VBZ is)
                      (ADJP (JJ apparent))
                      (SBAR (IN as)
                        (S
                          (NP (PRP it))
                          (VP (MD can)
                            (VP (VB be)
                              (VP (VBN explained)
                                (PP (IN by)
                                  (NP
                                    (NP (NNS processes))
                                    (PP (IN of)
                                      (NP (NN regularity)
                                        (CC and)
                                        (NN chance)))))))))))))))))))
    (. .)))

nsubj(see-3, we-2)
root(ROOT-0, see-3)
det(evidence-5, the-4)
nsubj(point-7, evidence-5)
advmod(point-7, strongly-6)
ccomp(see-3, point-7)
det(fact-10, the-9)
prep_to(point-7, fact-10)
prep_of(fact-10, evolution-12)
dep(see-3, change-14)
prep_over(change-14, time-16)
amod(ancestry-19, common-18)
appos(time-16, ancestry-19)
advmod(see-3, thus-22)
conj_and(see-3, thus-22)
expl(is-24, there-23)
ccomp(see-3, is-24)
conj_and(see-3, is-24)
amod(evidence-26, strong-25)
nsubj(is-24, evidence-26)
nsubj(suggests-28, evidence-26)
rcmod(evidence-26, suggests-28)
complm(apparent-35, that-29)
nsubj(apparent-35, design-30)
det(cases-33, these-32)
prep_in(design-30, cases-33)
cop(apparent-35, is-34)
ccomp(suggests-28, apparent-35)
mark(explained-40, as-36)
nsubjpass(explained-40, it-37)
aux(explained-40, can-38)
auxpass(explained-40, be-39)
advcl(apparent-35, explained-40)
agent(explained-40, processes-42)
prep_of(processes-42, regularity-44)
prep_of(processes-42, chance-46)
conj_and(regularity-44, chance-46)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (PRP we))
    (VP (MD can)
      (ADVP (RB also))
      (VP (VB agree) (, ,)
        (SBAR (IN that)
          (S
            (NP (DT a) (NNP God))
            (VP (MD could)
              (ADVP (RB very) (RB well))
              (VP (VB have)
                (VP (VBN designed)
                  (PP (IN through)
                    (NP
                      (NP (DT these) (NNS processes))
                      (PP (IN of)
                        (NP (NN regularity)
                          (CC and)
                          (NN chance))))))))))
        (, ,)
        (S
          (VP (VBG making)
            (NP (NN design))
            (PP (RB not)
              (NP
                (NP (DT a) (NN necessity))
                (CC but)
                (RB still)
                (NP (DT a) (JJ logical) (NN plausibility))))))))
    (. .)))

advmod(agree-6, However-1)
nsubj(agree-6, we-3)
aux(agree-6, can-4)
advmod(agree-6, also-5)
root(ROOT-0, agree-6)
complm(designed-15, that-8)
det(God-10, a-9)
nsubj(designed-15, God-10)
aux(designed-15, could-11)
advmod(well-13, very-12)
advmod(designed-15, well-13)
aux(designed-15, have-14)
ccomp(agree-6, designed-15)
det(processes-18, these-17)
prep_through(designed-15, processes-18)
prep_of(processes-18, regularity-20)
prep_of(processes-18, chance-22)
conj_and(regularity-20, chance-22)
xcomp(agree-6, making-24)
dobj(making-24, design-25)
prep(making-24, not-26)
det(necessity-28, a-27)
pobj(not-26, necessity-28)
pobj(not-26, still-30)
advmod(necessity-28, still-30)
conj_but(necessity-28, still-30)
det(plausibility-33, a-31)
amod(plausibility-33, logical-32)
dep(necessity-28, plausibility-33)

(ROOT
  (S
    (PP (IN Of)
      (NP (NN course)))
    (, ,)
    (NP (EX there))
    (VP (VBP are)
      (NP
        (NP (NNS variants))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBP involve)
              (NP
                (NP (DT a) (NNP God))
                (SBAR
                  (WHNP (WP who))
                  (S
                    (VP
                      (VP (VBD created)
                        (NP (NNS species))
                        (PP (IN at)
                          (NP (DT every) (JJ single) (NN step))))
                      (CC and)
                      (VP (VBD decided)
                        (S
                          (VP (TO to)
                            (VP (VB make)
                              (SBAR
                                (S
                                  (NP (PRP it))
                                  (VP (VBP appear)
                                    (S
                                      (VP (TO to)
                                        (VP (VB have)
                                          (VP (VBN evolved)
                                            (PP (IN through)
                                              (NP
                                                (NP (JJ natural) (NNS processes))
                                                (PP (IN of)
                                                  (NP (NN regularity)
                                                    (CC and)
                                                    (NN chance)))))))))))))))))))))))))
    (. .)))

prep_of(are-5, course-2)
expl(are-5, there-4)
root(ROOT-0, are-5)
nsubj(are-5, variants-6)
nsubj(involve-8, variants-6)
rcmod(variants-6, involve-8)
det(God-10, a-9)
dobj(involve-8, God-10)
nsubj(created-12, God-10)
nsubj(decided-19, God-10)
rcmod(God-10, created-12)
dobj(created-12, species-13)
det(step-17, every-15)
amod(step-17, single-16)
prep_at(created-12, step-17)
rcmod(God-10, decided-19)
conj_and(created-12, decided-19)
aux(make-21, to-20)
xcomp(decided-19, make-21)
nsubj(appear-23, it-22)
xsubj(evolved-26, it-22)
ccomp(make-21, appear-23)
aux(evolved-26, to-24)
aux(evolved-26, have-25)
xcomp(appear-23, evolved-26)
amod(processes-29, natural-28)
prep_through(evolved-26, processes-29)
prep_of(processes-29, regularity-31)
prep_of(processes-29, chance-33)
conj_and(regularity-31, chance-33)

(ROOT
  (S
    (NP
      (NP (DT That))
      (PP (IN of)
        (NP (NN course))))
    (, ,)
    (VP (VBZ requires)
      (S
        (NP (PRP one))
        (VP (TO to)
          (VP (VB propose)
            (NP (NNS motives)
              (CC and)
              (NNS means))
            (PP (IN for)
              (SBAR
                (WHNP (WDT which))
                (S
                  (NP (PRP we))
                  (VP (VBP have)
                    (NP (DT no) (NN evidence))))))))))
    (. .)))

nsubj(requires-5, That-1)
prep_of(That-1, course-3)
root(ROOT-0, requires-5)
nsubj(propose-8, one-6)
aux(propose-8, to-7)
xcomp(requires-5, propose-8)
dobj(propose-8, motives-9)
dobj(propose-8, means-11)
conj_and(motives-9, means-11)
dobj(have-15, which-13)
nsubj(have-15, we-14)
prepc_for(propose-8, have-15)
det(evidence-17, no-16)
dobj(have-15, evidence-17)

