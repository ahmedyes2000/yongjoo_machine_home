(ROOT
  (FRAG (: \/)
    (VP (VBD -RRB-)
      (SBAR
        (S
          (SBAR
            (WHADVP (WRB When))
            (S
              (NP (EX there))
              (VP (VBP are)
                (NP
                  (NP (NNS people))
                  (VP (VBG going)
                    (PP (IN around)
                      (S
                        (VP
                          (VP (VBG beating)
                            (PRT (RP up))
                            (NP (DT the) (JJ elderly)))
                          (CC or)
                          (VP (VBG murdering)
                            (NP (DT each) (JJ other))
                            (PP (IN for)
                              (NP
                                (NP (DT the) (NN price))
                                (PP (IN of)
                                  (NP (DT a) (CD six) (NN pack))))))
                          (, ,)
                          (CC and)
                          (VP (VBG being)
                            (VP (VBN rewarded)
                              (CONJP (RB instead) (IN of))
                              (VBN punished)))))))))))
          (, ,)
          (NP (EX there))
          (VP (VBZ is)
            (NP (DT no) (NN place)
              (S
                (VP (TO to)
                  (VP (VB go)
                    (ADVP (IN than) (RB up))))))))))
    (. .)))

punct(is-33, \/-1)
advmod(are-5, When-3)
expl(are-5, there-4)
advcl(is-33, are-5)
nsubj(are-5, people-6)
partmod(people-6, going-7)
prepc_around(going-7, beating-9)
prt(beating-9, up-10)
det(elderly-12, the-11)
dobj(beating-9, elderly-12)
prepc_around(going-7, murdering-14)
conj_or(beating-9, murdering-14)
det(other-16, each-15)
dobj(murdering-14, other-16)
det(price-19, the-18)
prep_for(murdering-14, price-19)
det(pack-23, a-21)
num(pack-23, six-22)
prep_of(price-19, pack-23)
auxpass(rewarded-27, being-26)
prepc_around(going-7, rewarded-27)
conj_and(beating-9, rewarded-27)
conj_and(beating-9, punished-30)
conj_negcc(rewarded-27, punished-30)
expl(is-33, there-32)
root(ROOT-0, is-33)
det(place-35, no-34)
nsubj(is-33, place-35)
aux(go-37, to-36)
infmod(place-35, go-37)
advmod(go-37, than-38)
advmod(than-38, up-39)

