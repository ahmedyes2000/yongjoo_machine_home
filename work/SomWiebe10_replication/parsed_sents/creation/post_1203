(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (ADVP (RB absolutely))
      (NP
        (NP (DT no) (NN proof))
        (PP (IN for)
          (NP (NNP Evolution)))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
advmod(is-2, absolutely-3)
det(proof-5, no-4)
nsubj(is-2, proof-5)
prep_for(proof-5, Evolution-7)

(ROOT
  (S
    (PP (IN Despite)
      (NP
        (NP (DT the) (NN fact))
        (SBAR (IN that)
          (S
            (NP (NNP Darwin))
            (VP (VBZ is)
              (VP (VBN hailed)
                (PP (IN as)
                  (NP
                    (NP (DT a) (NN genius))
                    (PP (IN in)
                      (NP
                        (NP (RB much))
                        (PP (IN of)
                          (NP (DT the) (JJ scientific) (NN community)))))))))))))
    (, ,)
    (NP (EX there))
    (VP (VBP are)
      (NP
        (NP (JJ many) (NNS holes))
        (PP (IN in)
          (NP (PRP$ his) (NN theory)))))
    (. .)))

det(fact-3, the-2)
prep_despite(are-19, fact-3)
complm(hailed-7, that-4)
nsubjpass(hailed-7, Darwin-5)
auxpass(hailed-7, is-6)
dep(fact-3, hailed-7)
det(genius-10, a-9)
prep_as(hailed-7, genius-10)
prep(genius-10, in-11)
pobj(in-11, much-12)
det(community-16, the-14)
amod(community-16, scientific-15)
prep_of(much-12, community-16)
expl(are-19, there-18)
root(ROOT-0, are-19)
amod(holes-21, many-20)
nsubj(are-19, holes-21)
poss(theory-24, his-23)
prep_in(holes-21, theory-24)

(ROOT
  (S
    (NP
      (NP (NNP Darwin))
      (SBAR
        (S
          (NP (PRP himself))
          (VP (VBD stated)
            (SBAR (IN that) (IN if)
              (S
                (NP (PRP it))
                (VP (VBD was)
                  (VP (VBN proven)
                    (SBAR (IN that)
                      (S
                        (NP (DT an) (NN organism))
                        (VP (MD could) (RB not)
                          (VP (VB have)
                            (VP (VBN come)
                              (S
                                (VP (TO to)
                                  (VP (VB exist)
                                    (PP (IN through)
                                      (NP (JJ slight) (, ,) (JJ successive) (NNS changes)))
                                    (PP (IN over)
                                      (NP
                                        (NP (DT a) (JJ long) (NN period))
                                        (PP (IN of)
                                          (NP (NN time)))))))))))))))))))))
    (, ,)
    (PRN (-LRB- -LRB-)
      (SBAR
        (PP (IN in)
          (NP (JJ other) (NNS words)))
        (, ,) (IN if)
        (S
          (NP (DT an) (NN organism))
          (VP (VBD was)
            (VP (VBN shown)
              (S
                (VP (TO to)
                  (VP (VB be)
                    (NP (NNP Irreducibly) (NNP Complex)))))))))
      (-RRB- -RRB-))
    (ADVP (RB then))
    (NP (PRP$ his) (NN theory))
    (VP (MD would)
      (VP (VB fall)
        (ADVP (RB apart))))
    (. .)))

nsubj(fall-49, Darwin-1)
nsubj(stated-3, himself-2)
rcmod(Darwin-1, stated-3)
complm(proven-8, that-4)
dep(proven-8, if-5)
nsubjpass(proven-8, it-6)
auxpass(proven-8, was-7)
ccomp(stated-3, proven-8)
complm(come-15, that-9)
det(organism-11, an-10)
nsubj(come-15, organism-11)
xsubj(exist-17, organism-11)
aux(come-15, could-12)
neg(come-15, not-13)
aux(come-15, have-14)
ccomp(proven-8, come-15)
aux(exist-17, to-16)
xcomp(come-15, exist-17)
amod(changes-22, slight-19)
amod(changes-22, successive-21)
prep_through(exist-17, changes-22)
det(period-26, a-24)
amod(period-26, long-25)
prep_over(exist-17, period-26)
prep_of(period-26, time-28)
dep(shown-39, in-31)
amod(words-33, other-32)
pobj(in-31, words-33)
dep(shown-39, if-35)
det(organism-37, an-36)
nsubjpass(shown-39, organism-37)
xsubj(Complex-43, organism-37)
auxpass(shown-39, was-38)
parataxis(fall-49, shown-39)
aux(Complex-43, to-40)
cop(Complex-43, be-41)
nn(Complex-43, Irreducibly-42)
xcomp(shown-39, Complex-43)
advmod(fall-49, then-45)
poss(theory-47, his-46)
nsubj(fall-49, theory-47)
aux(fall-49, would-48)
root(ROOT-0, fall-49)
advmod(fall-49, apart-50)

(ROOT
  (S
    (NP (NNP Irreducible) (NNP Complexity))
    (VP (VBZ has)
      (VP (VBN been)
        (VP (VBN proven)
          (PP (IN with)
            (NP
              (NP
                (NP (DT the) (NN example))
                (PP (IN of)
                  (NP (DT the) (NNP Flagella) (NNP Motor))))
              (, ,)
              (NP (DT an)
                (ADJP (RB extremely) (JJ intricate))
                (NN system))
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBZ requires)
                    (S
                      (NP
                        (NP (DT all) (NNS parts))
                        (PP (IN of)
                          (NP (PRP itself))))
                      (VP (TO to)
                        (VP (VB exist)
                          (PRT (RP together))
                          (SBAR (IN in) (NN order)
                            (S
                              (VP (TO to)
                                (VP (VB function))))))))))))))))
    (. .)))

nn(Complexity-2, Irreducible-1)
nsubjpass(proven-5, Complexity-2)
aux(proven-5, has-3)
auxpass(proven-5, been-4)
root(ROOT-0, proven-5)
det(example-8, the-7)
prep_with(proven-5, example-8)
det(Motor-12, the-10)
nn(Motor-12, Flagella-11)
prep_of(example-8, Motor-12)
det(system-17, an-14)
advmod(intricate-16, extremely-15)
amod(system-17, intricate-16)
appos(example-8, system-17)
nsubj(requires-19, system-17)
rcmod(example-8, requires-19)
rcmod(system-17, requires-19)
det(parts-21, all-20)
nsubj(exist-25, parts-21)
prep_of(parts-21, itself-23)
aux(exist-25, to-24)
xcomp(requires-19, exist-25)
prt(exist-25, together-26)
mark(function-30, in-27)
dep(function-30, order-28)
aux(function-30, to-29)
purpcl(exist-25, function-30)

