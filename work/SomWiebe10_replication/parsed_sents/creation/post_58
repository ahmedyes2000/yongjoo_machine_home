(ROOT
  (S
    (NP (PRP I))
    (VP (VBP am) (RB not)
      (ADJP (JJ sure))
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (NNP Highlander))
          (VP (VBZ accuses)
            (NP (PRP me))
            (PP (IN of)
              (S (RB not)
                (VP (VBG being)
                  (ADJP (JJ honest)
                    (SBAR
                      (WHADVP (WRB when))
                      (S
                        (NP (PRP I))
                        (VP (VBP provide)
                          (NP
                            (NP (DT the) (NN information))
                            (CC and)
                            (NP (PRP$ my) (NN explanation))))))))))))))
    (. .)))

nsubj(sure-4, I-1)
cop(sure-4, am-2)
neg(sure-4, not-3)
root(ROOT-0, sure-4)
advmod(accuses-7, why-5)
nsubj(accuses-7, Highlander-6)
advcl(sure-4, accuses-7)
dobj(accuses-7, me-8)
neg(honest-12, not-10)
cop(honest-12, being-11)
prepc_of(accuses-7, honest-12)
advmod(provide-15, when-13)
nsubj(provide-15, I-14)
dep(honest-12, provide-15)
det(information-17, the-16)
dobj(provide-15, information-17)
poss(explanation-20, my-19)
dobj(provide-15, explanation-20)
conj_and(information-17, explanation-20)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP have)
      (VP (VBN shown)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (DT both) (NNP IC)
              (CC and)
              (NNP CSI))
            (VP (VBP are)
              (VP (VBN based)
                (PP (IN on)
                  (NP
                    (NP (NN science) (POS 's))
                    (NN inability)
                    (S
                      (VP (TO to)
                        (VP (VB explain)
                          (NP (DT a) (JJ particular) (NN feature))
                          (S
                            (VP (TO to)
                              (VP (VB lead)
                                (PP (TO to)
                                  (NP
                                    (NP (DT a) (NN conclusion))
                                    (PP (IN of)
                                      (NP (`` ``) (NN design) ('' '')))))))))))))))))))
    (. .)))

nsubj(shown-3, I-1)
aux(shown-3, have-2)
root(ROOT-0, shown-3)
advmod(based-10, how-4)
preconj(IC-6, both-5)
nsubjpass(based-10, IC-6)
conj_and(IC-6, CSI-8)
nsubjpass(based-10, CSI-8)
auxpass(based-10, are-9)
ccomp(shown-3, based-10)
poss(inability-14, science-12)
prep_on(based-10, inability-14)
aux(explain-16, to-15)
infmod(inability-14, explain-16)
det(feature-19, a-17)
amod(feature-19, particular-18)
dobj(explain-16, feature-19)
aux(lead-21, to-20)
xcomp(explain-16, lead-21)
det(conclusion-24, a-23)
prep_to(lead-21, conclusion-24)
prep_of(conclusion-24, design-27)

(ROOT
  (S
    (ADVP (IN So) (RB far))
    (NP (PRP I))
    (VP (VBP have)
      (VP (VBN seen)
        (NP (DT no) (NN attempt))
        (PP (IN by)
          (NP (NNP Highlander)))
        (S
          (VP (TO to)
            (VP (VB refute)
              (NP
                (NP (NN anything))
                (SBAR
                  (S
                    (NP (PRP I))
                    (VP (VBD said) (, ,)
                      (S
                        (ADJP (JJ other)
                          (PP (IN than)
                            (S
                              (VP (VBG asserting)
                                (SBAR (IN that)
                                  (S
                                    (NP (PRP I))
                                    (VP (VBP am) (RB not)
                                      (VP (VBG being)
                                        (ADJP (JJ honest))))))))))))))))))))
    (. .)))

advmod(seen-5, So-1)
advmod(So-1, far-2)
nsubj(seen-5, I-3)
xsubj(refute-11, I-3)
aux(seen-5, have-4)
root(ROOT-0, seen-5)
det(attempt-7, no-6)
dobj(seen-5, attempt-7)
prep_by(seen-5, Highlander-9)
aux(refute-11, to-10)
xcomp(seen-5, refute-11)
dobj(refute-11, anything-12)
dobj(said-14, anything-12)
nsubj(said-14, I-13)
rcmod(anything-12, said-14)
dep(said-14, other-16)
prepc_than(other-16, asserting-18)
complm(honest-24, that-19)
nsubj(honest-24, I-20)
aux(honest-24, am-21)
neg(honest-24, not-22)
cop(honest-24, being-23)
ccomp(asserting-18, honest-24)

(ROOT
  (S
    (VP (VBG Telling))
    (: ...)))

root(ROOT-0, Telling-1)

