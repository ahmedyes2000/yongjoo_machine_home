(ROOT
  (S
    (PP (IN In)
      (NP (JJ other) (NNS words)))
    (, ,)
    (SBAR (IN while)
      (S
        (NP
          (NP (NN design))
          (PP (IN in)
            (NP (DT the) (JJR larger) (NN sense))))
        (VP (MD can)
          (ADVP (RB never))
          (VP (VB be)
            (VP (VBN disproven)
              (SBAR (IN since)
                (S
                  (NP (PRP we))
                  (VP (MD can)
                    (ADVP (RB always))
                    (VP (VB propose)
                      (NP
                        (NP (DT a) (NN designer))
                        (SBAR
                          (WHNP (WP who))
                          (S
                            (VP (VBD used)
                              (NP (JJ natural) (NN law)))))))))))))))
    (, ,)
    (NP (PRP it))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN shown)
          (SBAR (IN that)
            (S
              (NP (NN design))
              (VP (VBZ is) (RB not)
                (NP
                  (NP (DT a) (NN requirement))
                  (CC or)
                  (NP (DT a) (JJ necessary) (NN component)))))))))
    (. .)))

amod(words-3, other-2)
prep_in(shown-30, words-3)
mark(disproven-14, while-5)
nsubjpass(disproven-14, design-6)
det(sense-10, the-8)
amod(sense-10, larger-9)
prep_in(design-6, sense-10)
aux(disproven-14, can-11)
neg(disproven-14, never-12)
auxpass(disproven-14, be-13)
advcl(shown-30, disproven-14)
mark(propose-19, since-15)
nsubj(propose-19, we-16)
aux(propose-19, can-17)
advmod(propose-19, always-18)
advcl(disproven-14, propose-19)
det(designer-21, a-20)
dobj(propose-19, designer-21)
nsubj(used-23, designer-21)
rcmod(designer-21, used-23)
amod(law-25, natural-24)
dobj(used-23, law-25)
nsubjpass(shown-30, it-27)
aux(shown-30, can-28)
auxpass(shown-30, be-29)
root(ROOT-0, shown-30)
complm(requirement-36, that-31)
nsubj(requirement-36, design-32)
cop(requirement-36, is-33)
neg(requirement-36, not-34)
det(requirement-36, a-35)
ccomp(shown-30, requirement-36)
det(component-40, a-38)
amod(component-40, necessary-39)
ccomp(shown-30, component-40)
conj_or(requirement-36, component-40)

