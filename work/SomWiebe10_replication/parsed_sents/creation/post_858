(ROOT
  (S (`` ``)
    (NP
      (NP (PRP$ My) (JJ basic) (NN problem))
      (PP (IN with)
        (NP (`` ``)
          (NP (NN science))
          ('' '')
          (PP (IN on)
            (NP (DT these) (NNS matters))))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ is) (RB not)
            (NP (JJ true) (NN science))))))
    (. .)))

poss(problem-4, My-2)
amod(problem-4, basic-3)
nsubj(is-12, problem-4)
prep_with(problem-4, science-7)
det(matters-11, these-10)
prep_on(science-7, matters-11)
root(ROOT-0, is-12)
complm(science-18, that-13)
nsubj(science-18, it-14)
cop(science-18, is-15)
neg(science-18, not-16)
amod(science-18, true-17)
ccomp(is-12, science-18)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB think)
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP are)
              (ADJP (VBN qualified)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (NP
                        (NP (DT the) (NN arbiter))
                        (PP (IN of)
                          (NP (`` ``) (JJ true) (NN science) ('' '')))))))))))))
    (. .)))

nsubj(think-5, I-2)
aux(think-5, do-3)
neg(think-5, n't-4)
root(ROOT-0, think-5)
nsubjpass(qualified-8, you-6)
auxpass(qualified-8, are-7)
ccomp(think-5, qualified-8)
aux(arbiter-12, to-9)
cop(arbiter-12, be-10)
det(arbiter-12, the-11)
xcomp(qualified-8, arbiter-12)
amod(science-16, true-15)
prep_of(arbiter-12, science-16)

