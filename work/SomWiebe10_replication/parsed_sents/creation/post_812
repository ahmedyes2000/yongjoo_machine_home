(ROOT
  (S (`` ``)
    (NP (NNP Science))
    (VP (VBZ is)
      (VP (VBN based)
        (PP (IN on)
          (SBAR
            (WHNP (WP what))
            (S
              (VP (MD can)
                (VP (VB be)
                  (VP (VBN observed)
                    (NP
                      (NP (NNP \/))
                      (VP (VBN tested)))))))))))
    (. .)))

nsubjpass(based-4, Science-2)
auxpass(based-4, is-3)
root(ROOT-0, based-4)
nsubjpass(observed-9, what-6)
aux(observed-9, can-7)
auxpass(observed-9, be-8)
prepc_on(based-4, observed-9)
dobj(observed-9, \/-10)
partmod(\/-10, tested-11)

(ROOT
  (S
    (ADVP (IN So) (RB far))
    (NP
      (NP (DT every) (JJ observable) (NN area))
      (PP (IN of)
        (NP (DT the) (NN universe))))
    (VP (VBZ obeys)
      (NP (DT the) (JJ same) (NNS laws))
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP observe)
            (PP (IN on)
              (NP (NN earth)))))))
    (. .)))

advmod(obeys-9, So-1)
advmod(So-1, far-2)
det(area-5, every-3)
amod(area-5, observable-4)
nsubj(obeys-9, area-5)
det(universe-8, the-7)
prep_of(area-5, universe-8)
root(ROOT-0, obeys-9)
det(laws-12, the-10)
amod(laws-12, same-11)
dobj(obeys-9, laws-12)
complm(observe-15, that-13)
nsubj(observe-15, we-14)
ccomp(obeys-9, observe-15)
prep_on(observe-15, earth-17)

(ROOT
  (S ('' '')
    (PP (IN Then)
      (NP (NN problem)))
    (, ,)
    (ADVP (RB though))
    (, ,)
    (VP (VBZ is)
      (NP (DT the) (NN assumption))
      (SBAR (IN that)
        (S
          (NP
            (NP (DT the) (JJ operational) (NNS laws))
            (PP (IN of)
              (NP (DT the) (NN universe))))
          (VP (VBP are)
            (NP
              (NP (DT the) (JJ same) (NNS laws))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBD brought)
                    (NP (DT the) (NN universe))
                    (PP (IN into)
                      (NP (NN existence)))))))))))
    (. .)))

prep_then(assumption-9, problem-3)
advmod(assumption-9, though-5)
cop(assumption-9, is-7)
det(assumption-9, the-8)
root(ROOT-0, assumption-9)
complm(laws-20, that-10)
det(laws-13, the-11)
amod(laws-13, operational-12)
nsubj(laws-20, laws-13)
det(universe-16, the-15)
prep_of(laws-13, universe-16)
cop(laws-20, are-17)
det(laws-20, the-18)
amod(laws-20, same-19)
ccomp(assumption-9, laws-20)
nsubj(brought-22, laws-20)
rcmod(laws-20, brought-22)
det(universe-24, the-23)
dobj(brought-22, universe-24)
prep_into(brought-22, existence-26)

(ROOT
  (S
    (NP (DT That))
    (VP (MD would)
      (VP (VB be)
        (PP (IN like)
          (S
            (VP (VBG assuming)
              (SBAR (IN that)
                (S
                  (NP (DT the))
                  (VP (VBZ processes)
                    (SBAR (IN that)
                      (S
                        (NP
                          (NP (NN operation))
                          (PP (IN in)
                            (NP (PRP$ my)
                              (NX (NNP Chevy)))))
                        (VP (VBP are)
                          (NP
                            (NP (DT the) (JJ same) (NNS processes))
                            (SBAR
                              (WHNP (WDT which))
                              (S
                                (VP (VBD brought)
                                  (NP (DT the) (NN car))
                                  (PP (IN into)
                                    (NP (NN existence)))
                                  (PP (IN in)
                                    (NP (DT the) (JJ first) (NN place))))))))))))))))))
    (. .)))

nsubj(be-3, That-1)
aux(be-3, would-2)
root(ROOT-0, be-3)
prepc_like(be-3, assuming-5)
complm(processes-8, that-6)
nsubj(processes-8, the-7)
ccomp(assuming-5, processes-8)
complm(processes-17, that-9)
nsubj(processes-17, operation-10)
poss(Chevy-13, my-12)
prep_in(operation-10, Chevy-13)
cop(processes-17, are-14)
det(processes-17, the-15)
amod(processes-17, same-16)
ccomp(processes-8, processes-17)
nsubj(brought-19, processes-17)
rcmod(processes-17, brought-19)
det(car-21, the-20)
dobj(brought-19, car-21)
prep_into(brought-19, existence-23)
det(place-27, the-25)
amod(place-27, first-26)
prep_in(brought-19, place-27)

(ROOT
  (S
    (NP (NN Anyone))
    (VP (MD would)
      (VP (VB say)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ 's)
              (NP (DT a)
                (ADJP (JJ crazy) (, ,) (JJ flawed) (, ,)
                  (CC and)
                  (RB obviously) (JJ wrong))
                (NN assumption)))))))
    (. .)))

nsubj(say-3, Anyone-1)
aux(say-3, would-2)
root(ROOT-0, say-3)
nsubj(assumption-14, it-4)
cop(assumption-14, 's-5)
det(assumption-14, a-6)
dep(wrong-13, crazy-7)
conj_and(wrong-13, flawed-9)
amod(assumption-14, flawed-9)
advmod(wrong-13, obviously-12)
conj_and(wrong-13, obviously-12)
amod(assumption-14, obviously-12)
amod(assumption-14, wrong-13)
ccomp(say-3, assumption-14)

