(ROOT
  (S
    (NP (NNP Behe))
    (VP (VBZ asserts) (: :) (`` ``)
      (S
        (NP (NNP Design))
        (VP (VBZ is)
          (VP (VBN recognized)
            (PP (IN in)
              (NP
                (NP (DT the) (JJ purposeful) (NN arrangement))
                (PP (IN of)
                  (NP (NNS parts))))))))
      ('' '')
      (SBAR
        (WHNP (WP Who))
        (S
          (VP (VBZ decides)
            (SBAR (IN if)
              (S
                (NP
                  (NP (DT an) (`` ``) (NN arrangement))
                  (PP (IN of)
                    (NP (NNS parts))))
                ('' '')
                (VP (VBZ is) (`` ``)
                  (ADJP (JJ purposeful))
                  ('' ''))))))))
    (. ?)))

nsubj(asserts-2, Behe-1)
root(ROOT-0, asserts-2)
nsubjpass(recognized-7, Design-5)
auxpass(recognized-7, is-6)
ccomp(asserts-2, recognized-7)
det(arrangement-11, the-9)
amod(arrangement-11, purposeful-10)
prep_in(recognized-7, arrangement-11)
prep_of(arrangement-11, parts-13)
nsubj(decides-16, Who-15)
ccomp(asserts-2, decides-16)
mark(purposeful-26, if-17)
det(arrangement-20, an-18)
nsubj(purposeful-26, arrangement-20)
prep_of(arrangement-20, parts-22)
cop(purposeful-26, is-24)
advcl(decides-16, purposeful-26)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ (VBZ does)
      (NP (`` ``) (NN purposeful) ('' ''))
      (ADVP (RB really))
      (VP (VB mean)
        (PP (IN in)
          (NP (DT that) (NN statement)))))
    (. ?)))

dobj(mean-7, What-1)
aux(mean-7, does-2)
nsubj(mean-7, purposeful-4)
advmod(mean-7, really-6)
root(ROOT-0, mean-7)
det(statement-10, that-9)
prep_in(mean-7, statement-10)

(ROOT
  (NP (DT A) (JJ benzene) (NN molecule) (. ?)))

det(molecule-3, A-1)
amod(molecule-3, benzene-2)
root(ROOT-0, molecule-3)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (MD can)
      (NP (PRP you))
      (VP (VB tell)))
    (. ?)))

advmod(tell-4, How-1)
aux(tell-4, can-2)
nsubj(tell-4, you-3)
root(ROOT-0, tell-4)

(ROOT
  (S
    (S
      (VP (VBG Waving)
        (NP (PRP$ your) (NNS hands))))
    (CC and)
    (S
      (S
        (VP (VBG saying) ('' '')
          (NP (PRP I))))
      (VP (VBP know)
        (NP (NN design))
        (SBAR
          (WHADVP (WRB when))
          (S
            (S
              (NP (PRP I))
              (VP (VBP see)
                (NP (PRP it))))
            ('' '')
            (CC and)
            (`` ``)
            (S
              (NP (DT all) (NN life))
              (VP (VBD was)
                (ADVP (RB obviously))
                (VP (VBN designed) ('' '')
                  (SBAR (RB just)
                    (S
                      (VP (MD wo) (RB n't)
                        (VP (VB cut)
                          (NP (PRP it)))))))))))))
    (. .)))

root(ROOT-0, Waving-1)
poss(hands-3, your-2)
dobj(Waving-1, hands-3)
csubj(know-8, saying-5)
dobj(saying-5, I-7)
conj_and(Waving-1, know-8)
dobj(know-8, design-9)
advmod(see-12, when-10)
nsubj(see-12, I-11)
advcl(know-8, see-12)
dobj(see-12, it-13)
det(life-18, all-17)
nsubjpass(designed-21, life-18)
auxpass(designed-21, was-19)
advmod(designed-21, obviously-20)
advcl(know-8, designed-21)
conj_and(see-12, designed-21)
advmod(cut-26, just-23)
aux(cut-26, wo-24)
neg(cut-26, n't-25)
ccomp(designed-21, cut-26)
dobj(cut-26, it-27)

(ROOT
  (S
    (NP
      (NP (PRP$ Your) (JJ religious) (NNS motives))
      (PP (IN in)
        (S
          (VP (VBG assuming)
            (NP (PRP$ your) (JJ religious) (NN designer))))))
    (VP (VBP are)
      (ADJP (RB too) (JJ obvious)
        (S
          (VP (TO to)
            (VP (VB allow)
              (NP (PRP$ your) (NN judgment)
                (S
                  (VP (TO to)
                    (VP (VB go)
                      (ADJP (JJ unquestioned)))))))))))
    (. .)))

poss(motives-3, Your-1)
amod(motives-3, religious-2)
nsubj(obvious-11, motives-3)
prepc_in(motives-3, assuming-5)
poss(designer-8, your-6)
amod(designer-8, religious-7)
dobj(assuming-5, designer-8)
cop(obvious-11, are-9)
advmod(obvious-11, too-10)
root(ROOT-0, obvious-11)
aux(allow-13, to-12)
xcomp(obvious-11, allow-13)
poss(judgment-15, your-14)
dobj(allow-13, judgment-15)
aux(go-17, to-16)
infmod(judgment-15, go-17)
acomp(go-17, unquestioned-18)

(ROOT
  (S
    (S
      (NP (NNP Behe))
      (ADVP (RB further))
      (VP (VBZ asserts)))
    (: :) (`` ``)
    (S (CC and)
      (NP (DT the) (NN cell))
      (VP (VBZ exhibits)
        (NP
          (NP (DT the) (RBS most) (JJ profound) (JJ purposeful) (NN arrangement))
          (PP (IN of)
            (NP (NNS parts))))
        (PP (IN in)
          (NP (DT the) (NN universe)))
        ('' '')))
    (. .)))

nsubj(asserts-3, Behe-1)
advmod(asserts-3, further-2)
root(ROOT-0, asserts-3)
cc(exhibits-9, and-6)
det(cell-8, the-7)
nsubj(exhibits-9, cell-8)
ccomp(asserts-3, exhibits-9)
det(arrangement-14, the-10)
advmod(arrangement-14, most-11)
amod(arrangement-14, profound-12)
amod(arrangement-14, purposeful-13)
dobj(exhibits-9, arrangement-14)
prep_of(arrangement-14, parts-16)
det(universe-19, the-18)
prep_in(exhibits-9, universe-19)

(ROOT
  (S
    (ADVP (RB There))
    (NP (PRP you))
    (VP (VBP go)
      (ADVP (RB again))
      (, ,)
      (S
        (VP (VBG using)
          (S
            (NP (DT that) (NN word))
            (`` ``)
            (ADJP (JJ purposeful))
            ('' '')))))
    (. .)))

advmod(go-3, There-1)
nsubj(go-3, you-2)
root(ROOT-0, go-3)
advmod(go-3, again-4)
xcomp(go-3, using-6)
det(word-8, that-7)
dep(purposeful-10, word-8)
dep(using-6, purposeful-10)

(ROOT
  (S
    (INTJ (UH Well))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (ADJP (RB really) (JJ good))
      (NP (`` ``) (JJ public) (NNS relations) ('' '')
        (S
          (VP (TO to)
            (VP (VB appeal)
              (PP (TO to)
                (NP (JJ religious) (NNS people)))
              (PP (IN with)
                (NP (PDT such) (DT an) (NN assertion))))))))
    (. .)))

dep(good-6, Well-1)
nsubj(good-6, it-3)
cop(good-6, 's-4)
advmod(good-6, really-5)
root(ROOT-0, good-6)
amod(relations-9, public-8)
attr(good-6, relations-9)
aux(appeal-12, to-11)
infmod(relations-9, appeal-12)
amod(people-15, religious-14)
prep_to(appeal-12, people-15)
predet(assertion-19, such-17)
det(assertion-19, an-18)
prep_with(appeal-12, assertion-19)

(ROOT
  (S (CC But)
    (NP (NNS scientists))
    (VP (VBP are)
      (VP (VBN unimpressed)))
    (. .)))

cc(unimpressed-4, But-1)
nsubjpass(unimpressed-4, scientists-2)
auxpass(unimpressed-4, are-3)
root(ROOT-0, unimpressed-4)

(ROOT
  (S
    (ADVP (RB Maybe))
    (NP
      (NP (NNS cells))
      (CC and)
      (NP (NNS prions)
        (CC and)
        (NNS lifeforms)))
    (VP (VBP have)
      (NP
        (NP (DT a) (`` ``) (NN purpose) ('' ''))
        (SBAR
          (S
            (VP (TO to)
              (VP
                (VP (VB grow)
                  (CC and)
                  (VB reproduce))
                (CC and)
                (VP (VB evolve)
                  (SBAR (CC but)
                    (S
                      (SBAR (IN unless)
                        (S
                          (NP (PRP you))
                          (VP (MD can)
                            (VP (VB show)
                              (SBAR (IN that)
                                (S
                                  (NP (EX there))
                                  (VP (VBZ is)
                                    (ADVP (RB really))
                                    (NP
                                      (NP (DT a) (`` ``) (NN need) ('' ''))
                                      (PP (IN for)
                                        (NP (DT a) (NN designer)))))))))))
                      (, ,)
                      (NP (EX there))
                      (VP (VBZ is)
                        (NP (DT no) (NN reason)
                          (S
                            (VP (TO to)
                              (VP (VB assume)
                                (SBAR (IN that)
                                  (S
                                    (NP (EX there))
                                    (VP (VBD was)
                                      (NP (CD one)))))))))))))))))))
    (. .)))

advmod(have-7, Maybe-1)
nsubj(have-7, cells-2)
conj_and(cells-2, prions-4)
nsubj(have-7, prions-4)
conj_and(cells-2, lifeforms-6)
conj_and(prions-4, lifeforms-6)
root(ROOT-0, have-7)
det(purpose-10, a-8)
dobj(have-7, purpose-10)
aux(grow-13, to-12)
infmod(purpose-10, grow-13)
infmod(purpose-10, reproduce-15)
conj_and(grow-13, reproduce-15)
infmod(purpose-10, evolve-17)
conj_and(grow-13, evolve-17)
cc(is-36, but-18)
mark(show-22, unless-19)
nsubj(show-22, you-20)
aux(show-22, can-21)
advcl(is-36, show-22)
complm(is-25, that-23)
expl(is-25, there-24)
ccomp(show-22, is-25)
advmod(is-25, really-26)
det(need-29, a-27)
nsubj(is-25, need-29)
det(designer-33, a-32)
prep_for(need-29, designer-33)
expl(is-36, there-35)
ccomp(evolve-17, is-36)
det(reason-38, no-37)
nsubj(is-36, reason-38)
aux(assume-40, to-39)
infmod(reason-38, assume-40)
complm(was-43, that-41)
expl(was-43, there-42)
ccomp(assume-40, was-43)
nsubj(was-43, one-44)

(ROOT
  (S (IN So)
    (NP (PRP$ your) (NN task))
    (VP (VBZ remains)
      (ADJP (JJ impossible)
        (SBAR
          (S (`` ``)
            (S
              (VP (VB prove)))
            ('' '')
            (NP (DT that) (NN evolution))
            (VP (MD can) (RB not)
              (VP (VB have)
                (VP (VBN produced)
                  (NP (`` ``)
                    (NP (DT this))
                    ('' '')
                    (PP (IN over)
                      (NP (DT the) (JJ last)
                        (QP (CD 3) (CD billion))
                        (NNS years)))))))))))
    (. .)))

dep(impossible-5, So-1)
poss(task-3, your-2)
nsubj(impossible-5, task-3)
cop(impossible-5, remains-4)
root(ROOT-0, impossible-5)
ccomp(produced-14, prove-7)
det(evolution-10, that-9)
nsubj(produced-14, evolution-10)
aux(produced-14, can-11)
neg(produced-14, not-12)
aux(produced-14, have-13)
dep(impossible-5, produced-14)
dobj(produced-14, this-16)
det(years-23, the-19)
amod(years-23, last-20)
number(billion-22, 3-21)
num(years-23, billion-22)
prep_over(this-16, years-23)

(ROOT
  (SQ
    (VP
      (VP (VB Go)
        (PRT (RP back))
        (NP
          (QP (CD 3) (CD billion))
          (NNS years)))
      (CC and)
      (VP (VB prove)
        (SBAR (IN that)
          (S
            (NP (DT a) (`` ``) (NN cell) ('' ''))
            (VP (VBD did) (RB not)
              (VP (VB evolve)
                (PP (IN from)
                  (NP (NN something))))))))
      (NP (JJR simpler)))
    (. ?)))

root(ROOT-0, Go-1)
prt(Go-1, back-2)
number(billion-4, 3-3)
num(years-5, billion-4)
tmod(Go-1, years-5)
conj_and(Go-1, prove-7)
complm(evolve-15, that-8)
det(cell-11, a-9)
nsubj(evolve-15, cell-11)
aux(evolve-15, did-13)
neg(evolve-15, not-14)
ccomp(prove-7, evolve-15)
prep_from(evolve-15, something-17)
dobj(Go-1, simpler-18)

(ROOT
  (SQ (VBP Do)
    (NP (DT the) (NNS parts))
    (VP (VB have)
      (NP (`` ``) (NN purpose) ('' '')))
    (. ?)))

aux(have-4, Do-1)
det(parts-3, the-2)
nsubj(have-4, parts-3)
root(ROOT-0, have-4)
dobj(have-4, purpose-6)

(ROOT
  (S (CC Or)
    (S
      (VP
        (VP (VB wave)
          (NP (PRP$ your) (NNS hands)))
        (CC and)
        (VP (VB say) ('' '')
          (NP (PRP I)))))
    (VP (VBP do) (RB n't)
      (VP (VB believe)
        (SBAR
          (S
            (NP (PRP it))
            (VP (MD could)
              (VP (VB have)
                (VP (VBN happened) ('' ''))))))))
    (. ?)))

cc(believe-11, Or-1)
csubj(believe-11, wave-2)
poss(hands-4, your-3)
dobj(wave-2, hands-4)
conj_and(wave-2, say-6)
csubj(believe-11, say-6)
dobj(say-6, I-8)
aux(believe-11, do-9)
neg(believe-11, n't-10)
root(ROOT-0, believe-11)
nsubj(happened-15, it-12)
aux(happened-15, could-13)
aux(happened-15, have-14)
ccomp(believe-11, happened-15)

(ROOT
  (SQ (NNP Does)
    (NP (DT the) (`` ``) (NN arrangement) ('' ''))
    (VP (VB have)
      (NP (NN purpose)))
    (. ?)))

dep(have-6, Does-1)
det(arrangement-4, the-2)
nsubj(have-6, arrangement-4)
root(ROOT-0, have-6)
dobj(have-6, purpose-7)

(ROOT
  (SQ (VBD Did)
    (NP (DT the) (NN designer))
    (VP (VB have)
      (NP (`` ``) (NN purpose) ('' '')))
    (. ?)))

aux(have-4, Did-1)
det(designer-3, the-2)
nsubj(have-4, designer-3)
root(ROOT-0, have-4)
dobj(have-4, purpose-6)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP I))
        (VP
          (VP (VB take)
            (NP (DT an) (JJ old) (NN wristwatch)))
          (CC and)
          (VP (VB remove)
            (NP (PDT all) (DT the) (NNS springs)
              (CC and)
              (NNS gears)))
          (CC and)
          (VP (VB arrange)
            (NP (PRP them))
            (PP (IN in)
              (NP (DT a) (NN circle)))))))
    (, ,)
    (SQ (VBZ is)
      (NP (DT the) (NN circle))
      (VP (VBN designed)))
    (. ?)))

mark(take-3, If-1)
nsubj(take-3, I-2)
nsubj(remove-8, I-2)
nsubj(arrange-15, I-2)
advcl(designed-24, take-3)
det(wristwatch-6, an-4)
amod(wristwatch-6, old-5)
dobj(take-3, wristwatch-6)
conj_and(take-3, remove-8)
advcl(designed-24, remove-8)
dep(springs-11, all-9)
det(springs-11, the-10)
dobj(remove-8, springs-11)
dobj(remove-8, gears-13)
conj_and(springs-11, gears-13)
conj_and(take-3, arrange-15)
advcl(designed-24, arrange-15)
dobj(arrange-15, them-16)
det(circle-19, a-18)
prep_in(arrange-15, circle-19)
auxpass(designed-24, is-21)
det(circle-23, the-22)
nsubjpass(designed-24, circle-23)
root(ROOT-0, designed-24)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP I))
        (VP (VBP throw)
          (NP (PRP them))
          (PP (IN in)
            (NP (DT a) (NN heap))))))
    (, ,)
    (SQ (VBP are)
      (NP
        (NP (DT all))
        (PP (IN of)
          (NP
            (NP (DT the) (NNS parts))
            (PP (IN of)
              (NP (DT the) (NN watch))))))
      (VP
        (ADVP (RB no) (RB longer))
        (VBN designed)))
    (. ?)))

mark(throw-3, If-1)
nsubj(throw-3, I-2)
advcl(designed-19, throw-3)
dobj(throw-3, them-4)
det(heap-7, a-6)
prep_in(throw-3, heap-7)
auxpass(designed-19, are-9)
nsubjpass(designed-19, all-10)
det(parts-13, the-12)
prep_of(all-10, parts-13)
det(watch-16, the-15)
prep_of(parts-13, watch-16)
advmod(longer-18, no-17)
advmod(designed-19, longer-18)
root(ROOT-0, designed-19)

(ROOT
  (SQ
    (SBAR (IN If)
      (S
        (NP (PRP I))
        (VP
          (VP (VB pick)
            (PRT (RP up))
            (NP
              (NP (DT some) (NN metal) (NNS shavings))
              (PP (RB off) (IN of)
                (NP (DT the) (NN floor))))
            (PP (IN from) (IN under)
              (NP
                (NP (DT the) (NN lathe))
                (PP (IN in)
                  (NP (DT the) (NN machine) (NN shop))))))
          (CC and)
          (VP (VB arrange)
            (NP (PRP them))
            (PP (IN into)
              (NP (DT a) (JJ complicated) (JJ mathematical) (NN pattern)))
            (SBAR (IN that)
              (S
                (NP (PRP I))
                (VP (VBD generated)
                  (S
                    (VP (VBG using)
                      (NP (DT a) (NN computer) (NN program)))))))))))
    (, ,) (MD can)
    (NP (PRP you))
    (VP (VB tell)
      (SBAR (IN if)
        (S
          (NP (DT this))
          (VP (VBZ is)
            (NP
              (NP (DT a) (`` ``) (JJ purposeful) (NN design) ('' ''))
              (CC or)
              (NP (RB just) (DT a) (`` ``) (JJ random) (NN design) ('' '')))))))
    (. ?)))

mark(pick-3, If-1)
nsubj(pick-3, I-2)
nsubj(arrange-21, I-2)
advcl(tell-38, pick-3)
prt(pick-3, up-4)
det(shavings-7, some-5)
nn(shavings-7, metal-6)
dobj(pick-3, shavings-7)
det(floor-11, the-10)
prep_off_of(shavings-7, floor-11)
dep(pick-3, from-12)
det(lathe-15, the-14)
prep_under(pick-3, lathe-15)
det(shop-19, the-17)
nn(shop-19, machine-18)
prep_in(lathe-15, shop-19)
conj_and(pick-3, arrange-21)
advcl(tell-38, arrange-21)
dobj(arrange-21, them-22)
det(pattern-27, a-24)
amod(pattern-27, complicated-25)
amod(pattern-27, mathematical-26)
prep_into(arrange-21, pattern-27)
complm(generated-30, that-28)
nsubj(generated-30, I-29)
ccomp(arrange-21, generated-30)
xcomp(generated-30, using-31)
det(program-34, a-32)
nn(program-34, computer-33)
dobj(using-31, program-34)
aux(tell-38, can-36)
nsubj(tell-38, you-37)
root(ROOT-0, tell-38)
mark(design-45, if-39)
nsubj(design-45, this-40)
cop(design-45, is-41)
det(design-45, a-42)
amod(design-45, purposeful-44)
advcl(tell-38, design-45)
advmod(design-52, just-48)
det(design-52, a-49)
amod(design-52, random-51)
advcl(tell-38, design-52)
conj_or(design-45, design-52)

(ROOT
  (SQ (VBZ Is)
    (NP (DT a) (NN virus))
    (VP (VBN designed))
    (. ?)))

auxpass(designed-4, Is-1)
det(virus-3, a-2)
nsubjpass(designed-4, virus-3)
root(ROOT-0, designed-4)

(ROOT
  (NP (DT A) (NN prion) (. ?)))

det(prion-2, A-1)
root(ROOT-0, prion-2)

(ROOT
  (NP
    (NP (DT A) (NN fragment))
    (PP (IN of)
      (NP (NNP RNA)))
    (. ?)))

det(fragment-2, A-1)
root(ROOT-0, fragment-2)
prep_of(fragment-2, RNA-4)

