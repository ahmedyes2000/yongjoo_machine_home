(ROOT
  (S
    (NP (NNP Let) (POS 's))
    (ADVP (RB just))
    (VP (VBD cut)
      (PP (TO to)
        (NP (DT the) (NN chase)))
      (: :)
      (S
        (S
          (NP (NNP ID))
          (VP (VBZ does) (RB not)
            (VP (VB perform)
              (NP (DT any) (JJ empirical)
                (CC and)
                (JJ statistical) (NNS verifications)))))
        (, ,)
        (ADVP (IN at) (JJS best))
        (S
          (NP (PRP they))
          (VP (MD could)
            (VP (VB perform)
              (NP
                (NP (JJ statistical) (NNS falsifications))
                (PP (IN of)
                  (NP (DT a) (JJ particular) (JJ scientific) (NNS hypothesis)))))))
        (CC but)
        (S
          (NP (RB even) (DT the) (JJS simplest) (NNS hypotheses))
          (VP (VBP are) (RB not)
            (VP
              (ADVP (RB easily))
              (VBN captured)
              (UCP
                (PP (IN in)
                  (NP (NNS statistics)))
                (CC and)
                (RB thus)
                (SBAR
                  (S
                    (NP (NNP ID))
                    (VP (VBZ has)
                      (VP (VBN found)
                        (SBAR (IN that)
                          (S
                            (NP
                              (NP (JJS most) (NNS examples))
                              (PP (IN of)
                                (NP
                                  (ADJP (RB supposedly) (`` ``) (JJ designed) ('' ''))
                                  (NNS systems))))
                            (, ,)
                            (VP (MD can) (RB not)
                              (ADVP (RB really))
                              (VP (VB be)
                                (VP (VBN tested)
                                  (S
                                    (VP (VBG using)
                                      (NP (NNP ID) (NN methodology)))))))))))))))))))
    (. .)))

nsubj(cut-4, Let-1)
possessive(Let-1, 's-2)
advmod(cut-4, just-3)
root(ROOT-0, cut-4)
det(chase-7, the-6)
prep_to(cut-4, chase-7)
nsubj(perform-12, ID-9)
aux(perform-12, does-10)
neg(perform-12, not-11)
parataxis(cut-4, perform-12)
det(verifications-17, any-13)
amod(verifications-17, empirical-14)
conj_and(empirical-14, statistical-16)
amod(verifications-17, statistical-16)
dobj(perform-12, verifications-17)
parataxis(cut-4, at-19)
advmod(perform-12, at-19)
conj_but(perform-12, at-19)
pobj(at-19, best-20)
nsubj(perform-23, they-21)
aux(perform-23, could-22)
dep(perform-12, perform-23)
amod(falsifications-25, statistical-24)
dobj(perform-23, falsifications-25)
det(hypothesis-30, a-27)
amod(hypothesis-30, particular-28)
amod(hypothesis-30, scientific-29)
prep_of(falsifications-25, hypothesis-30)
advmod(hypotheses-35, even-32)
det(hypotheses-35, the-33)
amod(hypotheses-35, simplest-34)
nsubjpass(captured-39, hypotheses-35)
auxpass(captured-39, are-36)
neg(captured-39, not-37)
advmod(captured-39, easily-38)
parataxis(cut-4, captured-39)
conj_but(perform-12, captured-39)
dep(captured-39, in-40)
pobj(in-40, statistics-41)
dep(captured-39, thus-43)
conj_and(in-40, thus-43)
nsubj(found-46, ID-44)
aux(found-46, has-45)
dep(in-40, found-46)
complm(tested-61, that-47)
amod(examples-49, most-48)
nsubjpass(tested-61, examples-49)
advmod(designed-53, supposedly-51)
amod(systems-55, designed-53)
prep_of(examples-49, systems-55)
aux(tested-61, can-57)
neg(tested-61, not-58)
advmod(tested-61, really-59)
auxpass(tested-61, be-60)
ccomp(found-46, tested-61)
xcomp(tested-61, using-62)
nn(methodology-64, ID-63)
dobj(using-62, methodology-64)

(ROOT
  (S (RB So)
    (VP (VB let)
      (S
        (NP (POS 's))
        (VP (VB be)
          (VP (VBN upfront)
            (ADVP (RB here))
            (PP (IN about)
              (SBAR
                (WHNP (WP what))
                (S
                  (S
                    (NP (NNP ID))
                    (ADVP (RB really))
                    (VP (VBZ is)))
                  (: :)
                  (S
                    (NP (PRP It))
                    (VP (VBZ 's)
                      (NP (DT the) (NN argument))
                      (SBAR (IN that)
                        (WHADVP (WRB when))
                        (S
                          (NP (PRP we))
                          (VP (VBP do) (RB not)
                            (ADVP (RB fully))
                            (VP (VB understand)
                              (SBAR
                                (WHADVP (WRB how))
                                (S
                                  (NP (NN something))
                                  (VP (VBD arose))))))))
                      (, ,)
                      (SBAR (IN that)
                        (S
                          (NP (PRP$ our) (NN default) (NN position))
                          (VP (MD should)
                            (VP (VB be) (`` ``)
                              (VP (VBN designed) ('' '')
                                (SBAR (RB not)
                                  (S (`` ``)
                                    (NP (PRP we))
                                    (VP (VBP do) (RB n't)
                                      (VP (VB know)))
                                    ('' '')))))))))))))))))
    (. .)))

advmod(let-2, So-1)
root(ROOT-0, let-2)
nsubjpass(upfront-5, 's-3)
auxpass(upfront-5, be-4)
ccomp(let-2, upfront-5)
advmod(upfront-5, here-6)
dep(is-11, what-8)
nsubj(is-11, ID-9)
advmod(is-11, really-10)
prepc_about(upfront-5, is-11)
nsubj(argument-16, It-13)
cop(argument-16, 's-14)
det(argument-16, the-15)
parataxis(is-11, argument-16)
complm(understand-23, that-17)
advmod(understand-23, when-18)
nsubj(understand-23, we-19)
aux(understand-23, do-20)
neg(understand-23, not-21)
advmod(understand-23, fully-22)
ccomp(argument-16, understand-23)
advmod(arose-26, how-24)
nsubj(arose-26, something-25)
ccomp(understand-23, arose-26)
complm(designed-35, that-28)
poss(position-31, our-29)
nn(position-31, default-30)
nsubjpass(designed-35, position-31)
aux(designed-35, should-32)
auxpass(designed-35, be-33)
ccomp(argument-16, designed-35)
dep(know-42, not-37)
nsubj(know-42, we-39)
aux(know-42, do-40)
neg(know-42, n't-41)
ccomp(designed-35, know-42)

(ROOT
  (S
    (SBAR (IN Once)
      (S
        (NP (PRP we))
        (VP (VBP agree)
          (PP (IN on)
            (NP (DT this) (JJ simple) (NN fact))))))
    (, ,)
    (NP (PRP we))
    (VP (MD can)
      (VP (VB see)
        (SBAR (IN if)
          (S
            (NP
              (NP (DT the) (NNP Judge) (POS 's))
              (NN ruling))
            (VP (VBD had)
              (NP (DT a) (JJ solid) (NN foundation)))))))
    (. .)))

mark(agree-3, Once-1)
nsubj(agree-3, we-2)
advcl(see-11, agree-3)
det(fact-7, this-5)
amod(fact-7, simple-6)
prep_on(agree-3, fact-7)
nsubj(see-11, we-9)
aux(see-11, can-10)
root(ROOT-0, see-11)
mark(had-17, if-12)
det(Judge-14, the-13)
poss(ruling-16, Judge-14)
nsubj(had-17, ruling-16)
advcl(see-11, had-17)
det(foundation-20, a-18)
amod(foundation-20, solid-19)
dobj(had-17, foundation-20)

(ROOT
  (S
    (NP
      (NP (NNP First))
      (PP (IN of)
        (NP (DT all))))
    (PRN (, ,)
      (S
        (NP (DT the) (NN judge))
        (VP (VBD observed)
          (SBAR (IN that)
            (S
              (NP (DT the) (NN school) (NN board))
              (VP (VBD was)
                (ADVP (RB strongly))
                (VP (VBN motivated)
                  (PP (IN by)
                    (NP
                      (NP (JJ religious) (NNS beliefs))
                      (CC and)
                      (NP (DT the) (NN fact))))
                  (SBAR (IN that)
                    (S
                      (NP (PRP they))
                      (VP (VBD believed)
                        (SBAR (IN that)
                          (S
                            (NP (NNP ID))
                            (VP (VBD presented)
                              (NP
                                (NP (DT a) (JJ scientific) (NNS hypothesis))
                                (CC and)
                                (ADVP (RB thus))
                                (NP (DT a) (JJ valid) (NN secular) (NN purpose)))))))))))))))
      (, ,))
    (VP (VBD was)
      (NP (PRP$ their) (NN downfall))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (DT the) (NNP Judge))
          (VP (VBD showed)
            (NP (RB not) (RB only))
            (SBAR
              (WHADVP (WRB how))
              (S
                (NP (NNP ID))
                (VP (VBZ is)
                  (ADJP
                    (ADJP (RB tightly) (VBN linked)
                      (PP (TO to)
                        (NP
                          (NP (JJ religious) (NNS motivations))
                          (PRN (-LRB- -LRB-)
                            (NP (DT the) (NNP Wedge))
                            (-RRB- -RRB-)))))
                    (PRN (CC but)
                      (ADVP (RB also)))
                    (SBAR (IN that)
                      (S
                        (PP (IN as)
                          (NP (DT a) (NN science)))
                        (NP (PRP it))
                        (VP (VBD lacked)
                          (NP (DT any) (NN content)))))))))))))
    (. .)))

nsubj(downfall-39, First-1)
prep_of(First-1, all-3)
det(judge-6, the-5)
nsubj(observed-7, judge-6)
parataxis(downfall-39, observed-7)
complm(motivated-14, that-8)
det(board-11, the-9)
nn(board-11, school-10)
nsubjpass(motivated-14, board-11)
auxpass(motivated-14, was-12)
advmod(motivated-14, strongly-13)
ccomp(observed-7, motivated-14)
amod(beliefs-17, religious-16)
agent(motivated-14, beliefs-17)
det(fact-20, the-19)
agent(motivated-14, fact-20)
conj_and(beliefs-17, fact-20)
complm(believed-23, that-21)
nsubj(believed-23, they-22)
ccomp(motivated-14, believed-23)
complm(presented-26, that-24)
nsubj(presented-26, ID-25)
ccomp(believed-23, presented-26)
det(hypothesis-29, a-27)
amod(hypothesis-29, scientific-28)
dobj(presented-26, hypothesis-29)
dobj(presented-26, thus-31)
advmod(hypothesis-29, thus-31)
conj_and(hypothesis-29, thus-31)
det(purpose-35, a-32)
amod(purpose-35, valid-33)
nn(purpose-35, secular-34)
dobj(presented-26, purpose-35)
conj_and(hypothesis-29, purpose-35)
cop(downfall-39, was-37)
poss(downfall-39, their-38)
root(ROOT-0, downfall-39)
advmod(showed-43, when-40)
det(Judge-42, the-41)
nsubj(showed-43, Judge-42)
advcl(downfall-39, showed-43)
neg(only-45, not-44)
dobj(showed-43, only-45)
advmod(linked-50, how-46)
nsubj(linked-50, ID-47)
cop(linked-50, is-48)
advmod(linked-50, tightly-49)
dep(showed-43, linked-50)
amod(motivations-53, religious-52)
prep_to(linked-50, motivations-53)
det(Wedge-56, the-55)
appos(motivations-53, Wedge-56)
dep(also-59, but-58)
dep(linked-50, also-59)
complm(lacked-65, that-60)
det(science-63, a-62)
prep_as(lacked-65, science-63)
nsubj(lacked-65, it-64)
ccomp(linked-50, lacked-65)
det(content-67, any-66)
dobj(lacked-65, content-67)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP (JJ sufficient)
        (S
          (VP (TO to)
            (VP (VB point)
              (PRT (RP out))
              (SBAR (IN that)
                (S
                  (NP
                    (NP (NNP ID))
                    (, ,)
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (VP (VBZ claims)
                          (SBAR (IN that)
                            (S
                              (NP (NN design))
                              (VP (VBZ is)
                                (NP
                                  (NP (DT that))
                                  (SBAR
                                    (WHNP (WDT which))
                                    (S
                                      (VP (VBZ remains)
                                        (SBAR
                                          (WHADVP (WRB when))
                                          (S
                                            (NP (PRP we))
                                            (VP (MD can) (RB not)
                                              (VP (VB explain)
                                                (NP
                                                  (NP (NN something))
                                                  (VP (VBG using)
                                                    (NP
                                                      (NP (JJ natural) (NNS processes))
                                                      (PP (IN of)
                                                        (NP (NN regularity)
                                                          (CC or)
                                                          (NN chance))))))))))))))))))))
                    (, ,))
                  (VP (MD must)
                    (VP (VB be)
                      (NP (CC either)
                        (NP (DT the) (JJ empty) (NN set))
                        (CC or)
                        (NP (DT the) (NN supernatural))))))))))))
    (. .)))

nsubj(sufficient-3, It-1)
cop(sufficient-3, is-2)
root(ROOT-0, sufficient-3)
aux(point-5, to-4)
xcomp(sufficient-3, point-5)
prt(point-5, out-6)
complm(set-37, that-7)
nsubj(claims-11, ID-8)
nsubj(set-37, ID-8)
rcmod(ID-8, claims-11)
complm(that-15, that-12)
nsubj(that-15, design-13)
cop(that-15, is-14)
ccomp(claims-11, that-15)
nsubj(remains-17, that-15)
rcmod(that-15, remains-17)
advmod(explain-22, when-18)
nsubj(explain-22, we-19)
aux(explain-22, can-20)
neg(explain-22, not-21)
advcl(remains-17, explain-22)
dobj(explain-22, something-23)
partmod(something-23, using-24)
amod(processes-26, natural-25)
dobj(using-24, processes-26)
prep_of(processes-26, regularity-28)
prep_of(processes-26, chance-30)
conj_or(regularity-28, chance-30)
aux(set-37, must-32)
cop(set-37, be-33)
preconj(set-37, either-34)
det(set-37, the-35)
amod(set-37, empty-36)
ccomp(point-5, set-37)
det(supernatural-40, the-39)
ccomp(point-5, supernatural-40)
conj_or(set-37, supernatural-40)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP doubt)
        (SBAR
          (SBAR (IN that)
            (S
              (NP (JJ many) (NN ID) (NN proponent))
              (VP (MD would)
                (VP (VB argue)
                  (UCP
                    (PP (IN for)
                      (NP (DT the) (JJ empty) (NN set)))
                    (CC and)
                    (ADVP (RB thus))
                    (SBAR
                      (WHNP (WP what))
                      (S
                        (ADVP (RB logically))
                        (VP (VBZ remains)))))))))
          (, ,)
          (CC and)
          (SBAR
            (WHNP (WP what))
            (S
              (VP (VBZ is)
                (VP (VBN supported)
                  (PP (IN by)
                    (NP (DT the) (NN evidence))))))))))
    (, ,)
    (NP
      (NP (NNP ID) (POS 's))
      (`` ``) (NN designer))
    (PRN (-LRB- -LRB-)
      (NP
        (NP (NN wink))
        (, ,)
        (NP (NN wink)))
      (-RRB- -RRB-))
    ('' '')
    (VP (VBZ is)
      (ADVP (RB just))
      (NP (DT an) (JJ evolved) (NN concept))
      (, ,)
      (SBAR (RB just) (IN like)
        (S (`` ``)
          (NP (NNP creationist))
          ('' '')
          (VP (VBD became)
            (NP (`` ``) (JJ cdesign) (NN proponentist) ('' ''))
            (PP (TO to)
              (NP (`` ``) (NN design) (NN proponent) ('' '')))))))
    (. .)))

nsubj(doubt-2, I-1)
ccomp(concept-41, doubt-2)
complm(argue-8, that-3)
amod(proponent-6, many-4)
nn(proponent-6, ID-5)
nsubj(argue-8, proponent-6)
aux(argue-8, would-7)
ccomp(doubt-2, argue-8)
dep(argue-8, for-9)
det(set-12, the-10)
amod(set-12, empty-11)
pobj(for-9, set-12)
dep(argue-8, thus-14)
conj_and(for-9, thus-14)
nsubj(remains-17, what-15)
advmod(remains-17, logically-16)
dep(argue-8, remains-17)
conj_and(for-9, remains-17)
nsubjpass(supported-22, what-20)
auxpass(supported-22, is-21)
ccomp(doubt-2, supported-22)
conj_and(argue-8, supported-22)
det(evidence-25, the-24)
agent(supported-22, evidence-25)
poss(designer-30, ID-27)
nsubj(concept-41, designer-30)
dep(concept-41, wink-32)
appos(wink-32, wink-34)
cop(concept-41, is-37)
advmod(concept-41, just-38)
det(concept-41, an-39)
amod(concept-41, evolved-40)
root(ROOT-0, concept-41)
advmod(proponentist-51, just-43)
dep(proponentist-51, like-44)
nsubj(proponentist-51, creationist-46)
cop(proponentist-51, became-48)
amod(proponentist-51, cdesign-50)
dep(concept-41, proponentist-51)
nn(proponent-56, design-55)
prep_to(proponentist-51, proponent-56)

