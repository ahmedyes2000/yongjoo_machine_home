(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP are)
        (VP (VBG arguing)
          (SBAR (IN that)
            (S
              (NP (PRP it))
              (VP (VBZ is) (RB not)
                (ADJP (JJ right)
                  (CC or)
                  (JJ wrong))))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's) (`` ``) (RB not)
      (ADVP (RB even))
      (ADJP (JJ wrong))
      ('' ''))
    (. .)))

nsubj(arguing-3, We-1)
aux(arguing-3, are-2)
ccomp(wrong-17, arguing-3)
complm(right-8, that-4)
nsubj(right-8, it-5)
nsubj(wrong-10, it-5)
cop(right-8, is-6)
neg(right-8, not-7)
ccomp(arguing-3, right-8)
ccomp(arguing-3, wrong-10)
conj_or(right-8, wrong-10)
nsubj(wrong-17, it-12)
cop(wrong-17, 's-13)
neg(wrong-17, not-15)
advmod(wrong-17, even-16)
root(ROOT-0, wrong-17)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP
        (NP (DT no) (NN definition))
        (PP (IN of)
          (NP
            (NP (`` ``) (JJ intelligent) (NN design) ('' ''))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (MD would)
                  (VP (VB allow)
                    (NP (DT a) (NN scientist)
                      (S
                        (VP (TO to)
                          (VP (VB determine)
                            (SBAR (IN if)
                              (S
                                (NP (PRP it))
                                (VP (VBZ 's)
                                  (ADJP (JJ right)
                                    (CC or)
                                    (JJ wrong)))))))))))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(definition-4, no-3)
nsubj(is-2, definition-4)
amod(design-8, intelligent-7)
prep_of(definition-4, design-8)
nsubj(allow-12, design-8)
aux(allow-12, would-11)
rcmod(design-8, allow-12)
det(scientist-14, a-13)
dobj(allow-12, scientist-14)
aux(determine-16, to-15)
infmod(scientist-14, determine-16)
mark(right-20, if-17)
nsubj(right-20, it-18)
nsubj(wrong-22, it-18)
cop(right-20, 's-19)
advcl(determine-16, right-20)
advcl(determine-16, wrong-22)
conj_or(right-20, wrong-22)

