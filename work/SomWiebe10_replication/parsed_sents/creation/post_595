(ROOT
  (S
    (PP (IN In)
      (S
        (VP (VBG answering)
          (NP (PRP$ your) (NNS questions)))))
    (, ,)
    (NP (PRP I))
    (VP (MD will)
      (VP (VB try)
        (S
          (VP (TO to)
            (VP (VB keep)
              (PP (IN on)
                (NP (NN point) (CD .1))))))))
    (. .)))

prepc_in(try-8, answering-2)
poss(questions-4, your-3)
dobj(answering-2, questions-4)
nsubj(try-8, I-6)
xsubj(keep-10, I-6)
aux(try-8, will-7)
root(ROOT-0, try-8)
aux(keep-10, to-9)
xcomp(try-8, keep-10)
prep_on(keep-10, point-12)
num(point-12, .1-13)

(ROOT
  (S
    (S
      (NP (PRP You))
      (ADVP (RB never))
      (VP (VBD responded)
        (PP (TO to)
          (NP (PRP$ my) (NN comment)))))
    (: :)
    (S
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (NNP Crick))
          (VP (VBD said)
            (SBAR
              (S
                (NP (JJ molecular) (NNS machines))
                (VP (VBP appear)
                  (S
                    (VP
                      (VP (VBN designed))
                      (CC but)
                      (VP (VBP are) (RB not))))))))))
      (, ,)
      (NP (PRP he))
      (VP (VBD was)
        (ADVP (RB never))
        (VP (VBN castigated)
          (PP (IN for)
            (S
              (VP (VBG being)
                (ADJP (`` ``) (JJ unscientific))))))))
    (. .)))

nsubj(responded-3, You-1)
neg(responded-3, never-2)
root(ROOT-0, responded-3)
poss(comment-6, my-5)
prep_to(responded-3, comment-6)
advmod(said-10, When-8)
nsubj(said-10, Crick-9)
advcl(castigated-22, said-10)
amod(machines-12, molecular-11)
nsubj(appear-13, machines-12)
ccomp(said-10, appear-13)
ccomp(appear-13, designed-14)
ccomp(appear-13, are-16)
conj_but(designed-14, are-16)
neg(are-16, not-17)
nsubjpass(castigated-22, he-19)
auxpass(castigated-22, was-20)
neg(castigated-22, never-21)
parataxis(responded-3, castigated-22)
cop(unscientific-26, being-24)
prepc_for(castigated-22, unscientific-26)

(ROOT
  (S
    (PP (IN Until)
      (NP (DT that) (NN time)))
    (NP
      (NP (JJ many))
      (PP (IN of)
        (NP (PRP it))))
    (VP (VBZ s)
      (NP
        (NP (NNS arguments))
        (SBAR
          (S
            (VP (VBP seem)
              (S
                (VP (TO to)
                  (VP (VB be)
                    (NP
                      (NP (DT the)
                        (ADJP (RBS most) (JJ reasonable))
                        (NN inference))
                      (VP (VBN based)
                        (PP (IN on)
                          (NP (DT the) (NN evidence)))
                        (SBAR (IN as)
                          (S
                            (NP (PRP we))
                            (VP (VBP understand)
                              (NP (PRP it))
                              (NP (NN today)))))))))))))))
    (. .)))

det(time-3, that-2)
prep_until(arguments-8, time-3)
nsubj(arguments-8, many-4)
prep_of(many-4, it-6)
cop(arguments-8, s-7)
root(ROOT-0, arguments-8)
rcmod(arguments-8, seem-9)
aux(inference-15, to-10)
cop(inference-15, be-11)
det(inference-15, the-12)
advmod(reasonable-14, most-13)
amod(inference-15, reasonable-14)
xcomp(seem-9, inference-15)
partmod(inference-15, based-16)
det(evidence-19, the-18)
prep_on(based-16, evidence-19)
mark(understand-22, as-20)
nsubj(understand-22, we-21)
advcl(based-16, understand-22)
dobj(understand-22, it-23)
tmod(understand-22, today-24)

(ROOT
  (FRAG
    (NP (CD 4))
    (. .)))

root(ROOT-0, 4-1)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (MD can)
      (NP (NNP ID))
      (VP (VB be)
        (VP (VBN tested))))
    (. ?)))

advmod(tested-5, How-1)
aux(tested-5, can-2)
nsubjpass(tested-5, ID-3)
auxpass(tested-5, be-4)
root(ROOT-0, tested-5)

(ROOT
  (S
    (NP (NNP Don) (NNP t))
    (VP (VBP know)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP (PRP we))
          (VP (MD can)
            (VP (VB test)
              (NP (NNP Cricks) (NN statement))
              (SBAR (IN that)
                (S
                  (NP (JJ molecular) (NNS machines))
                  (VP
                    (VP (VBP appear)
                      (S
                        (VP (TO to)
                          (VP (VB be)
                            (VP (VBN designed))))))
                    (CC but)
                    (VP (VBP are) (RB not))))))))))
    (. .)))

nn(t-2, Don-1)
nsubj(know-3, t-2)
root(ROOT-0, know-3)
advmod(test-7, how-4)
nsubj(test-7, we-5)
aux(test-7, can-6)
ccomp(know-3, test-7)
nn(statement-9, Cricks-8)
dobj(test-7, statement-9)
complm(appear-13, that-10)
amod(machines-12, molecular-11)
nsubj(appear-13, machines-12)
xsubj(designed-16, machines-12)
nsubj(are-18, machines-12)
ccomp(test-7, appear-13)
aux(designed-16, to-14)
auxpass(designed-16, be-15)
xcomp(appear-13, designed-16)
ccomp(test-7, are-18)
conj_but(appear-13, are-18)
neg(are-18, not-19)

(ROOT
  (S (CC Or)
    (NP (DT that) (NN evolution))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN process))
        (PP (VBG involving)
          (NP
            (NP (NN randomness))
            (CC and)
            (NP (JJ natural) (NN selection))))))
    (. .)))

cc(process-6, Or-1)
det(evolution-3, that-2)
nsubj(process-6, evolution-3)
cop(process-6, is-4)
det(process-6, a-5)
root(ROOT-0, process-6)
prep_involving(process-6, randomness-8)
amod(selection-11, natural-10)
prep_involving(process-6, selection-11)
conj_and(randomness-8, selection-11)

(ROOT
  (SQ (VBZ Has)
    (NP (DT that))
    (VP (VBN been)
      (VP (VBN tested)))
    (. ?)))

aux(tested-4, Has-1)
nsubjpass(tested-4, that-2)
auxpass(tested-4, been-3)
root(ROOT-0, tested-4)

(ROOT
  (S
    (ADVP (RB Still))
    (NP
      (NP (DT a) (JJ good) (NN question))
      (CC and)
      (NP (PRP I)))
    (VP (VBP believe)
      (SBAR
        (S
          (NP (NNP Luskin))
          (VP (VBZ has)
            (VP (VBN addressed)
              (NP (DT that)))))))
    (. .)))

advmod(believe-7, Still-1)
det(question-4, a-2)
amod(question-4, good-3)
nsubj(believe-7, question-4)
conj_and(question-4, I-6)
nsubj(believe-7, I-6)
root(ROOT-0, believe-7)
nsubj(addressed-10, Luskin-8)
aux(addressed-10, has-9)
ccomp(believe-7, addressed-10)
dobj(addressed-10, that-11)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBD was)
        (ADVP (RB obviously) (RB not))
        (PP (TO to)
          (NP (PRP$ your) (NN satisfaction)))))
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBD looked)
        (ADJP (JJ okay)
          (PP (TO to)
            (NP (PRP me))))))
    (. .)))

nsubj(was-2, It-1)
root(ROOT-0, was-2)
advmod(not-4, obviously-3)
neg(was-2, not-4)
poss(satisfaction-7, your-6)
prep_to(was-2, satisfaction-7)
nsubj(looked-10, it-9)
conj_but(was-2, looked-10)
acomp(looked-10, okay-11)
prep_to(okay-11, me-13)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB disagree)
        (PP (IN with) (IN in)
          (NP
            (NP (DT that) (NN part))
            (PP (IN of)
              (NP (NNP Luskin) (NNP s) (NN article)))))))
    (. ?)))

dobj(disagree-4, What-1)
aux(disagree-4, do-2)
nsubj(disagree-4, you-3)
root(ROOT-0, disagree-4)
dep(disagree-4, with-5)
det(part-8, that-7)
prep_in(disagree-4, part-8)
nn(article-12, Luskin-10)
nn(article-12, s-11)
prep_of(part-8, article-12)

(ROOT
  (FRAG
    (NP (CD 5))
    (. .)))

root(ROOT-0, 5-1)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP say)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBZ s)
            (NP (DT a) (NN fact))
            (SBAR (IN that)
              (S
                (NP (NN regularity)
                  (CC and)
                  (NN chance) (NNS processes))
                (VP (MD can)
                  (VP (VB increase)
                    (NP (NN information)
                      (CC and)
                      (NN complexity))))))))))
    (. .)))

nsubj(say-2, You-1)
root(ROOT-0, say-2)
nsubj(fact-6, it-3)
cop(fact-6, s-4)
det(fact-6, a-5)
ccomp(say-2, fact-6)
complm(increase-13, that-7)
nn(processes-11, regularity-8)
conj_and(regularity-8, chance-10)
nn(processes-11, chance-10)
nsubj(increase-13, processes-11)
aux(increase-13, can-12)
ccomp(fact-6, increase-13)
dobj(increase-13, information-14)
dobj(increase-13, complexity-16)
conj_and(information-14, complexity-16)

(ROOT
  (S
    (NP (DT This))
    (VP
      (VP (MD may)
        (VP (VB be)
          (ADJP (JJ true))))
      (, ,)
      (CC but)
      (VP
        (ADVP (RB not)
          (PP (TO to)
            (NP
              (NP (DT the) (NN order))
              (PP (IN of)
                (NP (NN magnitude))))))
        (JJ required)
        (PP (IN for)
          (NP
            (NP (DT a) (JJ single) (NN protein))
            (, ,)
            (CONJP (RB not) (TO to) (VB mention))
            (NP
              (NP (DT the) (NN information))
              (ADJP (JJ involved)
                (PP (IN in)
                  (NP (NNP DNA)))))))))
    (. .)))

nsubj(true-4, This-1)
nsubj(required-13, This-1)
aux(true-4, may-2)
cop(true-4, be-3)
root(ROOT-0, true-4)
neg(required-13, not-7)
det(order-10, the-9)
prep_to(not-7, order-10)
prep_of(order-10, magnitude-12)
conj_but(true-4, required-13)
det(protein-17, a-15)
amod(protein-17, single-16)
prep_for(required-13, protein-17)
det(information-23, the-22)
prep_for(required-13, information-23)
conj_and(protein-17, information-23)
amod(information-23, involved-24)
prep_in(involved-24, DNA-26)

(ROOT
  (S ('' '')
    (S
      (SBAR (IN If)
        (S
          (NP (DT some) (NN one))
          (VP
            (VP (VBZ responds))
            (CC and)
            (VP (VBZ says)))))
      (NP (DT those) (JJ molecular) (NNS machines))
      (VP (VBP are)
        (VP (VBN designed))))
    (, ,)
    (NP (PRP they))
    (VP (VBP are)
      (ADVP (RB harshly))
      (VP (VBN criticized)
        (PP (IN for)
          (S
            (VP (VBG being)
              (ADJP (`` ``) (JJ unscientific)))))))
    (. .)))

mark(responds-5, If-2)
det(one-4, some-3)
nsubj(responds-5, one-4)
nsubj(says-7, one-4)
advcl(designed-12, responds-5)
conj_and(responds-5, says-7)
advcl(designed-12, says-7)
det(machines-10, those-8)
amod(machines-10, molecular-9)
nsubjpass(designed-12, machines-10)
auxpass(designed-12, are-11)
ccomp(criticized-17, designed-12)
nsubjpass(criticized-17, they-14)
auxpass(criticized-17, are-15)
advmod(criticized-17, harshly-16)
root(ROOT-0, criticized-17)
cop(unscientific-21, being-19)
prepc_for(criticized-17, unscientific-21)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB ve))
    (VP (VBD heard)
      (PP (IN about)
        (NP (DT the) (NN computer) (NNS programs) (, ,) (NNS pros)
          (CC and)
          (NNS cons)))
      (NP (CD .6)))
    (. .)))

nsubj(heard-3, I-1)
advmod(heard-3, ve-2)
root(ROOT-0, heard-3)
det(programs-7, the-5)
nn(programs-7, computer-6)
prep_about(heard-3, programs-7)
prep_about(heard-3, pros-9)
conj_and(programs-7, pros-9)
prep_about(heard-3, cons-11)
conj_and(programs-7, cons-11)
dobj(heard-3, .6-12)

(ROOT
  (FRAG
    (ADJP (RB Not) (JJ sure))
    (SBAR
      (WHNP (WP what))
      (S
        (NP (PRP you))
        (VP
          (VP (VB mean)
            (PP (IN by)
              (NP (NN bait))))
          (CC and)
          (VP (VB switch)
            (NP (CD .7))))))
    (. .)))

neg(sure-2, Not-1)
root(ROOT-0, sure-2)
dobj(mean-5, what-3)
nsubj(mean-5, you-4)
nsubj(switch-9, you-4)
dep(sure-2, mean-5)
prep_by(mean-5, bait-7)
dep(sure-2, switch-9)
conj_and(mean-5, switch-9)
dobj(switch-9, .7-10)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP last)
        (NP (NN statement))))
    (, ,)
    (NP (PRP I))
    (VP (VBP am)
      (VP (VBG assuming)
        (SBAR
          (SBAR
            (S
              (NP (PRP you))
              (VP (VBP know)
                (SBAR
                  (SBAR
                    (WHADVP (WRB how))
                    (S
                      (NP (NNP ID))
                      (VP (VBZ has)
                        (VP (VBN defined)
                          (NP
                            (NP (DT the) (NNS concepts))
                            (PP (IN of)
                              (NP (`` ``) (NN design) ('' '')
                                (CC and)
                                (`` ``) (NN information) ('' ''))))))))
                  (CC and)
                  (SBAR (IN that)
                    (S
                      (NP (PRP they))
                      (VP (VBP are)
                        (PP (IN at)
                          (NP
                            (NP (NNS odds))
                            (PP (IN with)
                              (SBAR
                                (WHADVP (WRB how))
                                (S
                                  (NP (NN science))
                                  (ADVP (RB typically))
                                  (VP (VBZ defines)
                                    (NP (JJ such) (NNS terms)))))))))))))))
          (CC or)
          (SBAR
            (WHADVP (WRB how))
            (S
              (NP (DT the) (NN layperson))
              (VP (MD may)
                (VP (VB interpret)
                  (NP (JJ such) (NNS terms)))))))))
    (. ?)))

nsubj(last-2, You-1)
ccomp(assuming-7, last-2)
dobj(last-2, statement-3)
nsubj(assuming-7, I-5)
aux(assuming-7, am-6)
root(ROOT-0, assuming-7)
nsubj(know-9, you-8)
dep(assuming-7, know-9)
advmod(defined-13, how-10)
nsubj(defined-13, ID-11)
aux(defined-13, has-12)
ccomp(know-9, defined-13)
det(concepts-15, the-14)
dobj(defined-13, concepts-15)
prep_of(concepts-15, design-18)
prep_of(concepts-15, information-22)
conj_and(design-18, information-22)
complm(are-27, that-25)
nsubj(are-27, they-26)
ccomp(know-9, are-27)
conj_and(defined-13, are-27)
prep_at(are-27, odds-29)
advmod(defines-34, how-31)
nsubj(defines-34, science-32)
advmod(defines-34, typically-33)
prepc_with(odds-29, defines-34)
amod(terms-36, such-35)
dobj(defines-34, terms-36)
advmod(interpret-42, how-38)
det(layperson-40, the-39)
nsubj(interpret-42, layperson-40)
aux(interpret-42, may-41)
dep(assuming-7, interpret-42)
conj_or(know-9, interpret-42)
amod(terms-44, such-43)
dobj(interpret-42, terms-44)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP am)
      (ADVP (RB just))
      (RB not)
      (ADJP (JJ sure)
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (VBP mean))))))
    (. .)))

nsubj(sure-5, I-1)
cop(sure-5, am-2)
advmod(sure-5, just-3)
neg(sure-5, not-4)
root(ROOT-0, sure-5)
dobj(mean-8, what-6)
nsubj(mean-8, you-7)
dep(sure-5, mean-8)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB ve))
    (VP (VBP read)
      (PP (IN about)
        (NP (DT the) (VBN specified) (NN complexity) (NN argument))))
    (. .)))

nsubj(read-3, I-1)
advmod(read-3, ve-2)
root(ROOT-0, read-3)
det(argument-8, the-5)
amod(argument-8, specified-6)
nn(argument-8, complexity-7)
prep_about(read-3, argument-8)

(ROOT
  (FRAG
    (ADJP (RB Not) (JJ sure))
    (SBAR
      (WHNP (WP what))
      (S
        (NP (PRP you))
        (VP (VBP mean)
          (PP (IN by) (IN at)
            (NP
              (NP (NNS odds))
              (PP (IN with)
                (NP (NN design))))))))
    (. .)))

neg(sure-2, Not-1)
root(ROOT-0, sure-2)
dobj(mean-5, what-3)
nsubj(mean-5, you-4)
dep(sure-2, mean-5)
dep(mean-5, by-6)
prep_at(mean-5, odds-8)
prep_with(odds-8, design-10)

(ROOT
  (S
    (ADVP (RB Finally))
    (, ,)
    (S
      (NP (PRP I))
      (ADVP (RB just))
      (VP (VBP want)
        (S
          (VP (TO to)
            (VP (VB say)
              (SBAR (IN that)
                (S
                  (NP (PRP it))
                  (VP (VBZ appears)
                    (PP (TO to)
                      (NP (PRP me)))
                    (SBAR (IN that)
                      (S
                        (NP (NNS statements))
                        (VP (VBD made)
                          (PP (IN against)
                            (NP
                              (NP (NNP ID))
                              (CC and)
                              (NP
                                (NP (PRP$ their) (NNS proponents))
                                (VP (VBN made)
                                  (PP (IN by)
                                    (NP (NNS others))))))))))))))))))
    (, ,) (RB not)
    (S
      (NP (PRP you))
      (VP (VBG regarding)
        (SBAR
          (S
            (NP (NNP ID))
            (VP (VBZ has)
              (VP (VBN been)
                (ADVP (RB so) (RB emotionally))
                (VP (VBN charged)
                  (SBAR
                    (S
                      (NP (PRP it))
                      (VP (VBZ makes)
                        (SBAR
                          (S
                            (NP (PRP me))
                            (VP (VBP feel)
                              (SBAR
                                (S
                                  (NP (PRP$ their) (NN judgment))
                                  (VP (VBZ is)
                                    (VP (VBN affected))))))))))))))))))
    (. .)))

advmod(want-5, Finally-1)
nsubj(want-5, I-3)
xsubj(say-7, I-3)
advmod(want-5, just-4)
root(ROOT-0, want-5)
aux(say-7, to-6)
xcomp(want-5, say-7)
complm(appears-10, that-8)
nsubj(appears-10, it-9)
ccomp(say-7, appears-10)
prep_to(appears-10, me-12)
complm(made-15, that-13)
nsubj(made-15, statements-14)
ccomp(appears-10, made-15)
prep_against(made-15, ID-17)
poss(proponents-20, their-19)
prep_against(made-15, proponents-20)
conj_and(ID-17, proponents-20)
partmod(proponents-20, made-21)
agent(made-21, others-23)
neg(want-5, not-25)
nsubj(regarding-27, you-26)
dep(want-5, regarding-27)
nsubjpass(charged-33, ID-28)
aux(charged-33, has-29)
auxpass(charged-33, been-30)
advmod(emotionally-32, so-31)
advmod(charged-33, emotionally-32)
ccomp(regarding-27, charged-33)
nsubj(makes-35, it-34)
ccomp(charged-33, makes-35)
nsubj(feel-37, me-36)
ccomp(makes-35, feel-37)
poss(judgment-39, their-38)
nsubjpass(affected-41, judgment-39)
auxpass(affected-41, is-40)
ccomp(feel-37, affected-41)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ seems)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBZ s)
              (NP (DT a)
                (ADJP (RB very) (JJ powerful))
                (NN argument)
                (S
                  (VP (TO to)
                    (VP (VB say)
                      (SBAR (IN if)
                        (S
                          (NP (NN something))
                          (VP (VBZ appears)
                            (VP (VBN designed))))))))))))))
    (, ,)
    (NP (PRP it))
    (VP (MD may)
      (VP (VB be)
        (SBAR (IN because)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (VP (VBN designed)))))))
    (. .)))

nsubj(seems-2, It-1)
ccomp(be-19, seems-2)
complm(argument-9, that-3)
nsubj(argument-9, it-4)
cop(argument-9, s-5)
det(argument-9, a-6)
advmod(powerful-8, very-7)
amod(argument-9, powerful-8)
ccomp(seems-2, argument-9)
aux(say-11, to-10)
infmod(argument-9, say-11)
mark(designed-15, if-12)
nsubjpass(designed-15, something-13)
auxpass(designed-15, appears-14)
advcl(say-11, designed-15)
nsubj(be-19, it-17)
aux(be-19, may-18)
root(ROOT-0, be-19)
mark(designed-23, because-20)
nsubjpass(designed-23, it-21)
auxpass(designed-23, is-22)
advcl(be-19, designed-23)

(ROOT
  (S
    (S
      (NP (DT Some))
      (VP (VBP make)
        (NP
          (NP (DT the) (NN statement))
          (SBAR
            (S
              (NP (PRP it))
              (VP (MD may)
                (VP (VB appear)
                  (VP (VBN designed)))))))))
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is) (RB not)))
    (. .)))

nsubj(make-2, Some-1)
root(ROOT-0, make-2)
det(statement-4, the-3)
dobj(make-2, statement-4)
nsubjpass(designed-8, it-5)
aux(designed-8, may-6)
auxpass(designed-8, appear-7)
rcmod(statement-4, designed-8)
nsubj(is-11, it-10)
conj_but(make-2, is-11)
neg(is-11, not-12)

(ROOT
  (FRAG (IN If)
    (SBAR
      (WHNP (WDT that))
      (S
        (VP (VBZ is)
          (ADVP (RB so))
          (, ,)
          (SBAR
            (WHADVP (WRB where))
            (S
              (VP (VBZ s)
                (NP (DT the) (NN proof))))))))
    (. ?)))

root(ROOT-0, If-1)
nsubj(is-3, that-2)
nsubj(proof-9, that-2)
dep(If-1, is-3)
advmod(is-3, so-4)
advmod(proof-9, where-6)
cop(proof-9, s-7)
det(proof-9, the-8)
advcl(is-3, proof-9)

(ROOT
  (SQ
    (VP (VB '')
      (INTJ (WRB Why)))
    (. ?)))


(ROOT
  (FRAG
    (NP (CD 2))
    (. .)))

root(ROOT-0, 2-1)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP write)
      (SBAR
        (S
          (NP (NNP ID))
          (VP (VBZ is)
            (ADVP (RB merely))
            (NP (DT a) (JJ negative) (NN argument))))))
    (. .)))

nsubj(write-2, You-1)
root(ROOT-0, write-2)
nsubj(argument-8, ID-3)
cop(argument-8, is-4)
advmod(argument-8, merely-5)
det(argument-8, a-6)
amod(argument-8, negative-7)
ccomp(write-2, argument-8)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB know)
        (PRT (RP about))
        (SBAR (IN that)
          (S (-LRB- -LRB-)
            (NP
              (NP (NNP Luskin) (POS 's))
              (NN article))
            (-RRB- -RRB-)
            (VP (CC but)
              (VP (VBZ is)
                (S
                  (NP (PRP it))
                  (ADJP (RB not) (JJ normal)
                    (PP (IN in)
                      (NP (JJ scientific) (NN discourse)))))
                (S
                  (VP (TO to)
                    (VP (VB point)
                      (PRT (RP out))
                      (NP
                        (NP (DT the) (NN weakness))
                        (PP (IN of)
                          (NP (DT a) (NN theory))))))))
              (CC and)
              (VP
                (ADVP (RB then))
                (VBP argue)
                (PP (IN against)
                  (NP
                    (NP (PRP it))
                    (PP (IN on)
                      (NP (DT the) (NN failure)))))
                (S
                  (VP (TO to)
                    (VP (VB explain)
                      (PRT (RP away))
                      (NP (DT the) (NN weakness)))))))))))
    (. ?)))

nsubj(know-4, I-1)
aux(know-4, do-2)
neg(know-4, n't-3)
root(ROOT-0, know-4)
prt(know-4, about-5)
complm(is-13, that-6)
poss(article-10, Luskin-8)
nsubj(is-13, article-10)
xsubj(point-21, article-10)
nsubj(argue-30, article-10)
xsubj(explain-37, article-10)
ccomp(know-4, is-13)
nsubj(normal-16, it-14)
neg(normal-16, not-15)
xcomp(is-13, normal-16)
amod(discourse-19, scientific-18)
prep_in(normal-16, discourse-19)
aux(point-21, to-20)
xcomp(is-13, point-21)
prt(point-21, out-22)
det(weakness-24, the-23)
dobj(point-21, weakness-24)
det(theory-27, a-26)
prep_of(weakness-24, theory-27)
advmod(argue-30, then-29)
ccomp(know-4, argue-30)
conj_and(is-13, argue-30)
prep_against(argue-30, it-32)
det(failure-35, the-34)
prep_on(it-32, failure-35)
aux(explain-37, to-36)
xcomp(argue-30, explain-37)
prt(explain-37, away-38)
det(weakness-40, the-39)
dobj(explain-37, weakness-40)

(ROOT
  (FRAG
    (NP (CD 3))
    (. .)))

root(ROOT-0, 3-1)

(ROOT
  (S
    (NP (NNP Design))
    (VP (VBZ fails)
      (S
        (VP (TO to)
          (VP (VB place)
            (NP (NN design))
            (PP (IN at)
              (NP (NN risk)))))))
    (. .)))

nsubj(fails-2, Design-1)
xsubj(place-4, Design-1)
root(ROOT-0, fails-2)
aux(place-4, to-3)
xcomp(fails-2, place-4)
dobj(place-4, design-5)
prep_at(place-4, risk-7)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (ADJP (RB partially) (JJ true)))
    (. .)))

nsubj(true-4, This-1)
cop(true-4, is-2)
advmod(true-4, partially-3)
root(ROOT-0, true-4)

(ROOT
  (S
    (SBAR (IN If)
      (CC and)
      (WHADVP (WRB when))
      (S
        (NP (DT the) (NNS arguments))
        (VP (VBP are)
          (VP (VBN answered) (, ,)
            (PP (JJ such) (IN as)
              (SBAR
                (WHADVP (WRB how))
                (S
                  (NP (NNP DNA))
                  (VP (VBD evolved)))))))))
    (, ,)
    (NP
      (NP (DT the) (NN flagellum))
      (, ,)
      (X (NN etc.)))
    (, ,)
    (ADVP (RB then))
    (NP (DT the) (NNP ID) (NN argument))
    (VP (VBZ becomes)
      (S
        (ADJP (JJR weaker)
          (CC and)
          (JJR weaker)))
      (, ,)
      (SBAR (IN as)
        (S
          (NP (PRP it))
          (VP (MD should)))))
    (. .)))

mark(answered-7, If-1)
advmod(answered-7, when-3)
conj_and(answered-7, when-3)
advcl(becomes-24, when-3)
det(arguments-5, the-4)
nsubjpass(answered-7, arguments-5)
auxpass(answered-7, are-6)
advcl(becomes-24, answered-7)
advmod(evolved-13, how-11)
nsubj(evolved-13, DNA-12)
prepc_such_as(answered-7, evolved-13)
det(flagellum-16, the-15)
nsubj(becomes-24, flagellum-16)
dep(flagellum-16, etc.-18)
advmod(becomes-24, then-20)
det(argument-23, the-21)
nn(argument-23, ID-22)
nsubj(becomes-24, argument-23)
root(ROOT-0, becomes-24)
acomp(becomes-24, weaker-25)
acomp(becomes-24, weaker-27)
conj_and(weaker-25, weaker-27)
mark(should-31, as-29)
nsubj(should-31, it-30)
advcl(becomes-24, should-31)

(ROOT
  (S
    (NP (DT The) (NN reverse))
    (VP (MD should)
      (ADVP (RB also))
      (VP (VB be)
        (ADJP (JJ true))))
    (. .)))

det(reverse-2, The-1)
nsubj(true-6, reverse-2)
aux(true-6, should-3)
advmod(true-6, also-4)
cop(true-6, be-5)
root(ROOT-0, true-6)

