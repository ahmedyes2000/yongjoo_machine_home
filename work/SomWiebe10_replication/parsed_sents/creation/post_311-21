(ROOT
  (S ('' '')
    (S
      (S
        (VP (VBG Suggesting)
          (NP (DT that) (NN design)
            (CC and)
            (NN information))))
      (VP (VBZ does) (RB not)
        (VP (VB originate)
          (PP (IN via)
            (ADJP (JJ blind))))))
    (, ,)
    (NP (JJ purposeless) (NN material) (NNS processes))
    (VP (VBZ sounds)
      (PP (CC less)
        (PP (IN like)
          (NP
            (NP (DT an) (NN argument))
            (PP (IN from)
              (NP (NN ignorance)))))
        (CC and)
        (PP
          (ADVP (RBR more))
          (IN like)
          (NP
            (NP (DT an) (NN argument))
            (PP (IN from)
              (NP (NN experience))))))
      (PP (TO to)
        (NP (PRP me))))
    (. .)))

csubj(originate-9, Suggesting-2)
det(design-4, that-3)
dobj(Suggesting-2, design-4)
dobj(Suggesting-2, information-6)
conj_and(design-4, information-6)
aux(originate-9, does-7)
neg(originate-9, not-8)
ccomp(sounds-16, originate-9)
prep_via(originate-9, blind-11)
amod(processes-15, purposeless-13)
nn(processes-15, material-14)
nsubj(sounds-16, processes-15)
root(ROOT-0, sounds-16)
cc(sounds-16, less-17)
det(argument-20, an-19)
prep_like(sounds-16, argument-20)
prep_from(argument-20, ignorance-22)
advmod(sounds-16, more-24)
det(argument-27, an-26)
prep_like(sounds-16, argument-27)
conj_and(argument-20, argument-27)
prep_from(argument-27, experience-29)
prep_to(sounds-16, me-31)

(ROOT
  (FRAG (: :)
    (VP (VBD \/)
      (S (`` ``)
        (VP (VB Bait)
          (CC and)
          (VB switch))))
    (. .)))

root(ROOT-0, \/-2)
ccomp(\/-2, Bait-4)
ccomp(\/-2, switch-6)
conj_and(Bait-4, switch-6)

