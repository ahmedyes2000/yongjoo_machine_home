(ROOT
  (S (`` ``)
    (S
      (NP (NNP Behe))
      (VP (VBZ claims)
        (WHNP (WDT that))))
    ('' '')
    (NP (DT That))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT the) (NN sort))
        (PP (IN of)
          (NP (NN process) (CD one)))
        (SBAR
          (S
            (VP (VBZ needs)
              (S
                (VP (TO to)
                  (VP (VB build)
                    (NP (JJ complex) (JJ molecular) (NNS systems))))))))))
    (. .)))

nsubj(claims-3, Behe-2)
ccomp(sort-10, claims-3)
dobj(claims-3, that-4)
nsubj(sort-10, That-6)
cop(sort-10, is-7)
neg(sort-10, not-8)
det(sort-10, the-9)
root(ROOT-0, sort-10)
prep_of(sort-10, process-12)
num(process-12, one-13)
rcmod(sort-10, needs-14)
aux(build-16, to-15)
xcomp(needs-14, build-16)
amod(systems-19, complex-17)
amod(systems-19, molecular-18)
dobj(build-16, systems-19)

(ROOT
  (S ('' '')
    (S
      (SBAR
        (WHADVP (WRB when))
        (S
          (VP (VBG discussing)
            (NP (DT the)))))
      (VP (VBZ experiment)))
    (IN by)
    (S
      (NP (NNP Richard))
      (VP (VBZ Lenski)))
    (. .)))

advmod(discussing-3, when-2)
advcl(experiment-5, discussing-3)
csubj(experiment-5, discussing-3)
dobj(discussing-3, the-4)
root(ROOT-0, experiment-5)
dep(experiment-5, by-6)
nsubj(Lenski-8, Richard-7)
ccomp(experiment-5, Lenski-8)

(ROOT
  (S
    (SBAR (RB Just)
      (S
        (VP (VBP say)
          (SBAR
            (SBAR (IN that)
              (S
                (NP (DT the) (NN fitness))
                (ADVP (RB only))
                (VP (VBZ depends)
                  (PP (IN on)
                    (NP (DT the) (NN environment))))))
            (, ,)
            (CC and)
            (SBAR (RB even) (IN if)
              (S
                (NP (PRP they))
                (VP (VBP show)
                  (NP
                    (NP (DT some) (NNS losses))
                    (PP (IN in)
                      (NP (PRP$ their) (JJ current) (NN environment)))))))))))
    (, ,)
    (NP (PRP they))
    (VP (MD would)
      (VP (VB do)
        (ADJP
          (ADJP (RB just) (JJ fine))
          (CC and)
          (RB possibly)
          (ADJP (RB even) (JJR better)))
        (SBAR (IN if)
          (S
            (NP (PRP we))
            (ADVP (RB just))
            (VP (VBD tried)
              (NP
                (NP (DT a) (JJ new) (NN set))
                (PP (IN of)
                  (NP (JJ environmental) (NNS settings)))))))))
    (. .)))

advmod(say-2, Just-1)
dep(fine-28, say-2)
complm(depends-7, that-3)
det(fitness-5, the-4)
nsubj(depends-7, fitness-5)
advmod(depends-7, only-6)
ccomp(say-2, depends-7)
det(environment-10, the-9)
prep_on(depends-7, environment-10)
advmod(show-16, even-13)
dep(show-16, if-14)
nsubj(show-16, they-15)
ccomp(say-2, show-16)
conj_and(depends-7, show-16)
det(losses-18, some-17)
dobj(show-16, losses-18)
poss(environment-22, their-20)
amod(environment-22, current-21)
prep_in(losses-18, environment-22)
nsubj(fine-28, they-24)
aux(fine-28, would-25)
dep(fine-28, do-26)
advmod(fine-28, just-27)
root(ROOT-0, fine-28)
advmod(fine-28, possibly-30)
conj_and(fine-28, possibly-30)
advmod(better-32, even-31)
dep(fine-28, better-32)
mark(tried-36, if-33)
nsubj(tried-36, we-34)
advmod(tried-36, just-35)
advcl(fine-28, tried-36)
det(set-39, a-37)
amod(set-39, new-38)
dobj(tried-36, set-39)
amod(settings-42, environmental-41)
prep_of(set-39, settings-42)

(ROOT
  (SQ
    (S (CC So)
      (NP (PRP I))
      (VP (VBP 'm)
        (VP (VBG assuming)
          (SBAR (IN that)
            (S
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (DT the) (NN nylonase))
                  (ADVP (RB only))
                  (VP (VBD had)
                    (NP
                      (NP
                        (ADJP (CD 2) (NN %))
                        (DT the) (NN efficiency))
                      (PP (IN of)
                        (NP (JJ typical) (NNS enzymes)))))))
              (, ,)
              (NP (PRP it))
              (VP (VBD was)
                (SBAR (IN because)
                  (S
                    (NP (PRP we))
                    (ADVP (RB just))
                    (VP (VBD did) (RB n't)
                      (VP (VB have)
                        (NP
                          (NP (DT the) (JJ right) (NN environment))
                          (PP (IN for)
                            (NP (DT the) (NNS bacteria))))))))))))))
    (, ,)
    (SQ (VBP am)
      (NP (PRP I))
      (ADJP (JJ right)))
    (. ?)))

cc(assuming-4, So-1)
nsubj(assuming-4, I-2)
aux(assuming-4, 'm-3)
dep(right-36, assuming-4)
complm(was-20, that-5)
advmod(had-10, when-6)
det(nylonase-8, the-7)
nsubj(had-10, nylonase-8)
advmod(had-10, only-9)
advcl(was-20, had-10)
number(%-12, 2-11)
amod(efficiency-14, %-12)
det(efficiency-14, the-13)
dobj(had-10, efficiency-14)
amod(enzymes-17, typical-16)
prep_of(efficiency-14, enzymes-17)
nsubj(was-20, it-19)
ccomp(assuming-4, was-20)
mark(have-26, because-21)
nsubj(have-26, we-22)
advmod(have-26, just-23)
aux(have-26, did-24)
neg(have-26, n't-25)
advcl(was-20, have-26)
det(environment-29, the-27)
amod(environment-29, right-28)
dobj(have-26, environment-29)
det(bacteria-32, the-31)
prep_for(environment-29, bacteria-32)
cop(right-36, am-34)
nsubj(right-36, I-35)
root(ROOT-0, right-36)

(ROOT
  (SQ
    (S
      (NP (CD http:\/\/209.85.173.132\/search?q=cache:MX7Px_DB75IJ:) (NNP www.nmsr.org\/nylon.htm) (NNP +) (NN nylonase) (VBG +) (NN evolution))
      (VP (VBD +)
        (SBAR
          (S
            (NP (DT The) (JJ +) (JJ new) (JJ +) (NNS enzymes) (NN +))
            (VP (VBP are)
              (VP (VBG +)
                (NP
                  (NP (RB very)
                    (NP
                      (ADJP (RB +) (JJ inefficient))
                      (NNS +))
                    (PRN (-LRB- -LRB-)
                      (S
                        (VP (VBG having)
                          (VP (VBN +)
                            (NP
                              (QP (RB only) (CD +2))
                              (NN %)
                              (QP (CD 25) (CD +)))
                            (PP (IN of)
                              (S
                                (VP (VBG +)
                                  (NP
                                    (NP (DT the) (JJ +) (NN efficiency) (NN +))
                                    (PP (IN of)
                                      (S
                                        (VP (VBG +)
                                          (NP (DT the) (JJ +) (JJ regular) (NN +) (NNS enzymes))))))))))))
                      (-RRB- -RRB-))
                    (CC &)
                    (NP
                      (NP (NNP hl) (NNP =) (NNP en)
                        (CC &)
                        (NNP ct))
                      ('' =)
                      (VP (VBN clnk)
                        (NP (CC &)
                          (NP
                            (NP (NN cd))
                            (SBAR
                              (S
                                (VP (SYM =)
                                  (NP (CD 1))))))
                          (CC &)
                          (NP
                            (NP (NN gl))
                            (SBAR
                              (S
                                (VP (SYM =)
                                  (NP (PRP us))))))))
                      (`` ``)))
                  (CC and)
                  (NP
                    (NP (DT a) (JJ remarkable) (NN mutation))
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (VP (VBD caused)
                          (NP (DT the) (NNS bacteria))
                          (S
                            (VP (TO to)
                              (VP (VB feast)
                                (PP (IN on)
                                  (NP
                                    (NP (DT the) (NN citrate))
                                    ('' '')
                                    (SBAR
                                      (S
                                        (NP (DT This))
                                        (VP (VBZ is)
                                          (ADVP (RB only))
                                          (NP
                                            (NP (DT a) (NN fraction))
                                            (PP (IN of)
                                              (NP (DT the) (JJ whole) (NN equation)))))))))))))))))))))))
    (, ,)
    (SQ (VBD did)
      (NP (DT the) (NNS bacteria))
      (VP (VB retain)
        (NP (DT the) (JJ same) (NN efficiency))))
    (. ?)))

num(evolution-6, http:\/\/209.85.173.132\/search?q=cache:MX7Px_DB75IJ:-1)
nn(evolution-6, www.nmsr.org\/nylon.htm-2)
nn(evolution-6, +-3)
nn(evolution-6, nylonase-4)
amod(evolution-6, +-5)
nsubj(+-7, evolution-6)
dep(retain-86, +-7)
det(+-13, The-8)
amod(+-13, +-9)
amod(+-13, new-10)
amod(+-13, +-11)
nn(+-13, enzymes-12)
nsubj(+-15, +-13)
aux(+-15, are-14)
ccomp(+-7, +-15)
advmod(+-19, very-16)
advmod(inefficient-18, +-17)
amod(+-19, inefficient-18)
dobj(+-15, +-19)
aux(+-22, having-21)
dep(+-19, +-22)
quantmod(+2-24, only-23)
num(%-25, +2-24)
dobj(+-22, %-25)
number(+-27, 25-26)
num(%-25, +-27)
prepc_of(+-22, +-29)
det(+-33, the-30)
amod(+-33, +-31)
nn(+-33, efficiency-32)
dobj(+-29, +-33)
prepc_of(+-33, +-35)
det(enzymes-40, the-36)
amod(enzymes-40, +-37)
amod(enzymes-40, regular-38)
nn(enzymes-40, +-39)
dobj(+-35, enzymes-40)
nn(en-45, hl-43)
nn(en-45, =-44)
dobj(+-15, en-45)
conj_and(+-19, en-45)
conj_and(+-19, ct-47)
conj_and(en-45, ct-47)
punct(en-45, =-48)
partmod(en-45, clnk-49)
dobj(clnk-49, cd-51)
dep(1-53, =-52)
rcmod(cd-51, 1-53)
conj_and(cd-51, gl-55)
dep(us-57, =-56)
rcmod(gl-55, us-57)
det(mutation-62, a-60)
amod(mutation-62, remarkable-61)
dobj(+-15, mutation-62)
conj_and(+-19, mutation-62)
nsubj(caused-64, mutation-62)
rcmod(mutation-62, caused-64)
det(bacteria-66, the-65)
dobj(caused-64, bacteria-66)
aux(feast-68, to-67)
xcomp(caused-64, feast-68)
det(citrate-71, the-70)
prep_on(feast-68, citrate-71)
nsubj(fraction-77, This-73)
cop(fraction-77, is-74)
advmod(fraction-77, only-75)
det(fraction-77, a-76)
rcmod(citrate-71, fraction-77)
det(equation-81, the-79)
amod(equation-81, whole-80)
prep_of(fraction-77, equation-81)
aux(retain-86, did-83)
det(bacteria-85, the-84)
nsubj(retain-86, bacteria-85)
root(ROOT-0, retain-86)
det(efficiency-89, the-87)
amod(efficiency-89, same-88)
dobj(retain-86, efficiency-89)

(ROOT
  (SQ (VBD Did)
    (NP (PRP it))
    (VP (VB retain)
      (NP (DT the) (JJ same) (NN population) (NNS levels)))
    (. ?)))

aux(retain-3, Did-1)
nsubj(retain-3, it-2)
root(ROOT-0, retain-3)
det(levels-7, the-4)
amod(levels-7, same-5)
nn(levels-7, population-6)
dobj(retain-3, levels-7)

(ROOT
  (SQ (VBD Did)
    (NP (PRP it))
    (VP (VB have)
      (S
        (VP (TO to)
          (VP (VB shed)
            (NP (JJ other) (NNS functions))
            (PP (IN in)
              (NP (DT the) (NN process)))))))
    (. ?)))

aux(have-3, Did-1)
nsubj(have-3, it-2)
xsubj(shed-5, it-2)
root(ROOT-0, have-3)
aux(shed-5, to-4)
xcomp(have-3, shed-5)
amod(functions-7, other-6)
dobj(shed-5, functions-7)
det(process-10, the-9)
prep_in(shed-5, process-10)

(ROOT
  (S
    (PP (IN Without)
      (NP (DT this) (NN information)))
    (NP (PRP we))
    (VP (VBP have)
      (NP
        (NP (DT no) (NN way))
        (PP (IN of)
          (S
            (VP (VBG knowing)
              (SBAR (IN if)
                (S
                  (NP (NN anything))
                  (VP (VBD was)
                    (VP (VBN gained)
                      (CC or)
                      (VBN lost)
                      (PP (IN in)
                        (NP (DT this) (JJ whole) (NN process))))))))))))
    (. .)))

det(information-3, this-2)
prep_without(have-5, information-3)
nsubj(have-5, we-4)
root(ROOT-0, have-5)
det(way-7, no-6)
dobj(have-5, way-7)
prepc_of(way-7, knowing-9)
mark(gained-13, if-10)
nsubjpass(gained-13, anything-11)
nsubjpass(lost-15, anything-11)
auxpass(gained-13, was-12)
advcl(knowing-9, gained-13)
advcl(knowing-9, lost-15)
conj_or(gained-13, lost-15)
det(process-19, this-17)
amod(process-19, whole-18)
prep_in(gained-13, process-19)

(ROOT
  (S (`` ``)
    (S
      (S (CC and)
        (S
          (S
            (VP (VBG countering)
              (NP
                (NP (NN behe) (POS 's))
                (NNS claims))))
          (PRN (, ,)
            (S
              (NP (DT the) (NN evidence))
              (VP
                (ADVP (RB actually))
                (VBD suggested)
                (SBAR (IN that)
                  (S
                    (NP (DT this))
                    (VP (VBD was)
                      (NP
                        (NP (DT a) (NN change))
                        (PP (IN in)
                          (NP (JJ multiple) (NNS sites)))))))))
            (, ,))
          (NP (NN something) (NN Behe))
          (VP (VBZ has)
            (VP (VBN argued)))))
      (VP (MD can) (RB not)
        (VP (VB happen))))
    ('' '')
    (NP (PRP I))
    (VP (VBP 'm)
      (VP (VBG assuming)
        (NP (PRP$ your) (NN referring)
          (S
            (VP (TO to)
              (VP (VB chloroquine)
                (NP
                  (NP (NN resistance)
                    (CC and)
                    (NN Edge))
                  (PP (IN of)
                    (NP (NNP Evolution))))))))))
    (. ?)))

cc(argued-24, and-2)
dep(argued-24, countering-3)
poss(claims-6, behe-4)
dobj(countering-3, claims-6)
det(evidence-9, the-8)
nsubj(suggested-11, evidence-9)
advmod(suggested-11, actually-10)
parataxis(argued-24, suggested-11)
complm(change-16, that-12)
nsubj(change-16, this-13)
cop(change-16, was-14)
det(change-16, a-15)
ccomp(suggested-11, change-16)
amod(sites-19, multiple-18)
prep_in(change-16, sites-19)
nn(Behe-22, something-21)
nsubj(argued-24, Behe-22)
aux(argued-24, has-23)
csubj(happen-27, argued-24)
aux(happen-27, can-25)
neg(happen-27, not-26)
ccomp(assuming-31, happen-27)
nsubj(assuming-31, I-29)
aux(assuming-31, 'm-30)
root(ROOT-0, assuming-31)
poss(referring-33, your-32)
dobj(assuming-31, referring-33)
aux(chloroquine-35, to-34)
infmod(referring-33, chloroquine-35)
dobj(chloroquine-35, resistance-36)
dobj(chloroquine-35, Edge-38)
conj_and(resistance-36, Edge-38)
prep_of(resistance-36, Evolution-40)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (ADJP (JJ sure)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ 's)
              (ADJP
                (ADVP (RBR more) (IN than))
                (JJ likely)
                (S
                  (VP (TO to)
                    (VP (VB happen) (, ,)
                      (FRAG (CC but)
                        (RB not)
                        (PP (IN without)
                          (NP (DT some) (NN loss)))
                        (PP (IN in)
                          (NP
                            (NP (DT the) (JJ original) (NN functionality))
                            (PP (IN of)
                              (NP
                                (NP (DT the) (NN organism))
                                (PP (IN in)
                                  (NP (NN question)))))))))))))))))
    (. .)))

nsubj(sure-3, I-1)
cop(sure-3, 'm-2)
root(ROOT-0, sure-3)
nsubj(likely-8, it-4)
cop(likely-8, 's-5)
advmod(than-7, more-6)
advmod(likely-8, than-7)
dep(sure-3, likely-8)
aux(happen-10, to-9)
xcomp(likely-8, happen-10)
dep(not-13, but-12)
dep(happen-10, not-13)
dep(not-13, without-14)
det(loss-16, some-15)
pobj(without-14, loss-16)
dep(not-13, in-17)
det(functionality-20, the-18)
amod(functionality-20, original-19)
pobj(in-17, functionality-20)
det(organism-23, the-22)
prep_of(functionality-20, organism-23)
prep_in(organism-23, question-25)

(ROOT
  (S
    (VP (VBG Speaking)
      (PP (IN of)
        (NP (JJ multiple) (NNS mutations))))
    (: ...)))

root(ROOT-0, Speaking-1)
amod(mutations-4, multiple-3)
prep_of(Speaking-1, mutations-4)

(ROOT
  (S
    (NP (JJ http:\/\/www.amazon.com\/gp\/blog\/A3DGRQ0IO7KYQ2\/ref) (JJ =) (NN cm_blog_blogCan))
    (VP (VBP wait)
      (S
        (VP (TO to)
          (VP (VB read)
            (NP
              (NP (DT the) (NNS posts))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBP follow)))))))))
    (: ...)))

amod(cm_blog_blogCan-3, http:\/\/www.amazon.com\/gp\/blog\/A3DGRQ0IO7KYQ2\/ref-1)
amod(cm_blog_blogCan-3, =-2)
nsubj(wait-4, cm_blog_blogCan-3)
xsubj(read-6, cm_blog_blogCan-3)
root(ROOT-0, wait-4)
aux(read-6, to-5)
xcomp(wait-4, read-6)
det(posts-8, the-7)
dobj(read-6, posts-8)
nsubj(follow-10, posts-8)
rcmod(posts-8, follow-10)

(ROOT
  (S ('' '')
    (PP (IN In)
      (NP
        (NP (DT an) (JJR earlier) (NN article))
        (PP (IN in)
          (NP (DT the) (NNP NY) (NNP Times)))))
    (, ,)
    (NP (PRP it))
    (VP (VBD was)
      (VP (VBN reported)
        (SBAR (IN that)
          (S
            (NP (DT these) (NNS bacteria))
            (VP (VBD were) (RB not)
              (NP (DT the) (JJ same) (NNS ones) ('' '')
                (S
                  (VP (VB Tell)
                    (NP (PRP us))
                    (SBAR
                      (S
                        (NP (DT the) (NN article))
                        (VP (VBP please))))))))))
        (, ,)
        (SBAR (RB just) (IN so)
          (S
            (NP (PRP we))
            (VP (MD can)
              (VP (VB know)
                (PP (IN for)
                  (ADJP (JJ sure)))
                (SBAR
                  (S
                    (NP (PRP you))
                    (VP (VBP 're) (RB not)
                      (VP (VBG making)
                        (NP (DT this))
                        (PRT (RP up))))))))))))
    (. .)))

det(article-5, an-3)
amod(article-5, earlier-4)
prep_in(reported-13, article-5)
det(Times-9, the-7)
nn(Times-9, NY-8)
prep_in(article-5, Times-9)
nsubjpass(reported-13, it-11)
auxpass(reported-13, was-12)
root(ROOT-0, reported-13)
complm(ones-21, that-14)
det(bacteria-16, these-15)
nsubj(ones-21, bacteria-16)
cop(ones-21, were-17)
neg(ones-21, not-18)
det(ones-21, the-19)
amod(ones-21, same-20)
ccomp(reported-13, ones-21)
dep(ones-21, Tell-23)
dobj(Tell-23, us-24)
det(article-26, the-25)
nsubj(please-27, article-26)
dep(Tell-23, please-27)
advmod(know-33, just-29)
dep(know-33, so-30)
nsubj(know-33, we-31)
aux(know-33, can-32)
ccomp(reported-13, know-33)
prep_for(know-33, sure-35)
nsubj(making-39, you-36)
aux(making-39, 're-37)
neg(making-39, not-38)
ccomp(know-33, making-39)
dobj(making-39, this-40)
prt(making-39, up-41)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (NNP Behe))
        (VP (VBZ forgets)
          (S
            (VP (TO to)
              (VP (VB mention)
                (SBAR
                  (S
                    (VP (VBP are)
                      (NP
                        (NP (DT the) (JJ actual) (NNS findings))
                        (PP (IN of)
                          (NP
                            (NP (DT the) (NN research))
                            (PP (JJ such)
                              (PP (IN as)))))
                        ('' '')
                        (PP (NNP Over)
                          (NP (DT the) (NNS generations)))
                        (, ,)
                        (PP (IN in)
                          (NP (NNS fits)
                            (CC and)
                            (NNS starts)))))))))))))
    (, ,)
    (NP (DT the) (NNS bacteria))
    (VP (VBD did) (RB indeed)
      (VP (VB evolve)
        (PP (IN into)
          (NP (JJR faster) (NNS breeders)))))
    (. .)))

dep(forgets-3, What-1)
nsubj(forgets-3, Behe-2)
xsubj(mention-5, Behe-2)
dep(evolve-29, forgets-3)
aux(mention-5, to-4)
xcomp(forgets-3, mention-5)
cop(findings-9, are-6)
det(findings-9, the-7)
amod(findings-9, actual-8)
ccomp(mention-5, findings-9)
det(research-12, the-11)
prep_of(findings-9, research-12)
prep(research-12, such-13)
prep(such-13, as-14)
prep(findings-9, Over-16)
det(generations-18, the-17)
dep(Over-16, generations-18)
prep_in(findings-9, fits-21)
prep_in(findings-9, starts-23)
conj_and(fits-21, starts-23)
det(bacteria-26, the-25)
nsubj(evolve-29, bacteria-26)
aux(evolve-29, did-27)
advmod(evolve-29, indeed-28)
root(ROOT-0, evolve-29)
amod(breeders-32, faster-31)
prep_into(evolve-29, breeders-32)

(ROOT
  (S ('' '')
    (S
      (PP (IN Of)
        (NP (NN course)))
      (, ,)
      (NP
        (NP (NN none))
        (PP (IN of)
          (NP (DT these) (NNS bacteria))))
      (VP (VBD evolved)
        (PP (IN into)
          (NP
            (NP (NNS mammals))
            (, ,)
            (NP
              (NP (NN something))
              (VP
                (ADVP (RB hardly))
                (VBN expected)
                (PP (VBN given)
                  (NP
                    (NP (DT the) (JJ limited) (NNS timescales))
                    (VP (VBN involved))))))))))
    (, ,)
    (ADVP (RB however))
    (S
      (ADVP (JJ contrary)
        (PP (TO to)
          (NP
            (NP (NNP Behe) (POS 's))
            (NNS claims))))
      (, ,)
      (NP (DT these) (NNS bacteria))
      (VP (VBD started)
        (S
          (VP (TO to)
            (VP (VB feed)
              (PP (IN on)
                (NP (NN citrate)))
              (SBAR (RB even) (IN though)
                (S
                  (NP (PDT such) (DT a) (NN feat))
                  (VP (VBD required)
                    (NP (JJ multiple) (NNS changes))))))))))
    (. .)))

prep_of(evolved-9, course-3)
nsubj(evolved-9, none-5)
det(bacteria-8, these-7)
prep_of(none-5, bacteria-8)
root(ROOT-0, evolved-9)
prep_into(evolved-9, mammals-11)
appos(mammals-11, something-13)
advmod(expected-15, hardly-14)
partmod(something-13, expected-15)
prep(expected-15, given-16)
det(timescales-19, the-17)
amod(timescales-19, limited-18)
dep(given-16, timescales-19)
partmod(timescales-19, involved-20)
advmod(evolved-9, however-22)
poss(claims-27, Behe-25)
prep_contrary_to(started-31, claims-27)
det(bacteria-30, these-29)
nsubj(started-31, bacteria-30)
xsubj(feed-33, bacteria-30)
ccomp(evolved-9, started-31)
aux(feed-33, to-32)
xcomp(started-31, feed-33)
prep_on(feed-33, citrate-35)
advmod(required-41, even-36)
dep(required-41, though-37)
predet(feat-40, such-38)
det(feat-40, a-39)
nsubj(required-41, feat-40)
ccomp(feed-33, required-41)
amod(changes-43, multiple-42)
dobj(required-41, changes-43)

(ROOT
  (S ('' '')
    (PP (VBG See)
      (NP (DT the) (JJ previous)))
    (VP (VBZ points))
    (. .)))

det(previous-4, the-3)
prep_see(points-5, previous-4)
root(ROOT-0, points-5)

(ROOT
  (S
    (NP
      (NP (DT The) (NN question))
      (PP (IN at)
        (NP (NN hand))))
    (VP (VBZ is)
      (SBAR (IN whether)
        (CC or)
        (RB not)
        (S
          (NP
            (NP (NNP Darwin) (POS 's))
            (NN mechanism))
          (VP (MD can)
            (VP (VB produce)
              (NP
                (NP (DT the) (`` ``) (JJ apparent) ('' '') (NN design))
                (PP (IN in)
                  (NP (NN nature)))))))))
    (. .)))

det(question-2, The-1)
nsubj(is-5, question-2)
prep_at(question-2, hand-4)
root(ROOT-0, is-5)
complm(produce-13, whether-6)
ccomp(is-5, not-8)
conj_or(produce-13, not-8)
poss(mechanism-11, Darwin-9)
nsubj(produce-13, mechanism-11)
aux(produce-13, can-12)
ccomp(is-5, produce-13)
det(design-18, the-14)
amod(design-18, apparent-16)
dobj(produce-13, design-18)
prep_in(design-18, nature-20)

(ROOT
  (S
    (PP
      (ADVP (RB Now))
      (IN for)
      (NP (PRP$ your) (NN claim)
        (S
          (VP (TO to)
            (ADVP (RB even))
            (VP (VB be)
              (ADJP (JJ relevant)
                (PP (TO to)
                  (NP (DT this) (NN question)))))))))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (VP
        (VP (VB suggest)
          (SBAR (IN that)
            (S
              (NP (PRP you))
              (VP (VBP give)
                (NP (PRP us))
                (NP (DT the) (JJ full) (NN picture))))))
        (CC and)
        (VP (VB explain)
          (SBAR (IN whether)
            (CC or)
            (RB not)
            (S
              (NP (DT the) (JJ citrate) (VBG feeding) (NNS bacteria))
              (VP (VBD retained)
                (NP
                  (NP (DT the) (JJ same) (NN efficiency))
                  (, ,)
                  (NP (NN breeding) (NN rate))
                  (, ,)
                  (CC and)
                  (NP (NN functionality)))
                (PP (IN as)
                  (NP (PRP$ their) (JJR earlier) (NNS counter-parts)))))))))
    (. .)))

advmod(suggest-15, Now-1)
poss(claim-4, your-3)
prep_for(suggest-15, claim-4)
aux(relevant-8, to-5)
advmod(relevant-8, even-6)
cop(relevant-8, be-7)
infmod(claim-4, relevant-8)
det(question-11, this-10)
prep_to(relevant-8, question-11)
nsubj(suggest-15, I-13)
nsubj(explain-24, I-13)
aux(suggest-15, would-14)
root(ROOT-0, suggest-15)
complm(give-18, that-16)
nsubj(give-18, you-17)
ccomp(suggest-15, give-18)
iobj(give-18, us-19)
det(picture-22, the-20)
amod(picture-22, full-21)
dobj(give-18, picture-22)
conj_and(suggest-15, explain-24)
complm(retained-32, whether-25)
ccomp(explain-24, not-27)
conj_or(retained-32, not-27)
det(bacteria-31, the-28)
amod(bacteria-31, citrate-29)
amod(bacteria-31, feeding-30)
nsubj(retained-32, bacteria-31)
ccomp(explain-24, retained-32)
det(efficiency-35, the-33)
amod(efficiency-35, same-34)
dobj(retained-32, efficiency-35)
nn(rate-38, breeding-37)
dobj(retained-32, rate-38)
conj_and(efficiency-35, rate-38)
dobj(retained-32, functionality-41)
conj_and(efficiency-35, functionality-41)
poss(counter-parts-45, their-43)
amod(counter-parts-45, earlier-44)
prep_as(retained-32, counter-parts-45)

(ROOT
  (S ('' '')
    (NP (PRP It))
    (VP (VBZ seems)
      (ADJP (JJ clear))
      (SBAR (IN that)
        (S
          (NP
            (NP (RB even) (DT these) (JJ trivial) (NNS examples))
            (PP (IN of)
              (NP (JJ hard) (JJ scientific) (NN work))))
          (VP (VBP show)
            (SBAR (RB not) (RB only) (IN that)
              (S
                (NP (NNP ID))
                (VP
                  (VP (VBZ remains)
                    (NP (JJ scientifically) (NNS vacuous)))
                  (CC but)
                  (ADVP (RB also))
                  (SBAR (IN that)
                    (S
                      (NP (NNP ID))
                      (VP (VBZ has)
                        (S
                          (VP (TO to)
                            (VP (VB reject)
                              (CC and)
                              (VB ignore)
                              (NP
                                (NP (JJ contradicting) (NN evidence))
                                (SBAR
                                  (WHNP (WDT that))
                                  (S
                                    (VP (VBZ shows)
                                      (S
                                        (NP (PRP it))
                                        (VP (TO to)
                                          (VP (VB be)
                                            (ADJP (JJ wrong))))))))))))))))))))))
    (. .)))

nsubj(clear-4, It-2)
cop(clear-4, seems-3)
root(ROOT-0, clear-4)
complm(show-14, that-5)
advmod(examples-9, even-6)
det(examples-9, these-7)
amod(examples-9, trivial-8)
nsubj(show-14, examples-9)
amod(work-13, hard-11)
amod(work-13, scientific-12)
prep_of(examples-9, work-13)
ccomp(clear-4, show-14)
dep(vacuous-21, not-15)
advmod(vacuous-21, only-16)
dep(vacuous-21, that-17)
nsubj(vacuous-21, ID-18)
cop(vacuous-21, remains-19)
amod(vacuous-21, scientifically-20)
ccomp(show-14, vacuous-21)
ccomp(show-14, also-23)
advmod(vacuous-21, also-23)
conj_but(vacuous-21, also-23)
dep(has-26, that-24)
nsubj(has-26, ID-25)
xsubj(reject-28, ID-25)
ccomp(show-14, has-26)
ccomp(vacuous-21, has-26)
conj_but(vacuous-21, has-26)
aux(reject-28, to-27)
xcomp(has-26, reject-28)
xcomp(has-26, ignore-30)
conj_and(reject-28, ignore-30)
amod(evidence-32, contradicting-31)
dobj(reject-28, evidence-32)
nsubj(shows-34, evidence-32)
rcmod(evidence-32, shows-34)
nsubj(wrong-38, it-35)
aux(wrong-38, to-36)
cop(wrong-38, be-37)
xcomp(shows-34, wrong-38)

(ROOT
  (S ('' '')
    (NP (PRP It))
    (VP (VBZ seems)
      (ADJP (JJ clear))
      (SBAR (IN that) (RB even)
        (S
          (PP (IN in)
            (NP (DT this) (NN discussion)))
          (NP (PRP you))
          (VP (VBP 've)
            (VP (VBN decided)
              (S
                (VP (TO to)
                  (VP (VB give)
                    (NP (NNS answers))
                    (PP (TO to)
                      (NP
                        (NP (NNS questions))
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (NP (PRP you))
                            (VP (VBP know)
                              (SBAR
                                (S
                                  (VP (MD will)
                                    (VP (VB fit)
                                      (NP (PRP$ your) (VBN accepted) (NN conclusion)))))))))))))))))))
    (. .)))

nsubj(clear-4, It-2)
cop(clear-4, seems-3)
root(ROOT-0, clear-4)
complm(decided-12, that-5)
advmod(decided-12, even-6)
det(discussion-9, this-8)
prep_in(decided-12, discussion-9)
nsubj(decided-12, you-10)
xsubj(give-14, you-10)
aux(decided-12, 've-11)
ccomp(clear-4, decided-12)
aux(give-14, to-13)
xcomp(decided-12, give-14)
dobj(give-14, answers-15)
prep_to(give-14, questions-17)
nsubj(fit-22, questions-17)
rel(know-20, which-18)
nsubj(know-20, you-19)
rcmod(questions-17, know-20)
aux(fit-22, will-21)
ccomp(know-20, fit-22)
poss(conclusion-25, your-23)
amod(conclusion-25, accepted-24)
dobj(fit-22, conclusion-25)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP give)
      (NP (PDT all) (DT this) (NN talk))
      (NP
        (NP (RB about) (DT a) (JJ new) (NN function))
        (VP (VBG evolving)
          (PP (IN while)
            (S
              (VP (VBG giving)
                (ADVP
                  (NP (DT no) (NN indication))
                  (RB as))
                (PP (TO to))
                (SBAR (IN whether)
                  (CC or)
                  (RB not)
                  (S
                    (NP
                      (NP (DT the) (JJ same) (NN level))
                      (PP (IN of)
                        (NP (NN functionality))))
                    (VP (VBD was)
                      (VP (VBN retained)
                        (PP (IN from)
                          (NP (DT the) (JJ original) (NN population)))))))))))))
    (. .)))

nsubj(give-2, You-1)
root(ROOT-0, give-2)
predet(talk-5, all-3)
det(talk-5, this-4)
iobj(give-2, talk-5)
advmod(function-9, about-6)
det(function-9, a-7)
amod(function-9, new-8)
dobj(give-2, function-9)
partmod(function-9, evolving-10)
prepc_while(evolving-10, giving-12)
det(indication-14, no-13)
npadvmod(as-15, indication-14)
advmod(giving-12, as-15)
prep(giving-12, to-16)
complm(retained-26, whether-17)
ccomp(giving-12, not-19)
conj_or(retained-26, not-19)
det(level-22, the-20)
amod(level-22, same-21)
nsubjpass(retained-26, level-22)
prep_of(level-22, functionality-24)
auxpass(retained-26, was-25)
ccomp(giving-12, retained-26)
det(population-30, the-28)
amod(population-30, original-29)
prep_from(retained-26, population-30)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD ca) (RB n't)
      (VP (VB say)
        (SBAR
          (S
            (NP (PRP I))
            (VP (VBP wonder)
              (SBAR
                (WHADVP (WRB why))
                (S
                  (NP
                    (NP (DT the) (NNS results))
                    (PP (IN of)
                      (NP (DT the) (NNP Lenski) (NN experiment))))
                  (VP (VBP have)
                    (VP (VBN been)
                      (VP (VBN called)
                        (PP (IN into)
                          (NP
                            (NP (NN question))
                            (PP (IN in)
                              (NP (DT the) (JJ first) (NN place)))))))))))))))
    (. .)))

nsubj(say-4, I-1)
aux(say-4, ca-2)
neg(say-4, n't-3)
root(ROOT-0, say-4)
nsubj(wonder-6, I-5)
ccomp(say-4, wonder-6)
advmod(called-16, why-7)
det(results-9, the-8)
nsubjpass(called-16, results-9)
det(experiment-13, the-11)
nn(experiment-13, Lenski-12)
prep_of(results-9, experiment-13)
aux(called-16, have-14)
auxpass(called-16, been-15)
advcl(wonder-6, called-16)
prep_into(called-16, question-18)
det(place-22, the-20)
amod(place-22, first-21)
prep_in(question-18, place-22)

(ROOT
  (S ('' '')
    (NP (WP What))
    (VP (VBZ 's)
      (ADJP
        (ADJP (RB even) (JJR worse))
        (PP (IN about)
          (NP (NNP ID))))
      (S
        (VP (VBG being)
          (NP (JJ scientifically) (NNS vacuous)))))
    (. ?)))

nsubj(worse-5, What-2)
cop(worse-5, 's-3)
advmod(worse-5, even-4)
root(ROOT-0, worse-5)
prep_about(worse-5, ID-7)
cop(vacuous-10, being-8)
amod(vacuous-10, scientifically-9)
xcomp(worse-5, vacuous-10)

(ROOT
  (S
    (PP (IN In)
      (NP (PRP$ my) (NN opinion)))
    (, ,)
    (S
      (NP (NNP ID))
      (VP (VBG being)
        (ADJP (JJ wrong))))
    (CC and)
    (S
      (VP (VBG knowing)
        (NP (PRP it))))
    (. .)))

poss(opinion-3, my-2)
prep_in(wrong-7, opinion-3)
nsubj(wrong-7, ID-5)
nsubj(knowing-9, ID-5)
cop(wrong-7, being-6)
root(ROOT-0, wrong-7)
conj_and(wrong-7, knowing-9)
dobj(knowing-9, it-10)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS bacteria))
      (PP (IN in)
        (NP (DT the) (NNS flasks))))
    (NP (NN today))
    (VP (VBP breed)
      (PP
        (ADVP
          (NP (CD 75) (NN %))
          (RBR faster))
        (IN on)
        (NP
          (NP (NN average))
          (PP (IN than)
            (NP (PRP$ their) (JJ original) (NN ancestor))))))
    (. .)))

det(bacteria-2, The-1)
nsubj(breed-7, bacteria-2)
det(flasks-5, the-4)
prep_in(bacteria-2, flasks-5)
nsubj(breed-7, today-6)
root(ROOT-0, breed-7)
num(%-9, 75-8)
npadvmod(faster-10, %-9)
advmod(breed-7, faster-10)
prep_on(breed-7, average-12)
poss(ancestor-16, their-14)
amod(ancestor-16, original-15)
prep_than(average-12, ancestor-16)

(ROOT
  (S ('' '')
    (S
      (ADVP (RB Sounds))
      (PP (IN like)
        (NP (DT a) (NN theory)))
      (NP (PRP I))
      (VP (VBP know)))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is) (RB n't)
        (NP (NNP ID))))
    (. ...)))

advmod(know-7, Sounds-2)
det(theory-5, a-4)
prep_like(know-7, theory-5)
nsubj(know-7, I-6)
root(ROOT-0, know-7)
nsubj(ID-13, it-10)
cop(ID-13, is-11)
neg(ID-13, n't-12)
conj_but(know-7, ID-13)

(ROOT
  (FRAG ('' '')
    (NP (NNP ``))
    (PP (IN At)
      (NP (WDT what) (NN cost)))
    (. ?)))

dep(``-2, At-3)
dep(cost-5, what-4)
pobj(At-3, cost-5)

(ROOT
  (SQ (VBD Did)
    (NP (DT these) (JJ new) (NNS super-breeders))
    (VP (VB need)
      (S
        (VP (TO to)
          (VP (VB eliminate)
            (NP (DT some) (NNS proteins)
              (CC or)
              (NNS functions))
            (PP (IN from)
              (NP (PRP$ their) (NNS systems)))
            (SBAR (IN in) (NN order)
              (S
                (VP (TO to)
                  (VP (VB achieve)
                    (NP (DT this) (NN ability))))))))))
    (. ?)))

aux(need-5, Did-1)
det(super-breeders-4, these-2)
amod(super-breeders-4, new-3)
nsubj(need-5, super-breeders-4)
xsubj(eliminate-7, super-breeders-4)
root(ROOT-0, need-5)
aux(eliminate-7, to-6)
xcomp(need-5, eliminate-7)
det(proteins-9, some-8)
dobj(eliminate-7, proteins-9)
dobj(eliminate-7, functions-11)
conj_or(proteins-9, functions-11)
poss(systems-14, their-13)
prep_from(eliminate-7, systems-14)
mark(achieve-18, in-15)
dep(achieve-18, order-16)
aux(achieve-18, to-17)
purpcl(eliminate-7, achieve-18)
det(ability-20, this-19)
dobj(achieve-18, ability-20)

(ROOT
  (SQ (VBP Do)
    (NP (DT the) (JJ faster) (NNS breeders))
    (ADVP (RB still))
    (VP (VB have)
      (NP
        (NP (DT the) (JJ same) (NN efficiency))
        (PP (IN in)
          (NP
            (NP (DT the) (NNS functions))
            (SBAR
              (S
                (NP (NNP Lenski))
                (VP (VBZ describes))))))))
    (. ?)))

aux(have-6, Do-1)
det(breeders-4, the-2)
amod(breeders-4, faster-3)
nsubj(have-6, breeders-4)
advmod(have-6, still-5)
root(ROOT-0, have-6)
det(efficiency-9, the-7)
amod(efficiency-9, same-8)
dobj(have-6, efficiency-9)
det(functions-12, the-11)
prep_in(efficiency-9, functions-12)
dobj(describes-14, functions-12)
nsubj(describes-14, Lenski-13)
rcmod(functions-12, describes-14)

(ROOT
  (FRAG
    (WHNP (WDT What))
    (PP (IN about)
      (NP (NN population) (NN size)))
    (. ?)))

root(ROOT-0, What-1)
dep(What-1, about-2)
nn(size-4, population-3)
pobj(about-2, size-4)

(ROOT
  (SBARQ
    (PP (IN Despite)
      (NP (DT the) (JJ rapid) (NN breeding)))
    (, ,)
    (SQ
      (SQ (VBD did)
        (NP (DT the) (NN population) (NN size))
        (VP (VB remain)
          (NP (DT the) (JJ same))))
      (, ,)
      (CC or)
      (SQ (VBD did)
        (NP (PRP they))
        (VP
          (ADVP (RB just))
          (VB draw)
          (NP
            (NP (DT the) (NN claim))
            (PP (IN of)
              (NP
                (NP (JJ rapid) (NN breeding))
                (VP (VBN based)
                  (PP (IN on)
                    (NP (DT the) (NN time)))))))
          (SBAR
            (S
              (NP (PRP it))
              (VP (VBD took)
                (PP (IN for)
                  (NP (JJ new) (NNS generations)))
                (S
                  (VP (TO to)
                    (VP (VB arise))))))))))
    (. ?)))

det(breeding-4, the-2)
amod(breeding-4, rapid-3)
prep_despite(same-12, breeding-4)
aux(same-12, did-6)
det(size-9, the-7)
nn(size-9, population-8)
nsubj(same-12, size-9)
cop(same-12, remain-10)
det(same-12, the-11)
root(ROOT-0, same-12)
aux(draw-18, did-15)
nsubj(draw-18, they-16)
advmod(draw-18, just-17)
conj_or(same-12, draw-18)
det(claim-20, the-19)
dobj(draw-18, claim-20)
amod(breeding-23, rapid-22)
prep_of(claim-20, breeding-23)
partmod(breeding-23, based-24)
det(time-27, the-26)
prep_on(based-24, time-27)
nsubj(took-29, it-28)
xsubj(arise-34, it-28)
dep(draw-18, took-29)
amod(generations-32, new-31)
prep_for(took-29, generations-32)
aux(arise-34, to-33)
xcomp(took-29, arise-34)

(ROOT
  (S (`` ``)
    (CC and)
    (NP (PRP they))
    (ADVP (RB also))
    (VP (VBD showed)
      (NP
        (NP (DT some) (JJ interesting) (NNS findings))
        (SBAR
          (WHNP
            (WHNP (WDT that) (NN show))
            (NP (WRB how) (JJ beneficial\/detrimental)))
          (S
            (VP (VBZ depends)
              (PP (IN on)
                (NP (DT the) (NN environment)))
              ('' '')
              (SBAR (RB Now) (IN that)
                (S
                  (VP (VBZ 's)
                    (NP (DT a) (JJ spectacular) (NN way)
                      (S
                        (VP (TO to)
                          (VP (VB cover)
                            (NP
                              (NP (CD one) (POS 's))
                              (NN ass))
                            (SBAR
                              (WHADVP (WRB when))
                              (S
                                (NP (PRP they))
                                (VP (VBP know)
                                  (SBAR
                                    (S
                                      (NP (PRP they))
                                      (VP (VBP 've)
                                        (VP (VBN run)
                                          (PP (IN into)
                                            (NP (DT a) (NN wall))))))))))))))))))))))
    (. .)))

cc(showed-5, and-2)
nsubj(showed-5, they-3)
advmod(showed-5, also-4)
root(ROOT-0, showed-5)
det(findings-8, some-6)
amod(findings-8, interesting-7)
dobj(showed-5, findings-8)
det(show-10, findings-8)
nsubj(depends-13, show-10)
nsubj(way-23, show-10)
advmod(beneficial\/detrimental-12, how-11)
dep(show-10, beneficial\/detrimental-12)
rcmod(findings-8, depends-13)
det(environment-16, the-15)
prep_on(depends-13, environment-16)
advmod(way-23, Now-18)
dep(way-23, that-19)
cop(way-23, 's-20)
det(way-23, a-21)
amod(way-23, spectacular-22)
ccomp(depends-13, way-23)
aux(cover-25, to-24)
infmod(way-23, cover-25)
poss(ass-28, one-26)
dobj(cover-25, ass-28)
advmod(know-31, when-29)
nsubj(know-31, they-30)
advcl(cover-25, know-31)
nsubj(run-34, they-32)
aux(run-34, 've-33)
ccomp(know-31, run-34)
det(wall-37, a-36)
prep_into(run-34, wall-37)

