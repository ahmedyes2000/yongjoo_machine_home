(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP 'm) (RB not)
        (NP (DT a) (NN cell) (NN expert))
        (ADVP (RB either))))
    (, ,)
    (CC and)
    (S
      (S
        (NP
          (NP (NN understanding))
          (SBAR
            (WHNP (WP what))
            (S
              (NP (NNP Behe))
              (VP (VBD wrote)
                (SBAR (IN in)
                  (S
                    (NP (PRP$ his) (NN argument))
                    (VP (VBZ does) (RB n't)
                      (VP (VB require)
                        (NP (PRP it))))))
                (, ,)
                (SBAR (IN because)
                  (S
                    (NP (PRP he))
                    (VP (VBD did) (RB n't)
                      (VP (VB say)
                        (NP (NN anything))
                        (PP (IN except) ('' '')
                          (NP (NNP Cellular) (NN machinery)))))))))))
        (VP (VBZ is)
          (ADJP (JJ complex))))
      (, ,)
      (ADVP (RB therefore))
      (S
        (NP (PRP it))
        (VP (MD must)
          (VP (VB be)
            (VP (VBN designed))))))
    (. .)))

nsubj(expert-6, I-1)
cop(expert-6, 'm-2)
neg(expert-6, not-3)
det(expert-6, a-4)
nn(expert-6, cell-5)
root(ROOT-0, expert-6)
advmod(expert-6, either-7)
dobj(require-19, understanding-10)
dobj(say-26, understanding-10)
nsubj(complex-33, understanding-10)
rel(wrote-13, what-11)
nsubj(wrote-13, Behe-12)
rcmod(understanding-10, wrote-13)
mark(require-19, in-14)
poss(argument-16, his-15)
nsubj(require-19, argument-16)
aux(require-19, does-17)
neg(require-19, n't-18)
advcl(wrote-13, require-19)
dobj(require-19, it-20)
mark(say-26, because-22)
nsubj(say-26, he-23)
aux(say-26, did-24)
neg(say-26, n't-25)
advcl(wrote-13, say-26)
dobj(say-26, anything-27)
nn(machinery-31, Cellular-30)
prep_except(say-26, machinery-31)
cop(complex-33, is-32)
conj_and(expert-6, complex-33)
advmod(complex-33, therefore-35)
nsubjpass(designed-39, it-36)
aux(designed-39, must-37)
auxpass(designed-39, be-38)
dep(complex-33, designed-39)

(ROOT
  (S ('' '')
    (S
      (NP (DT This))
      (VP (VBZ is) (RB n't)
        (NP (DT an) (NN argument))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (NP (DT a) (NN statement)))
    (. .)))

nsubj(argument-6, This-2)
cop(argument-6, is-3)
neg(argument-6, n't-4)
det(argument-6, an-5)
ccomp(statement-11, argument-6)
nsubj(statement-11, it-8)
cop(statement-11, 's-9)
det(statement-11, a-10)
root(ROOT-0, statement-11)

(ROOT
  (S
    (S
      (S
        (VP (TO To)
          (VP (VB make)
            (S
              (NP (PRP it))
              (NP (DT an) (NN argument))))))
      (PRN (, ,)
        (S
          (NP (PRP he))
          (VP (MD would)
            (VP (VB have)
              (S
                (VP (TO to)
                  (VP (VB say)))))))
        (, ,))
      (`` ``)
      (NP (NNP Cellular) (NN machinery))
      (VP (VBZ is)
        (ADJP (JJ complex))))
    (, ,)
    (CC and)
    (S
      (NP
        (NP (DT these) (NNS examples))
        (PP (IN of)
          (NP (NN complexity))))
      (VP (VBP make)
        (SBAR
          (S
            (NP (PRP me))
            (VP (VBP think)
              (SBAR
                (S
                  (NP (PRP it))
                  (VP (VBZ is)
                    (VP (VBN designed))))))))))
    (. .)))

aux(make-2, To-1)
dep(complex-17, make-2)
nsubj(argument-5, it-3)
det(argument-5, an-4)
xcomp(make-2, argument-5)
nsubj(have-9, he-7)
xsubj(say-11, he-7)
aux(have-9, would-8)
parataxis(complex-17, have-9)
aux(say-11, to-10)
xcomp(have-9, say-11)
nn(machinery-15, Cellular-14)
nsubj(complex-17, machinery-15)
cop(complex-17, is-16)
root(ROOT-0, complex-17)
det(examples-21, these-20)
nsubj(make-24, examples-21)
prep_of(examples-21, complexity-23)
conj_and(complex-17, make-24)
nsubj(think-26, me-25)
ccomp(make-24, think-26)
nsubjpass(designed-29, it-27)
auxpass(designed-29, is-28)
ccomp(think-26, designed-29)

(ROOT
  (S ('' '')
    (S
      (ADVP (RB Then))
      (NP (PRP he))
      (VP (MD would)
        (VP (VB speak)
          (PP (TO to)
            (NP
              (NP (DT each))
              (PP (IN of)
                (NP
                  (NP (DT those) (NNS examples))
                  (PP (IN in)
                    (NP (NN detail))))))))))
    (, ,)
    (S
      (S
        (VP (VBG explaining)
          (SBAR
            (WHADVP (WRB why))
            (S
              (NP (PRP$ their) (NN complexity))
              (VP
                (VP (VBZ indicates)
                  (NP (NN design)))
                (, ,)
                (CC and)
                (VP (VBZ is) (RB not)
                  (ADJP (JJR better))))))))
      (VP (VBD explained)
        (PP (IN through)
          (NP (DT some) (JJ other) (NN mechanism)))))
    (. .)))

advmod(speak-5, Then-2)
nsubj(speak-5, he-3)
aux(speak-5, would-4)
root(ROOT-0, speak-5)
prep_to(speak-5, each-7)
det(examples-10, those-9)
prep_of(each-7, examples-10)
prep_in(examples-10, detail-12)
csubj(explained-25, explaining-14)
advmod(indicates-18, why-15)
poss(complexity-17, their-16)
nsubj(indicates-18, complexity-17)
nsubj(better-24, complexity-17)
advcl(explaining-14, indicates-18)
dobj(indicates-18, design-19)
cop(better-24, is-22)
neg(better-24, not-23)
advcl(explaining-14, better-24)
conj_and(indicates-18, better-24)
ccomp(speak-5, explained-25)
det(mechanism-29, some-27)
amod(mechanism-29, other-28)
prep_through(explained-25, mechanism-29)

(ROOT
  (S
    (NP (DT That))
    (VP (MD would)
      (VP (VB be)
        (NP (DT an) (NN argument))))
    (. .)))

nsubj(argument-5, That-1)
aux(argument-5, would-2)
cop(argument-5, be-3)
det(argument-5, an-4)
root(ROOT-0, argument-5)

(ROOT
  (S
    (ADVP (RB ICDESIGN))
    (, ,)
    (NP (PRP I))
    (VP (VBP have)
      (VP (VBN had)
        (NP (DT these) (NNS discussions))
        (PRN (, ,)
          (S
            (VP (VBG representing)
              (NP (DT both) (NNS sides))))
          (, ,))
        (SBAR
          (WHNP
            (ADJP (RB too) (JJ many))
            (NNS times))
          (S
            (VP (TO to)
              (VP (VB be)
                (VP (VBN derailed)
                  (PP (IN by)
                    (NP (PRP$ your) (NN question))))))))))
    (. .)))

advmod(had-5, ICDESIGN-1)
nsubj(had-5, I-3)
aux(had-5, have-4)
root(ROOT-0, had-5)
det(discussions-7, these-6)
dobj(had-5, discussions-7)
parataxis(had-5, representing-9)
det(sides-11, both-10)
dobj(representing-9, sides-11)
advmod(many-14, too-13)
amod(times-15, many-14)
nsubjpass(derailed-18, times-15)
aux(derailed-18, to-16)
auxpass(derailed-18, be-17)
xcomp(had-5, derailed-18)
poss(question-21, your-20)
agent(derailed-18, question-21)

(ROOT
  (S
    (NP (NNP Discuss) (NNP Behe))
    (VP
      (VP (VBZ 's)
        (NP
          (NP (NN argument))
          (PP (IN with)
            (NP (PRP me)))))
      (, ,)
      (CC but)
      (VP (VBP do) (RB n't)
        (VP (VB try)
          (S
            (VP (TO to)
              (VP (VB lead)
                (NP (PRP me))
                (ADVP (RB astray))
                (PP (IN with)
                  (NP
                    (NP (NNS questions))
                    (PP (IN outside)
                      (NP
                        (NP (DT the) (NN purview))
                        (PP (IN of)
                          (NP
                            (NP (DT the) (NN topic))
                            (PP (IN at)
                              (NP (NN hand)))))))))))))))
    (. .)))

nn(Behe-2, Discuss-1)
nsubj(argument-4, Behe-2)
nsubj(try-11, Behe-2)
xsubj(lead-13, Behe-2)
cop(argument-4, 's-3)
root(ROOT-0, argument-4)
prep_with(argument-4, me-6)
aux(try-11, do-9)
neg(try-11, n't-10)
conj_but(argument-4, try-11)
aux(lead-13, to-12)
xcomp(try-11, lead-13)
dobj(lead-13, me-14)
advmod(lead-13, astray-15)
prep_with(lead-13, questions-17)
det(purview-20, the-19)
prep_outside(questions-17, purview-20)
det(topic-23, the-22)
prep_of(purview-20, topic-23)
prep_at(topic-23, hand-25)

