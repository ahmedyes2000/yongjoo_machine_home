(ROOT
  (SBARQ (`` ``)
    (WHADVP (WRB Why))
    (SQ (VBP are)
      (NP (DT these) (CD two) (NNS questions))
      (ADJP (RB always) (JJ independent)))
    (. ?)))

advmod(independent-8, Why-2)
cop(independent-8, are-3)
det(questions-6, these-4)
num(questions-6, two-5)
nsubj(independent-8, questions-6)
advmod(independent-8, always-7)
root(ROOT-0, independent-8)

(ROOT
  (S (`` ``)
    (PP (IN Because)
      (NP
        (NP (NN science))
        (SBAR (IN as)
          (S
            (NP (PRP we))
            (VP (VBP know)
              (NP (PRP it))
              (NP (NN today)))))))
    (VP (MD can)
      (ADVP (RB only))
      (VP (VB answer)
        (NP
          (NP (CD one))
          (PP (IN of)
            (NP (PRP them))))))
    (. .)))

prep_because(answer-11, science-3)
mark(know-6, as-4)
nsubj(know-6, we-5)
dep(science-3, know-6)
dobj(know-6, it-7)
tmod(know-6, today-8)
aux(answer-11, can-9)
advmod(answer-11, only-10)
root(ROOT-0, answer-11)
dobj(answer-11, one-12)
prep_of(one-12, them-14)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (MD would)
      (VP (VB think)
        (SBAR (IN that)
          (S
            (NP
              (NP (DT any) (NN theory))
              (PP (IN of)
                (NP
                  (NP (NNP ID))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBD made)
                        (NP (DT no) (NN attempt)
                          (S
                            (VP (TO to)
                              (VP (VB identify)
                                (CC and)
                                (VB analyze)
                                (NP (DT the) (NN designer))))))))))))
            (VP (VBD was)
              (NP (DT an) (JJ incomplete) (NN theory)))))))
    (. .)))

nsubj(think-4, I-2)
aux(think-4, would-3)
root(ROOT-0, think-4)
complm(theory-23, that-5)
det(theory-7, any-6)
nsubj(theory-23, theory-7)
prep_of(theory-7, ID-9)
nsubj(made-11, ID-9)
rcmod(ID-9, made-11)
det(attempt-13, no-12)
dobj(made-11, attempt-13)
aux(identify-15, to-14)
infmod(attempt-13, identify-15)
infmod(attempt-13, analyze-17)
conj_and(identify-15, analyze-17)
det(designer-19, the-18)
dobj(identify-15, designer-19)
cop(theory-23, was-20)
det(theory-23, an-21)
amod(theory-23, incomplete-22)
ccomp(think-4, theory-23)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (MD would)
      (VP (VB think)
        (ADVP (RB not))
        (, ,)
        (SBAR (IN since)
          (S
            (S
              (NP (NNP ID))
              (ADVP (RB only))
              (VP (VBZ tries)
                (S
                  (VP (TO to)
                    (VP (VB identify)
                      (NP
                        (NP (DT the) (NNS features))
                        (PP (IN of)
                          (NP
                            (NP (DT the) (JJ natural) (NN world))
                            (SBAR
                              (WHNP (WDT which))
                              (S
                                (VP (VBP are)
                                  (VP (VBN designed)))))))))))))
            (: ...)
            (CC and)
            (S
              (NP (NN nothing))
              (ADJP (JJR more)))))))
    (. .)))

nsubj(think-4, I-2)
aux(think-4, would-3)
root(ROOT-0, think-4)
neg(think-4, not-5)
mark(tries-10, since-7)
nsubj(tries-10, ID-8)
xsubj(identify-12, ID-8)
nsubj(more-25, ID-8)
advmod(tries-10, only-9)
advcl(think-4, tries-10)
aux(identify-12, to-11)
xcomp(tries-10, identify-12)
det(features-14, the-13)
dobj(identify-12, features-14)
det(world-18, the-16)
amod(world-18, natural-17)
prep_of(features-14, world-18)
nsubjpass(designed-21, world-18)
auxpass(designed-21, are-20)
rcmod(world-18, designed-21)
dep(more-25, nothing-24)
advcl(think-4, more-25)
conj_and(tries-10, more-25)

(ROOT
  (S
    (NP
      (NP (VBG Asking) (NNS questions))
      (PP (IN about)
        (NP (DT the) (NN designer))))
    (VP (VBP are)
      (ADJP (JJ separate)
        (PP (IN from)
          (S
            (VP (VBG determining)
              (SBAR (IN if)
                (S
                  (NP (NN something))
                  (VP (VBD was)
                    (VP (VBN planned))))
                (CC or)
                (RB not)))))))
    (. .)))

amod(questions-2, Asking-1)
nsubj(separate-7, questions-2)
det(designer-5, the-4)
prep_about(questions-2, designer-5)
cop(separate-7, are-6)
root(ROOT-0, separate-7)
prepc_from(separate-7, determining-9)
mark(planned-13, if-10)
nsubjpass(planned-13, something-11)
auxpass(planned-13, was-12)
advcl(determining-9, planned-13)
advcl(determining-9, not-15)
conj_or(planned-13, not-15)

(ROOT
  (S ('' '')
    (ADVP (RB Also))
    (, ,)
    (VP (MD would)
      (PRN (RB n't)
        (NP
          (NP (DT a) (JJ clear) (NN theory))
          (PP (IN on)
            (NP
              (NP (DT the) (NN designer))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NNS intentions))
                  (CC and)
                  (NP (NNS methods)))
                (-RRB- -RRB-))))))
      (VP (VB be)
        (ADJP (RB very) (JJ useful)
          (PP (IN in)
            (S
              (VP (VBG determining)
                (SBAR
                  (SBAR
                    (WHNP (WP what))
                    (S
                      (NP
                        (NP (NNS aspects))
                        (PP (IN of)
                          (NP (DT the) (JJ biological) (NN world))))
                      (VP (VBD were)
                        (VP (VBN designed)))))
                  (, ,)
                  (SBAR
                    (WHADVP (WRB why))
                    (S
                      (NP (PRP they))
                      (VP (VBD were)
                        (VP (VBN designed)
                          (NP (DT that) (NN way))))))
                  (, ,)
                  (CC and)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBD were)
                        (VP (VBN evolved))))))))))))
    (. .)))

advmod(useful-19, Also-2)
aux(useful-19, would-4)
dep(theory-8, n't-5)
det(theory-8, a-6)
amod(theory-8, clear-7)
dep(useful-19, theory-8)
det(designer-11, the-10)
prep_on(theory-8, designer-11)
dep(designer-11, intentions-13)
dep(designer-11, methods-15)
conj_and(intentions-13, methods-15)
cop(useful-19, be-17)
advmod(useful-19, very-18)
root(ROOT-0, useful-19)
prepc_in(useful-19, determining-21)
dobj(designed-29, what-22)
nsubjpass(designed-29, aspects-23)
det(world-27, the-25)
amod(world-27, biological-26)
prep_of(aspects-23, world-27)
auxpass(designed-29, were-28)
dep(determining-21, designed-29)
advmod(designed-34, why-31)
nsubjpass(designed-34, they-32)
auxpass(designed-34, were-33)
dep(designed-29, designed-34)
det(way-36, that-35)
dobj(designed-34, way-36)
nsubjpass(evolved-41, which-39)
auxpass(evolved-41, were-40)
dep(determining-21, evolved-41)
conj_and(designed-29, evolved-41)

(ROOT
  (S ('' '')
    (ADVP (RB Maybe))
    (, ,)
    (ADVP (CC but))
    (NP (DT those) (NNS questions))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN inferred)
          (PP (IN without)
            (NP
              (NP (NN knowledge))
              (PP (IN of)
                (NP (NNS intentions)
                  (CC and)
                  (NNS methods))))))))
    (. .)))

advmod(inferred-9, Maybe-2)
advmod(inferred-9, but-4)
det(questions-6, those-5)
nsubjpass(inferred-9, questions-6)
aux(inferred-9, can-7)
auxpass(inferred-9, be-8)
root(ROOT-0, inferred-9)
prep_without(inferred-9, knowledge-11)
prep_of(knowledge-11, intentions-13)
prep_of(knowledge-11, methods-15)
conj_and(intentions-13, methods-15)

