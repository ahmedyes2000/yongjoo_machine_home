(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB recently))
    (VP (VBP read)
      (FRAG
        (WHNP (WDT that))
        (SBAR (IN after)
          (S
            (NP
              (NP (JJ careful) (NN study))
              (NP (DT the) (`` ``) (JJ backwards) ('' '') (NN wiring)))
            (VP (VBZ is)
              (ADJP (JJ essential)))))
        (. .)))
    (. .)))

nsubj(read-3, I-1)
advmod(read-3, recently-2)
root(ROOT-0, read-3)
dep(essential-14, that-4)
mark(essential-14, after-5)
amod(study-7, careful-6)
nsubj(essential-14, study-7)
det(wiring-12, the-8)
amod(wiring-12, backwards-10)
dep(study-7, wiring-12)
cop(essential-14, is-13)
dep(read-3, essential-14)

(ROOT
  (FRAG
    (NP (NN something))
    (S
      (VP (TO to)
        (VP (VB do)
          (PP (IN with)
            (NP (NN cooling))))))
    (. ?)))

root(ROOT-0, something-1)
aux(do-3, to-2)
dep(something-1, do-3)
prep_with(do-3, cooling-5)

(ROOT
  (S
    (VP (VB Remember)
      (NP
        (NP (DT the) (`` ``) (JJ useless) ('' '') (NN appendix))
        (: ...)
        (ADJP (RB not) (JJ useless))))
    (. .)))

root(ROOT-0, Remember-1)
det(appendix-6, the-2)
amod(appendix-6, useless-4)
dobj(Remember-1, appendix-6)
neg(useless-9, not-8)
amod(appendix-6, useless-9)

(ROOT
  (S
    (NP
      (NP (PRP$ Your) (NN view))
      (SBAR (IN that)
        (S
          (NP (JJ accidental) (NN nature))
          (VP (VBZ is)
            (NP (DT a) (JJ great) (NN designer))))))
    (VP (VBZ is)
      (SBAR
        (WHNP (WP what))
        (S
          (VP (VBZ is)
            (NP (NN nonsense))))))
    (: ...)))

poss(view-2, Your-1)
nsubj(is-10, view-2)
complm(designer-9, that-3)
amod(nature-5, accidental-4)
nsubj(designer-9, nature-5)
cop(designer-9, is-6)
det(designer-9, a-7)
amod(designer-9, great-8)
dep(view-2, designer-9)
root(ROOT-0, is-10)
nsubj(nonsense-13, what-11)
cop(nonsense-13, is-12)
ccomp(is-10, nonsense-13)

(ROOT
  (S
    (NP
      (NP (NNP Funny))
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP (NN man))
          (VP (VBZ is)
            (VP (VBG scrambling)
              (S
                (VP (TO to)
                  (VP (VB find)
                    (NP
                      (NP (DT any) (CD 1) (NN thing))
                      (SBAR
                        (S
                          (NP (PRP they))
                          (VP (MD can)
                            (VP (VB point)
                              (PP (TO to)
                                (NP
                                  (NP (RB as) (DT a) (`` ``) (JJ bad) (NN design) ('' ''))
                                  (: ...)
                                  (NP
                                    (NP (DT that))
                                    (PP (IN in)
                                      (NP (PRP itself)))))))))))))))))))
    (VP (VBZ shows)
      (SBAR (IN that)
        (S
          (NP (DT the) (NN design))
          (VP (VBZ is)
            (PP (IN if)
              (NP (NN anything)))
            (ADJP (RB near) (JJ perfect))))))
    (. .)))

nsubj(shows-25, Funny-1)
advmod(scrambling-5, how-2)
nsubj(scrambling-5, man-3)
xsubj(find-7, man-3)
aux(scrambling-5, is-4)
dep(Funny-1, scrambling-5)
aux(find-7, to-6)
xcomp(scrambling-5, find-7)
det(thing-10, any-8)
num(thing-10, 1-9)
dobj(find-7, thing-10)
dobj(point-13, thing-10)
nsubj(point-13, they-11)
aux(point-13, can-12)
rcmod(thing-10, point-13)
advmod(design-19, as-15)
det(design-19, a-16)
amod(design-19, bad-18)
prep_to(point-13, design-19)
dep(design-19, that-22)
prep_in(that-22, itself-24)
root(ROOT-0, shows-25)
complm(perfect-33, that-26)
det(design-28, the-27)
nsubj(perfect-33, design-28)
cop(perfect-33, is-29)
prep_if(perfect-33, anything-31)
advmod(perfect-33, near-32)
ccomp(shows-25, perfect-33)

(ROOT
  (FRAG (CC But)
    (SBAR
      (WHNP (WP what))
      (S
        (VP (VBZ 's)
          (S
            (NP (PRP it))
            (VP (VB matter)
              (NP (NN evolution))))))
      (. .))
    (. .)))

dep('s-3, But-1)
nsubj('s-3, what-2)
root(ROOT-0, 's-3)
nsubj(matter-5, it-4)
ccomp('s-3, matter-5)
dobj(matter-5, evolution-6)

(ROOT
  (FRAG
    (NP (DT a) (NN theory))
    (PP (IN without)
      (S
        (VP (VBG mechanism)))
      (. .))
    (. .)))

det(theory-2, a-1)
root(ROOT-0, theory-2)
dep(theory-2, without-3)
pcomp(without-3, mechanism-4)

(ROOT
  (S
    (VP (MD can)
      (VP (VB design)
        (NP (NN anything))))
    (. !)))

aux(design-2, can-1)
root(ROOT-0, design-2)
dobj(design-2, anything-3)

(ROOT
  (S
    (S
      (NP (PRP I))
      (ADVP (RB really))
      (VP (MD ca) (RB n't)
        (VP (VB recall))))
    (: ...)
    (CC but)
    (SINV
      (VP (VBG considering)
        (NP (PRP I)))
      (VP (VBP do) (RB n't)
        (VP (VB have)))
      (NP (DT a) (NN citation)
        (S
          (VP (TO to)
            (VP (VB give)
              (NP (PRP you))
              (CC or)
              (NP (DT a) (NN link))))))
      (. .))
    (. .)))

nsubj(recall-5, I-1)
advmod(recall-5, really-2)
aux(recall-5, ca-3)
neg(recall-5, n't-4)
root(ROOT-0, recall-5)
conj_but(recall-5, considering-8)
dobj(considering-8, I-9)
aux(have-12, do-10)
neg(have-12, n't-11)
dep(considering-8, have-12)
det(citation-14, a-13)
nsubj(considering-8, citation-14)
aux(give-16, to-15)
infmod(citation-14, give-16)
dobj(give-16, you-17)
det(link-20, a-19)
infmod(citation-14, link-20)
conj_or(give-16, link-20)
dobj(give-16, link-20)

(ROOT
  (S
    (NP (WDT what))
    (VP (VBZ 's)
      (NP (PRP it))
      (ADVP (NN matter)))
    (. .)))

nsubj(it-3, what-1)
cop(it-3, 's-2)
root(ROOT-0, it-3)
advmod(it-3, matter-4)

(ROOT
  (FRAG (CC But)
    (ADVP (RB anyway) (. .))
    (. .)))

dep(anyway-2, But-1)
root(ROOT-0, anyway-2)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBD heard)
        (NP
          (NP (DT a) (NN list))
          (PP (IN of)
            (NP (NNS reasons))))
        (SBAR (IN that)
          (S
            (NP
              (NP (PRP$ our) (NNS eyes))
              (PP (IN for)
                (NP (JJ functional) (NNS reasons))))
            (VP (VBP are)
              (VP (VBN wired)
                (ADVP (RB differently))
                (PRN (-LRB- -LRB-)
                  (ADVP (NN front) (TO to) (NN back))
                  (-RRB- -RRB-))))))))
    (NP (PRP I))
    (VP (VBP 'm)
      (ADJP (JJ sure)
        (SBAR (IN if)
          (S
            (NP (PRP you))
            (VP (VBD cared)
              (S
                (VP (TO to)
                  (VP (VB seek)
                    (S
                      (NP (PRP them))
                      (ADJP (RB out))
                      (SBAR
                        (S
                          (NP (PRP you))
                          (VP (MD 'll)
                            (VP (VB find)
                              (NP
                                (NP (DT the) (NN defense))
                                (PP (IN for)
                                  (NP (JJ such) (`` ``) (NNS mistakes) ('' ''))))))))))))))
          (. .))))
    (. .)))

nsubj(heard-2, I-1)
dep(sure-23, heard-2)
det(list-4, a-3)
dobj(heard-2, list-4)
prep_of(list-4, reasons-6)
complm(wired-14, that-7)
poss(eyes-9, our-8)
nsubjpass(wired-14, eyes-9)
amod(reasons-12, functional-11)
prep_for(eyes-9, reasons-12)
auxpass(wired-14, are-13)
ccomp(heard-2, wired-14)
advmod(wired-14, differently-15)
dep(back-19, front-17)
dep(back-19, to-18)
dep(wired-14, back-19)
nsubj(sure-23, I-21)
cop(sure-23, 'm-22)
root(ROOT-0, sure-23)
mark(cared-26, if-24)
nsubj(cared-26, you-25)
xsubj(seek-28, you-25)
ccomp(sure-23, cared-26)
aux(seek-28, to-27)
xcomp(cared-26, seek-28)
nsubj(find-33, them-29)
dep(find-33, out-30)
nsubj(find-33, you-31)
aux(find-33, 'll-32)
xcomp(seek-28, find-33)
det(defense-35, the-34)
dobj(find-33, defense-35)
amod(mistakes-39, such-37)
prep_for(defense-35, mistakes-39)

(ROOT
  (S
    (NP (PRP it))
    (VP (VBZ 's)
      (NP (PRP$ your) (NN dime)))
    (. .)))

nsubj(dime-4, it-1)
cop(dime-4, 's-2)
poss(dime-4, your-3)
root(ROOT-0, dime-4)

(ROOT
  (FRAG
    (ADJP (FW Also) (. .))
    (. .)))

root(ROOT-0, Also-1)

(ROOT
  (S
    (S
      (PP (IN In)
        (NP
          (NP (NN man) (POS 's))
          (NN arrogance)))
      (NP (PRP he))
      (VP (VBZ assumes)
        (SBAR (IN that)
          (S
            (NP
              (NP (NN anything))
              (SBAR
                (S
                  (NP (PRP he))
                  (VP (VBZ has) (RB n't)
                    (VP (VBN found)
                      (NP (DT a) (NN use)
                        (CC or)
                        (NN reason))
                      (PP (IN for)))))))
            (VP (MD must) (RB not)
              (VP (VB have)
                (NP (DT a) (NN use)
                  (CC or)
                  (NN reason))))))))
    (: ...)
    (S
      (VP (VB remember)
        (NP (NN junk) (NN DNA)))
      (: ...))))

poss(arrogance-4, man-2)
prep_in(assumes-6, arrogance-4)
nsubj(assumes-6, he-5)
root(ROOT-0, assumes-6)
complm(have-20, that-7)
nsubj(have-20, anything-8)
nsubj(found-12, he-9)
aux(found-12, has-10)
neg(found-12, n't-11)
rcmod(anything-8, found-12)
det(use-14, a-13)
dobj(found-12, use-14)
dobj(found-12, reason-16)
conj_or(use-14, reason-16)
prep(found-12, for-17)
aux(have-20, must-18)
neg(have-20, not-19)
ccomp(assumes-6, have-20)
det(use-22, a-21)
dobj(have-20, use-22)
dobj(have-20, reason-24)
conj_or(use-22, reason-24)
parataxis(assumes-6, remember-26)
nn(DNA-28, junk-27)
dobj(remember-26, DNA-28)

(ROOT
  (S (RB not)
    (VP (VB junk))
    (. .)))

neg(junk-2, not-1)
root(ROOT-0, junk-2)

