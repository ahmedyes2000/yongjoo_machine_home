(ROOT
  (NP (`` ``) (DT A) (JJ non) (NN living) (NN entity) (. ?)))

det(entity-5, A-2)
amod(entity-5, non-3)
nn(entity-5, living-4)
root(ROOT-0, entity-5)

(ROOT
  (S ('' '')
    (ADVP (RB Possibly))
    (, ,)
    (ADVP (RB though))
    (NP (PRP it))
    (VP (VBZ depends)
      (PP (IN on)
        (NP (NN you) (NN definition))))
    (. .)))

advmod(depends-6, Possibly-2)
advmod(depends-6, though-4)
nsubj(depends-6, it-5)
root(ROOT-0, depends-6)
nn(definition-9, you-8)
prep_on(depends-6, definition-9)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (MD can)
        (VP (VBD got)
          (NP
            (NP (DT a) (NN printer)
              (CC and)
              (NN watch) (NN one))
            (VP (VBG being)
              (VP (VBN made)))))))
    (, ,)
    (NP (PRP I))
    (VP (MD can)
      (VP
        (VP (VB go)
          (PP (TO to)
            (NP (DT an) (NN author))))
        (CC and)
        (VP (VB ask)
          (SBAR
            (WHADVP (WRB why))
            (S
              (NP (PRP he))
              (VP (VBD wrote)
                (NP (DT the) (NN book))))))))
    (. .)))

nsubj(got-3, I-1)
aux(got-3, can-2)
ccomp(go-14, got-3)
det(one-8, a-4)
nn(one-8, printer-5)
conj_and(printer-5, watch-7)
nn(one-8, watch-7)
dobj(got-3, one-8)
auxpass(made-10, being-9)
partmod(one-8, made-10)
nsubj(go-14, I-12)
nsubj(ask-19, I-12)
aux(go-14, can-13)
root(ROOT-0, go-14)
det(author-17, an-16)
prep_to(go-14, author-17)
conj_and(go-14, ask-19)
advmod(wrote-22, why-20)
nsubj(wrote-22, he-21)
advcl(ask-19, wrote-22)
det(book-24, the-23)
dobj(wrote-22, book-24)

(ROOT
  (S
    (NP (NNP ''))
    (VP (VBP Prove)
      (NP (PRP it)))
    (. .)))

root(ROOT-0, Prove-2)
dobj(Prove-2, it-3)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB know)
        (SBAR (IN that)
          (S
            (NP (NN book))
            (VP (VBD came)
              (PRT (RP about))
              (PP (IN by)
                (NP (DT the) (JJ same) (NN process))))))))
    (. ?)))

advmod(know-4, How-1)
aux(know-4, do-2)
nsubj(know-4, you-3)
root(ROOT-0, know-4)
complm(came-7, that-5)
nsubj(came-7, book-6)
ccomp(know-4, came-7)
prt(came-7, about-8)
det(process-12, the-10)
amod(process-12, same-11)
prep_by(came-7, process-12)

(ROOT
  (S (`` ``)
    (ADVP (RB Can))
    (NP (PRP I))
    (VP (VBP do)
      (NP (DT the) (JJ same) (NN thing))
      (PP (IN with)
        (NP
          (NP (DT a) (NN bird))
          (CC or)
          (NP (DT a) (NN lizard)))))
    (. ?)))

advmod(do-4, Can-2)
nsubj(do-4, I-3)
root(ROOT-0, do-4)
det(thing-7, the-5)
amod(thing-7, same-6)
dobj(do-4, thing-7)
det(bird-10, a-9)
prep_with(do-4, bird-10)
det(lizard-13, a-12)
prep_with(do-4, lizard-13)
conj_or(bird-10, lizard-13)

(ROOT
  (S (`` ``)
    (NP (PRP We))
    (VP (VBP do) (RB n't)
      (VP (VB need)
        (PP (TO to))))
    (. .)))

nsubj(need-5, We-2)
aux(need-5, do-3)
neg(need-5, n't-4)
root(ROOT-0, need-5)
prep(need-5, to-6)

(ROOT
  (S
    (VP (VB See)
      (NP (DT the) (JJ above) (NN point)))
    (. .)))

root(ROOT-0, See-1)
det(point-4, the-2)
amod(point-4, above-3)
dobj(See-1, point-4)

(ROOT
  (S ('' '')
    (NP (RB So) (NN something))
    (VP (MD can) (, ,)
      (PP (IN through)
        (NP
          (NP (DT a) (NN process))
          (PP (IN of)
            (NP (JJ random) (NN mutation)))))
      (, ,)
      (VP (VBP accumulate)
        (NP
          (NP
            (NP (CD 499) (NNS bits))
            (PP (IN of)
              (NP (NN information))))
          (: ...)
          (CC but)
          (NP (RB not) (JJR more)))))
    (. ?)))

advmod(something-3, So-2)
nsubj(accumulate-13, something-3)
aux(accumulate-13, can-4)
det(process-8, a-7)
prep_through(accumulate-13, process-8)
amod(mutation-11, random-10)
prep_of(process-8, mutation-11)
root(ROOT-0, accumulate-13)
num(bits-15, 499-14)
dobj(accumulate-13, bits-15)
prep_of(bits-15, information-17)
neg(more-21, not-20)
dobj(accumulate-13, more-21)
conj_but(bits-15, more-21)

(ROOT
  (S (`` ``)
    (NP (PRP I))
    (VP (VBP 'm) (RB not)
      (VP (VBG talking)
        (NP
          (NP
            (QP (RB about) (CD 500))
            (NNS bits))
          (PP (IN of)
            (NP (NNS errors)
              (CC or)
              (NNS mistakes))))
        (PP (IN in)
          (NP
            (NP (NN general))
            (PRN (-LRB- -LRB-)
              (PP (JJ such) (IN as)
                (NP (NN sand) (NNS dunes)))
              (-RRB- -RRB-))))))
    (. .)))

nsubj(talking-5, I-2)
aux(talking-5, 'm-3)
neg(talking-5, not-4)
root(ROOT-0, talking-5)
quantmod(500-7, about-6)
num(bits-8, 500-7)
dobj(talking-5, bits-8)
prep_of(bits-8, errors-10)
prep_of(bits-8, mistakes-12)
conj_or(errors-10, mistakes-12)
prep_in(talking-5, general-14)
nn(dunes-19, sand-18)
prep_such_as(general-14, dunes-19)

(ROOT
  (S
    (SBAR (IN In)
      (S
        (NP (DT no) (NN way))
        (VP (VBP do)
          (NP (DT the) (NNS attempts))
          (PP (IN by)
            (NP
              (NP (NNS people))
              (PP (JJ such) (IN as)
                (NP
                  (NP (NNP T.) (NNP D.) (NNP Schneider))
                  (PP (IN of)
                    (S
                      (VP (VBG letting)
                        (NP
                          (NP (CD 500) (NNS bits))
                          (PP (JJ worth) (IN of)
                            (NP
                              (NP (RB just) (DT any) (NN kind))
                              (PP (IN of)
                                (NP (NNS changes))))))))))))))))
    (VP (VBP have)
      (NP
        (NP (DT any) (NN relevance))
        (SBAR
          (WHPP (TO to)
            (WHNP (WP what)))
          (S
            (NP (NNP Dembski))
            (VP (VBZ refers)
              (PP (TO to)))))))
    (. .)))

mark(do-4, In-1)
det(way-3, no-2)
nsubj(do-4, way-3)
csubj(have-25, do-4)
det(attempts-6, the-5)
dobj(do-4, attempts-6)
prep_by(do-4, people-8)
nn(Schneider-13, T.-11)
nn(Schneider-13, D.-12)
prep_such_as(people-8, Schneider-13)
prepc_of(Schneider-13, letting-15)
num(bits-17, 500-16)
dobj(letting-15, bits-17)
dep(bits-17, worth-18)
advmod(kind-22, just-20)
det(kind-22, any-21)
prep_of(bits-17, kind-22)
prep_of(kind-22, changes-24)
root(ROOT-0, have-25)
det(relevance-27, any-26)
dobj(have-25, relevance-27)
rel(refers-31, what-29)
nsubj(refers-31, Dembski-30)
rcmod(relevance-27, refers-31)
prep(refers-31, to-32)

(ROOT
  (S
    (PP (VBN Given)
      (NP
        (NP (DT all) (JJ probabilistic) (NNS resources))
        (PRN (-LRB- -LRB-)
          (ADJP (DT both) (JJ replicational)
            (CC and)
            (JJ specificational))
          (-RRB- -RRB-))))
    (, ,)
    (NP (PRP you))
    (VP (MD will) (RB not)
      (VP (VB expect)
        (NP
          (NP (NN life))
          (PP (IN on)
            (NP
              (NP (PRP it) (POS 's))
              (JJ own))))
        (PP (IN without)
          (NP
            (NP (DT some) (NN kind))
            (PP (IN of)
              (NP (NN intervention)))))
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB produce)
                      (NP
                        (NP (DT an) (NN increase))
                        (PP (IN of)
                          (NP
                            (NP (CD 500) (NNS bits))
                            (PP (IN of)
                              (NP
                                (ADJP
                                  (ADJP (JJ new))
                                  (, ,)
                                  (ADJP (JJ useful))
                                  (, ,))
                                (NN complexity)))))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (VBD was) (RB not)
                              (ADVP (RB already))
                              (NP (RB there)))))))))))))))
    (. .)))

prep(expect-15, Given-1)
det(resources-4, all-2)
amod(resources-4, probabilistic-3)
dep(Given-1, resources-4)
preconj(replicational-7, both-6)
dep(resources-4, replicational-7)
dep(resources-4, specificational-9)
conj_and(replicational-7, specificational-9)
nsubj(expect-15, you-12)
xsubj(able-28, you-12)
aux(expect-15, will-13)
neg(expect-15, not-14)
root(ROOT-0, expect-15)
dobj(expect-15, life-16)
prep_on(life-16, it-18)
possessive(it-18, 's-19)
amod(it-18, own-20)
det(kind-23, some-22)
prep_without(expect-15, kind-23)
prep_of(kind-23, intervention-25)
aux(able-28, to-26)
cop(able-28, be-27)
xcomp(expect-15, able-28)
aux(produce-30, to-29)
xcomp(able-28, produce-30)
det(increase-32, an-31)
dobj(produce-30, increase-32)
nsubj(there-46, increase-32)
num(bits-35, 500-34)
prep_of(increase-32, bits-35)
amod(complexity-41, new-37)
dep(new-37, useful-39)
prep_of(bits-35, complexity-41)
cop(there-46, was-43)
neg(there-46, not-44)
advmod(there-46, already-45)
rcmod(increase-32, there-46)

(ROOT
  (SBARQ (CC And)
    (WHNP (WDT what) (NN relevance))
    (SQ (VBZ does)
      (NP (DT this))
      (VP (VB have)
        (PP (TO to)
          (NP
            (NP (DT the) (NN validity))
            (PP (IN of)
              (NP (NNP ID)))))))
    (. ?)))

cc(have-6, And-1)
det(relevance-3, what-2)
dobj(have-6, relevance-3)
aux(have-6, does-4)
nsubj(have-6, this-5)
root(ROOT-0, have-6)
det(validity-9, the-8)
prep_to(have-6, validity-9)
prep_of(validity-9, ID-11)

(ROOT
  (S (`` ``)
    (SBAR (IN Because)
      (S
        (NP (NN life))
        (VP (VBZ is)
          (PP (TO to)
            (NP (NN complex)))
          (S
            (VP (TO to)
              (VP (VB come)
                (ADVP (IN about)
                  (PP (IN without)
                    (NP (DT a) (NN designer))
                    (ADVP (RB then))))
                (PP (IN by)
                  (NP (NN definition)))))))))
    (NP (DT that) (NN designer))
    (VP (MD can) (RB not)
      (VP (VB be)
        (ADJP (JJ alive))))
    (. .)))

mark(is-4, Because-2)
nsubj(is-4, life-3)
xsubj(come-8, life-3)
dep(alive-21, is-4)
prep_to(is-4, complex-6)
aux(come-8, to-7)
xcomp(is-4, come-8)
advmod(come-8, about-9)
det(designer-12, a-11)
prep_without(about-9, designer-12)
advmod(about-9, then-13)
prep_by(come-8, definition-15)
det(designer-17, that-16)
nsubj(alive-21, designer-17)
aux(alive-21, can-18)
neg(alive-21, not-19)
cop(alive-21, be-20)
root(ROOT-0, alive-21)

(ROOT
  (S
    (ADVP (IN At) (JJS best) (RB all))
    (NP (PRP you))
    (VP (MD 'll)
      (VP (VB see)
        (SBAR
          (SBAR
            (S
              (VP (VBP are)
                (NP (NNS steps))
                (SBAR
                  (ADVP (RB back))
                  (IN if)
                  (S
                    (NP (DT a) (VBG living) (NNS systems))
                    (VP (VBP genome)
                      (NP (NNS changes))))))))
          (, ,)
          (CC or)
          (SBAR
            (WHNP
              (WHNP
                (QP (RB merely) (CD duplications)))
              (WHPP (IN of)
                (WHNP (WP what))))
            (S
              (VP (VBD was)
                (ADVP (RB already))
                (ADVP (RB there))))))))
    (. .)))

advmod(see-6, At-1)
pobj(At-1, best-2)
advmod(At-1, all-3)
nsubj(see-6, you-4)
aux(see-6, 'll-5)
root(ROOT-0, see-6)
cop(steps-8, are-7)
dep(see-6, steps-8)
advmod(genome-14, back-9)
dep(genome-14, if-10)
det(systems-13, a-11)
amod(systems-13, living-12)
nsubj(genome-14, systems-13)
dep(steps-8, genome-14)
dobj(genome-14, changes-15)
quantmod(duplications-19, merely-18)
nsubj(was-22, duplications-19)
prep_of(duplications-19, what-21)
dep(see-6, was-22)
conj_or(steps-8, was-22)
advmod(was-22, already-23)
advmod(was-22, there-24)

(ROOT
  (SBARQ
    (ADVP (RB '') (RB By))
    (WHNP (WP what))
    (SQ
      (VP (VBZ definition)))
    (. ?)))

advmod(definition-4, By-2)
nsubj(definition-4, what-3)
root(ROOT-0, definition-4)

(ROOT
  (SBARQ (`` ``)
    (WHADVP (WRB How))
    (SQ (VBZ does)
      (NP (DT this) (NN designer))
      (VP (VB guide)
        (SBAR
          (SBAR
            (S
              (VP (`` ``) (VBZ ends)
                (PP (TO to)
                  (NP (NNS means)))
                ('' ''))))
          (CC and)
          (SBAR
            (WHADVP (WRB how))
            (S
              (VP (VBZ does)
                (S
                  (NP (PRP it))
                  (NP (JJ pre-plan) (NNS events)))
                (SBAR (IN before)
                  (S
                    (NP (PRP they))
                    (VP (VBP come)
                      (PP (IN into)
                        (NP (NN existence))))))))))))
    (. ?)))

advmod(guide-6, How-2)
aux(guide-6, does-3)
det(designer-5, this-4)
nsubj(guide-6, designer-5)
root(ROOT-0, guide-6)
dep(guide-6, ends-8)
prep_to(ends-8, means-10)
advmod(does-14, how-13)
dep(guide-6, does-14)
conj_and(ends-8, does-14)
nsubj(events-17, it-15)
amod(events-17, pre-plan-16)
xcomp(does-14, events-17)
mark(come-20, before-18)
nsubj(come-20, they-19)
advcl(does-14, come-20)
prep_into(come-20, existence-22)

(ROOT
  (SBARQ (`` ``)
    (WHADVP (WRB How))
    (SQ (VBZ is)
      (NP (DT this))
      (ADJP (JJ relevant)
        (PP (TO to)
          (NP (NNP ID)))))
    (. ?)))

advmod(relevant-5, How-2)
cop(relevant-5, is-3)
nsubj(relevant-5, this-4)
root(ROOT-0, relevant-5)
prep_to(relevant-5, ID-7)

(ROOT
  (S (`` ``)
    (CC But)
    (SBAR (IN if)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP (DT a) (NN designer)))))
    (ADVP (RB then))
    (NP (DT that) (NN designer))
    (VP (VBZ has)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP (VBG using)
              (NP (DT some) (NN method)
                (S
                  (VP (TO to)
                    (VP (VB create)
                      (NP (DT these) (NNS changes)))))))))))
    (. ?)))

cc(has-11, But-2)
mark(is-5, if-3)
expl(is-5, there-4)
dep(has-11, is-5)
det(designer-7, a-6)
nsubj(is-5, designer-7)
advmod(has-11, then-8)
det(designer-10, that-9)
nsubj(has-11, designer-10)
xsubj(using-14, designer-10)
root(ROOT-0, has-11)
aux(using-14, to-12)
aux(using-14, be-13)
xcomp(has-11, using-14)
det(method-16, some-15)
dobj(using-14, method-16)
aux(create-18, to-17)
infmod(method-16, create-18)
det(changes-20, these-19)
dobj(create-18, changes-20)

(ROOT
  (S (`` ``)
    (INTJ (RB Sure))
    (, ,)
    (NP (IN but) (DT this))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT the) (NN focus))
        (PP (IN of)
          (NP (NNP ID)))))
    (. .)))

dep(focus-9, Sure-2)
amod(this-5, but-4)
nsubj(focus-9, this-5)
cop(focus-9, is-6)
neg(focus-9, not-7)
det(focus-9, the-8)
root(ROOT-0, focus-9)
prep_of(focus-9, ID-11)

(ROOT
  (S
    (NP (NNP Intelligent) (NNP Design))
    (VP (VBZ focuses)
      (PP (IN on)
        (NP
          (NP (NNS features))
          (PP (IN of)
            (NP
              (NP (DT the) (JJ natural) (NN world))
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBP are)
                    (ADJP (RB best) (JJ explain)
                      (PP (IN as)
                        (S
                          (VP (VBG being)
                            (NP
                              (NP (DT the) (NN product))
                              (PP (IN of)
                                (NP
                                  (NP
                                    (NP (PDT such) (DT a) (NN process))
                                    (, ,)
                                    (ADVP (RB not)
                                      (PP (IN on)
                                        (NP
                                          (NP (DT the) (NN source))
                                          (PP (IN of)
                                            (NP (DT the) (NN design)))))))
                                  (CC or)
                                  (NP
                                    (NP (PRP it) (POS 's))
                                    (NNS methods)))))))))))))))))
    (. .)))

nn(Design-2, Intelligent-1)
nsubj(focuses-3, Design-2)
root(ROOT-0, focuses-3)
prep_on(focuses-3, features-5)
det(world-9, the-7)
amod(world-9, natural-8)
prep_of(features-5, world-9)
nsubj(explain-13, world-9)
cop(explain-13, are-11)
advmod(explain-13, best-12)
rcmod(world-9, explain-13)
cop(product-17, being-15)
det(product-17, the-16)
prepc_as(explain-13, product-17)
predet(process-21, such-19)
det(process-21, a-20)
prep_of(product-17, process-21)
advmod(process-21, not-23)
det(source-26, the-25)
prep_on(not-23, source-26)
det(design-29, the-28)
prep_of(source-26, design-29)
poss(methods-33, it-31)
prep_of(product-17, methods-33)
conj_or(process-21, methods-33)

(ROOT
  (S ('' '')
    (PP (IN For)
      (NP
        (NP (DT a) (NN theory))
        (SBAR
          (WHNP (WDT that))
          (S
            (ADVP (RB explicitly))
            (VP (VBZ states)
              (SBAR (IN that)
                (S
                  (NP (EX there))
                  (VP (VBZ is)
                    (NP (DT a) (NN designer) (NN ID))))))))))
    (VP (VBZ is)
      (ADJP (RB remarkably) (JJ quiet)
        (PP (IN on)
          (NP
            (NP (DT the) (NN nature)
              (CC and)
              (NNS methods))
            (PP (IN of)
              (NP (DT that) (NN designer)))))))
    (. .)))

det(theory-4, a-3)
nsubj(states-7, theory-4)
prep_for(is-14, theory-4)
advmod(states-7, explicitly-6)
rcmod(theory-4, states-7)
complm(is-10, that-8)
expl(is-10, there-9)
ccomp(states-7, is-10)
det(ID-13, a-11)
nn(ID-13, designer-12)
nsubj(is-10, ID-13)
root(ROOT-0, is-14)
advmod(quiet-16, remarkably-15)
acomp(is-14, quiet-16)
det(nature-19, the-18)
prep_on(quiet-16, nature-19)
prep_on(quiet-16, methods-21)
conj_and(nature-19, methods-21)
det(designer-24, that-23)
prep_of(nature-19, designer-24)

(ROOT
  (S ('' '')
    (NP (NNP Pretty) (JJ sure) (NN science))
    (VP (MD can) (RB not)
      (VP (VB answer)
        (UCP
          (NP (DT this) (NN question))
          (, ,)
          (CC and)
          (SBAR (IN that)
            (S
              (NP (DT this))
              (VP (VBZ is)
                (ADJP (JJ independent)
                  (PP (TO to)
                    (NP
                      (NP (DT the) (NN question))
                      (PP (IN of)
                        (SBAR (IN whether)
                          (S
                            (NP (DT a) (NN feature))
                            (VP (VBZ is)
                              (VP (VBN designed)))))))))))
            (CC or)
            (RB not)))))
    (. .)))

nn(science-4, Pretty-2)
amod(science-4, sure-3)
nsubj(answer-7, science-4)
aux(answer-7, can-5)
neg(answer-7, not-6)
root(ROOT-0, answer-7)
det(question-9, this-8)
dobj(answer-7, question-9)
complm(independent-15, that-12)
nsubj(independent-15, this-13)
cop(independent-15, is-14)
dobj(answer-7, independent-15)
conj_and(question-9, independent-15)
det(question-18, the-17)
prep_to(independent-15, question-18)
complm(designed-24, whether-20)
det(feature-22, a-21)
nsubjpass(designed-24, feature-22)
auxpass(designed-24, is-23)
prepc_of(question-18, designed-24)
conj_and(question-9, not-26)
conj_or(independent-15, not-26)

(ROOT
  (S ('' '')
    (NP (DT The) (NN difference))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (DT a) (NN book))
          (VP (VBZ is)
            (ADVP (RB demonstratively))
            (NP (DT an) (JJ artificial) (NN construct))))))
    (. .)))

det(difference-3, The-2)
nsubj(is-4, difference-3)
root(ROOT-0, is-4)
complm(construct-12, that-5)
det(book-7, a-6)
nsubj(construct-12, book-7)
cop(construct-12, is-8)
advmod(construct-12, demonstratively-9)
det(construct-12, an-10)
amod(construct-12, artificial-11)
ccomp(is-4, construct-12)

