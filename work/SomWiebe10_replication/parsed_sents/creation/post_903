(ROOT
  (S
    (NP (PRP You))
    (VP (VBD said)
      (SBAR
        (S (`` ``)
          (NP (NNS tentacles))
          (VP (MD could)
            (VP (VB become)
              (NP (NNS legs))))
          ('' '')))
      (. .))
    (. .)))

nsubj(said-2, You-1)
root(ROOT-0, said-2)
nsubj(legs-7, tentacles-4)
aux(legs-7, could-5)
cop(legs-7, become-6)
ccomp(said-2, legs-7)

(ROOT
  (SINV
    (ADVP (RB here))
    (VP (VBZ 's))
    (NP
      (NP (DT the) (NN problem))
      (SBAR
        (S
          (NP
            (NP (DT a) (JJ good) (NN design))
            (PP (IN for)
              (NP (NNS tentacles))))
          (VP (VBZ does) (RB not)
            (VP
              (PP (IN at)
                (NP (DT the) (JJ same) (NN time)))
              (VB mean)
              (NP (DT a) (JJ good) (NN design))
              (PP (IN for)
                (NP (NNS legs))))))))
    (: ...)))

advmod('s-2, here-1)
root(ROOT-0, 's-2)
det(problem-4, the-3)
nsubj('s-2, problem-4)
det(design-7, a-5)
amod(design-7, good-6)
nsubj(mean-16, design-7)
prep_for(design-7, tentacles-9)
aux(mean-16, does-10)
neg(mean-16, not-11)
det(time-15, the-13)
amod(time-15, same-14)
prep_at(mean-16, time-15)
rcmod(problem-4, mean-16)
det(design-19, a-17)
amod(design-19, good-18)
dobj(mean-16, design-19)
prep_for(mean-16, legs-21)

(ROOT
  (S
    (VP (VB consider)
      (SBAR
        (WHNP (WP what))
        (S
          (NP (PRP I))
          (VP (VBP 'm)
            (VP (VBG saying)
              (ADVP (RB here))
              (S
                (VP (VB look)
                  (PP (IN at)
                    (NP (DT a) (NN starfish)))
                  (. .))))))))
    (. .)))

root(ROOT-0, consider-1)
dobj(saying-5, what-2)
nsubj(saying-5, I-3)
aux(saying-5, 'm-4)
ccomp(consider-1, saying-5)
advmod(saying-5, here-6)
ccomp(saying-5, look-7)
det(starfish-10, a-9)
prep_at(look-7, starfish-10)

(ROOT
  (FRAG (CC or)
    (ADVP (RB even))
    (NP
      (NP (DT a) (JJ regular) (NN fish))
      (SBAR
        (S
          (S
            (NP
              (NP (DT the) (NN placement))
              (PP (IN of)
                (NP (NNS fins))))
            (VP (VBP have)
              (NP
                (NP (DT a) (JJ different) (NN orientation))
                (PP (IN than)
                  (NP (`` ``) (JJ future) (NNS legs) ('' ''))))))
          (: ...)
          (S
            (NP
              (NP (JJ good) (NN placement))
              (PP (IN for)
                (NP (NNS fins))))
            (VP (VBZ does) (RB not)
              (VP (VB make)
                (NP
                  (NP (DT a) (JJ good) (NN placement))
                  (PP (IN for)
                    (NP (NNS legs)))))))
          (: ...)
          (S
            (NP (DT the) (CD two))
            (VP (VBP are)
              (NP
                (ADJP (RB entirely) (JJ different))
                (NNS designs))))))
      (. .))
    (. .)))

dep(fish-5, or-1)
dep(fish-5, even-2)
det(fish-5, a-3)
amod(fish-5, regular-4)
root(ROOT-0, fish-5)
det(placement-7, the-6)
nsubj(have-10, placement-7)
prep_of(placement-7, fins-9)
rcmod(fish-5, have-10)
det(orientation-13, a-11)
amod(orientation-13, different-12)
dobj(have-10, orientation-13)
amod(legs-17, future-16)
prep_than(orientation-13, legs-17)
amod(placement-21, good-20)
nsubj(make-26, placement-21)
prep_for(placement-21, fins-23)
aux(make-26, does-24)
neg(make-26, not-25)
parataxis(have-10, make-26)
det(placement-29, a-27)
amod(placement-29, good-28)
dobj(make-26, placement-29)
prep_for(placement-29, legs-31)
det(two-34, the-33)
nsubj(designs-38, two-34)
cop(designs-38, are-35)
advmod(different-37, entirely-36)
amod(designs-38, different-37)
parataxis(have-10, designs-38)

(ROOT
  (S
    (NP (PRP one))
    (VP (VBZ is) (RB not)
      (ADJP (JJ appropriate)
        (PP (IN for)
          (NP (DT the) (JJ other)))))
    (. .) (. .)))

nsubj(appropriate-4, one-1)
cop(appropriate-4, is-2)
neg(appropriate-4, not-3)
root(ROOT-0, appropriate-4)
det(other-7, the-6)
prep_for(appropriate-4, other-7)

(ROOT
  (S
    (ADVP (RB only)
      (PP (IN in)
        (NP (JJ rare) (NNS occasions))
        (ADVP (RB thus))))
    (NP (PRP it))
    (VP (VBZ 's)
      (ADJP (JJ ridiculous)
        (S
          (VP (TO to)
            (VP (VB assume)
              (SBAR
                (S
                  (NP (PRP one))
                  (VP (MD could)
                    (VP (VB morph)
                      (PP (TO to)
                        (NP (DT the) (JJ other)))))
                  (. .))))))))
    (. .)))

advmod(ridiculous-8, only-1)
amod(occasions-4, rare-3)
prep_in(only-1, occasions-4)
advmod(only-1, thus-5)
nsubj(ridiculous-8, it-6)
cop(ridiculous-8, 's-7)
root(ROOT-0, ridiculous-8)
aux(assume-10, to-9)
xcomp(ridiculous-8, assume-10)
nsubj(morph-13, one-11)
aux(morph-13, could-12)
ccomp(assume-10, morph-13)
det(other-16, the-15)
prep_to(morph-13, other-16)

(ROOT
  (FRAG
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBD had)
          (S
            (VP (TO to)
              (VP (VB rely)
                (PP (IN on)
                  (NP (JJ previous) (NNS developments))))))))
      (. .))
    (. .)))

mark(had-3, if-1)
nsubj(had-3, you-2)
xsubj(rely-5, you-2)
root(ROOT-0, had-3)
aux(rely-5, to-4)
xcomp(had-3, rely-5)
amod(developments-8, previous-7)
prep_on(rely-5, developments-8)

(ROOT
  (S
    (NP (JJ future) (NNS developments))
    (VP (MD would)
      (VP (VB be)
        (VP
          (ADVP (RB improperly))
          (VBN placed)
          (S
            (ADJP (RB poorly) (VBN situated))))))
    (. .)))

amod(developments-2, future-1)
nsubjpass(placed-6, developments-2)
aux(placed-6, would-3)
auxpass(placed-6, be-4)
advmod(placed-6, improperly-5)
root(ROOT-0, placed-6)
advmod(situated-8, poorly-7)
dep(placed-6, situated-8)

