(ROOT
  (S (`` ``)
    (NP
      (NP (DT The) (NN response))
      (PP (TO to)
        (NP (PRP$ my) (NN comment) (NNP ID) (NNPS Contradicts) (NNP Itself))))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN series))
        (PP (IN of)
          (NP
            (ADJP (RB peculiarly) (JJ unclear))
            (NNS assertions)))))
    (. .)))

det(response-3, The-2)
nsubj(series-12, response-3)
poss(Itself-9, my-5)
nn(Itself-9, comment-6)
nn(Itself-9, ID-7)
nn(Itself-9, Contradicts-8)
prep_to(response-3, Itself-9)
cop(series-12, is-10)
det(series-12, a-11)
root(ROOT-0, series-12)
advmod(unclear-15, peculiarly-14)
amod(assertions-16, unclear-15)
prep_of(series-12, assertions-16)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP (DT the) (NN responder))
    (VP (VBZ declares) (: :) (`` ``)
      (S
        (NP (PRP We))
        (VP (VBP need) (RB not)
          (VP (`` ``) (VB know) ('' '')
            (S
              (NP (DT the) (NN intelligence))
              (VP (TO to)
                (VP (VB draw)
                  (NP (NNS inferences))
                  (PP (IN about)
                    (NP
                      (NP (PRP it) (POS 's))
                      (NN existence)))
                  (SBAR (IN because)
                    (S
                      (NP (DT that))
                      (VP (VBZ 's) (RB not)
                        (SBAR
                          (WHNP (WP what))
                          (S
                            (NP (NNP ID))
                            (VP (VBZ studies))))))))))))))
    (. .)))

prep_for(declares-6, example-2)
det(responder-5, the-4)
nsubj(declares-6, responder-5)
root(ROOT-0, declares-6)
nsubj(need-10, We-9)
ccomp(declares-6, need-10)
neg(need-10, not-11)
dep(need-10, know-13)
det(intelligence-16, the-15)
nsubj(draw-18, intelligence-16)
aux(draw-18, to-17)
xcomp(know-13, draw-18)
dobj(draw-18, inferences-19)
poss(existence-23, it-21)
prep_about(draw-18, existence-23)
mark('s-26, because-24)
nsubj('s-26, that-25)
advcl(draw-18, 's-26)
neg('s-26, not-27)
dobj(studies-30, what-28)
nsubj(studies-30, ID-29)
ccomp('s-26, studies-30)

(ROOT
  (S
    (ADVP (RB Agree))
    (, ,)
    (NP (DT that))
    (VP (VBZ 's)
      (NP
        (NP (DT the) (JJ whole) (NN point))
        (PP (IN about)
          (NP
            (NP (NN design))
            (PP (IN vs.)
              (NP
                (NP (DT the) (NN designer))
                (ADVP (PRP itself))))))))
    (. .)))

advmod(point-7, Agree-1)
nsubj(point-7, that-3)
cop(point-7, 's-4)
det(point-7, the-5)
amod(point-7, whole-6)
root(ROOT-0, point-7)
prep_about(point-7, design-9)
det(designer-12, the-11)
prep_vs.(design-9, designer-12)
advmod(designer-12, itself-13)

(ROOT
  (S ('' '')
    (NP (DT This))
    (VP (VBZ is)
      (NP (DT a) (JJ logical) (NN fallacy)))
    (. .)))

nsubj(fallacy-6, This-2)
cop(fallacy-6, is-3)
det(fallacy-6, a-4)
amod(fallacy-6, logical-5)
root(ROOT-0, fallacy-6)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ assumes)
      (NP
        (NP (DT the) (JJ prior) (NN existence))
        (PP (IN of)
          (NP
            (NP (DT a) (NN thing))
            (SBAR
              (WHNP (WP$ whose) (NNS features) (NN one))
              (S
                (VP (VBZ is)
                  (ADVP (RB allegedly))
                  (VP (VBG studying)
                    (SBAR (IN while)
                      (S
                        (S
                          (VP (VBG declaring)
                            (NP (CD one))))
                        (VP (VBZ is)
                          (VP (`` ``) (VBG tracing) ('' '')
                            (NP (PRP them))
                            (PP (TO to)
                              (NP
                                (NP (DT some) (NN intelligence))
                                (, ,)
                                (SBAR
                                  (WHNP (WDT which))
                                  (S
                                    (NP (PRP one))
                                    (VP (VBZ denies)
                                      (SBAR
                                        (S
                                          (NP (PRP one))
                                          (VP (VBZ knows)))))))))))))))))))))
    (. .)))

nsubj(assumes-2, It-1)
root(ROOT-0, assumes-2)
det(existence-5, the-3)
amod(existence-5, prior-4)
dobj(assumes-2, existence-5)
det(thing-8, a-7)
prep_of(existence-5, thing-8)
poss(one-11, thing-8)
nn(one-11, features-10)
nsubj(studying-14, one-11)
aux(studying-14, is-12)
advmod(studying-14, allegedly-13)
rcmod(thing-8, studying-14)
mark(tracing-20, while-15)
csubj(tracing-20, declaring-16)
dobj(declaring-16, one-17)
aux(tracing-20, is-18)
advcl(studying-14, tracing-20)
dobj(tracing-20, them-22)
det(intelligence-25, some-24)
prep_to(tracing-20, intelligence-25)
dobj(knows-31, intelligence-25)
rel(denies-29, which-27)
nsubj(denies-29, one-28)
rcmod(intelligence-25, denies-29)
nsubj(knows-31, one-30)
ccomp(denies-29, knows-31)

(ROOT
  (S ('' '')
    (S
      (SBAR
        (WHADVP (WRB How))
        (S
          (VP (VBZ is)
            (NP (PRP it)))))
      (NP (DT a) (JJ logical))
      (VP (VBP fallacy)
        (S
          (VP (TO to)
            (VP (VB say))))))
    (IN that)
    (S
      (NP (PRP we))
      (VP (VBP do) (RB n't)
        (VP (VB need)
          (S
            (VP (TO to)
              (VP (VB know)
                (PP (IN in)
                  (NP (NN person)))
                (NP
                  (NP (DT the) (NN author))
                  (PP (IN of)
                    (NP (DT a) (NN book)
                      (S
                        (VP (TO to)
                          (VP (VB know)
                            (SBAR (IN that)
                              (S
                                (NP (DT the) (NN book))
                                (VP (VBD had)
                                  (NP (DT an) (NN author)))))))))))))))))
    (. ?)))

advmod(it-4, How-2)
cop(it-4, is-3)
dep(fallacy-7, it-4)
det(logical-6, a-5)
nsubj(fallacy-7, logical-6)
xsubj(say-9, logical-6)
root(ROOT-0, fallacy-7)
aux(say-9, to-8)
xcomp(fallacy-7, say-9)
dep(fallacy-7, that-10)
nsubj(need-14, we-11)
xsubj(know-16, we-11)
aux(need-14, do-12)
neg(need-14, n't-13)
ccomp(fallacy-7, need-14)
aux(know-16, to-15)
xcomp(need-14, know-16)
prep_in(know-16, person-18)
det(author-20, the-19)
dobj(know-16, author-20)
det(book-23, a-22)
prep_of(author-20, book-23)
aux(know-25, to-24)
infmod(book-23, know-25)
complm(had-29, that-26)
det(book-28, the-27)
nsubj(had-29, book-28)
ccomp(know-25, had-29)
det(author-31, an-30)
dobj(had-29, author-31)

(ROOT
  (SBARQ (CC And)
    (WHNP (WP what))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB mean)
        (PP (IN by)
          (NP
            (NP (DT the) (`` ``) (JJ prior) (NN existence) ('' ''))
            (PP (IN of)
              (NP (DT a) (NN feature)))))))
    (. ?)))

cc(mean-5, And-1)
dobj(mean-5, what-2)
aux(mean-5, do-3)
nsubj(mean-5, you-4)
root(ROOT-0, mean-5)
det(existence-10, the-7)
amod(existence-10, prior-9)
prep_by(mean-5, existence-10)
det(feature-14, a-13)
prep_of(existence-10, feature-14)

(ROOT
  (SQ (VBP Are)
    (NP (PRP you))
    (VP (VBN claiming)
      (SBAR (IN that)
        (S
          (NP (PRP I))
          (VP (VBP 'm)
            (ADJP (JJ bent)
              (PP (IN on)
                (NP (DT the) (VBG assuming))))
            (SBAR (IN that)
              (S
                (NP (DT the) (JJ designed) (NN feature))
                (VP (VBD existed)
                  (PP (IN before)
                    (NP (DT the) (NN designer))))))))))
    (. ?)))

auxpass(claiming-3, Are-1)
nsubjpass(claiming-3, you-2)
root(ROOT-0, claiming-3)
complm(bent-7, that-4)
nsubj(bent-7, I-5)
cop(bent-7, 'm-6)
ccomp(claiming-3, bent-7)
prep_on(bent-7, the-9)
amod(the-9, assuming-10)
complm(existed-15, that-11)
det(feature-14, the-12)
amod(feature-14, designed-13)
nsubj(existed-15, feature-14)
ccomp(bent-7, existed-15)
det(designer-18, the-17)
prep_before(existed-15, designer-18)

(ROOT
  (S
    (NP (NNP Elaborate))
    (VP (VBP please))
    (. .)))

nsubj(please-2, Elaborate-1)
root(ROOT-0, please-2)

(ROOT
  (S ('' '')
    (NP (DT The) (NN responder))
    (VP (VBZ is)
      (VP (VBG dealing)
        (PP (IN in)
          (NP
            (NP (NN word))
            (S
              (S
                (VP (VBZ salads)))
              (, ,) (FW i.e.) (, ,)
              (S
                (VP (VBG formulating)
                  (NP
                    (NP (NNS arguments))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBP float)
                          (PP (IN without)
                            (NP (NN reference)))
                          (PP (TO to)
                            (NP (NN reality))))))))))))))
    (. .)))

det(responder-3, The-2)
nsubj(dealing-5, responder-3)
aux(dealing-5, is-4)
root(ROOT-0, dealing-5)
prep_in(dealing-5, word-7)
dep(word-7, salads-8)
dep(salads-8, i.e.-10)
dep(salads-8, formulating-12)
dobj(formulating-12, arguments-13)
nsubj(float-15, arguments-13)
rcmod(arguments-13, float-15)
prep_without(float-15, reference-17)
prep_to(float-15, reality-19)

(ROOT
  (S
    (NP (DT This) (NN approach))
    (VP (VBZ permeates)
      (NP
        (NP (DT the) (NN responder) (POS 's))
        (JJ entire) (NN post)))
    (. .)))

det(approach-2, This-1)
nsubj(permeates-3, approach-2)
root(ROOT-0, permeates-3)
det(responder-5, the-4)
poss(post-8, responder-5)
amod(post-8, entire-7)
dobj(permeates-3, post-8)

(ROOT
  (S ('' '')
    (S
      (FRAG
        (WHADVP (WRB How))
        (PP (IN on)))
      (NP (NN earth))
      (VP (VBZ is)
        (NP (DT the) (NN fact))))
    (IN that)
    (S
      (NP (PRP we))
      (VP (VBP need) (RB not)
        (VP (VB know)
          (NP (DT the) (NN designer)
            (S
              (VP (TO to)
                (VP (VB identify)
                  (VP (VB design)
                    (NP
                      (NP (DT an) (NN argument))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (VBZ floats)
                            (PP (IN without)
                              (NP (NN reference)))
                            (PP (TO to)
                              (NP (NN reality)))))))))))))))
    (. ?)))

dep(fact-7, How-2)
dep(How-2, on-3)
nsubj(fact-7, earth-4)
cop(fact-7, is-5)
det(fact-7, the-6)
root(ROOT-0, fact-7)
dep(fact-7, that-8)
nsubj(need-10, we-9)
ccomp(fact-7, need-10)
neg(need-10, not-11)
dep(need-10, know-12)
det(designer-14, the-13)
dobj(know-12, designer-14)
aux(identify-16, to-15)
infmod(designer-14, identify-16)
xcomp(identify-16, design-17)
det(argument-19, an-18)
dobj(design-17, argument-19)
nsubj(floats-21, argument-19)
rcmod(argument-19, floats-21)
prep_without(floats-21, reference-23)
prep_to(floats-21, reality-25)

(ROOT
  (S
    (NP (NNP ID))
    (VP (VBZ studies)
      (NP
        (NP
          (NP (DT the) (NNS FEATURES))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBP are)
                (VP (RBS best) (VBN traced)
                  (PP (TO to)
                    (NP (DT an) (NN intelligence))))))))
        (: ;)
        (NP (RB not)
          (NP (DT the) (NN intelligence))
          (ADVP (PRP itself)))))
    (. .)))

nsubj(studies-2, ID-1)
root(ROOT-0, studies-2)
det(FEATURES-4, the-3)
dobj(studies-2, FEATURES-4)
nsubjpass(traced-8, FEATURES-4)
auxpass(traced-8, are-6)
advmod(traced-8, best-7)
rcmod(FEATURES-4, traced-8)
det(intelligence-11, an-10)
prep_to(traced-8, intelligence-11)
neg(intelligence-15, not-13)
det(intelligence-15, the-14)
dep(FEATURES-4, intelligence-15)
advmod(intelligence-15, itself-16)

(ROOT
  (S (`` ``)
    (PP (IN As)
      (NP (JJ such)))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's) (RB not)
      (ADJP (IN worth) (JJ rebutting)))
    (. .)))

prep_such_as(rebutting-9, such-3)
nsubj(rebutting-9, it-5)
cop(rebutting-9, 's-6)
neg(rebutting-9, not-7)
dep(rebutting-9, worth-8)
root(ROOT-0, rebutting-9)

(ROOT
  (S ('' '')
    (NP (RB Yet) (PRP you))
    (VP (VBD felt)
      (VP (VBN compelled)
        (S
          (VP (TO to)
            (VP (VB do)
              (ADVP (RB so)))))))
    (. .)))

advmod(you-3, Yet-2)
nsubj(felt-4, you-3)
xsubj(do-7, you-3)
root(ROOT-0, felt-4)
dep(felt-4, compelled-5)
aux(do-7, to-6)
xcomp(compelled-5, do-7)
advmod(do-7, so-8)

(ROOT
  (S ('' '')
    (PP
      (PP (`` ``) (IN Is)
        (NP (DT the) (NN fact)))
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP do) (RB n't)
            (VP (VB need)
              (S
                (VP (TO to)
                  (VP (VB know)
                    (NP
                      (NP (DT the) (JJ exact) (NN source))
                      (PP (IN of)
                        (NP (DT a) (NN design)
                          (S
                            (VP (TO to)
                              (VP (VB know)
                                (NP (PDT such) (DT a) (NN source))))))))))))))))
    (VP (VBZ exists)
      (NP (RB just) (DT an)
        (ADJP (JJ unclear))
        (NN assertion)))
    (. ?)))

dep(exists-24, Is-3)
det(fact-5, the-4)
pobj(Is-3, fact-5)
complm(need-10, that-6)
nsubj(need-10, we-7)
xsubj(know-12, we-7)
aux(need-10, do-8)
neg(need-10, n't-9)
pcomp(Is-3, need-10)
aux(know-12, to-11)
xcomp(need-10, know-12)
det(source-15, the-13)
amod(source-15, exact-14)
dobj(know-12, source-15)
det(design-18, a-17)
prep_of(source-15, design-18)
aux(know-20, to-19)
infmod(design-18, know-20)
predet(source-23, such-21)
det(source-23, a-22)
dobj(know-20, source-23)
root(ROOT-0, exists-24)
advmod(assertion-28, just-25)
det(assertion-28, an-26)
amod(assertion-28, unclear-27)
dobj(exists-24, assertion-28)

(ROOT
  (S
    (PP (IN If)
      (ADVP (RB so)))
    (, ,)
    (VP (VB explain))
    (. .)))

prep(explain-4, If-1)
pcomp(If-1, so-2)
root(ROOT-0, explain-4)

(ROOT
  (S
    (INTJ (UH Oh))
    (VP (VB wait))
    (. ...)))

dep(wait-2, Oh-1)
root(ROOT-0, wait-2)

(ROOT
  (S ('' '')
    (NP (PDT Such) (DT an) (NN assertion))
    (VP (VBZ presupposes)
      (SBAR (IN that)
        (S
          (S
            (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
            (NP (DT the) (`` ``) (NNS features) ('' ''))
            (VP (VBZ exists)
              (ADJP (JJ separate)
                (PP (IN from)
                  (NP (DT the) (NN entity))))))
          (, ,)
          (CC and)
          (S
            (SBAR (IN that)
              (PRN (-LRB- -LRB-)
                (NP (CD 2))
                (-RRB- -RRB-))
              (S
                (NP (DT the) (NNS features))
                (VP (VBP are)
                  (NP
                    (NP (NNS expressions))
                    (PP (IN of)
                      (NP (DT some) (NN intelligence)))))))
            (NP (CD one) (NNS supposes))
            (VP (VBZ exists))))))
    (. .)))

predet(assertion-4, Such-2)
det(assertion-4, an-3)
nsubj(presupposes-5, assertion-4)
root(ROOT-0, presupposes-5)
complm(exists-14, that-6)
dep(exists-14, 1-8)
det(features-12, the-10)
nsubj(exists-14, features-12)
ccomp(presupposes-5, exists-14)
acomp(exists-14, separate-15)
det(entity-18, the-17)
prep_from(separate-15, entity-18)
dep(expressions-28, that-21)
dep(expressions-28, 2-23)
det(features-26, the-25)
nsubj(expressions-28, features-26)
cop(expressions-28, are-27)
ccomp(exists-34, expressions-28)
det(intelligence-31, some-30)
prep_of(expressions-28, intelligence-31)
num(supposes-33, one-32)
nsubj(exists-34, supposes-33)
ccomp(presupposes-5, exists-34)
conj_and(exists-14, exists-34)

(ROOT
  (FRAG (`` ``)
    (INTJ (UH 1))
    (. .)))


(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB mean)
        (PP (IN by) (`` ``)
          (ADJP (JJ separate)))))
    (. ?)))

dobj(mean-4, What-1)
aux(mean-4, do-2)
nsubj(mean-4, you-3)
root(ROOT-0, mean-4)
prep_by(mean-4, separate-7)

(ROOT
  (NP (NNS '') (CD 2) (. .)))


