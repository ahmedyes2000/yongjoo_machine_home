(ROOT
  (S (`` ``)
    (NP
      (NP (DT Some) (NN kind))
      (PP (IN of)
        (NP
          (NP (NN entity) (NNS capable))
          (PP (IN of)
            (NP (VBG guiding))))))
    (VP (VBZ ends)
      (PP (TO to)
        (NP (NN means)
          (CC and)
          (JJ pre-planning) (NNS events)
          (CC or)
          (NNS features)))
      (SBAR (IN before)
        (S
          (NP (PRP they))
          (VP (VBP happen)
            (CC or)
            (VBP come)
            (PP (IN into)
              (NP (NN existence)))))))
    (. .) ('' '')))

det(kind-3, Some-2)
nsubj(ends-9, kind-3)
nn(capable-6, entity-5)
prep_of(kind-3, capable-6)
prep_of(capable-6, guiding-8)
root(ROOT-0, ends-9)
nn(events-14, means-11)
conj_and(means-11, pre-planning-13)
nn(events-14, pre-planning-13)
prep_to(ends-9, events-14)
prep_to(ends-9, features-16)
conj_or(events-14, features-16)
mark(happen-19, before-17)
nsubj(happen-19, they-18)
nsubj(come-21, they-18)
advcl(ends-9, happen-19)
advcl(ends-9, come-21)
conj_or(happen-19, come-21)
prep_into(happen-19, existence-23)

(ROOT
  (NP
    (NP (DT A) (NN non))
    (VP (VBG living)
      (NP (NN entity)))
    (. ?)))

det(non-2, A-1)
root(ROOT-0, non-2)
partmod(non-2, living-3)
dobj(living-3, entity-4)

(ROOT
  (S
    (SBAR (IN Because)
      (S
        (NP (NN life))
        (VP (VBZ is)
          (PP (TO to)
            (NP (NN complex)))
          (S
            (VP (TO to)
              (VP (VB come)
                (ADVP (IN about)
                  (PP (IN without)
                    (NP (DT a) (NN designer))
                    (ADVP (RB then))))
                (PP (IN by)
                  (NP (NN definition)))))))))
    (NP (DT that) (NN designer))
    (VP (MD can) (RB not)
      (VP (VB be)
        (ADJP (JJ alive))))
    (. .)))

mark(is-3, Because-1)
nsubj(is-3, life-2)
xsubj(come-7, life-2)
advcl(alive-20, is-3)
prep_to(is-3, complex-5)
aux(come-7, to-6)
xcomp(is-3, come-7)
advmod(come-7, about-8)
det(designer-11, a-10)
prep_without(about-8, designer-11)
advmod(about-8, then-12)
prep_by(come-7, definition-14)
det(designer-16, that-15)
nsubj(alive-20, designer-16)
aux(alive-20, can-17)
neg(alive-20, not-18)
cop(alive-20, be-19)
root(ROOT-0, alive-20)

(ROOT
  (S (`` ``)
    (NP
      (NP (DT A) (NN complexity) (NN threshold))
      (PP (IN of)
        (NP
          (NP (CD 500) (NNS bits))
          (PP (IN of)
            (NP (NN information))))))
    (VP (VBZ is)
      (NP (DT the)
        (ADJP (RB typically) (VBN used))
        (NN standard)))
    (. .)))

det(threshold-4, A-2)
nn(threshold-4, complexity-3)
nsubj(standard-14, threshold-4)
num(bits-7, 500-6)
prep_of(threshold-4, bits-7)
prep_of(bits-7, information-9)
cop(standard-14, is-10)
det(standard-14, the-11)
advmod(used-13, typically-12)
amod(standard-14, used-13)
root(ROOT-0, standard-14)

(ROOT
  (S
    (S
      (VP (VBN Derived)
        (PP (IN from)
          (NP (DT the) (NN universe)))))
    (VP (VBZ 's)
      (NP (JJ event-generating) (NNS resources))
      (PRN (-LRB- -LRB-)
        (FRAG
          (NP
            (NP (NN time))
            (, ,)
            (NP (NN matter))
            (, ,)
            (CC and)
            (NP (DT the) (NN speed)))
          (SBAR (IN that)
            (S
              (NP (NN matter))
              (VP (MD can)
                (VP (VB change))))))
        (-RRB- -RRB-)))
    (. .)))

csubj(resources-7, Derived-1)
det(universe-4, the-3)
prep_from(Derived-1, universe-4)
cop(resources-7, 's-5)
amod(resources-7, event-generating-6)
root(ROOT-0, resources-7)
dep(resources-7, time-9)
dep(resources-7, matter-11)
conj_and(time-9, matter-11)
det(speed-15, the-14)
dep(resources-7, speed-15)
conj_and(time-9, speed-15)
complm(change-19, that-16)
nsubj(change-19, matter-17)
aux(change-19, can-18)
dep(time-9, change-19)

(ROOT
  (S ('' '')
    (NP (RB So) (NN something))
    (VP (MD can) (, ,)
      (PP (IN through)
        (NP
          (NP (DT a) (NN process))
          (PP (IN of)
            (NP (JJ random) (NN mutation)))))
      (, ,)
      (VP (VBP accumulate)
        (NP
          (NP
            (NP (CD 499) (NNS bits))
            (PP (IN of)
              (NP (NN information))))
          (: ...)
          (CC but)
          (NP (RB not) (JJR more)))))
    (. ?)))

advmod(something-3, So-2)
nsubj(accumulate-13, something-3)
aux(accumulate-13, can-4)
det(process-8, a-7)
prep_through(accumulate-13, process-8)
amod(mutation-11, random-10)
prep_of(process-8, mutation-11)
root(ROOT-0, accumulate-13)
num(bits-15, 499-14)
dobj(accumulate-13, bits-15)
prep_of(bits-15, information-17)
neg(more-21, not-20)
dobj(accumulate-13, more-21)
conj_but(bits-15, more-21)

(ROOT
  (SBARQ
    (WHNP (WDT What)
      (NP
        (NP (CD 500) (NNS bits))
        (PP (IN of)
          (NP (NN information)))))
    (SQ (VBP are)
      (NP (PRP we))
      (VP (VBG talking)
        (PP (IN about)
          (NP (RB here)))))
    (. ?)))

det(bits-3, What-1)
num(bits-3, 500-2)
dobj(talking-8, bits-3)
prep_of(bits-3, information-5)
aux(talking-8, are-6)
nsubj(talking-8, we-7)
root(ROOT-0, talking-8)
prep(talking-8, about-9)
pobj(about-9, here-10)

(ROOT
  (S
    (NP
      (NP (DT The) (NN complexity))
      (PP (IN of)
        (NP
          (NP (NNS dunes))
          (PP (IN in)
            (NP (DT the) (NNP Sahara) (NN desert))))))
    (VP (MD would)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB be)
              (VP (VBN coded)
                (PP (IN in)
                  (NP
                    (NP (JJR more))
                    (NP
                      (NP (DT the) (CD 500) (NNS bits))
                      (PP (IN of)
                        (NP (NN information))))))
                (PP (IN by)
                  (NP (DT any) (NN standard)))
                (: ...)
                (SQ (VBZ is)
                  (NP (PRP it))
                  (VP (VBN designed)
                    (PP (IN by)
                      (NP (DT an) (NN intelligence)))))))))))
    (. ?)))

det(complexity-2, The-1)
nsubj(have-10, complexity-2)
xsubj(coded-13, complexity-2)
prep_of(complexity-2, dunes-4)
det(desert-8, the-6)
nn(desert-8, Sahara-7)
prep_in(dunes-4, desert-8)
aux(have-10, would-9)
root(ROOT-0, have-10)
aux(coded-13, to-11)
auxpass(coded-13, be-12)
xcomp(have-10, coded-13)
prep_in(coded-13, more-15)
det(bits-18, the-16)
num(bits-18, 500-17)
dep(more-15, bits-18)
prep_of(bits-18, information-20)
det(standard-23, any-22)
agent(coded-13, standard-23)
auxpass(designed-27, is-25)
nsubjpass(designed-27, it-26)
parataxis(coded-13, designed-27)
det(intelligence-30, an-29)
agent(designed-27, intelligence-30)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (VBZ does)
      (NP (DT this) (NN designer))
      (VP (VB guide)
        (SBAR
          (SBAR
            (S
              (VP (`` ``) (VBZ ends)
                (PP (TO to)
                  (NP (NNS means)))
                ('' ''))))
          (CC and)
          (SBAR
            (WHADVP (WRB how))
            (S
              (VP (VBZ does)
                (S
                  (NP (PRP it))
                  (NP (JJ pre-plan) (NNS events)))
                (SBAR (IN before)
                  (S
                    (NP (PRP they))
                    (VP (VBP come)
                      (PP (IN into)
                        (NP (NN existence))))))))))))
    (. ?)))

advmod(guide-5, How-1)
aux(guide-5, does-2)
det(designer-4, this-3)
nsubj(guide-5, designer-4)
root(ROOT-0, guide-5)
dep(guide-5, ends-7)
prep_to(ends-7, means-9)
advmod(does-13, how-12)
dep(guide-5, does-13)
conj_and(ends-7, does-13)
nsubj(events-16, it-14)
amod(events-16, pre-plan-15)
xcomp(does-13, events-16)
mark(come-19, before-17)
nsubj(come-19, they-18)
advcl(does-13, come-19)
prep_into(come-19, existence-21)

(ROOT
  (SBARQ (`` ``)
    (WHNP (WP What))
    (SQ (VBZ does)
      (NP (DT this))
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB do)
              (PP (IN with)
                (NP
                  (NP (NNP ID))
                  (PRN (-LRB- -LRB-)
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (VP (VBZ DETECTS)
                          (NP
                            (NP (VBG existing) (NN design))
                            (PP (RB instead) (IN of)
                              (S
                                (VP (VBG determining)
                                  (SBAR
                                    (WHADVP (WRB how))
                                    (S
                                      (NP (PRP it))
                                      (VP (VBD got)
                                        (ADVP (RB there))))))))))))
                    (-RRB- -RRB-)))))))))
    (. ?)))

dep(have-5, What-2)
aux(have-5, does-3)
nsubj(have-5, this-4)
xsubj(do-7, this-4)
root(ROOT-0, have-5)
aux(do-7, to-6)
xcomp(have-5, do-7)
prep_with(do-7, ID-9)
nsubj(DETECTS-12, which-11)
dep(ID-9, DETECTS-12)
amod(design-14, existing-13)
dobj(DETECTS-12, design-14)
prepc_instead_of(design-14, determining-17)
advmod(got-20, how-18)
nsubj(got-20, it-19)
ccomp(determining-17, got-20)
advmod(got-20, there-21)

(ROOT
  (S (`` ``)
    (CC But)
    (SBAR (IN if)
      (S
        (NP (EX there))
        (VP (VBZ is)
          (NP (DT a) (NN designer)))))
    (ADVP (RB then))
    (NP (DT that) (NN designer))
    (VP (VBZ has)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP (VBG using)
              (NP (DT some) (NN method)
                (S
                  (VP (TO to)
                    (VP (VB create)
                      (NP (DT these) (NNS changes)))))))))))
    (. ?)))

cc(has-11, But-2)
mark(is-5, if-3)
expl(is-5, there-4)
dep(has-11, is-5)
det(designer-7, a-6)
nsubj(is-5, designer-7)
advmod(has-11, then-8)
det(designer-10, that-9)
nsubj(has-11, designer-10)
xsubj(using-14, designer-10)
root(ROOT-0, has-11)
aux(using-14, to-12)
aux(using-14, be-13)
xcomp(has-11, using-14)
det(method-16, some-15)
dobj(using-14, method-16)
aux(create-18, to-17)
infmod(method-16, create-18)
det(changes-20, these-19)
dobj(create-18, changes-20)

(ROOT
  (S
    (PP (IN For)
      (NP
        (NP (DT a) (NN theory))
        (SBAR
          (WHNP (WDT that))
          (S
            (ADVP (RB explicitly))
            (VP (VBZ states)
              (SBAR (IN that)
                (S
                  (NP (EX there))
                  (VP (VBZ is)
                    (NP (DT a) (NN designer))))))))))
    (NP (NNP ID))
    (VP (VBZ is)
      (ADJP (RB remarkably) (JJ quiet)
        (PP (IN on)
          (NP
            (NP (DT the) (NN nature)
              (CC and)
              (NNS methods))
            (PP (IN of)
              (NP (DT that) (NN designer)))))))
    (. .)))

det(theory-3, a-2)
nsubj(states-6, theory-3)
prep_for(is-13, theory-3)
advmod(states-6, explicitly-5)
rcmod(theory-3, states-6)
complm(is-9, that-7)
expl(is-9, there-8)
ccomp(states-6, is-9)
det(designer-11, a-10)
nsubj(is-9, designer-11)
nsubj(is-13, ID-12)
root(ROOT-0, is-13)
advmod(quiet-15, remarkably-14)
acomp(is-13, quiet-15)
det(nature-18, the-17)
prep_on(quiet-15, nature-18)
prep_on(quiet-15, methods-20)
conj_and(nature-18, methods-20)
det(designer-23, that-22)
prep_of(nature-18, designer-23)

(ROOT
  (S ('' '')
    (NP (PRP It))
    (VP (VBZ is)
      (ADVP (DT no) (RBR more))
      (NP
        (NP (SYM a))
        ('' '')
        (SBAR
          (S
            (NP
              (NP (`` god) (JJ of-the-gaps) ('' '') (NN theory))
              (PP (IN than)
                (S
                  (VP
                    (VP (VBG coming)
                      (PP (IN across)
                        (NP (DT a) (NN book))))
                    (CC and)
                    (VP (VBG concluding)
                      (SBAR
                        (S
                          (NP (PRP it))
                          (VP (VBD had)
                            (NP (DT an) (NN author))))))))))
            (VP (VBZ is)
              (NP (DT an) (`` ``) (JJ author-of-the-gaps) ('' '') (NN fallacy)))))))
    (. .)))

nsubj(a-6, It-2)
cop(a-6, is-3)
dep(more-5, no-4)
advmod(a-6, more-5)
root(ROOT-0, a-6)
punct(theory-11, god-8)
amod(theory-11, of-the-gaps-9)
nsubj(fallacy-28, theory-11)
prepc_than(theory-11, coming-13)
det(book-16, a-15)
prep_across(coming-13, book-16)
prepc_than(theory-11, concluding-18)
conj_and(coming-13, concluding-18)
nsubj(had-20, it-19)
ccomp(concluding-18, had-20)
det(author-22, an-21)
dobj(had-20, author-22)
cop(fallacy-28, is-23)
det(fallacy-28, an-24)
amod(fallacy-28, author-of-the-gaps-26)
rcmod(a-6, fallacy-28)

(ROOT
  (S ('' '')
    (NP (DT The) (NN difference))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (DT a) (NN book))
          (VP (VBZ is)
            (ADVP (RB demonstratively))
            (NP (DT an) (JJ artificial) (NN construct))))))
    (. .)))

det(difference-3, The-2)
nsubj(is-4, difference-3)
root(ROOT-0, is-4)
complm(construct-12, that-5)
det(book-7, a-6)
nsubj(construct-12, book-7)
cop(construct-12, is-8)
advmod(construct-12, demonstratively-9)
det(construct-12, an-10)
amod(construct-12, artificial-11)
ccomp(is-4, construct-12)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (MD can)
        (VP (VBD got)
          (NP
            (NP (DT a) (NN printer)
              (CC and)
              (NN watch) (NN one))
            (VP (VBG being)
              (VP (VBN made)))))))
    (, ,)
    (NP (PRP I))
    (VP (MD can)
      (VP
        (VP (VB go)
          (PP (TO to)
            (NP (DT an) (NN author))))
        (CC and)
        (VP (VB ask)
          (SBAR
            (WHADVP (WRB why))
            (S
              (NP (PRP he))
              (VP (VBD wrote)
                (NP (DT the) (NN book))))))))
    (. .)))

nsubj(got-3, I-1)
aux(got-3, can-2)
ccomp(go-14, got-3)
det(one-8, a-4)
nn(one-8, printer-5)
conj_and(printer-5, watch-7)
nn(one-8, watch-7)
dobj(got-3, one-8)
auxpass(made-10, being-9)
partmod(one-8, made-10)
nsubj(go-14, I-12)
nsubj(ask-19, I-12)
aux(go-14, can-13)
root(ROOT-0, go-14)
det(author-17, an-16)
prep_to(go-14, author-17)
conj_and(go-14, ask-19)
advmod(wrote-22, why-20)
nsubj(wrote-22, he-21)
advcl(ask-19, wrote-22)
det(book-24, the-23)
dobj(wrote-22, book-24)

(ROOT
  (SQ (MD Can)
    (NP (PRP I))
    (VP (VB do)
      (NP (DT the) (JJ same) (NN thing))
      (PP (IN with)
        (NP
          (NP (DT a) (NN bird))
          (CC or)
          (NP (DT a) (NN lizard)))))
    (. ?)))

aux(do-3, Can-1)
nsubj(do-3, I-2)
root(ROOT-0, do-3)
det(thing-6, the-4)
amod(thing-6, same-5)
dobj(do-3, thing-6)
det(bird-9, a-8)
prep_with(do-3, bird-9)
det(lizard-12, a-11)
prep_with(do-3, lizard-12)
conj_or(bird-9, lizard-12)

