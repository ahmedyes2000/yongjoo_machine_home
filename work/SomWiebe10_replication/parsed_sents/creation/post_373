(ROOT
  (SBARQ (`` ``)
    (WHNP (WP What))
    (SQ (VBP do)
      (NP
        (NP (NNP Catcher))
        (PP (IN in)
          (NP
            (NP (DT the) (NNP Rye))
            (, ,)
            (NP (DT the) (NNP Mona) (NNP Lisa))
            (, ,)
            (NP (NNP Mount) (NNP Rushmore))
            (, ,)
            (CC and)
            (NP
              (NP (DT a) (NN love) (NN note) (NN etched))
              (PP (IN on)
                (NP (DT a) (JJ sandy) (NN beach)))))))
      (VP (VB have)
        (PP (IN in)
          (NP (JJ common)))))
    (. ?)))

dobj(have-25, What-2)
aux(have-25, do-3)
nsubj(have-25, Catcher-4)
det(Rye-7, the-6)
prep_in(Catcher-4, Rye-7)
det(Lisa-11, the-9)
nn(Lisa-11, Mona-10)
prep_in(Catcher-4, Lisa-11)
conj_and(Rye-7, Lisa-11)
nn(Rushmore-14, Mount-13)
prep_in(Catcher-4, Rushmore-14)
conj_and(Rye-7, Rushmore-14)
det(etched-20, a-17)
nn(etched-20, love-18)
nn(etched-20, note-19)
prep_in(Catcher-4, etched-20)
conj_and(Rye-7, etched-20)
det(beach-24, a-22)
amod(beach-24, sandy-23)
prep_on(etched-20, beach-24)
root(ROOT-0, have-25)
prep_in(have-25, common-27)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP are)
      (NP
        (NP (DT all) (NNS signs))
        (PP (IN of)
          (NP (NN design)))))
    (. .)))

nsubj(signs-4, They-1)
cop(signs-4, are-2)
det(signs-4, all-3)
root(ROOT-0, signs-4)
prep_of(signs-4, design-6)

(ROOT
  (SINV (`` ``)
    (S
      (NP (EX there))
      (VP (VBP are)
        (NP
          (NP (NNS signs))
          (PP (IN of)
            (NP
              (NP (NN design))
              (PP (IN in)
                (NP (NN nature))))))))
    ('' '')
    (VP
      (ADVP (RB Maybe) (RB there))
      (VBP are)
      (NP
        (NP (NNS signs))
        (PP (IN of)
          (NP (NNP APPARENT)))))
    (NP
      (NP (NN design))
      (PP (IN in)
        (NP (NN nature))))
    (. .)))

expl(are-3, there-2)
ccomp(are-12, are-3)
nsubj(are-3, signs-4)
prep_of(signs-4, design-6)
prep_in(design-6, nature-8)
advmod(there-11, Maybe-10)
advmod(are-12, there-11)
root(ROOT-0, are-12)
attr(are-12, signs-13)
prep_of(signs-13, APPARENT-15)
nsubj(are-12, design-16)
prep_in(design-16, nature-18)

(ROOT
  (S (CC But)
    (NP (EX there))
    (VP (VBZ 's)
      (NP (DT no) (NN evidence))
      (SBAR (IN that)
        (S
          (NP (EX there))
          (VP (VBD was)
            (NP (DT a) (JJ real) (NN designer))
            (, ,)
            (SBAR (IN so)
              (S
                (NP (DT the) (JJ apparent) (NN design))
                (VP (MD might)
                  (ADVP (RB just))
                  (VP (VB be)
                    (ADJP (JJ meaningless))
                    (ADVP (RB as) (RB far))
                    (SBAR (IN as)
                      (S
                        (NP (`` ``) (JJ intelligent) (NN design) ('' ''))
                        (VP (VBZ is)
                          (ADJP (JJ concerned)))))))))))))
    (. .)))

cc('s-3, But-1)
expl('s-3, there-2)
root(ROOT-0, 's-3)
det(evidence-5, no-4)
nsubj('s-3, evidence-5)
complm(was-8, that-6)
expl(was-8, there-7)
ccomp('s-3, was-8)
det(designer-11, a-9)
amod(designer-11, real-10)
nsubj(was-8, designer-11)
mark(meaningless-20, so-13)
det(design-16, the-14)
amod(design-16, apparent-15)
nsubj(meaningless-20, design-16)
aux(meaningless-20, might-17)
advmod(meaningless-20, just-18)
cop(meaningless-20, be-19)
advcl(was-8, meaningless-20)
advmod(far-22, as-21)
advmod(meaningless-20, far-22)
mark(concerned-29, as-23)
amod(design-26, intelligent-25)
nsubj(concerned-29, design-26)
cop(concerned-29, is-28)
advcl(meaningless-20, concerned-29)

(ROOT
  (S ('' '')
    (PP (IN Design)
      (NP (NNS theorists)))
    (, ,)
    (PP (IN like)
      (NP (JJ forensic) (NNS detectives)))
    (, ,)
    (VP (VBP have)
      (VP (VBN developed)
        (NP (NNS methods))))
    (: ...)))

prep_design(developed-10, theorists-3)
amod(detectives-7, forensic-6)
prep_like(developed-10, detectives-7)
aux(developed-10, have-9)
root(ROOT-0, developed-10)
dobj(developed-10, methods-11)

(ROOT
  (S ('' '')
    (PP (IN Except)
      (SBAR (IN that)
        (S
          (NP (PRP$ their)
            (NX (`` ``) (NNS methods) ('' '')))
          (VP (VBP are) (RB not)
            (PP (IN at)
              (NP
                (NP (DT all))
                (PP (IN like)
                  (NP
                    (NP (`` ``) (JJ forensic) (NNS detectives) ('' ''))
                    (CC and)
                    (NP (PRP$ their) (NNS methods))))))))))
    (VP (VBP do) (RB n't)
      (ADVP (RB actually))
      (VP (VB work)
        (PP (IN in)
          (NP (NN practice)))))
    (. .)))

dep(work-23, Except-2)
complm(are-8, that-3)
poss(methods-6, their-4)
nsubj(are-8, methods-6)
pcomp(Except-2, are-8)
neg(are-8, not-9)
prep_at(are-8, all-11)
amod(detectives-15, forensic-14)
prep_like(all-11, detectives-15)
poss(methods-19, their-18)
prep_like(all-11, methods-19)
conj_and(detectives-15, methods-19)
aux(work-23, do-20)
neg(work-23, n't-21)
advmod(work-23, actually-22)
root(ROOT-0, work-23)
prep_in(work-23, practice-25)

(ROOT
  (S
    (S
      (NP
        (NP (PRP$ Their) (`` ``) (NN method) ('' '') (NNS amounts))
        (PP (IN to) ('' '')
          (NP (PRP I))))
      (VP (VBP do) (RB n't)
        (VP (VB think)
          (NP (NN anything)))))
    (CC but)
    (S
      (NP (NN design))
      (VP (MD can)
        (VP (VB explain)
          (NP (DT this)))))
    (. .)))

poss(amounts-5, Their-1)
nn(amounts-5, method-3)
nsubj(think-11, amounts-5)
prep_to(amounts-5, I-8)
aux(think-11, do-9)
neg(think-11, n't-10)
root(ROOT-0, think-11)
dobj(think-11, anything-12)
nsubj(explain-16, design-14)
aux(explain-16, can-15)
conj_but(think-11, explain-16)
dobj(explain-16, this-17)

(ROOT
  (S ('' '')
    (NP (DT That))
    (VP (VBZ 's) (RB not)
      (NP
        (NP (DT a) (`` ``) (NN method) ('' ''))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ 's)
              (NP
                (NP (JJ wishful) (NN thinking))
                (PP (VBN based)
                  (PP (IN on)
                    (NP (PRP$ their) (JJ religious) (NN motivation))))))))))
    (. .)))

nsubj(method-7, That-2)
cop(method-7, 's-3)
neg(method-7, not-4)
det(method-7, a-5)
root(ROOT-0, method-7)
nsubj(thinking-12, method-7)
cop(thinking-12, 's-10)
amod(thinking-12, wishful-11)
rcmod(method-7, thinking-12)
prepc_based_on(thinking-12, on-14)
poss(motivation-17, their-15)
amod(motivation-17, religious-16)
pobj(thinking-12, motivation-17)

(ROOT
  (S ('' '')
    (S
      (NP
        (NP (: ...)
          (NP (NNP and))
          (PP (IN arguments) (`` ``)
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (VBP are) (RB not)
                  (ADJP (JJ worth)))))))
        (NP (DT the)))
      (VP (VBZ electrons)))
    (PRN
      (NP (NN being))
      (VP (VBD used)))
    (S
      (NP (TO to))
      (VP (VBP display)
        (NP (PRP them))))
    (. .)))

nsubj(electrons-11, and-3)
prep(and-3, arguments-4)
nsubj(worth-9, which-6)
cop(worth-9, are-7)
neg(worth-9, not-8)
dep(arguments-4, worth-9)
dep(and-3, the-10)
root(ROOT-0, electrons-11)
nsubj(used-13, being-12)
dep(electrons-11, used-13)
nsubj(display-15, to-14)
ccomp(electrons-11, display-15)
dobj(display-15, them-16)

(ROOT
  (S ('' '')
    (S
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (NNP Michael) (NNP Behe))
          (VP (VBZ argues))))
      (NP (DT that) (NN design))
      (VP (VBZ is)
        (NP
          (NP (DT the) (JJS best) (NN explanation))
          (PP (IN for)
            (NP
              (NP (JJ molecular) (NNS machines))
              (PP (IN like)
                (NP (DT the) (JJ bacterial) (NN flagellum))))))))
    (, ,) (`` ``) (RB Then)
    (S
      (NP (PRP he))
      (VP (VBZ is)
        (VP (VBG making)
          (NP (DT a) (JJ big) (NN mistake))
          (SBAR (IN since)
            (S
              (NP (DT that))
              (VP (VBZ is)
                (ADVP (RB obviously))
                (NP
                  (NP (RB not) (DT the) (JJS best) (NN explanation))
                  (PRN (-LRB- -LRB-)
                    (CC or)
                    (ADVP (RB even))
                    (NP
                      (NP (DT any) (NN explanation))
                      (PP (IN at)
                        (NP (DT all))))
                    (-RRB- -RRB-)))))))))
    (. .)))

advmod(argues-5, When-2)
nn(Behe-4, Michael-3)
nsubj(argues-5, Behe-4)
advcl(explanation-11, argues-5)
det(design-7, that-6)
nsubj(explanation-11, design-7)
cop(explanation-11, is-8)
det(explanation-11, the-9)
amod(explanation-11, best-10)
root(ROOT-0, explanation-11)
amod(machines-14, molecular-13)
prep_for(explanation-11, machines-14)
det(flagellum-18, the-16)
amod(flagellum-18, bacterial-17)
prep_like(machines-14, flagellum-18)
advmod(explanation-11, Then-21)
nsubj(making-24, he-22)
aux(making-24, is-23)
ccomp(explanation-11, making-24)
det(mistake-27, a-25)
amod(mistake-27, big-26)
dobj(making-24, mistake-27)
mark(explanation-35, since-28)
nsubj(explanation-35, that-29)
cop(explanation-35, is-30)
advmod(explanation-35, obviously-31)
neg(explanation-35, not-32)
det(explanation-35, the-33)
amod(explanation-35, best-34)
advcl(making-24, explanation-35)
dep(explanation-40, or-37)
dep(explanation-40, even-38)
det(explanation-40, any-39)
dep(explanation-35, explanation-40)
prep_at(explanation-40, all-42)

(ROOT
  (S
    (NP
      (NP (JJ Possible) (NNS paths))
      (PP (IN for)
        (NP
          (NP (DT the) (NN evolution))
          (PP (IN of)
            (NP (DT the) (NN flagellum))))))
    (VP (VBP are)
      (ADJP (RB well) (VBN known)))
    (. .)))

amod(paths-2, Possible-1)
nsubjpass(known-11, paths-2)
det(evolution-5, the-4)
prep_for(paths-2, evolution-5)
det(flagellum-8, the-7)
prep_of(evolution-5, flagellum-8)
auxpass(known-11, are-9)
advmod(known-11, well-10)
root(ROOT-0, known-11)

(ROOT
  (SINV
    (S (`` ``)
      (NP (PRP you))
      (VP (MD can)
        (ADVP (RB often))
        (VP (VB tell)
          (SBAR (IN that)
            (S
              (NP (NN something))
              (VP (VBZ is)
                (VP (VBN designed)
                  (SBAR (RB even) (IN if)
                    (S
                      (NP (PRP you))
                      (VP (VB don)
                        (NP (NN t))))))))))))
    (VP (VBP know)
      (NP
        (NP (NN anything) (RB else))
        (PP (IN about)
          (NP (DT the) (NN designer) ('' '') (NN ANYTHING)))))
    (NP (NNP ELSE) (NNP ???))))

nsubj(tell-5, you-2)
aux(tell-5, can-3)
advmod(tell-5, often-4)
dep(know-15, tell-5)
complm(designed-9, that-6)
nsubjpass(designed-9, something-7)
auxpass(designed-9, is-8)
ccomp(tell-5, designed-9)
advmod(don-13, even-10)
dep(don-13, if-11)
nsubj(don-13, you-12)
ccomp(designed-9, don-13)
dobj(don-13, t-14)
root(ROOT-0, know-15)
dobj(know-15, anything-16)
advmod(anything-16, else-17)
det(ANYTHING-22, the-19)
nn(ANYTHING-22, designer-20)
prep_about(anything-16, ANYTHING-22)
nn(???-24, ELSE-23)
nsubj(know-15, ???-24)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ is) (, ,)
      (S
        (NP (PRP they))
        (RB all)
        (VP (VB reflect)
          (NP
            (NP (DT the) (NN work))
            (PP (IN of)
              (NP (DT an) (JJ intelligent) (NN agent)))))))
    (. .)))

nsubj(is-2, That-1)
root(ROOT-0, is-2)
nsubj(reflect-6, they-4)
advmod(reflect-6, all-5)
ccomp(is-2, reflect-6)
det(work-8, the-7)
dobj(reflect-6, work-8)
det(agent-12, an-10)
amod(agent-12, intelligent-11)
prep_of(work-8, agent-12)

(ROOT
  (FRAG (CC Or)
    (RB not)
    (PP
      (NP (NN anything))
      (PP (IN at)
        (NP (DT all) (NN ???))))))

dep(not-2, Or-1)
root(ROOT-0, not-2)
dep(at-4, anything-3)
dep(not-2, at-4)
det(???-6, all-5)
pobj(at-4, ???-6)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP 're)
      (NP (RB just) (`` ``) (JJ blowing) (NN smoke) ('' '')))
    (. .)))

nsubj(smoke-6, You-1)
cop(smoke-6, 're-2)
advmod(smoke-6, just-3)
amod(smoke-6, blowing-5)
root(ROOT-0, smoke-6)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT any) (NN kind))
        (PP (IN of)
          (NP (`` ``) (NN theory) ('' '')))))
    (. .)))

nsubj(kind-5, This-1)
cop(kind-5, is-2)
neg(kind-5, not-3)
det(kind-5, any-4)
root(ROOT-0, kind-5)
prep_of(kind-5, theory-8)

(ROOT
  (S
    (FRAG
      (ADJP (RB Same) (JJ old)))
    ('' '')
    (NP (PRP I))
    (VP (VBP know)
      (NP (NN design))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (PRP I))
          (VP (VBP see)
            (NP (PRP it))
            ('' '')
            (ADVP (VBD nonsense))))))
    (. .)))

advmod(old-2, Same-1)
dep(know-5, old-2)
nsubj(know-5, I-4)
root(ROOT-0, know-5)
dobj(know-5, design-6)
advmod(see-9, when-7)
nsubj(see-9, I-8)
advcl(know-5, see-9)
dobj(see-9, it-10)
advmod(see-9, nonsense-12)

(ROOT
  (S ('' '')
    (NP (RB Now) (PRP we))
    (VP (VBP re)
      (S
        (VP (VBG dealing)
          (PP (IN with)
            (NP (NN design)))
          (PP (RB far) (IN beyond)
            (NP
              (NP (DT the) (NN pay) (NN grade))
              (PP (IN of)
                (NP (PRP$ your) (JJ average) (NN space) (NN alien))))))))
    (. .)))

advmod(we-3, Now-2)
nsubj(re-4, we-3)
root(ROOT-0, re-4)
xcomp(re-4, dealing-5)
prep_with(dealing-5, design-7)
advmod(dealing-5, far-8)
det(grade-12, the-10)
nn(grade-12, pay-11)
prep_beyond(dealing-5, grade-12)
poss(alien-17, your-14)
amod(alien-17, average-15)
nn(alien-17, space-16)
prep_of(grade-12, alien-17)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (ADVP
      (NP
        (ADJP (JJ have)
          (PP (TO to)))
        (NNS assume))
      (RB that))
    (PRN
      (NP (PRP you))
      (VP (VBP are)))
    (NP (DT an) (NN expert))
    (ADVP (IN on)
      (NP (DT this) (NN particular)))
    (VP (VBZ assertion)
      (SBAR (IN because)
        (S
          (NP (PRP you))
          (VP
            (VP (VBP are))
            (CC or)
            (VP (VBP have)
              (VP (VBN met)
                (NP
                  (NP (DT a) (JJ large) (NN variety))
                  (PP (IN of)
                    (NP (NN space) (NNS aliens) (NNS ???))))))))))))

nsubj(assertion-14, I-2)
amod(assume-5, have-3)
prep(have-3, to-4)
npadvmod(that-6, assume-5)
advmod(assertion-14, that-6)
nsubj(are-8, you-7)
parataxis(assertion-14, are-8)
det(expert-10, an-9)
nsubj(assertion-14, expert-10)
advmod(assertion-14, on-11)
det(particular-13, this-12)
pobj(on-11, particular-13)
root(ROOT-0, assertion-14)
mark(are-17, because-15)
nsubj(are-17, you-16)
nsubj(met-20, you-16)
advcl(assertion-14, are-17)
aux(met-20, have-19)
advcl(assertion-14, met-20)
conj_or(are-17, met-20)
det(variety-23, a-21)
amod(variety-23, large-22)
dobj(met-20, variety-23)
nn(???-27, space-25)
nn(???-27, aliens-26)
prep_of(variety-23, ???-27)

(ROOT
  (S (CC Or)
    (NP (RB else) (PRP you))
    (VP (VBP 're)
      (ADVP (RB just))
      (VP (VBG continuing)
        (S
          (VP (TO to) (`` ``)
            (VP (VB make)
              (NP (PRP it))
              (ADVP (RB up))
              (SBAR (IN as)
                (S
                  (NP (PRP you))
                  (VP (VBP go)
                    (PRT (RP along))))))
            ('' '')))))
    (. .)))

cc(continuing-6, Or-1)
advmod(you-3, else-2)
nsubj(continuing-6, you-3)
xsubj(make-9, you-3)
aux(continuing-6, 're-4)
advmod(continuing-6, just-5)
root(ROOT-0, continuing-6)
aux(make-9, to-7)
xcomp(continuing-6, make-9)
dobj(make-9, it-10)
advmod(make-9, up-11)
mark(go-14, as-12)
nsubj(go-14, you-13)
advcl(make-9, go-14)
prt(go-14, along-15)

(ROOT
  (S (`` ``)
    (NP (NN theism))
    (VP (VBZ seems)
      (S
        (VP (TO to)
          (VP (VB have)
            (NP (DT the) (JJS most) (JJ explanatory) (NN power))))))
    (. .)))

nsubj(seems-3, theism-2)
xsubj(have-5, theism-2)
root(ROOT-0, seems-3)
aux(have-5, to-4)
xcomp(seems-3, have-5)
det(power-9, the-6)
amod(power-9, most-7)
amod(power-9, explanatory-8)
dobj(have-5, power-9)

(ROOT
  (S ('' '')
    (PP (IN Of)
      (NP
        (NP (NN course))
        (NP (DT an) (NN omnipotent))))
    (, ,)
    (NP (NN omniscient) (, ,) (JJ eternal) (NN supernatural) (NN agent))
    (VP (MD can)
      (VP (VB make) (, ,) (VB do) (, ,) (VB create) (, ,) (VB cause)
        (NP (NN anything)
          (CC and)
          (NN everything))))
    (. .)))

prep_of(make-13, course-3)
det(omnipotent-5, an-4)
dep(course-3, omnipotent-5)
nn(agent-11, omniscient-7)
amod(agent-11, eternal-9)
nn(agent-11, supernatural-10)
nsubj(make-13, agent-11)
aux(make-13, can-12)
root(ROOT-0, make-13)
dep(make-13, do-15)
dep(make-13, create-17)
dep(make-13, cause-19)
dobj(make-13, anything-20)
dobj(make-13, everything-22)
conj_and(anything-20, everything-22)

(ROOT
  (S (IN So)
    (NP
      (NP (DT that) (`` ``) (JJ explains) ('' '') (NN everything))
      (CC and)
      (NP (RB there)))
    (VP (VBZ 's)
      (NP
        (NP (DT no) (NN need))
        (PP (IN for)
          (NP (JJ silly) (NN science)))
        (S
          (VP (TO to)
            (VP (VB look)
              (PP (IN for)
                (NP
                  (NP (`` ``) (JJ naturalistic) ('' '') (NNS causes))
                  (CC and)
                  (NP (NNS effects)))))))))
    (. .)))

dep(need-11, So-1)
det(everything-6, that-2)
amod(everything-6, explains-4)
nsubj(need-11, everything-6)
conj_and(everything-6, there-8)
nsubj(need-11, there-8)
cop(need-11, 's-9)
det(need-11, no-10)
root(ROOT-0, need-11)
amod(science-14, silly-13)
prep_for(need-11, science-14)
aux(look-16, to-15)
infmod(need-11, look-16)
amod(causes-21, naturalistic-19)
prep_for(look-16, causes-21)
prep_for(look-16, effects-23)
conj_and(causes-21, effects-23)

(ROOT
  (S ('' '')
    (S (CC And)
      (, ,)
      (PP (IN of)
        (NP (NN course)))
      (, ,)
      (NP (PRP we))
      (VP (VBP know)
        (SBAR (IN that)
          (S
            (NP (DT these))
            (VP (VBD were)
              (VP (VBN created)
                (PP (IN by)
                  (NP (JJ human) (NNS agents)))))))))
    (CC and)
    (S
      (NP (PRP we))
      (VP (VBP have)
        (NP
          (NP (NNS thousands))
          (PP (IN of)
            (NP
              (NP (NNS years))
              (PP (IN of)
                (NP
                  (NP (NN experience))
                  (PP (IN with)
                    (NP (DT those) (JJ human) (NNS agents))))))))))
    (. .)))

prep_of(know-8, course-5)
nsubj(know-8, we-7)
root(ROOT-0, know-8)
complm(created-12, that-9)
nsubjpass(created-12, these-10)
auxpass(created-12, were-11)
ccomp(know-8, created-12)
amod(agents-15, human-14)
agent(created-12, agents-15)
nsubj(have-18, we-17)
conj_and(know-8, have-18)
dobj(have-18, thousands-19)
prep_of(thousands-19, years-21)
prep_of(years-21, experience-23)
det(agents-27, those-25)
amod(agents-27, human-26)
prep_with(experience-23, agents-27)

(ROOT
  (INTJ (UH Wait) (. !)))

root(ROOT-0, Wait-1)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBD thought)
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBD were)
            (VP (VBG claiming)
              (SBAR (IN that)
                (S
                  (NP (NNP ID))
                  (VP (VBD was)
                    (ADVP (RB NOT))
                    (VP (VBG trying)
                      (S
                        (VP (TO to)
                          (VP (VB get)
                            (NP (PRP$ your) (NN god))
                            (PP (IN into)
                              (NP (DT the) (JJ public) (NN square)))))))))))))))
    (. ?)))

nsubj(thought-2, I-1)
root(ROOT-0, thought-2)
nsubj(claiming-5, you-3)
aux(claiming-5, were-4)
ccomp(thought-2, claiming-5)
complm(trying-10, that-6)
nsubj(trying-10, ID-7)
xsubj(get-12, ID-7)
aux(trying-10, was-8)
neg(trying-10, NOT-9)
ccomp(claiming-5, trying-10)
aux(get-12, to-11)
xcomp(trying-10, get-12)
poss(god-14, your-13)
dobj(get-12, god-14)
det(square-18, the-16)
amod(square-18, public-17)
prep_into(get-12, square-18)

(ROOT
  (S (`` ``)
    (NP (DT That))
    (VP (VBZ is)
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (NNP ID))
          (VP (MD can)
            (VP (VB be)
              (VP
                (ADVP (RB properly))
                (VBN considered)
                (PP (IN in)
                  (NP (JJ public) (JJ scientific) (NNS discussions) ('' '') (NN Nope)))))))))
    (. .)))

nsubj(is-3, That-2)
root(ROOT-0, is-3)
advmod(considered-9, why-4)
nsubjpass(considered-9, ID-5)
aux(considered-9, can-6)
auxpass(considered-9, be-7)
advmod(considered-9, properly-8)
advcl(is-3, considered-9)
amod(Nope-15, public-11)
amod(Nope-15, scientific-12)
nn(Nope-15, discussions-13)
prep_in(considered-9, Nope-15)

(ROOT
  (S
    (S
      (NP (NNP ID))
      (VP (VBZ is) (RB not)
        (NP (DT a) (NN theory))))
    (CC and)
    (S
      (S
        (NP (PRP it))
        (VP (MD can)
          (ADVP (RB never))
          (VP (VB be)
            (NP (NN science)))))
      (CC and)
      (S
        (ADVP (RB therefore))
        (NP (PRP it))
        (VP (VBZ is)
          (ADVP (RB properly))
          (VP (VBN rejected)
            (PP (IN in)
              (NP (JJ scientific) (NNS discussions)))))))
    (. .)))

nsubj(theory-5, ID-1)
cop(theory-5, is-2)
neg(theory-5, not-3)
det(theory-5, a-4)
root(ROOT-0, theory-5)
nsubj(science-11, it-7)
aux(science-11, can-8)
neg(science-11, never-9)
cop(science-11, be-10)
conj_and(theory-5, science-11)
advmod(rejected-17, therefore-13)
nsubjpass(rejected-17, it-14)
auxpass(rejected-17, is-15)
advmod(rejected-17, properly-16)
conj_and(theory-5, rejected-17)
conj_and(science-11, rejected-17)
amod(discussions-20, scientific-19)
prep_in(rejected-17, discussions-20)

(ROOT
  (SBARQ
    (WHADJP (RB Just) (WP what))
    (SQ (VBZ is)
      (NP
        (NP (NNP the) ('' '') (NNP ID))
        (NP (NN theory) ('' ''))))
    (. ?)))

attr(is-3, Just-1)
dep(Just-1, what-2)
root(ROOT-0, is-3)
nn(ID-6, the-4)
nsubj(is-3, ID-6)
dep(ID-6, theory-7)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (MD can)
          (ADVP (RB easily))
          (VP (VB explain)
            (NP (NN everything))))))
    (, ,)
    (WHADVP (WRB how))
    (SQ (MD can)
      (NP (PRP it))
      (VP (VB be)
        (VP (VBN tested))))
    (. ?)))

mark(explain-5, If-1)
nsubj(explain-5, it-2)
aux(explain-5, can-3)
advmod(explain-5, easily-4)
advcl(tested-12, explain-5)
dobj(explain-5, everything-6)
advmod(tested-12, how-8)
aux(tested-12, can-9)
nsubjpass(tested-12, it-10)
auxpass(tested-12, be-11)
root(ROOT-0, tested-12)

(ROOT
  (SQ (VBZ Is)
    (NP (EX there))
    (NP
      (NP (DT any) (NN way))
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (MD could)
            (ADVP (RB possibly))
            (VP (VB be)
              (VP (VBN found)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (ADJP (JJ wrong)))))))))))
    (. ?)))

root(ROOT-0, Is-1)
expl(Is-1, there-2)
det(way-4, any-3)
nsubj(Is-1, way-4)
complm(found-10, that-5)
nsubjpass(found-10, it-6)
aux(found-10, could-7)
advmod(found-10, possibly-8)
auxpass(found-10, be-9)
dep(way-4, found-10)
aux(wrong-13, to-11)
cop(wrong-13, be-12)
xcomp(found-10, wrong-13)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (NN everything))
          (VP (VBZ is)
            (UCP (NN design)
              (CC and)
              (NN design)))))
      (VP (VBZ explains)
        (NP (NN everything))))
    (, ,) (RB then)
    (S
      (NP (PRP it))
      (VP (VBZ 's)
        (NP (DT a)
          (ADJP (RB completely) (JJ circular))
          (NN argument))))
    (. .)))

mark(design-4, If-1)
nsubj(design-4, everything-2)
cop(design-4, is-3)
csubj(explains-7, design-4)
conj_and(design-4, design-6)
csubj(explains-7, design-6)
root(ROOT-0, explains-7)
dobj(explains-7, everything-8)
advmod(explains-7, then-10)
nsubj(argument-16, it-11)
cop(argument-16, 's-12)
det(argument-16, a-13)
advmod(circular-15, completely-14)
amod(argument-16, circular-15)
ccomp(explains-7, argument-16)

(ROOT
  (SQ (VBD Did)
    (NP (PRP it))
    (VP (VB predict)
      (SBAR
        (WHADVP (WRB where))
        (S
          (VP (TO to)
            (VP (VB find)
              (NP (NN tiktaalik)))))))
    (. ?)))

aux(predict-3, Did-1)
nsubj(predict-3, it-2)
root(ROOT-0, predict-3)
advmod(find-6, where-4)
aux(find-6, to-5)
xcomp(predict-3, find-6)
dobj(find-6, tiktaalik-7)

(ROOT
  (X
    (ADVP (RB So))
    (NP (WP what))
    (. ?)))

dep(what-2, So-1)
root(ROOT-0, what-2)

(ROOT
  (S (`` ``)
    (NP (JJ intelligent) (NNS agents))
    (ADVP (RB sometimes))
    (VP (VB leave)
      (NP
        (NP (NNS traces))
        (PP (IN of)
          (NP (PRP$ their) (NN activity))))
      (ADVP (RB behind))
      (, ,)
      (PP (IN like)
        (NP
          (NP (NNS fingerprints))
          (PP (IN on)
            (NP (NN evidence))))))
    (. .)))

amod(agents-3, intelligent-2)
nsubj(leave-5, agents-3)
advmod(leave-5, sometimes-4)
root(ROOT-0, leave-5)
dobj(leave-5, traces-6)
poss(activity-9, their-8)
prep_of(traces-6, activity-9)
advmod(leave-5, behind-10)
prep_like(leave-5, fingerprints-13)
prep_on(fingerprints-13, evidence-15)

(ROOT
  (S ('' '')
    (PP (IN Like)
      (NP
        (NP (JJ termite) (NNS mounds)
          (CC or)
          (NNS crystals))
        (CC or)
        (NP
          (NP (NN tree) (NNS limbs))
          (VP (VBN shaped)))))
    (VP (VBP like)
      (NP
        (NP (NNS letters))
        (PP (IN of)
          (NP (DT the) (NN alphabet)))))
    (. ?)))

amod(mounds-4, termite-3)
prep_like(like-11, mounds-4)
conj_or(mounds-4, crystals-6)
prep_like(like-11, crystals-6)
nn(limbs-9, tree-8)
conj_or(mounds-4, limbs-9)
prep_like(like-11, limbs-9)
partmod(limbs-9, shaped-10)
root(ROOT-0, like-11)
dobj(like-11, letters-12)
det(alphabet-15, the-14)
prep_of(letters-12, alphabet-15)

(ROOT
  (S
    (INTJ (UH Oops))
    (, ,)
    (ADVP (RB sometimes))
    (NP (JJ such) (NNS things))
    (VP (VBP are) (RB not)
      (NP
        (NP (DT the) (NN result))
        (PP (IN of)
          (NP (`` ``)
            (NP (JJ intelligent) (NNS agents))
            ('' '')
            (PP (IN like)
              (NP (NNS humans)))))))
    (. .)))

dep(result-9, Oops-1)
advmod(result-9, sometimes-3)
amod(things-5, such-4)
nsubj(result-9, things-5)
cop(result-9, are-6)
neg(result-9, not-7)
det(result-9, the-8)
root(ROOT-0, result-9)
amod(agents-13, intelligent-12)
prep_of(result-9, agents-13)
prep_like(agents-13, humans-16)

(ROOT
  (S (IN So)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (MD can) (RB not)
          (VP (VB be)
            (ADJP (RBR more) (JJ specific)
              (PP (IN about)
                (NP
                  (NP (DT the) (NN nature))
                  (PP (IN of)
                    (NP (PRP$ your) (NN supposed) (`` ``) (JJ intelligent) (NN agent) ('' ''))))))))))
    (, ,)
    (NP (EX there))
    (VP (VBZ is)
      (NP (DT no) (JJ good) (NN reason)
        (S
          (VP (TO to)
            (VP (VB suspect)
              (SBAR (IN that)
                (S
                  (NP (DT any) (JJ such) (NN thing))
                  (ADVP (RB actually))
                  (VP (VBZ exists)))))))))
    (. .)))

dep(is-21, So-1)
mark(specific-8, if-2)
nsubj(specific-8, you-3)
aux(specific-8, can-4)
neg(specific-8, not-5)
cop(specific-8, be-6)
advmod(specific-8, more-7)
advcl(is-21, specific-8)
det(nature-11, the-10)
prep_about(specific-8, nature-11)
poss(agent-17, your-13)
nn(agent-17, supposed-14)
amod(agent-17, intelligent-16)
prep_of(nature-11, agent-17)
expl(is-21, there-20)
root(ROOT-0, is-21)
det(reason-24, no-22)
amod(reason-24, good-23)
nsubj(is-21, reason-24)
aux(suspect-26, to-25)
infmod(reason-24, suspect-26)
complm(exists-32, that-27)
det(thing-30, any-28)
amod(thing-30, such-29)
nsubj(exists-32, thing-30)
advmod(exists-32, actually-31)
ccomp(suspect-26, exists-32)

(ROOT
  (S
    (S
      (NP (EX There))
      (VP (VBP are)
        (NP (DT no) (`` ``) (NNS fingerprints) ('' ''))))
    (CC and)
    (S
      (NP (EX there))
      (VP (VBZ is)
        (NP (DT no) (`` ``) (NN evidence) ('' ''))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
det(fingerprints-5, no-3)
nsubj(are-2, fingerprints-5)
expl(is-9, there-8)
conj_and(are-2, is-9)
det(evidence-12, no-10)
nsubj(is-9, evidence-12)

