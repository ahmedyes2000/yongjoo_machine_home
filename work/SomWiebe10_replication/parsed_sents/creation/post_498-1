(ROOT
  (S (RB So)
    (VP (VB let)
      (S
        (NP (POS 's))
        (VP (VB be)
          (VP (VBN upfront)
            (ADVP (RB here))
            (PP (IN about)
              (SBAR
                (WHNP (WP what))
                (S
                  (S
                    (NP (NNP ID))
                    (ADVP (RB really))
                    (VP (VBZ is)))
                  (: :)
                  (S
                    (NP (PRP It))
                    (VP (VBZ 's)
                      (NP (DT the) (NN argument))
                      (SBAR (IN that)
                        (WHADVP (WRB when))
                        (S
                          (NP (PRP we))
                          (VP (VBP do) (RB not)
                            (ADVP (RB fully))
                            (VP (VB understand)
                              (SBAR
                                (WHADVP (WRB how))
                                (S
                                  (NP (NN something))
                                  (VP (VBD arose))))))))
                      (, ,)
                      (SBAR (IN that)
                        (S
                          (NP (PRP$ our) (NN default) (NN position))
                          (VP (MD should)
                            (VP (VB be) (`` ``)
                              (VP (VBN designed) ('' '')
                                (SBAR (RB not)
                                  (S (`` ``)
                                    (NP (PRP we))
                                    (VP (VBP do) (RB n't)
                                      (VP (VB know)))
                                    ('' '')))))))))))))))))
    (. .)))

advmod(let-2, So-1)
root(ROOT-0, let-2)
nsubjpass(upfront-5, 's-3)
auxpass(upfront-5, be-4)
ccomp(let-2, upfront-5)
advmod(upfront-5, here-6)
dep(is-11, what-8)
nsubj(is-11, ID-9)
advmod(is-11, really-10)
prepc_about(upfront-5, is-11)
nsubj(argument-16, It-13)
cop(argument-16, 's-14)
det(argument-16, the-15)
parataxis(is-11, argument-16)
complm(understand-23, that-17)
advmod(understand-23, when-18)
nsubj(understand-23, we-19)
aux(understand-23, do-20)
neg(understand-23, not-21)
advmod(understand-23, fully-22)
ccomp(argument-16, understand-23)
advmod(arose-26, how-24)
nsubj(arose-26, something-25)
ccomp(understand-23, arose-26)
complm(designed-35, that-28)
poss(position-31, our-29)
nn(position-31, default-30)
nsubjpass(designed-35, position-31)
aux(designed-35, should-32)
auxpass(designed-35, be-33)
ccomp(argument-16, designed-35)
dep(know-42, not-37)
nsubj(know-42, we-39)
aux(know-42, do-40)
neg(know-42, n't-41)
ccomp(designed-35, know-42)

