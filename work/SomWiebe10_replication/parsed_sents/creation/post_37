(ROOT
  (NP
    (NP
      (NP (DT The) (JJ pro-IDers) (NN claim))
      (PP (IN that) ('' '')
        (NP (NNP ID) (NNPS Uses) (NNP Scientific) (NNP Method))))
    (: ;)
    (NP
      (NP (NNP Infers) (NNP Design))
      (PP (IN by)
        (NP
          (NP (NNP Testing) (NNP Positive) (NNP PredictionsDiscovery) (NNP Institute))
          (PP (IN on)
            (NP (NNP ID) (NNPS Uses) (NNP Scien))))))
    (. .)))

det(claim-3, The-1)
amod(claim-3, pro-IDers-2)
root(ROOT-0, claim-3)
nn(Method-9, ID-6)
nn(Method-9, Uses-7)
nn(Method-9, Scientific-8)
prep_that(claim-3, Method-9)
nn(Design-12, Infers-11)
dep(claim-3, Design-12)
nn(Institute-17, Testing-14)
nn(Institute-17, Positive-15)
nn(Institute-17, PredictionsDiscovery-16)
prep_by(Design-12, Institute-17)
nn(Scien-21, ID-19)
nn(Scien-21, Uses-20)
prep_on(Institute-17, Scien-21)

(ROOT
  (NP
    (NP (NNP Method))
    (: ;)
    (NP
      (NP (NNP Infers) (NNP Design))
      (PP (IN by)
        (NP
          (NP (JJ Testing) (JJ Positive) (NNS Predictions))
          ('' '')
          (SBAR
            (WHADVP (RB However))
            (S
              (NP (DT this))
              (VP (VBZ is)
                (ADJP (JJ false)
                  (CC and)
                  (JJ misleading))))))))
    (. .)))

root(ROOT-0, Method-1)
nn(Design-4, Infers-3)
dep(Method-1, Design-4)
amod(Predictions-8, Testing-6)
amod(Predictions-8, Positive-7)
prep_by(Design-4, Predictions-8)
advmod(false-13, However-10)
nsubj(false-13, this-11)
nsubj(misleading-15, this-11)
cop(false-13, is-12)
dep(Predictions-8, false-13)
dep(Predictions-8, misleading-15)
conj_and(false-13, misleading-15)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ other) (NNS words)))
    (, ,)
    (NP (NNP ID))
    (VP
      (VP (VBZ uses)
        (NP
          (NP (JJ misleading) (NN terminology))
          (CONJP (RB as) (RB well) (IN as))
          (NP (NN bait))))
      (CC and)
      (VP (VBP switch)
        (S
          (VP (TO to)
            (VP (VB make)
              (NP (PRP$ its) (NNS claims)))))))
    (. .)))

amod(words-3, other-2)
prep_in(uses-6, words-3)
nsubj(uses-6, ID-5)
nsubj(switch-14, ID-5)
xsubj(make-16, ID-5)
root(ROOT-0, uses-6)
amod(terminology-8, misleading-7)
dobj(uses-6, terminology-8)
dobj(uses-6, bait-12)
conj_and(terminology-8, bait-12)
conj_and(uses-6, switch-14)
aux(make-16, to-15)
xcomp(switch-14, make-16)
poss(claims-18, its-17)
dobj(make-16, claims-18)

(ROOT
  (VP (VB Ask)
    (NP (PRP yourself))
    (PP (IN for)
      (NP (NN instance)))
    (: :)
    (SBARQ
      (SBARQ
        (WHADVP (WRB how))
        (SQ (VBZ does)
          (NP (NNP ID))
          (VP (VB define)
            (NP (`` ``) (NN information) ('' '')))))
      (CC and)
      (SBARQ
        (WHADVP (WRB how)
          (PP (TO to)))
        (SQ (VBZ does)
          (NP (PRP it))
          (ADVP (RB actually))
          (VP (VB use)
            (NP (DT this) (NN terminology))))
        (. ?)))))

root(ROOT-0, Ask-1)
dobj(Ask-1, yourself-2)
prep_for(Ask-1, instance-4)
advmod(define-9, how-6)
aux(define-9, does-7)
nsubj(define-9, ID-8)
parataxis(Ask-1, define-9)
dobj(define-9, information-11)
advmod(use-19, how-14)
prep(how-14, to-15)
aux(use-19, does-16)
nsubj(use-19, it-17)
advmod(use-19, actually-18)
parataxis(Ask-1, use-19)
conj_and(define-9, use-19)
det(terminology-21, this-20)
dobj(use-19, terminology-21)

(ROOT
  (S
    (NP (NNP Information))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJ negative) (NN base) (CD two) (NN logarithm))
        (PP (IN of)
          (NP (DT the) (NN probability))))
      (SBAR (IN that)
        (S
          (NP (DT a) (JJ particular) (NN system))
          (VP (MD can)
            (VP (VB be)
              (VP (VBN explained)
                (PP (IN by)
                  (NP (NN science)))))))))
    (. .)))

nsubj(logarithm-7, Information-1)
cop(logarithm-7, is-2)
det(logarithm-7, the-3)
amod(logarithm-7, negative-4)
nn(logarithm-7, base-5)
num(logarithm-7, two-6)
root(ROOT-0, logarithm-7)
det(probability-10, the-9)
prep_of(logarithm-7, probability-10)
complm(explained-17, that-11)
det(system-14, a-12)
amod(system-14, particular-13)
nsubjpass(explained-17, system-14)
aux(explained-17, can-15)
auxpass(explained-17, be-16)
ccomp(logarithm-7, explained-17)
agent(explained-17, science-19)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ other) (NNS words) (, ,) (NN complexity)
        (CC or)
        (NN information)))
    (, ,)
    (NP
      (NP (CD two) (NNS terms))
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VBP are)
            (VP (VBN used)
              (ADVP (RB interchangeably))
              (PP (IN by)
                (NP (NNP ID))))))))
    (VP (VBZ disappears)
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (PRP one))
          (VP (MD can)
            (VP (VB explain)
              (NP (DT the) (NN system)))))))
    (. .)))

amod(words-3, other-2)
prep_in(disappears-17, words-3)
conj_or(words-3, complexity-5)
prep_in(disappears-17, complexity-5)
conj_or(words-3, information-7)
prep_in(disappears-17, information-7)
num(terms-10, two-9)
nsubjpass(used-13, terms-10)
nsubj(disappears-17, terms-10)
auxpass(used-13, are-12)
rcmod(terms-10, used-13)
advmod(used-13, interchangeably-14)
agent(used-13, ID-16)
root(ROOT-0, disappears-17)
advmod(explain-21, when-18)
nsubj(explain-21, one-19)
aux(explain-21, can-20)
advcl(disappears-17, explain-21)
det(system-23, the-22)
dobj(explain-21, system-23)

(ROOT
  (S (CC But)
    (NP (DT that))
    (ADVP (RB also))
    (VP (VBZ means)
      (SBAR (IN that)
        (S
          (NP (DT no) (NN complexity))
          (VP (VBZ remains)
            (SBAR (IN if)
              (S
                (NP (NNP ID))
                (VP (VBD were)
                  (S
                    (VP (TO to)
                      (VP (VB be)
                        (ADJP (JJ able)
                          (S
                            (VP (TO to)
                              (VP (VB explain)
                                (NP (DT the) (NN system))))))))))))))))
    (. .)))

cc(means-4, But-1)
nsubj(means-4, that-2)
advmod(means-4, also-3)
root(ROOT-0, means-4)
complm(remains-8, that-5)
det(complexity-7, no-6)
nsubj(remains-8, complexity-7)
ccomp(means-4, remains-8)
mark(were-11, if-9)
nsubj(were-11, ID-10)
xsubj(able-14, ID-10)
advcl(remains-8, were-11)
aux(able-14, to-12)
cop(able-14, be-13)
xcomp(were-11, able-14)
aux(explain-16, to-15)
xcomp(able-14, explain-16)
det(system-18, the-17)
dobj(explain-16, system-18)

(ROOT
  (S
    (S
      (VP (VB Realize)
        (SBAR (IN that)
          (S
            (S
              (NP (NNP ID))
              (VP (VBZ has)
                (VP (VBN failed)
                  (S
                    (VP (TO to)
                      (VP (VB be)
                        (ADJP (RB scientifically) (JJ relevant)
                          (PP (IN in)
                            (NP (DT any) (JJ non) (JJ trivial) (NN manner))))))))))
            (CC and)
            (S
              (NP (PRP you))
              (VP (MD will)
                (VP (VB come)
                  (S
                    (VP (TO to)
                      (VP (VB realize)
                        (SBAR
                          (WHADVP (WRB why))
                          (S
                            (NP (PRP it))
                            (VP
                              (VP (VBZ has)
                                (VP (VBN remained)))
                              (CC and)
                              (VP (VBZ is))))))))
                  (PP (IN in)
                    (NP
                      (NP (NN fact))
                      (VP (VBN doomed)
                        (S
                          (VP (TO to)
                            (VP (VB remain))))))))))))))
    (, ,)
    (NP (NNP scientifically))
    (VP (VBZ vacuous))
    (. .)))

ccomp(vacuous-34, Realize-1)
complm(failed-5, that-2)
nsubj(failed-5, ID-3)
xsubj(relevant-9, ID-3)
aux(failed-5, has-4)
ccomp(Realize-1, failed-5)
aux(relevant-9, to-6)
cop(relevant-9, be-7)
advmod(relevant-9, scientifically-8)
xcomp(failed-5, relevant-9)
det(manner-14, any-11)
amod(manner-14, non-12)
amod(manner-14, trivial-13)
prep_in(relevant-9, manner-14)
nsubj(come-18, you-16)
xsubj(realize-20, you-16)
aux(come-18, will-17)
ccomp(Realize-1, come-18)
conj_and(failed-5, come-18)
aux(realize-20, to-19)
xcomp(come-18, realize-20)
advmod(remained-24, why-21)
nsubj(remained-24, it-22)
nsubj(is-26, it-22)
aux(remained-24, has-23)
advcl(realize-20, remained-24)
advcl(realize-20, is-26)
conj_and(remained-24, is-26)
prep_in(come-18, fact-28)
xsubj(remain-31, fact-28)
partmod(fact-28, doomed-29)
aux(remain-31, to-30)
xcomp(doomed-29, remain-31)
nsubj(vacuous-34, scientifically-33)
root(ROOT-0, vacuous-34)

(ROOT
  (S
    (ADVP (JJ First)
      (PP (IN of)
        (NP (DT all))))
    (NP (PRP it))
    (VP (VBZ is)
      (ADJP (JJ important)
        (S
          (VP (TO to)
            (VP (VB point)
              (PRT (RP out))
              (SBAR (IN that)
                (S
                  (PP (IN by)
                    (NP (NN design)))
                  (, ,)
                  (NP (NNP ID))
                  (VP (VBZ means)
                    (NP
                      (NP (DT the) (`` ``) (NN set) (JJ theoretic) (NN complement))
                      (PP (IN of)
                        (NP (DT the) (JJ disjunction) (NN regularity)
                          (CC or)
                          (NN chance)))))
                  ('' ''))))))))
    (. .)))

advmod(important-6, First-1)
prep_of(First-1, all-3)
nsubj(important-6, it-4)
cop(important-6, is-5)
root(ROOT-0, important-6)
aux(point-8, to-7)
xcomp(important-6, point-8)
prt(point-8, out-9)
complm(means-15, that-10)
prep_by(means-15, design-12)
nsubj(means-15, ID-14)
ccomp(point-8, means-15)
det(complement-20, the-16)
nn(complement-20, set-18)
amod(complement-20, theoretic-19)
dobj(means-15, complement-20)
det(regularity-24, the-22)
amod(regularity-24, disjunction-23)
prep_of(complement-20, regularity-24)
prep_of(complement-20, chance-26)
conj_or(regularity-24, chance-26)

(ROOT
  (SBARQ
    (ADVP (RB Now))
    (WHNP (WP what))
    (SQ
      (VP (VBZ does)
        (NP (DT this) (NN mean))))
    (. ?)))

advmod(does-3, Now-1)
nsubj(does-3, what-2)
root(ROOT-0, does-3)
det(mean-5, this-4)
dobj(does-3, mean-5)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ means)
      (SBAR (IN that)
        (S
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (NN science))
              (VP (VBZ fails)
                (S
                  (VP (TO to)
                    (VP (VB have)
                      (VP (VBN found)
                        (NP
                          (NP (DT an) (NN explanation))
                          (PP (IN for)
                            (NP (DT any) (JJ particular) (NN system)))))))))))
          (, ,)
          (NP (NNP ID))
          (VP (VBZ argues)
            (SBAR (IN that)
              (S
                (NP (DT the) (NN default))
                (VP (MD should) (RB not)
                  (VP (VB be)
                    (S (`` ``)
                      (NP (PRP we))
                      (VP (VBP do) (RB n't)
                        (VP (VB know) ('' '')
                          (CC but)
                          (RB rather) (`` ``)
                          (NP (NN design))))
                      ('' ''))))))))))
    (. .)))

nsubj(means-2, This-1)
root(ROOT-0, means-2)
complm(argues-18, that-3)
advmod(fails-6, when-4)
nsubj(fails-6, science-5)
xsubj(found-9, science-5)
advcl(argues-18, fails-6)
aux(found-9, to-7)
aux(found-9, have-8)
xcomp(fails-6, found-9)
det(explanation-11, an-10)
dobj(found-9, explanation-11)
det(system-15, any-13)
amod(system-15, particular-14)
prep_for(explanation-11, system-15)
nsubj(argues-18, ID-17)
ccomp(means-2, argues-18)
complm(be-24, that-19)
det(default-21, the-20)
nsubj(be-24, default-21)
aux(be-24, should-22)
neg(be-24, not-23)
ccomp(argues-18, be-24)
nsubj(know-29, we-26)
aux(know-29, do-27)
neg(know-29, n't-28)
ccomp(be-24, know-29)
ccomp(be-24, rather-32)
advmod(know-29, rather-32)
conj_but(know-29, rather-32)
ccomp(be-24, design-34)
conj_but(know-29, design-34)
dobj(know-29, design-34)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ other) (NNS words)))
    (, ,)
    (NP (NN design))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN place) (NN holder))
        (PP (IN for)
          (NP (PRP$ our) (NN ignorance)))))
    (. .)))

amod(words-3, other-2)
prep_in(holder-9, words-3)
nsubj(holder-9, design-5)
cop(holder-9, is-6)
det(holder-9, a-7)
nn(holder-9, place-8)
root(ROOT-0, holder-9)
poss(ignorance-12, our-11)
prep_for(holder-9, ignorance-12)

(ROOT
  (SQ
    (SBAR (RB Now)
      (S
        (VP (VBP ask)
          (NP (PRP yourself)))))
    (, ,) (VBZ does)
    (NP (NNP ID))
    (VP (VB provide)
      (NP (DT any) (JJ positive) (NNS explanations)))
    (. ?)))

advmod(ask-2, Now-1)
dep(provide-7, ask-2)
dobj(ask-2, yourself-3)
aux(provide-7, does-5)
nsubj(provide-7, ID-6)
root(ROOT-0, provide-7)
det(explanations-10, any-8)
amod(explanations-10, positive-9)
dobj(provide-7, explanations-10)

(ROOT
  (S
    (PP (IN Of)
      (NP (NN course)))
    (NP (PRP it))
    (VP (VBZ does) (RB not))
    (. .)))

prep_of(does-4, course-2)
nsubj(does-4, it-3)
root(ROOT-0, does-4)
neg(does-4, not-5)

(ROOT
  (SBARQ
    (WHADJP (WRB How) (JJ otherwise))
    (SQ (VBZ does)
      (NP (NNP ID))
      (VP (VB explain)
        (NP (DT the) (JJ bacterial) (NN flagellum))))
    (. ?)))

advmod(otherwise-2, How-1)
dep(explain-5, otherwise-2)
aux(explain-5, does-3)
nsubj(explain-5, ID-4)
root(ROOT-0, explain-5)
det(flagellum-8, the-6)
amod(flagellum-8, bacterial-7)
dobj(explain-5, flagellum-8)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ provides)
      (NP (DT no) (JJ testable) (NNS hypotheses))
      (PP (IN beyond)
        (NP (DT the) (JJ negative) (NN claim)))
      (SBAR (IN that) (`` ``)
        (S
          (NP (NN science))
          (VP (MD can) (RB not)
            (VP (VB explain)
              (NP (PRP it)))))
        ('' '')))
    (. .)))

nsubj(provides-2, It-1)
root(ROOT-0, provides-2)
det(hypotheses-5, no-3)
amod(hypotheses-5, testable-4)
dobj(provides-2, hypotheses-5)
det(claim-9, the-7)
amod(claim-9, negative-8)
prep_beyond(provides-2, claim-9)
complm(explain-15, that-10)
nsubj(explain-15, science-12)
aux(explain-15, can-13)
neg(explain-15, not-14)
ccomp(provides-2, explain-15)
dobj(explain-15, it-16)

(ROOT
  (S
    (S
      (VP (VBG Notice)
        (SBAR (IN that)
          (S
            (NP (NNP ID))
            (VP (VBZ remains)
              (NP (JJ scientifically) (NNS vacuous)))))))
    (, ,)
    (NP (DT that))
    (VP (VBZ is)
      (PP (IN without)
        (NP (NN merit)))
      (, ,)
      (SBAR (IN because)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (ADJP (JJ unable)
              (S
                (VP (TO to)
                  (VP (VB constrain)
                    (NP
                      (NP (PRP$ its) (NN designer))
                      (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-))
                      (SBAR
                        (WHNP (WDT which))
                        (S
                          (VP (VBZ means)
                            (SBAR (IN that)
                              (S
                                (PP (IN as)
                                  (NP (DT an) (NN explanation)))
                                (NP (PRP it))
                                (VP (MD can) (RB not)
                                  (ADVP (RB even))
                                  (VP (VB compete)
                                    (PP (IN with)
                                      (NP (DT the) (`` ``)
                                        (S
                                          (NP (PRP we))
                                          (VP (VBP do) (RB n't)
                                            (VP (VB know))))
                                        ('' '') (NN category)))))))))))))))))))
    (. .)))

partmod(is-9, Notice-1)
complm(vacuous-6, that-2)
nsubj(vacuous-6, ID-3)
cop(vacuous-6, remains-4)
amod(vacuous-6, scientifically-5)
ccomp(Notice-1, vacuous-6)
nsubj(is-9, that-8)
root(ROOT-0, is-9)
prep_without(is-9, merit-11)
mark(unable-16, because-13)
nsubj(unable-16, it-14)
cop(unable-16, is-15)
advcl(is-9, unable-16)
aux(constrain-18, to-17)
xcomp(unable-16, constrain-18)
poss(designer-20, its-19)
dobj(constrain-18, designer-20)
nsubj(means-25, designer-20)
dep(designer-20, s-22)
rcmod(designer-20, means-25)
complm(compete-34, that-26)
det(explanation-29, an-28)
prep_as(compete-34, explanation-29)
nsubj(compete-34, it-30)
aux(compete-34, can-31)
neg(compete-34, not-32)
advmod(compete-34, even-33)
ccomp(means-25, compete-34)
det(category-43, the-36)
nsubj(know-41, we-38)
aux(know-41, do-39)
neg(know-41, n't-40)
dep(category-43, know-41)
prep_with(compete-34, category-43)

