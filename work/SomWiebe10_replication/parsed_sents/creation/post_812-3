(ROOT
  (S
    (NP (DT That))
    (VP (MD would)
      (VP (VB be)
        (PP (IN like)
          (S
            (VP (VBG assuming)
              (SBAR (IN that)
                (S
                  (NP (DT the))
                  (VP (VBZ processes)
                    (SBAR (IN that)
                      (S
                        (NP
                          (NP (NN operation))
                          (PP (IN in)
                            (NP (PRP$ my)
                              (NX (NNP Chevy)))))
                        (VP (VBP are)
                          (NP
                            (NP (DT the) (JJ same) (NNS processes))
                            (SBAR
                              (WHNP (WDT which))
                              (S
                                (VP (VBD brought)
                                  (NP (DT the) (NN car))
                                  (PP (IN into)
                                    (NP (NN existence)))
                                  (PP (IN in)
                                    (NP (DT the) (JJ first) (NN place))))))))))))))))))
    (. .)))

nsubj(be-3, That-1)
aux(be-3, would-2)
root(ROOT-0, be-3)
prepc_like(be-3, assuming-5)
complm(processes-8, that-6)
nsubj(processes-8, the-7)
ccomp(assuming-5, processes-8)
complm(processes-17, that-9)
nsubj(processes-17, operation-10)
poss(Chevy-13, my-12)
prep_in(operation-10, Chevy-13)
cop(processes-17, are-14)
det(processes-17, the-15)
amod(processes-17, same-16)
ccomp(processes-8, processes-17)
nsubj(brought-19, processes-17)
rcmod(processes-17, brought-19)
det(car-21, the-20)
dobj(brought-19, car-21)
prep_into(brought-19, existence-23)
det(place-27, the-25)
amod(place-27, first-26)
prep_in(brought-19, place-27)

