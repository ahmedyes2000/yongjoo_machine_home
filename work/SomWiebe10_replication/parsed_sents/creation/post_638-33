(ROOT
  (S ('' '')
    (S
      (S
        (VP (VB Let)
          (S
            (NP (PRP me))
            (VP (VB help)
              (S
                (NP (PRP you))
                (ADJP (JJ PvM)))))))
      (, ,)
      (NP (PRP you))
      (VP (MD will) (RB not)
        (VP (VB win)
          (NP (DT the) (NN public))
          (PRT (RP over))
          (PP (IN by)
            (S
              (VP (VBG making)
                (NP (DT the) (JJ same) (NNS claims))
                (ADVP (RB again))))))))
    (CC and)
    (ADVP (RB again))
    (S
      (NP (NN while))
      (VP (VBG failing)
        (S
          (VP (TO to)
            (VP (VB provide)
              (NP (NN proof))
              (S
                (VP (TO to)
                  (VP (VB back)
                    (NP (PRP them))
                    (PRT (RP up))))))))))
    (. .)))

ccomp(win-11, Let-2)
nsubj(help-4, me-3)
ccomp(Let-2, help-4)
nsubj(PvM-6, you-5)
xcomp(help-4, PvM-6)
nsubj(win-11, you-8)
aux(win-11, will-9)
neg(win-11, not-10)
root(ROOT-0, win-11)
det(public-13, the-12)
dobj(win-11, public-13)
prt(win-11, over-14)
prepc_by(win-11, making-16)
det(claims-19, the-17)
amod(claims-19, same-18)
dobj(making-16, claims-19)
advmod(making-16, again-20)
advmod(win-11, again-22)
conj_and(win-11, again-22)
nsubj(failing-24, while-23)
xsubj(provide-26, while-23)
conj_and(win-11, failing-24)
aux(provide-26, to-25)
xcomp(failing-24, provide-26)
dobj(provide-26, proof-27)
aux(back-29, to-28)
xcomp(provide-26, back-29)
dobj(back-29, them-30)
prt(back-29, up-31)

