(ROOT
  (S
    (S
      (NP (CD One) (NN thing) (NN no-one))
      (VP (MD can)
        (VP (VB say)
          (S
            (SBAR (IN for)
              (S
                (ADVP (RB sure))
                (VP (VBZ is)
                  (NP
                    (NP (DT the) (VBG driving) (NN force))
                    (PP (IN behind)
                      (NP (NN evolution)))))))
            (, ,)
            (NP (PRP it))
            (VP (MD could)
              (VP (VB be)
                (ADVP (RB down)
                  (PP (TO to)
                    (NP (DT a) (JJ supreme) (NN deity))))))))))
    (, ,)
    (CC but)
    (S
      (S
        (NP (NN evolution))
        (VP (VBZ is)
          (NP (NN fact))))
      (, ,)
      (CC and)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (PP (IN in)
            (NP (DT no) (NN way)))
          (ADJP (JJ wrong)))))
    (. .)))

num(no-one-3, One-1)
nn(no-one-3, thing-2)
nsubj(say-5, no-one-3)
aux(say-5, can-4)
root(ROOT-0, say-5)
mark(force-11, for-6)
advmod(force-11, sure-7)
cop(force-11, is-8)
det(force-11, the-9)
amod(force-11, driving-10)
advcl(be-17, force-11)
prep_behind(force-11, evolution-13)
nsubj(be-17, it-15)
aux(be-17, could-16)
ccomp(say-5, be-17)
advmod(be-17, down-18)
det(deity-22, a-20)
amod(deity-22, supreme-21)
prep_to(down-18, deity-22)
nsubj(fact-27, evolution-25)
cop(fact-27, is-26)
conj_but(say-5, fact-27)
nsubj(wrong-35, it-30)
cop(wrong-35, is-31)
det(way-34, no-33)
prep_in(wrong-35, way-34)
conj_but(say-5, wrong-35)
conj_and(fact-27, wrong-35)

