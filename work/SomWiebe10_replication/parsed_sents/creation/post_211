(ROOT
  (S
    (NP (DT this))
    (VP (VBZ is)
      (ADVP (RB really))
      (NP (PRP$ your) (NN argument)))
    (. ?)))

nsubj(argument-5, this-1)
cop(argument-5, is-2)
advmod(argument-5, really-3)
poss(argument-5, your-4)
root(ROOT-0, argument-5)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (ADJP (RB really) (JJ unimpressive)))
    (. .)))

nsubj(unimpressive-4, That-1)
cop(unimpressive-4, 's-2)
advmod(unimpressive-4, really-3)
root(ROOT-0, unimpressive-4)

(ROOT
  (S (CC Or)
    (VP (VBZ is)
      (ADJP
        (ADJP
          (NP (DT this) (RB just))
          (NP (DT the) (JJ same)))
        (JJ old))
      (SBAR (`` ``)
        (WHNP (WP who))
        (S
          (VP (VBD made)
            (NP
              (NP (NN God) ('' '') (NN argument))
              ('' '')
              (VP (VBN dressed)
                (PRT (RP up))))))))
    (. .)))

cc(old-7, Or-1)
cop(old-7, is-2)
det(just-4, this-3)
dep(old-7, just-4)
det(same-6, the-5)
dep(just-4, same-6)
root(ROOT-0, old-7)
nsubj(made-10, who-9)
ccomp(old-7, made-10)
nn(argument-13, God-11)
dobj(made-10, argument-13)
partmod(argument-13, dressed-15)
prt(dressed-15, up-16)

(ROOT
  (FRAG
    (ADVP (RB Well))
    (NP (RB yes))
    (. .)))

dep(yes-2, Well-1)
root(ROOT-0, yes-2)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (NNP God))
        (VP (VBZ is)
          (UCP
            (NP (DT a) (JJ natural) (NN agent))
            (, ,)
            (CC and)
            (PP (IN for)
              (NP (DT a) (JJ natural) (NN agent)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (ADJP (JJ alive)
                        (SBAR
                          (S
                            (NP (PRP it))
                            (VP (MD must)
                              (VP (VB be)
                                (VP (VBN designed))))))))))))
            (, ,)
            (ADJP (RB then)
              (SBAR
                (S
                  (NP (NNP God))
                  (VP (MD must)
                    (VP (VB have)
                      (NP (DT a) (NN designer) (NN ergo))
                      (SBAR (IN if)
                        (S
                          (NP (NNP God))
                          (VP (VBZ is)
                            (NP (DT a) (JJ natural) (NN agent))
                            (ADVP (RB then))))))))))))))
    (NP (NNP God))
    (VP (MD must)
      (VP (VB have)
        (NP (DT a) (NN designer))))
    (. .)))

mark(agent-6, If-1)
nsubj(agent-6, God-2)
cop(agent-6, is-3)
det(agent-6, a-4)
amod(agent-6, natural-5)
advcl(have-37, agent-6)
det(agent-12, a-10)
amod(agent-12, natural-11)
prep_for(then-21, agent-12)
aux(alive-15, to-13)
cop(alive-15, be-14)
infmod(agent-12, alive-15)
nsubjpass(designed-19, it-16)
aux(designed-19, must-17)
auxpass(designed-19, be-18)
dep(alive-15, designed-19)
conj_and(agent-6, then-21)
advcl(have-37, then-21)
nsubj(have-24, God-22)
aux(have-24, must-23)
dep(then-21, have-24)
det(ergo-27, a-25)
nn(ergo-27, designer-26)
dobj(have-24, ergo-27)
mark(agent-33, if-28)
nsubj(agent-33, God-29)
cop(agent-33, is-30)
det(agent-33, a-31)
amod(agent-33, natural-32)
advcl(have-24, agent-33)
advmod(agent-33, then-34)
nsubj(have-37, God-35)
aux(have-37, must-36)
root(ROOT-0, have-37)
det(designer-39, a-38)
dobj(have-37, designer-39)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (NNP God))
          (VP
            (VP (VBZ is)
              (ADJP (JJ supernatural)))
            (, ,)
            (CC and)
            (VP (MD can) (RB not)
              (VP (VB be)
                (VP (VBN tested)
                  (PP (IN for)
                    (S
                      (VP (VBG using)
                        (NP (JJ natural) (NNS means)))))))))))
      (, ,)
      (ADVP (RB then))
      (NP (EX there))
      (VP (VBZ is)
        (NP (DT no) (NN way)
          (S
            (VP (TO to)
              (VP (VB detect)
                (SBAR
                  (S
                    (NP (NNP God))
                    (VP (VBZ exists)
                      (NP
                        (NP (RB outside))
                        (PP (IN of)
                          (NP (NNP Science)))))))))))))
    (, ,)
    (CC and)
    (SINV
      (ADVP (RB thus))
      (VP (VBZ is) (RB not)
        (NP
          (NP
            (NP (NN part))
            (PP (IN of)
              (NP (DT a) (JJ scientific) (NN argument.))))
          (, ,) (`` ``) (RB as)
          (NP (DT a) (NN sidenote))))
      (NP (DT a) (NN scientist)
        (S
          (VP (VBG creating)
            (SBAR
              (S
                (NP (NN life))
                (VP (VBZ is) (RB not)
                  (ADJP (RB that) (JJ impressive))
                  (ADVP (RB either))))))))
      (. .))
    (. .)))

mark(supernatural-4, If-1)
nsubj(supernatural-4, God-2)
nsubjpass(tested-10, God-2)
cop(supernatural-4, is-3)
advcl(is-18, supernatural-4)
aux(tested-10, can-7)
neg(tested-10, not-8)
auxpass(tested-10, be-9)
conj_and(supernatural-4, tested-10)
advcl(is-18, tested-10)
prepc_for(tested-10, using-12)
amod(means-14, natural-13)
dobj(using-12, means-14)
advmod(is-18, then-16)
expl(is-18, there-17)
root(ROOT-0, is-18)
det(way-20, no-19)
nsubj(is-18, way-20)
aux(detect-22, to-21)
infmod(way-20, detect-22)
nsubj(exists-24, God-23)
ccomp(detect-22, exists-24)
dobj(exists-24, outside-25)
prep_of(outside-25, Science-27)
advmod(part-33, thus-30)
cop(part-33, is-31)
neg(part-33, not-32)
conj_and(is-18, part-33)
det(argument.-37, a-35)
amod(argument.-37, scientific-36)
prep_of(part-33, argument.-37)
advmod(part-33, as-40)
det(sidenote-42, a-41)
dep(part-33, sidenote-42)
det(scientist-44, a-43)
nsubj(part-33, scientist-44)
dep(scientist-44, creating-45)
nsubj(impressive-50, life-46)
cop(impressive-50, is-47)
neg(impressive-50, not-48)
advmod(impressive-50, that-49)
ccomp(creating-45, impressive-50)
advmod(impressive-50, either-51)

(ROOT
  (S
    (NP (PRP it))
    (VP (VBZ 's)
      (NP
        (NP (DT the) (NN equivalent))
        (PP (IN of)
          (S
            (VP
              (VP (VBG burning)
                (NP (DT a) (NN cd)))
              (CC and)
              (VP (VBG saying) (`` ``)
                (NP (NN look))))))))
    (: ...)))

nsubj(equivalent-4, it-1)
cop(equivalent-4, 's-2)
det(equivalent-4, the-3)
root(ROOT-0, equivalent-4)
prepc_of(equivalent-4, burning-6)
det(cd-8, a-7)
dobj(burning-6, cd-8)
prepc_of(equivalent-4, saying-10)
conj_and(burning-6, saying-10)
dobj(saying-10, look-12)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBD made)
      (NP (NN music)))
    (. !)))

nsubj(made-2, I-1)
root(ROOT-0, made-2)
dobj(made-2, music-3)

(ROOT
  (S (`` ``)
    (SBAR (IN If)
      (S
        (S
          (VP (VBG creating)
            (NP (NN life))))
        (VP (VBZ is) (RB not)
          (ADJP (JJ impressive))
          (ADVP (RB then)))))
    (NP
      (NP (WP what))
      (PP (IN in)
        (NP (NNP Science))))
    (VP (VBZ is))
    (. ?)))

mark(impressive-7, If-2)
csubj(impressive-7, creating-3)
dobj(creating-3, life-4)
cop(impressive-7, is-5)
neg(impressive-7, not-6)
dep(is-12, impressive-7)
advmod(impressive-7, then-8)
nsubj(is-12, what-9)
prep_in(what-9, Science-11)
root(ROOT-0, is-12)

