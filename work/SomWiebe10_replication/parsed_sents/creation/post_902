(ROOT
  (S
    (NP (NN science))
    (ADVP (RB always))
    (VP (VBZ wants)
      (S
        (VP (TO to)
          (VP (VB separate)
            (NP (DT that) (JJ messy) (JJ first) (NN cell))
            (PP (IN from)
              (NP (NN evolution) (NN theory)))))))
    (. .) (. .)))

nsubj(wants-3, science-1)
xsubj(separate-5, science-1)
advmod(wants-3, always-2)
root(ROOT-0, wants-3)
aux(separate-5, to-4)
xcomp(wants-3, separate-5)
det(cell-9, that-6)
amod(cell-9, messy-7)
amod(cell-9, first-8)
dobj(separate-5, cell-9)
nn(theory-12, evolution-11)
prep_from(separate-5, theory-12)

(ROOT
  (S
    (ADVP (RB Yes))
    (, ,)
    (SBAR (IN because)
      (S
        (NP
          (NP (DT the) (NNS theories))
          (PP (IN of)
            (NP (JJ biological) (NN evolution))))
        (ADVP (RB only))
        (VP (VB apply)
          (PP (TO to)
            (NP
              (NP (NN living) (NNS things))
              (SBAR (IN if)
                (S
                  (NP (PRP$ its))
                  (ADJP (RB not) (JJ alive)))))))))
    (ADVP (RB then))
    (NP (PRP it))
    (VP (VBZ is)
      (NP (NN chemistry)))
    (. .)))

advmod(chemistry-21, Yes-1)
mark(apply-10, because-3)
det(theories-5, the-4)
nsubj(apply-10, theories-5)
amod(evolution-8, biological-7)
prep_of(theories-5, evolution-8)
advmod(apply-10, only-9)
dep(chemistry-21, apply-10)
nn(things-13, living-12)
prep_to(apply-10, things-13)
mark(alive-17, if-14)
dep(alive-17, its-15)
neg(alive-17, not-16)
dep(things-13, alive-17)
advmod(chemistry-21, then-18)
nsubj(chemistry-21, it-19)
cop(chemistry-21, is-20)
root(ROOT-0, chemistry-21)

(ROOT
  (S
    (NP (NNP Science))
    (VP (VBZ needs)
      (S
        (VP (TO to)
          (VP (VB explain)
            (NP
              (NP (DT all))
              (PP (IN of)
                (NP (DT the) (JJ above))))))))
    (. .)))

nsubj(needs-2, Science-1)
xsubj(explain-4, Science-1)
root(ROOT-0, needs-2)
aux(explain-4, to-3)
xcomp(needs-2, explain-4)
dobj(explain-4, all-5)
det(above-8, the-7)
prep_of(all-5, above-8)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ needs)
      (S
        (VP (TO to)
          (VP (VB explain)
            (NP
              (NP (DT a) (NN universe))
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP
                    (VP (VBD created)
                      (NP (PRP itself)))
                    (, ,)
                    (NP
                      (NP
                        (NP (DT the) (JJ first) (NN form))
                        (PP (IN of)
                          (NP (NN life)))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (VP (VBD created)
                              (NP (PRP itself))))))
                      (CC and)
                      (RB also)
                      (NP
                        (NP (DT a) (NN theory))
                        (PP (IN of)
                          (NP (NN evolution)))
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (VP (VBZ operates)
                              (PP (IN with)
                                (NP
                                  (NP (DT no) (JJ actual) (NN mechanism))
                                  (PP (IN except)
                                    (NP (JJ random) (NN mutation)
                                      (CC and)
                                      (NN survival))))))))))))))))))
    (. .)))

nsubj(needs-2, It-1)
xsubj(explain-4, It-1)
root(ROOT-0, needs-2)
aux(explain-4, to-3)
xcomp(needs-2, explain-4)
det(universe-6, a-5)
dobj(explain-4, universe-6)
nsubj(created-8, universe-6)
rcmod(universe-6, created-8)
dobj(created-8, itself-9)
det(form-13, the-11)
amod(form-13, first-12)
dobj(created-8, form-13)
nsubj(created-17, form-13)
prep_of(form-13, life-15)
rcmod(form-13, created-17)
dobj(created-17, itself-18)
dobj(created-8, also-20)
advmod(form-13, also-20)
conj_and(form-13, also-20)
nsubj(created-17, also-20)
det(theory-22, a-21)
dep(form-13, theory-22)
nsubj(operates-26, theory-22)
prep_of(theory-22, evolution-24)
rcmod(theory-22, operates-26)
det(mechanism-30, no-28)
amod(mechanism-30, actual-29)
prep_with(operates-26, mechanism-30)
amod(mutation-33, random-32)
prep_except(mechanism-30, mutation-33)
prep_except(mechanism-30, survival-35)
conj_and(mutation-33, survival-35)

(ROOT
  (SINV (CC And)
    (SBAR
      (WHNP (WDT that))
      (S
        (VP (VBZ is)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (NNP Science))
              (VP (VBZ is)
                (VP (VBG working)
                  (PRT (RP on)))))))))
    (, ,)
    (ADVP
      (ADVP (RB so) (RB far))
      (PP (IN with)
        (NP
          (NP (DT an) (JJ exceptional) (NN amount))
          (PP (IN of)
            (NP
              (NP (NN success))
              (PP (IN in)
                (NP (NN comparison))))))
        (PP (TO to)
          (NP
            (NP (DT the) (NN alternative))
            (PP (IN of)
              (NP (NNP God)))))))
    (VP (VBD did))
    (NP (PRP it))
    (. .)))

cc(did-25, And-1)
nsubj(is-3, that-2)
dep(did-25, is-3)
dobj(working-7, what-4)
nsubj(working-7, Science-5)
aux(working-7, is-6)
ccomp(is-3, working-7)
prt(working-7, on-8)
advmod(far-11, so-10)
advmod(did-25, far-11)
det(amount-15, an-13)
amod(amount-15, exceptional-14)
prep_with(far-11, amount-15)
prep_of(amount-15, success-17)
prep_in(success-17, comparison-19)
det(alternative-22, the-21)
prep_to(far-11, alternative-22)
prep_of(alternative-22, God-24)
root(ROOT-0, did-25)
nsubj(did-25, it-26)

(ROOT
  (S
    (NP
      (NP (NN None))
      (PP (IN of)
        (NP (DT these))))
    (VP (MD will)
      (VP (VB work)
        (PP (IN without)
          (NP (DT an) (NN intelligence)
            (S
              (VP (TO to)
                (VP (VB guide)
                  (NP (PRP them)))))))))
    (. .)))

nsubj(work-5, None-1)
prep_of(None-1, these-3)
aux(work-5, will-4)
root(ROOT-0, work-5)
det(intelligence-8, an-7)
prep_without(work-5, intelligence-8)
aux(guide-10, to-9)
infmod(intelligence-8, guide-10)
dobj(guide-10, them-11)

(ROOT
  (SQ (MD Can)
    (NP (PRP you))
    (VP (VB demonstrate)
      (NP (DT this)))
    (. ?)))

aux(demonstrate-3, Can-1)
nsubj(demonstrate-3, you-2)
root(ROOT-0, demonstrate-3)
dobj(demonstrate-3, this-4)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ
      (VP (VBZ has) (RB n't)
        (ADVP (RB evolution))
        (VP (VBN been)
          (VP (VBN proven)
            (S
              (ADJP (JJ wrong))))))
      (NP (PRP you))
      (VP (VB ask)))
    (. ?)))

advmod(proven-6, Why-1)
aux(proven-6, has-2)
neg(proven-6, n't-3)
advmod(proven-6, evolution-4)
auxpass(proven-6, been-5)
root(ROOT-0, proven-6)
acomp(proven-6, wrong-7)
nsubjpass(proven-6, you-8)
dep(proven-6, ask-9)

(ROOT
  (S
    (NP (DT The) (JJ intermediate) (NNS steps))
    (VP (MD could)
      (VP (VB be)
        (ADJP
          (ADJP (RB either) (JJ beneficial))
          (, ,)
          (CC or)
          (ADJP (JJ neutral)
            (PP (TO to)
              (NP (NN survival)))))))
    (. .)))

det(steps-3, The-1)
amod(steps-3, intermediate-2)
nsubj(beneficial-7, steps-3)
nsubj(neutral-10, steps-3)
aux(beneficial-7, could-4)
cop(beneficial-7, be-5)
advmod(beneficial-7, either-6)
root(ROOT-0, beneficial-7)
conj_or(beneficial-7, neutral-10)
prep_to(neutral-10, survival-12)

(ROOT
  (S
    (NP (DT The) (JJ next) (NN problem))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJ fossil) (NN record))
        (SBAR
          (S
            (VP (MD would)
              (ADVP (RB NOT))
              (VP (VB look)
                (NP (DT the) (NN way))
                (SBAR (IN that)
                  (S
                    (NP (PRP it))
                    (VP (VBZ does)
                      (SBAR (IN if)
                        (S
                          (NP (DT this))
                          (VP (VBD were)
                            (NP (DT the) (NN case))))))))))))))
    (. .)))

det(problem-3, The-1)
amod(problem-3, next-2)
nsubj(record-7, problem-3)
cop(record-7, is-4)
det(record-7, the-5)
amod(record-7, fossil-6)
root(ROOT-0, record-7)
aux(look-10, would-8)
neg(look-10, NOT-9)
rcmod(record-7, look-10)
det(way-12, the-11)
dobj(look-10, way-12)
complm(does-15, that-13)
nsubj(does-15, it-14)
ccomp(look-10, does-15)
mark(case-20, if-16)
nsubj(case-20, this-17)
cop(case-20, were-18)
det(case-20, the-19)
advcl(does-15, case-20)

(ROOT
  (SBARQ
    (WHADVP
      (ADVP (RB Then))
      (WRB how))
    (SQ (MD would)
      (NP (PRP it))
      (VP (VB look)))
    (. ?)))

advmod(how-2, Then-1)
advmod(look-5, how-2)
aux(look-5, would-3)
nsubj(look-5, it-4)
root(ROOT-0, look-5)

(ROOT
  (X
    (NP (NNP Question))
    (: :)
    (FRAG
      (SBAR (IN If)
        (S
          (NP
            (NP (DT an) (NN animal))
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (VBZ has)
                  (ADVP (RB never))
                  (VP (VBN had)
                    (NP (`` ``) (NNS legs) ('' '')))))))
          (VP (VBD evolved)
            (NP
              (NP (DT a) (JJ new) (NN leg))
              (: ...)
              (SBARQ
                (WHADVP (WRB how))
                (SQ (MD would)
                  (NP (PRP it))
                  (VP (VB happen)))))))))
    (. ?)))

root(ROOT-0, Question-1)
mark(evolved-13, If-3)
det(animal-5, an-4)
nsubj(had-9, animal-5)
nsubj(evolved-13, animal-5)
aux(had-9, has-7)
neg(had-9, never-8)
rcmod(animal-5, had-9)
dobj(had-9, legs-11)
dep(Question-1, evolved-13)
det(leg-16, a-14)
amod(leg-16, new-15)
dobj(evolved-13, leg-16)
advmod(happen-21, how-18)
aux(happen-21, would-19)
nsubj(happen-21, it-20)
dep(leg-16, happen-21)

(ROOT
  (SQ (MD Would)
    (NP (PRP it))
    (VP
      (VP (VB be)
        (PP (IN in)
          (NP (JJ small) (NNS steps))))
      (CC or)
      (VP (MD would)
        (S
          (NP (PRP it))
          (SBAR (RB just)
            (S
              (VP (VBP sprout)
                (NP (DT a) (NN leg))))))))
    (. ?)))

aux(be-3, Would-1)
nsubj(be-3, it-2)
root(ROOT-0, be-3)
amod(steps-6, small-5)
prep_in(be-3, steps-6)
conj_or(be-3, would-8)
dep(sprout-11, it-9)
advmod(sprout-11, just-10)
dep(would-8, sprout-11)
det(leg-13, a-12)
dobj(sprout-11, leg-13)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD would)
      (VP (VB be)
        (NP
          (NP (JJ small) (NNS steps))
          (PP (VBN based)
            (PP (IN on)
              (NP (VBG existing) (JJ biological) (NNS structures)))))))
    (. .)))

nsubj(steps-5, It-1)
aux(steps-5, would-2)
cop(steps-5, be-3)
amod(steps-5, small-4)
root(ROOT-0, steps-5)
prepc_based_on(steps-5, on-7)
amod(structures-10, existing-8)
amod(structures-10, biological-9)
pobj(steps-5, structures-10)

(ROOT
  (S
    (NP (NNS Tentacles))
    (VP (MD can)
      (VP (VB become)
        (NP
          (NP (NNS limbs))
          (SBAR
            (WHNP (WDT which))
            (S
              (VP (MD can)
                (VP (VB become)
                  (NP (NNS legs))
                  (PP (IN after)
                    (NP (DT all))))))))))
    (. .)))

nsubj(limbs-4, Tentacles-1)
aux(limbs-4, can-2)
cop(limbs-4, become-3)
root(ROOT-0, limbs-4)
nsubj(legs-8, limbs-4)
aux(legs-8, can-6)
cop(legs-8, become-7)
rcmod(limbs-4, legs-8)
prep_after(legs-8, all-10)

(ROOT
  (SBARQ (RB So)
    (WHADVP (WRB where))
    (SQ (VBP are)
      (NP
        (NP (DT the) (NNS fossils))
        (PP (IN for)
          (NP
            (NP (DT the) (JJ many) (JJ gradual) (NNS steps))
            (PP (IN of)
              (NP (DT this) (NN leg))))))
      (ADJP (FW forming) (. .)))
    (. .)))

advmod(forming-14, So-1)
advmod(forming-14, where-2)
cop(forming-14, are-3)
det(fossils-5, the-4)
nsubj(forming-14, fossils-5)
det(steps-10, the-7)
amod(steps-10, many-8)
amod(steps-10, gradual-9)
prep_for(fossils-5, steps-10)
det(leg-13, this-12)
prep_of(steps-10, leg-13)
root(ROOT-0, forming-14)

(ROOT
  (SQ
    (VP
      (PRN (CC or)
        (PP (IN for)
          (WHNP (WDT that))))
      (VB matter)
      (NP (DT every) (JJ single) (NN change))
      (SBAR (IN that)
        (S
          (NP (DT every) (JJ single) (NN species))
          (VP (VBZ has)
            (VP (VBN gone)
              (PP (IN through)))))))
    (. ?)))

dep(for-2, or-1)
dep(matter-4, for-2)
pobj(for-2, that-3)
root(ROOT-0, matter-4)
det(change-7, every-5)
amod(change-7, single-6)
dobj(matter-4, change-7)
complm(gone-13, that-8)
det(species-11, every-9)
amod(species-11, single-10)
nsubj(gone-13, species-11)
aux(gone-13, has-12)
ccomp(matter-4, gone-13)
prep(gone-13, through-14)

(ROOT
  (S
    (NP (NNP Fossilization))
    (VP (VBZ is)
      (NP (DT an) (JJ uncommon) (NN process))
      (SBAR (IN so)
        (S
          (NP (RB not) (DT every) (VBG living) (NN thing))
          (VP (MD will)
            (VP (VB end)
              (PRT (RP up))
              (PP (IN as)
                (NP (DT a) (NN fossil))))))))
    (. .)))

nsubj(process-5, Fossilization-1)
cop(process-5, is-2)
det(process-5, an-3)
amod(process-5, uncommon-4)
root(ROOT-0, process-5)
mark(end-12, so-6)
neg(thing-10, not-7)
det(thing-10, every-8)
amod(thing-10, living-9)
nsubj(end-12, thing-10)
aux(end-12, will-11)
advcl(process-5, end-12)
prt(end-12, up-13)
det(fossil-16, a-15)
prep_as(end-12, fossil-16)

(ROOT
  (S
    (NP (DT No) (NNS Scientists))
    (VP (VBZ has)
      (ADVP (RB ever))
      (VP (VBN expected)
        (NP (DT a)
          (ADJP (RB perfectly) (JJ complete))
          (JJ fossil) (NN record))))
    (. .)))

det(Scientists-2, No-1)
nsubj(expected-5, Scientists-2)
aux(expected-5, has-3)
advmod(expected-5, ever-4)
root(ROOT-0, expected-5)
det(record-10, a-6)
advmod(complete-8, perfectly-7)
amod(record-10, complete-8)
amod(record-10, fossil-9)
dobj(expected-5, record-10)

(ROOT
  (SQ (MD Would) (RB n't)
    (NP (PRP you))
    (VP (VB have)
      (S
        (VP (TO to)
          (VP (VB see)
            (NP
              (QP (IN at) (JJS least) (CD one))
              (NN fossil))
            (PP (IN with)
              (NP (DT a)
                (ADJP (RB partially) (VBN formed))
                (NN leg)))))))
    (. ?)))

aux(have-4, Would-1)
neg(have-4, n't-2)
nsubj(have-4, you-3)
xsubj(see-6, you-3)
root(ROOT-0, have-4)
aux(see-6, to-5)
xcomp(have-4, see-6)
quantmod(one-9, at-7)
mwe(at-7, least-8)
pobj(at-7, least-8)
num(fossil-10, one-9)
dobj(see-6, fossil-10)
det(leg-15, a-12)
advmod(formed-14, partially-13)
amod(leg-15, formed-14)
prep_with(see-6, leg-15)

(ROOT
  (NP (CD ...) (RB no) (. ?)))


(ROOT
  (FRAG (: ...)
    (VP (VBP why) (RB not))
    (. ?)))

root(ROOT-0, why-2)
neg(why-2, not-3)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB mean)))
    (. ?)))

advmod(mean-4, How-1)
aux(mean-4, do-2)
nsubj(mean-4, you-3)
root(ROOT-0, mean-4)

(ROOT
  (S
    (NP (NNP Haven))
    (VP (VBP t)
      (S
        (NP (PRP you))
        (VP (VBN seen)
          (NP
            (NP (DT the) (NNS fossils))
            (PP (IN of)
              (NP (JJ early) (NNS amphibians)))))))
    (. ?)))

nsubj(t-2, Haven-1)
root(ROOT-0, t-2)
nsubj(seen-4, you-3)
dep(t-2, seen-4)
det(fossils-6, the-5)
dobj(seen-4, fossils-6)
amod(amphibians-9, early-8)
prep_of(fossils-6, amphibians-9)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBD were)
      (ADJP (RB very) (JJ fish))
      (PP (IN like) (IN with)
        (NP
          (NP (NNS flippers))
          (SBAR
            (WHNP (WDT that))
            (S
              (ADVP (RB also))
              (VP (VBD acted)
                (PP (IN like)
                  (NP (NNS limbs)))
                (S
                  (VP (TO to)
                    (VP (VB drag)
                      (NP (PRP themselves))
                      (PP (IN across)
                        (NP (DT the) (NN land))))))))))))
    (. .)))

nsubj(fish-4, They-1)
cop(fish-4, were-2)
advmod(fish-4, very-3)
root(ROOT-0, fish-4)
dep(fish-4, like-5)
prep_with(fish-4, flippers-7)
nsubj(acted-10, flippers-7)
advmod(acted-10, also-9)
rcmod(flippers-7, acted-10)
prep_like(acted-10, limbs-12)
aux(drag-14, to-13)
xcomp(acted-10, drag-14)
dobj(drag-14, themselves-15)
det(land-18, the-17)
prep_across(drag-14, land-18)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBD agreed)
      (SBAR (IN that)
        (S
          (NP (DT each) (NN step))
          (VP (MD would)
            (VP (VB be)
              (ADJP (JJ gradual))
              (: ...)
              (SBAR (RB so)
                (WHADVP (WRB why))
                (S
                  (VP
                    (ADVP (RB instead))
                    (VBP do)
                    (SBAR
                      (S
                        (NP (PRP we))
                        (VP (VBP see)
                          (NP
                            (NP
                              (ADJP
                                (ADJP (NN nothing))
                                (CC but)
                                (ADJP (RB fully) (JJ functional)))
                              (NNS animals))
                            (PP (IN in)
                              (NP (DT the) (JJ fossil) (NN record)))))))))))))))
    (. ?)))

nsubj(agreed-2, We-1)
root(ROOT-0, agreed-2)
complm(gradual-8, that-3)
det(step-5, each-4)
nsubj(gradual-8, step-5)
aux(gradual-8, would-6)
cop(gradual-8, be-7)
ccomp(agreed-2, gradual-8)
advmod(do-13, so-10)
advmod(do-13, why-11)
advmod(do-13, instead-12)
ccomp(gradual-8, do-13)
parataxis(gradual-8, do-13)
nsubj(see-15, we-14)
ccomp(do-13, see-15)
amod(animals-20, nothing-16)
advmod(functional-19, fully-18)
conj_but(nothing-16, functional-19)
amod(animals-20, functional-19)
dobj(see-15, animals-20)
det(record-24, the-22)
amod(record-24, fossil-23)
prep_in(animals-20, record-24)

(ROOT
  (S
    (SBAR (IN Because)
      (S
        (NP (JJ evolutionary) (NNS steps))
        (VP (VBP are) (RB not)
          (VP (VBN driven)
            (PP (IN towards)
              (NP (DT some) (JJ future) (NN goal)))))))
    (, ,)
    (NP (PRP they))
    (VP (VBP are)
      (ADJP (JJ adaptations)
        (S
          (VP (TO to)
            (VP (VB present)
              (NP (NNS conditions)))))))
    (. .)))

mark(driven-6, Because-1)
amod(steps-3, evolutionary-2)
nsubjpass(driven-6, steps-3)
auxpass(driven-6, are-4)
neg(driven-6, not-5)
advcl(adaptations-14, driven-6)
det(goal-10, some-8)
amod(goal-10, future-9)
prep_towards(driven-6, goal-10)
nsubj(adaptations-14, they-12)
cop(adaptations-14, are-13)
root(ROOT-0, adaptations-14)
aux(present-16, to-15)
xcomp(adaptations-14, present-16)
dobj(present-16, conditions-17)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS animals))
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBZ se)))))
    (VP
      (VP (VBP are)
        (ADJP (RB fully) (JJ functional)))
      (, ,)
      (CC and)
      (VP (VBP are)
        (ADJP (JJ transitional)
          (PP (TO to)
            (NP (JJ later) (NNS forms))))))
    (. .)))

det(animals-2, The-1)
dobj(se-5, animals-2)
nsubj(functional-8, animals-2)
nsubj(transitional-12, animals-2)
complm(se-5, that-3)
nsubj(se-5, we-4)
dep(animals-2, se-5)
cop(functional-8, are-6)
advmod(functional-8, fully-7)
root(ROOT-0, functional-8)
cop(transitional-12, are-11)
conj_and(functional-8, transitional-12)
amod(forms-15, later-14)
prep_to(transitional-12, forms-15)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBZ is)
      (NP (PRP it))
      (NP (PRP we))
      (VP (VB see)
        (NP
          (NP (NN nothing))
          (PP (IN of)
            (NP
              (NP (DT that) (NN sort))
              (VP (VBG living)
                (ADVP (RB either))))))))
    (. ?)))

advmod(see-5, Why-1)
cop(see-5, is-2)
nsubj(see-5, it-3)
attr(see-5, we-4)
nsubj(see-5, we-4)
root(ROOT-0, see-5)
dobj(see-5, nothing-6)
det(sort-9, that-8)
prep_of(nothing-6, sort-9)
partmod(sort-9, living-10)
advmod(living-10, either-11)

(ROOT
  (FRAG
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBD began)
          (NP
            (NP (DT the) (NN forming))
            (PP (IN of)
              (NP (DT a) (NN wing))))))
      (. .))
    (. .)))

mark(began-3, If-1)
nsubj(began-3, you-2)
root(ROOT-0, began-3)
det(forming-5, the-4)
dobj(began-3, forming-5)
det(wing-8, a-7)
prep_of(forming-5, wing-8)

(ROOT
  (SQ (MD would) (RB n't)
    (NP (EX there))
    (VP (VB be)
      (NP
        (NP (NNS tons))
        (PP (IN of)
          (NP (JJ conspicuous) (NNS transitions)))))
    (. ?)))

aux(be-4, would-1)
neg(be-4, n't-2)
expl(be-4, there-3)
root(ROOT-0, be-4)
dep(be-4, tons-5)
amod(transitions-8, conspicuous-7)
prep_of(tons-5, transitions-8)

(ROOT
  (S
    (NP (NN Flight) (NNS adaptations))
    (VP (VBP are)
      (ADJP (RB very) (JJ rare)
        (PP (IN throughout)
          (NP (NN history))))
      (SBAR (IN though)
        (S
          (NP (EX there))
          (VP (VBP are)
            (NP
              (NP (NNS creatures))
              (PP (IN like)
                (S
                  (VP (VBG flying)
                    (NP
                      (NP (NNS squirrels))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (MD may)
                            (VP (VB adapt)
                              (PP (TO to)
                                (NP (NN flight)))
                              (SBAR (IN if)
                                (S
                                  (NP (DT the) (JJ evolutionary) (NNS pressures))
                                  (VP (VBP continue)
                                    (PP (IN in)
                                      (NP (DT that) (NN direction)))))))))))))))))))
    (. .)))

nn(adaptations-2, Flight-1)
nsubj(rare-5, adaptations-2)
cop(rare-5, are-3)
advmod(rare-5, very-4)
root(ROOT-0, rare-5)
prep_throughout(rare-5, history-7)
mark(are-10, though-8)
expl(are-10, there-9)
advcl(rare-5, are-10)
nsubj(are-10, creatures-11)
prepc_like(creatures-11, flying-13)
dobj(flying-13, squirrels-14)
nsubj(adapt-17, squirrels-14)
aux(adapt-17, may-16)
rcmod(squirrels-14, adapt-17)
prep_to(adapt-17, flight-19)
mark(continue-24, if-20)
det(pressures-23, the-21)
amod(pressures-23, evolutionary-22)
nsubj(continue-24, pressures-23)
advcl(adapt-17, continue-24)
det(direction-27, that-26)
prep_in(continue-24, direction-27)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (VP (VBN seen)
        (NP (`` ``) (DT The) (NNPS Transformers) ('' ''))
        (ADVP (RB right))))
    (. ?)))

nsubj(seen-3, You-1)
aux(seen-3, have-2)
root(ROOT-0, seen-3)
det(Transformers-6, The-5)
dobj(seen-3, Transformers-6)
advmod(seen-3, right-8)

(ROOT
  (S
    (ADVP (RB First) (RB off))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's) (RB not)
      (NP (JJ falsifiable) (NNS !!!)))))

advmod(off-2, First-1)
advmod(!!!-8, off-2)
nsubj(!!!-8, it-4)
cop(!!!-8, 's-5)
neg(!!!-8, not-6)
amod(!!!-8, falsifiable-7)
root(ROOT-0, !!!-8)

(ROOT
  (S
    (S
      (PP (IN In)
        (NP (IN between) (CD two) (NNS stages)))
      (NP (EX there))
      (VP (MD would)
        (VP (VB be)
          (NP
            (NP (JJ many) (JJ odd) (NNS forms))
            (SBAR
              (WHNP (WDT that))
              (S
                (ADVP (RB simply))
                (VP (VBP have)
                  (NP (DT no) (JJ logical) (NN function)))))))))
    (: ...)
    (CC but)
    (S
      (NP (DT the) (JJ fossil) (NN record))
      (VP (VBZ does) (RB n't)
        (VP (VB show)
          (NP (DT that)))))
    (. .)))

amod(stages-4, between-2)
num(stages-4, two-3)
prep_in(forms-10, stages-4)
expl(forms-10, there-5)
aux(forms-10, would-6)
cop(forms-10, be-7)
amod(forms-10, many-8)
amod(forms-10, odd-9)
root(ROOT-0, forms-10)
nsubj(have-13, forms-10)
advmod(have-13, simply-12)
rcmod(forms-10, have-13)
det(function-16, no-14)
amod(function-16, logical-15)
dobj(have-13, function-16)
det(record-21, the-19)
amod(record-21, fossil-20)
nsubj(show-24, record-21)
aux(show-24, does-22)
neg(show-24, n't-23)
conj_but(forms-10, show-24)
nsubj(have-13, show-24)
dobj(show-24, that-25)

(ROOT
  (S
    (S
      (ADVP (IN So) (RB far))
      (NP (DT the) (JJ fossil) (NN record))
      (VP (VBZ has)
        (VP (VBN shown)
          (NP
            (NP (NN nothing))
            (PP (CC but)
              (NP
                (NP (DT the) (JJ vast) (NN variety))
                (PP (IN of)
                  (NP
                    (NP (NNP God) (POS 's))
                    (NNS creatures)))))))))
    (: ...)
    (S
      (NP (NN nothing))
      (ADJP (JJR more)))
    (. .)))

advmod(shown-7, So-1)
advmod(So-1, far-2)
det(record-5, the-3)
amod(record-5, fossil-4)
nsubj(shown-7, record-5)
aux(shown-7, has-6)
root(ROOT-0, shown-7)
dobj(shown-7, nothing-8)
prep(nothing-8, but-9)
det(variety-12, the-10)
amod(variety-12, vast-11)
dep(but-9, variety-12)
poss(creatures-16, God-14)
prep_of(variety-12, creatures-16)
dep(more-19, nothing-18)
parataxis(shown-7, more-19)

(ROOT
  (INTJ (UH Transformers) (. ?)))

root(ROOT-0, Transformers-1)

(ROOT
  (FRAG
    (ADVP (RB Really))
    (. ?)))

root(ROOT-0, Really-1)

(ROOT
  (SBARQ
    (WHADVP (WRB Where))
    (SQ (VBP are)
      (NP (DT the) (JJ transitional) (NNS forms))
      (VP (VBG leading)
        (PRT (RP up))
        (PP (TO to)
          (NP (DT the) (NNS dinosaurs)))))
    (. ?)))

advmod(leading-6, Where-1)
aux(leading-6, are-2)
det(forms-5, the-3)
amod(forms-5, transitional-4)
nsubj(leading-6, forms-5)
root(ROOT-0, leading-6)
prt(leading-6, up-7)
det(dinosaurs-10, the-9)
prep_to(leading-6, dinosaurs-10)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ
      (ADVP (RB about))
      (VP (VBZ giraffes)))
    (. ?)))

advmod(giraffes-3, How-1)
advmod(giraffes-3, about-2)
root(ROOT-0, giraffes-3)

(ROOT
  (NP (NNS Cheetahs) (. ?)))

root(ROOT-0, Cheetahs-1)

(ROOT
  (NP (NNS Woodpeckers) (. ?)))

root(ROOT-0, Woodpeckers-1)

(ROOT
  (S
    (NP (DT The) (NN dinosaur) (JJ evolutionary) (NN chain))
    (VP (VBZ is)
      (ADJP
        (ADVP (RB rather) (RB well))
        (VBN documented)))
    (. .)))

det(chain-4, The-1)
nn(chain-4, dinosaur-2)
amod(chain-4, evolutionary-3)
nsubjpass(documented-8, chain-4)
auxpass(documented-8, is-5)
advmod(well-7, rather-6)
advmod(documented-8, well-7)
root(ROOT-0, documented-8)

(ROOT
  (S
    (S
      (NP (NNP Spondylosoma))
      (VP
        (VP (VBZ is)
          (NP
            (NP (DT the)
              (ADJP (VBN seen)
                (PP (IN as)
                  (NP
                    (NP (DT the) (JJS closest) (NN ancestor))
                    (PP (TO to)
                      (NP
                        (NP (JJ true) (NNS dinosaurs))
                        (PRN (-LRB- -LRB-)
                          (FRAG
                            (CONJP (IN if) (RB not))
                            (NP (DT the) (JJS earliest) (NN dinosaur)))
                          (-RRB- -RRB-)))))))
              (NN Look))
            (PP (IN at)
              (NP (PRP it)))))
        (CC and)
        (VP (VBP think)
          (PP (IN about)
            (NP (PRP it))))))
    (: ...)
    (S
      (NP (NN evolution))
      (VP (VBZ is)
        (NP (DT a) (NN lie))))
    (. .)))

nsubj(Look-19, Spondylosoma-1)
nsubj(think-23, Spondylosoma-1)
cop(Look-19, is-2)
det(Look-19, the-3)
amod(Look-19, seen-4)
det(ancestor-8, the-6)
amod(ancestor-8, closest-7)
prep_as(seen-4, ancestor-8)
amod(dinosaurs-11, true-10)
prep_to(ancestor-8, dinosaurs-11)
dep(not-14, if-13)
dep(dinosaur-17, not-14)
det(dinosaur-17, the-15)
amod(dinosaur-17, earliest-16)
dep(dinosaurs-11, dinosaur-17)
root(ROOT-0, Look-19)
prep_at(Look-19, it-21)
conj_and(Look-19, think-23)
prep_about(think-23, it-25)
nsubj(lie-30, evolution-27)
cop(lie-30, is-28)
det(lie-30, a-29)
parataxis(Look-19, lie-30)

(ROOT
  (S (CC And)
    (NP (DT the) (NN alternative))
    (VP (VBZ is)
      (NP
        (NP (NN everything))
        (VP (VBN popped)
          (PP (IN into)
            (NP (VBG being))))))
    (. ?)))

cc(everything-5, And-1)
det(alternative-3, the-2)
nsubj(everything-5, alternative-3)
cop(everything-5, is-4)
root(ROOT-0, everything-5)
partmod(everything-5, popped-6)
prep_into(popped-6, being-8)

(ROOT
  (S
    (NP
      (NP (NNP Objectively))
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VBN popped)
            (PP (IN into)
              (S
                (VP (VBG being)
                  (NP (NN story)))))))))
    (VP (VBZ is)
      (NP (DT the) (JJ correct) (NN one)))
    (. ?)))

nsubj(popped-3, Objectively-1)
nsubj(one-10, Objectively-1)
rcmod(Objectively-1, popped-3)
cop(story-6, being-5)
prepc_into(popped-3, story-6)
cop(one-10, is-7)
det(one-10, the-8)
amod(one-10, correct-9)
root(ROOT-0, one-10)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's) (RB not)
      (NP
        (NP (RB even) (DT a)
          (ADJP (JJ proper) (JJ scientific))
          (NN theory))
        (: ...)
        (SBAR (IN because)
          (S
            (NP (PRP it))
            (VP (VBZ has)
              (NP
                (NP (DT no) (JJ actual) (NN means))
                (PP (IN of)
                  (S
                    (VP (VBG being)
                      (VP (VBN proven)
                        (S
                          (ADJP (JJ wrong)))))))))))))
    (. .)))

nsubj(theory-8, It-1)
cop(theory-8, 's-2)
neg(theory-8, not-3)
advmod(theory-8, even-4)
det(theory-8, a-5)
amod(scientific-7, proper-6)
amod(theory-8, scientific-7)
root(ROOT-0, theory-8)
mark(has-12, because-10)
nsubj(has-12, it-11)
dep(theory-8, has-12)
det(means-15, no-13)
amod(means-15, actual-14)
dobj(has-12, means-15)
auxpass(proven-18, being-17)
prepc_of(means-15, proven-18)
acomp(proven-18, wrong-19)

(ROOT
  (S
    (NP
      (NP (NNP Sure))
      (SBAR
        (S
          (NP (PRP it))
          (VP (MD can)
            (VP (VB be)
              (ADVP (RB just)))))))
    (ADVP (RB clearly))
    (VP (VBP demonstrate)
      (NP
        (NP (DT an) (NN organism))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ has)
              (NP (DT no) (JJ evolutionary) (NNS links)))))))
    (. .)))

dobj(be-4, Sure-1)
nsubj(demonstrate-7, Sure-1)
nsubj(be-4, it-2)
aux(be-4, can-3)
rcmod(Sure-1, be-4)
advmod(be-4, just-5)
advmod(demonstrate-7, clearly-6)
root(ROOT-0, demonstrate-7)
det(organism-9, an-8)
dobj(demonstrate-7, organism-9)
nsubj(has-11, organism-9)
rcmod(organism-9, has-11)
det(links-14, no-12)
amod(links-14, evolutionary-13)
dobj(has-11, links-14)

(ROOT
  (S
    (NP
      (NP (DT No) (JJ genetic) (NNS similarities))
      (PP (TO to)
        (NP
          (NP (DT any) (VBN known) (NN creature))
          (, ,)
          (CC or)
          (NP
            (NP (DT no) (JJ fossil) (NN record))
            (PP (IN of)
              (NP (NN ancestor) (NNS species)))))))
    (VP (MD would)
      (VP (VB do)
        (NP (PRP it))))
    (. .)))

det(similarities-3, No-1)
amod(similarities-3, genetic-2)
nsubj(do-17, similarities-3)
det(creature-7, any-5)
amod(creature-7, known-6)
prep_to(similarities-3, creature-7)
det(record-12, no-10)
amod(record-12, fossil-11)
prep_to(similarities-3, record-12)
conj_or(creature-7, record-12)
nn(species-15, ancestor-14)
prep_of(record-12, species-15)
aux(do-17, would-16)
root(ROOT-0, do-17)
dobj(do-17, it-18)

(ROOT
  (SBARQ (CC And)
    (WHADVP (WRB how))
    (SQ (VBZ is)
      (NP (NNP Intelligent) (NNP Design))
      (ADJP (JJ falsifiable)))
    (. ?)))

cc(falsifiable-6, And-1)
advmod(falsifiable-6, how-2)
cop(falsifiable-6, is-3)
nn(Design-5, Intelligent-4)
nsubj(falsifiable-6, Design-5)
root(ROOT-0, falsifiable-6)

(ROOT
  (S
    (NP
      (NP (NNS Things))
      (PP (IN like)
        (NP
          (NP (NNS bacteria) (NN flagellum))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBD were)
                (ADVP (RB once))
                (VP (VBN held)
                  (PRT (RP up))
                  (PP (IN as)
                    (NP
                      (NP (NN proof))
                      (PP (IN of)
                        (NP (NNP ID))))))))))))
    (VP (VBP have)
      (VP (VBN been)
        (VP (VBN shown)
          (S
            (VP (TO to)
              (VP
                (ADVP (RB naturally))
                (VB evolve)
                (PP (IN from)
                  (NP (JJ other) (NNS systems)))))))))
    (. .)))

nsubjpass(shown-16, Things-1)
xsubj(evolve-19, Things-1)
nn(flagellum-4, bacteria-3)
prep_like(Things-1, flagellum-4)
nsubjpass(held-8, flagellum-4)
auxpass(held-8, were-6)
advmod(held-8, once-7)
rcmod(flagellum-4, held-8)
prt(held-8, up-9)
prep_as(held-8, proof-11)
prep_of(proof-11, ID-13)
aux(shown-16, have-14)
auxpass(shown-16, been-15)
root(ROOT-0, shown-16)
aux(evolve-19, to-17)
advmod(evolve-19, naturally-18)
xcomp(shown-16, evolve-19)
amod(systems-22, other-21)
prep_from(evolve-19, systems-22)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (VP (VBZ 's)
          (ADJP (RB even) (RBR more) (JJ ridiculous)))))
    (VP (VBZ is)
      (ADVP (RB now))
      (NP
        (NP (NN science))
        (SBAR
          (S
            (VP (VBZ takes)
              (NP
                (NP (NN anything))
                (VP (VBN done)
                  (PP (IN in)
                    (NP
                      (NP (DT the) (JJ various) (NNS subjects))
                      (PP (IN like)
                        (NP
                          (NP (NNS genetics))
                          (PP (IN as) (`` ``)
                            (NP
                              (NP (NN proof))
                              (PP (IN of)
                                (NP (NN evolution))))
                            ('' '')))))))))))))
    (. ...)))

nsubj(ridiculous-5, What-1)
cop(ridiculous-5, 's-2)
advmod(ridiculous-5, even-3)
advmod(ridiculous-5, more-4)
csubj(science-8, ridiculous-5)
cop(science-8, is-6)
advmod(science-8, now-7)
root(ROOT-0, science-8)
rcmod(science-8, takes-9)
dobj(takes-9, anything-10)
partmod(anything-10, done-11)
det(subjects-15, the-13)
amod(subjects-15, various-14)
prep_in(done-11, subjects-15)
prep_like(subjects-15, genetics-17)
prep_as(genetics-17, proof-20)
prep_of(proof-20, evolution-22)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (NN fact))
        (SBAR (IN that)
          (S
            (NP (NN someone))
            (VP (VBD found)
              (NP
                (NP (DT a) (NN chunk))
                (PP (IN of)
                  (NP (NNP DNA)))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBD was)
                      (UCP
                        (NP (DT an) (JJ old) (NN virus))
                        (CC and)
                        (VP (VBN pieced)
                          (S
                            (NP (PRP it))
                            (ADVP (RB back)))))))))))))
      (ADVP (RB together))
      (VP (VBZ is)
        (NP
          (NP (NNP NOT) (NNP PROOF))
          (PP (IN of)
            (NP (NN evolution))))))
    (: ...)
    (S
      (NP (PRP it))
      (VP (VBZ 's)
        (NP
          (NP (NN something))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBP have)
                (VP (VBN learned)
                  (ADVP (RB simply))
                  (PP (IN by)
                    (S
                      (VP (VBG studying)
                        (NP (DT the) (NN genome))))))))))))
    (. .)))

det(fact-2, The-1)
nsubj(PROOF-22, fact-2)
complm(found-5, that-3)
nsubj(found-5, someone-4)
dep(fact-2, found-5)
det(chunk-7, a-6)
dobj(found-5, chunk-7)
nsubj(virus-14, chunk-7)
nsubj(pieced-16, chunk-7)
prep_of(chunk-7, DNA-9)
cop(virus-14, was-11)
det(virus-14, an-12)
amod(virus-14, old-13)
rcmod(chunk-7, virus-14)
rcmod(chunk-7, pieced-16)
conj_and(virus-14, pieced-16)
partmod(virus-14, pieced-16)
dep(pieced-16, it-17)
advmod(it-17, back-18)
advmod(PROOF-22, together-19)
cop(PROOF-22, is-20)
nn(PROOF-22, NOT-21)
root(ROOT-0, PROOF-22)
prep_of(PROOF-22, evolution-24)
nsubj(something-28, it-26)
cop(something-28, 's-27)
parataxis(PROOF-22, something-28)
dobj(learned-31, something-28)
nsubj(learned-31, we-29)
aux(learned-31, have-30)
rcmod(something-28, learned-31)
advmod(learned-31, simply-32)
prepc_by(learned-31, studying-34)
det(genome-36, the-35)
dobj(studying-34, genome-36)

(ROOT
  (S
    (S
      (PP (IN Of)
        (NP (NN course)))
      (NP (NNS genetics))
      (VP (VBZ is)
        (ADJP (VBN related)
          (PP (TO to)
            (NP
              (NP (JJ other) (NNS subjects))
              (PP (IN like)
                (NP (NN evolution))))))))
    (: ...)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ 's) (RB not)
        (NP (NN evolution))))
    (. .)))

prep_of(related-5, course-2)
nsubjpass(related-5, genetics-3)
auxpass(related-5, is-4)
root(ROOT-0, related-5)
amod(subjects-8, other-7)
prep_to(related-5, subjects-8)
prep_like(subjects-8, evolution-10)
nsubj(evolution-16, it-13)
cop(evolution-16, 's-14)
neg(evolution-16, not-15)
conj_but(related-5, evolution-16)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ s) (RB not)
        (NP (NN proof))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (NP
          (NP (NN evidence))
          (PP (TO to)
            (NP
              (NP (DT the) (NN existence))
              (PP (IN of)
                (NP (NN evolution))))))))
    (. .)))

nsubj(proof-4, It-1)
cop(proof-4, s-2)
neg(proof-4, not-3)
root(ROOT-0, proof-4)
nsubj(evidence-9, it-7)
cop(evidence-9, is-8)
conj_but(proof-4, evidence-9)
det(existence-12, the-11)
prep_to(evidence-9, existence-12)
prep_of(existence-12, evolution-14)

(ROOT
  (FRAG
    (S
      (NP (DT The) (NN problem))
      (VP (VBZ is)))
    (: ...)
    (FRAG
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBP feel)
            (SBAR (IN that)
              (S
                (NP (DT an) (NN animal))
                (VP (VBD changed)
                  (PP (IN in)
                    (NP (JJ small) (NNS steps)))
                  (PP (IN without)
                    (NP (DT any) (NN guidance)))))))))
      (. .))
    (. .)))

det(problem-2, The-1)
nsubj(is-3, problem-2)
dep(feel-7, is-3)
mark(feel-7, if-5)
nsubj(feel-7, you-6)
root(ROOT-0, feel-7)
complm(changed-11, that-8)
det(animal-10, an-9)
nsubj(changed-11, animal-10)
ccomp(feel-7, changed-11)
amod(steps-14, small-13)
prep_in(changed-11, steps-14)
det(guidance-17, any-16)
prep_without(changed-11, guidance-17)

(ROOT
  (S (RB not)
    (NP (DT all) (NNS steps))
    (VP (MD would)
      (VP (VB be)
        (ADJP (JJ beneficial))))
    (. .)))

neg(beneficial-6, not-1)
det(steps-3, all-2)
nsubj(beneficial-6, steps-3)
aux(beneficial-6, would-4)
cop(beneficial-6, be-5)
root(ROOT-0, beneficial-6)

(ROOT
  (FRAG
    (WHADVP (WRB Why))
    (NP (RB not))
    (. ?)))

dep(not-2, Why-1)
root(ROOT-0, not-2)

