(ROOT
  (S
    (NP (PRP I))
    (VP (MD would)
      (SBAR (IN if)
        (S
          (NP (PRP I))
          (VP (MD could)))))
    (. .)))

nsubj(would-2, I-1)
root(ROOT-0, would-2)
mark(could-5, if-3)
nsubj(could-5, I-4)
advcl(would-2, could-5)

(ROOT
  (S
    (S
      (NP
        (NP (PRP$ My) (NNS grounds))
        (PP (IN for)
          (NP (NN objection))))
      (VP (VBP are)
        (ADJP (RB very) (JJ simple))))
    (: :)
    (S
      (NP (DT This))
      (VP (VBZ is) (RB not)
        (NP (DT an) (NN argument))))
    (. .)))

poss(grounds-2, My-1)
nsubj(simple-7, grounds-2)
prep_for(grounds-2, objection-4)
cop(simple-7, are-5)
advmod(simple-7, very-6)
root(ROOT-0, simple-7)
nsubj(argument-13, This-9)
cop(argument-13, is-10)
neg(argument-13, not-11)
det(argument-13, an-12)
parataxis(simple-7, argument-13)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (JJ whole) (NN post))
        (PP (IN from)
          (NP (NNP Mr) (NNP Behe))))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN boiled)
            (ADVP (RB down)
              (PP (TO to)))
            (, ,) (`` ``)
            (SBAR (IN since)
              (S
                (NP (NNS things))
                (VP (VBP are)
                  (ADJP (JJ complex)))))))))
    (, ,)
    (NP (PRP they))
    (VP (MD must)
      (VP (VB be)
        (VP (VBN designed))))
    (. .)))

det(post-3, The-1)
amod(post-3, whole-2)
nsubjpass(boiled-9, post-3)
nn(Behe-6, Mr-5)
prep_from(post-3, Behe-6)
aux(boiled-9, can-7)
auxpass(boiled-9, be-8)
ccomp(designed-22, boiled-9)
advmod(boiled-9, down-10)
prep(down-10, to-11)
mark(complex-17, since-14)
nsubj(complex-17, things-15)
cop(complex-17, are-16)
advcl(boiled-9, complex-17)
nsubjpass(designed-22, they-19)
aux(designed-22, must-20)
auxpass(designed-22, be-21)
root(ROOT-0, designed-22)

(ROOT
  (S ('' '')
    (S
      (PP (IN In)
        (NP (DT another) (NN post)))
      (NP (PRP I))
      (VP (VBD said)
        (SBAR (IN that)
          (S
            (NP (NNP ID))
            (VP (VBD was) (RB n't)
              (NP (DT a) (NN theory)))))))
    (, ,)
    (NP (PRP it))
    (VP (VBD was)
      (NP (DT an) (JJ untested) (NNS hypothesis)))
    (. .)))

det(post-4, another-3)
prep_in(said-6, post-4)
nsubj(said-6, I-5)
ccomp(hypothesis-18, said-6)
complm(theory-12, that-7)
nsubj(theory-12, ID-8)
cop(theory-12, was-9)
neg(theory-12, n't-10)
det(theory-12, a-11)
ccomp(said-6, theory-12)
nsubj(hypothesis-18, it-14)
cop(hypothesis-18, was-15)
det(hypothesis-18, an-16)
amod(hypothesis-18, untested-17)
root(ROOT-0, hypothesis-18)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ seems)
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBD was)
            (VP (VBG giving)
              (NP (PRP it))
              (NP
                (ADJP (RB too) (JJ much))
                (NN credit)))))))
    (. .)))

nsubj(seems-2, It-1)
root(ROOT-0, seems-2)
nsubj(giving-5, I-3)
aux(giving-5, was-4)
ccomp(seems-2, giving-5)
iobj(giving-5, it-6)
advmod(much-8, too-7)
amod(credit-9, much-8)
dobj(giving-5, credit-9)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (NP (DT an) (JJ unfinished) (NNS hypothesis)))
    (. .)))

nsubj(hypothesis-5, It-1)
cop(hypothesis-5, 's-2)
det(hypothesis-5, an-3)
amod(hypothesis-5, unfinished-4)
root(ROOT-0, hypothesis-5)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ
      (VP (VBZ features)
        (PP (IN of)
          (NP
            (NP (DT the) (NN complexity))
            (PP (IN of)
              (NP (DT the) (NN cell) (NNS points)))))
        (PP (TO to)
          (NP (JJ intelligent) (NN design)))))
    (. ?)))

nsubj(features-2, What-1)
root(ROOT-0, features-2)
det(complexity-5, the-4)
prep_of(features-2, complexity-5)
det(points-9, the-7)
nn(points-9, cell-8)
prep_of(complexity-5, points-9)
amod(design-12, intelligent-11)
prep_to(features-2, design-12)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (VBZ does)
      (NP
        (NP (DT the) (NN complexity))
        (PP (IN of)
          (NP (DT the) (NN cell))))
      (VP (VB point)
        (PP (TO to)
          (NP (JJ intelligent) (NN design)))))
    (. ?)))

advmod(point-8, How-1)
aux(point-8, does-2)
det(complexity-4, the-3)
nsubj(point-8, complexity-4)
det(cell-7, the-6)
prep_of(complexity-4, cell-7)
root(ROOT-0, point-8)
amod(design-11, intelligent-10)
prep_to(point-8, design-11)

(ROOT
  (S
    (NP (DT These))
    (VP (VBP are)
      (NP
        (NP (DT the) (NNS kinds))
        (PP (IN of)
          (NP
            (NP (NNS questions))
            (SBAR
              (S
                (NP (PRP you))
                (VP (MD should)
                  (VP (VB be)
                    (VP (VBG answering)
                      (PP (IN with)
                        (NP (DT this) (NN argument))))))))))))
    (. .)))

nsubj(kinds-4, These-1)
cop(kinds-4, are-2)
det(kinds-4, the-3)
root(ROOT-0, kinds-4)
prep_of(kinds-4, questions-6)
dobj(answering-10, questions-6)
nsubj(answering-10, you-7)
aux(answering-10, should-8)
aux(answering-10, be-9)
rcmod(questions-6, answering-10)
det(argument-13, this-12)
prep_with(answering-10, argument-13)

(ROOT
  (S
    (INTJ (UH Please))
    (, ,)
    (NP (NN someone))
    (VP
      (VP (VB object)
        (PP (TO to)
          (NP (DT this) (NN argument))))
      (, ,)
      (CC or)
      (VP (VB give)
        (NP (PRP me))
        (NP (DT the) (NN ability)
          (S
            (VP (TO to)
              (VP (VB do)
                (ADVP (RB so))))))))
    (. .)))

dep(object-4, Please-1)
nsubj(object-4, someone-3)
nsubj(give-10, someone-3)
root(ROOT-0, object-4)
det(argument-7, this-6)
prep_to(object-4, argument-7)
conj_or(object-4, give-10)
iobj(give-10, me-11)
det(ability-13, the-12)
dobj(give-10, ability-13)
aux(do-15, to-14)
infmod(ability-13, do-15)
advmod(do-15, so-16)

