(ROOT
  (S (`` ``)
    (CC And)
    (NP (PRP I))
    (VP (VBP understand)
      (SBAR (IN that)
        (S
          (NP (NNP God))
          (VP (VBZ knows)
            (NP (DT every) (JJ future) (NN event))
            (SBAR (IN before)
              (S
                (NP (PRP it))
                (ADVP (RB ever))
                (VP (VBZ occurs))))))))
    (. .)))

cc(understand-4, And-2)
nsubj(understand-4, I-3)
root(ROOT-0, understand-4)
complm(knows-7, that-5)
nsubj(knows-7, God-6)
ccomp(understand-4, knows-7)
det(event-10, every-8)
amod(event-10, future-9)
dobj(knows-7, event-10)
mark(occurs-14, before-11)
nsubj(occurs-14, it-12)
advmod(occurs-14, ever-13)
advcl(knows-7, occurs-14)

(ROOT
  (S ('' '')
    (S
      (SBAR
        (ADVP (RB So))
        (IN if)
        (S
          (NP (NNP God))
          (VP (VBZ has)
            (NP
              (NP (DT a) (JJ perfect) (NN view))
              (PP (IN of)
                (NP (DT the) (NN future)))))))
      (ADVP (RB then))
      (NP (NNP God))
      (VP (VBD knew)
        (SBAR (IN that)
          (WHADVP (WRB when))
          (S
            (NP (PRP he))
            (VP (VBD created)
              (NP (NNP Adam\/Eve)))))))
    (, ,)
    (CC and)
    (S
      (S
        (VP (VBN placed)
          (NP
            (NP (DT the) (NN Tree))
            (PP (IN of)
              (NP (NNP Knowledge))))
          (PP (IN in)
            (NP (NNP Eden)))))
      (NP (DT that) (NNP Adam\/Eve))
      (VP (MD would) (RB not)
        (VP (VB be)
          (ADJP (JJ able)
            (S
              (VP (TO to)
                (VP (VB resist)
                  (NP (DT the) (NN temptation)))))))))
    (. ?)))

advmod(has-5, So-2)
dep(has-5, if-3)
nsubj(has-5, God-4)
advcl(knew-14, has-5)
det(view-8, a-6)
amod(view-8, perfect-7)
dobj(has-5, view-8)
det(future-11, the-10)
prep_of(view-8, future-11)
advmod(knew-14, then-12)
nsubj(knew-14, God-13)
root(ROOT-0, knew-14)
complm(created-18, that-15)
advmod(created-18, when-16)
nsubj(created-18, he-17)
ccomp(knew-14, created-18)
dobj(created-18, Adam\/Eve-19)
dep(able-34, placed-22)
det(Tree-24, the-23)
dobj(placed-22, Tree-24)
prep_of(Tree-24, Knowledge-26)
prep_in(placed-22, Eden-28)
det(Adam\/Eve-30, that-29)
nsubj(able-34, Adam\/Eve-30)
aux(able-34, would-31)
neg(able-34, not-32)
cop(able-34, be-33)
conj_and(knew-14, able-34)
aux(resist-36, to-35)
xcomp(able-34, resist-36)
det(temptation-38, the-37)
dobj(resist-36, temptation-38)

(ROOT
  (S
    (S
      (NP (NNP God))
      (VP (VBD created)
        (S
          (NP (DT the) (NNP Bible))
          (VP (VBG knowing)
            (SBAR (IN that)
              (S
                (NP (PRP they))
                (VP (MD would)
                  (VP (VB be)
                    (VP (VBN translated)
                      (NP (DT that) (NN way)))))))))))
    (, ,) (IN so)
    (S
      (ADVP (RB obviously))
      (NP (DT those) (NNS translations))
      (VP (VBP are)
        (ADVP (RB exactly))
        (SBAR (IN as)
          (S
            (NP (NNP God))
            (VP (VBD intended)
              (S
                (NP (PRP them))
                (VP (TO to)
                  (VP (VB be)))))))))
    (. .)))

nsubj(created-2, God-1)
root(ROOT-0, created-2)
det(Bible-4, the-3)
nsubj(knowing-5, Bible-4)
dep(created-2, knowing-5)
complm(translated-10, that-6)
nsubjpass(translated-10, they-7)
aux(translated-10, would-8)
auxpass(translated-10, be-9)
ccomp(knowing-5, translated-10)
det(way-12, that-11)
dobj(translated-10, way-12)
dep(created-2, so-14)
advmod(are-18, obviously-15)
det(translations-17, those-16)
nsubj(are-18, translations-17)
ccomp(created-2, are-18)
advmod(are-18, exactly-19)
mark(intended-22, as-20)
nsubj(intended-22, God-21)
advcl(are-18, intended-22)
nsubj(be-25, them-23)
aux(be-25, to-24)
xcomp(intended-22, be-25)

(ROOT
  (FRAG ('' '')
    (NP (NNP Are))
    (PP
      (NP
        (NP (PRP you))
        (ADJP (JJ familiar)))
      (IN with)
      (NP (DT the) (NN commandment) (`` ``) (NNP Thou) (NNP Shalt)
        (CC not)
        (NNPS Kill)))
    (. ?)))

root(ROOT-0, Are-2)
npadvmod(with-5, you-3)
amod(you-3, familiar-4)
dep(Are-2, with-5)
det(Shalt-10, the-6)
nn(Shalt-10, commandment-7)
pobj(with-5, Thou-9)
conj_negcc(Shalt-10, Thou-9)
nn(Shalt-10, Thou-9)
pobj(with-5, Shalt-10)
pobj(with-5, Kill-12)
conj_negcc(Shalt-10, Kill-12)

(ROOT
  (S ('' '')
    (NP (NNP ...))
    (VP (VBZ is)
      (ADVP (RB there))
      (NP
        (NP (DT some) (NN question))
        (PP (IN about)
          (NP
            (NP (PRP it) (POS 's))
            (JJ proper) (NN translation)))))
    (. ?)))

cop(question-6, is-3)
advmod(question-6, there-4)
det(question-6, some-5)
root(ROOT-0, question-6)
poss(translation-11, it-8)
amod(translation-11, proper-10)
prep_about(question-6, translation-11)

(ROOT
  (SINV (`` ``)
    (S
      (S
        (VP (VBG Actually)
          (NP (UH yes))))
      (: ...)
      (S
        (NP (DT a)
          (ADJP (RBR more) (JJ accurate))
          (NN translation))
        (VP (VBZ is)
          (ADVP (RB often))
          (VP (VBN seen)
            (PP (IN as) (`` ``)
              (NP (NNP Thou)))))))
    (VP (MD shall) (RB not))
    (NP
      (NP (NN murder) ('' ''))
      (, ,)
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VBZ is)
            (ADJP (JJ distinct))
            (PP (IN from) (`` ``)
              (NP
                (NP (NNP Thou))
                (SBAR
                  (S
                    (VP (MD shall) (RB not)
                      (VP (VB Kill))))))
              ('' ''))))))
    (. .)))

dep(shall-15, Actually-2)
dobj(Actually-2, yes-3)
det(translation-8, a-5)
advmod(accurate-7, more-6)
amod(translation-8, accurate-7)
nsubjpass(seen-11, translation-8)
auxpass(seen-11, is-9)
advmod(seen-11, often-10)
parataxis(Actually-2, seen-11)
prep_as(seen-11, Thou-14)
root(ROOT-0, shall-15)
neg(shall-15, not-16)
nsubj(shall-15, murder-17)
nsubj(distinct-22, murder-17)
cop(distinct-22, is-21)
rcmod(murder-17, distinct-22)
prep_from(distinct-22, Thou-25)
aux(Kill-28, shall-26)
neg(Kill-28, not-27)
rcmod(Thou-25, Kill-28)

(ROOT
  (S (`` ``)
    (S
      (NP (NNP Thou))
      (VP (MD shall) (RB not)
        (VP (VB kill))))
    ('' '')
    (VP (VBZ is) (RB n't)
      (NP (DT a)
        (ADJP (RB very) (JJ practical))
        (NN commandment))
      (SBAR (IN as)
        (S
          (NP (PRP we))
          (VP (VBP kill)
            (NP (NNS things))))))
    (NP (PDT all) (DT the) (NN time))
    (. .)))

nsubj(kill-5, Thou-2)
aux(kill-5, shall-3)
neg(kill-5, not-4)
ccomp(commandment-12, kill-5)
csubj(commandment-12, kill-5)
cop(commandment-12, is-7)
neg(commandment-12, n't-8)
det(commandment-12, a-9)
advmod(practical-11, very-10)
amod(commandment-12, practical-11)
root(ROOT-0, commandment-12)
mark(kill-15, as-13)
nsubj(kill-15, we-14)
advcl(commandment-12, kill-15)
dobj(kill-15, things-16)
predet(time-19, all-17)
det(time-19, the-18)
dep(commandment-12, time-19)

(ROOT
  (S
    (NP (NNP Trees))
    (VP (VBP are)
      (VP (VBN killed)
        (NP
          (NP (DT every) (NN time))
          (SBAR
            (S
              (NP (PRP they))
              (VP (VBP are)
                (VP (VBN cut)
                  (PRT (RP down))
                  (PP (IN after)
                    (NP (DT all))))))))))
    (. .)))

nsubjpass(killed-3, Trees-1)
auxpass(killed-3, are-2)
root(ROOT-0, killed-3)
det(time-5, every-4)
dobj(killed-3, time-5)
nsubjpass(cut-8, they-6)
auxpass(cut-8, are-7)
rcmod(time-5, cut-8)
prt(cut-8, down-9)
prep_after(cut-8, all-11)

(ROOT
  (S
    (S
      (NP (EX There))
      (VP (VBZ is)
        (NP
          (NP (DT no) (NN wiggle) (NN room))
          (PP (IN in)
            (NP (DT that) (NN statement))))))
    (: ...)
    (CC but)
    (S (`` ``)
      (S
        (NP (NNP Thou))
        (VP (MD shall) (RB not)
          (VP (VB murder))))
      ('' '')
      (VP (VBZ allows)
        (S
          (NP (PRP us))
          (VP (TO to)
            (VP (VB go)
              (PP (IN about)
                (NP (PRP$ our) (JJ daily) (NNS lives))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(room-5, no-3)
nn(room-5, wiggle-4)
nsubj(is-2, room-5)
det(statement-8, that-7)
prep_in(room-5, statement-8)
nsubj(murder-15, Thou-12)
aux(murder-15, shall-13)
neg(murder-15, not-14)
ccomp(allows-17, murder-15)
csubj(allows-17, murder-15)
conj_but(is-2, allows-17)
nsubj(go-20, us-18)
aux(go-20, to-19)
xcomp(allows-17, go-20)
poss(lives-24, our-22)
amod(lives-24, daily-23)
prep_about(go-20, lives-24)

(ROOT
  (S (`` ``)
    (CC or)
    (NP
      (NP (`` ``) (JJ spare))
      (NP (DT the) (NN rod)))
    (, ,)
    (VP (VBP spoil)
      (NP (DT the) (NN child) ('' '')))
    (: ...)))

cc(spoil-8, or-2)
nsubj(spoil-8, spare-4)
det(rod-6, the-5)
dep(spare-4, rod-6)
root(ROOT-0, spoil-8)
det(child-10, the-9)
dobj(spoil-8, child-10)

(ROOT
  (S ('' '')
    (S
      (S
        (VP (VBG Beating)
          (NP (PRP$ your) (NNS children))))
      (VP (VBZ is)))
    (RB somewhat)
    (S
      (NP (NN frowned))
      (VP (VBD upon)
        (NP (DT these) (NNS days))))
    (. .)))

csubj(is-5, Beating-2)
poss(children-4, your-3)
dobj(Beating-2, children-4)
root(ROOT-0, is-5)
advmod(is-5, somewhat-6)
nsubj(upon-8, frowned-7)
ccomp(is-5, upon-8)
det(days-10, these-9)
tmod(upon-8, days-10)

(ROOT
  (S ('' '')
    (NP (RB So) (PRP you))
    (VP (VBP feel)
      (SBAR (IN that)
        (S
          (NP
            (NP (DT a) (NNP God))
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (MD can)
                  (VP (VB create)
                    (NP (DT the) (NN universe))
                    (ADVP (RB somehow)))))))
          (VP (MD ca) (RB n't)
            (VP (VB create)
              (NP (NN light))
              (PP (IN without)
                (NP (DT the) (NNP Sun))))))))
    (. ?)))

advmod(you-3, So-2)
nsubj(feel-4, you-3)
root(ROOT-0, feel-4)
complm(create-16, that-5)
det(God-7, a-6)
nsubj(create-10, God-7)
nsubj(create-16, God-7)
aux(create-10, can-9)
rcmod(God-7, create-10)
det(universe-12, the-11)
dobj(create-10, universe-12)
advmod(create-10, somehow-13)
aux(create-16, ca-14)
neg(create-16, n't-15)
ccomp(feel-4, create-16)
dobj(create-16, light-17)
det(Sun-20, the-19)
prep_without(create-16, Sun-20)

(ROOT
  (S
    (S
      (VP
        (ADVP (RB Indeed))
        (VBG creating)
        (NP (PRP them))
        (PP (IN without)
          (NP (RB enough)))))
    (VP (VBP willpower)
      (S
        (VP (TO to)
          (VP (VB do)
            (ADVP (RB so))))))
    (. ?)))

advmod(creating-2, Indeed-1)
csubj(willpower-6, creating-2)
dobj(creating-2, them-3)
prep(creating-2, without-4)
pobj(without-4, enough-5)
root(ROOT-0, willpower-6)
aux(do-8, to-7)
xcomp(willpower-6, do-8)
advmod(do-8, so-9)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (ADJP (RB pretty) (JJ sure)
        (SBAR
          (S
            (NP (PRP YOU))
            (VP (MD can)
              (ADVP (RB even))
              (VP (VB create)
                (NP (NN light))
                (PP (IN without)
                  (NP
                    (NP (DT the) (NNP Sun))
                    (PP (IN in)
                      (NP (JJ many) (NNS ways)))))
                (ADVP (RB even))))))))
    (. .)))

nsubj(sure-4, I-1)
cop(sure-4, 'm-2)
advmod(sure-4, pretty-3)
root(ROOT-0, sure-4)
nsubj(create-8, YOU-5)
aux(create-8, can-6)
advmod(create-8, even-7)
dep(sure-4, create-8)
dobj(create-8, light-9)
det(Sun-12, the-11)
prep_without(create-8, Sun-12)
amod(ways-15, many-14)
prep_in(Sun-12, ways-15)
advmod(create-8, even-16)

(ROOT
  (S ('' '')
    (NP (WP What))
    (ADVP (RB about))
    (NP
      (NP (DT those))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBP do) (RB n't)))))
    (VP (VBP believe)
      (PP (IN in)
        (NP (DT the) (NNP Christian) (NNP God))))
    (. ?)))

nsubj(believe-8, What-2)
advmod(believe-8, about-3)
nsubj(do-6, those-4)
nsubj(believe-8, those-4)
rcmod(those-4, do-6)
neg(do-6, n't-7)
root(ROOT-0, believe-8)
det(God-12, the-10)
nn(God-12, Christian-11)
prep_in(believe-8, God-12)

(ROOT
  (FRAG (CC Or)
    (RB even)
    (PP (IN before)
      (NP (DT that))
      (: ...))))

dep(even-2, Or-1)
root(ROOT-0, even-2)
dep(even-2, before-3)
pobj(before-3, that-4)

(ROOT
  (S
    (S
      (NP (NNP God))
      (VP
        (VP (VBD created)
          (NP (NNP Adam)))
        (CC and)
        (VP (VBD saw)
          (SBAR (IN that)
            (S
              (NP (PRP he))
              (VP (VBD was)
                (ADJP (JJ lonely))))))))
    (: ...)
    (S (CC but)
      (NP (NNP God))
      (ADVP (RB already))
      (VP (VBD knew)
        (SBAR (IN that)
          (S
            (NP (NNP Adam))
            (VP (VBD was)
              (VP (VBG going)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (ADJP (JJ lonely)))))))))))
    (. .)))

nsubj(created-2, God-1)
nsubj(saw-5, God-1)
root(ROOT-0, created-2)
dobj(created-2, Adam-3)
conj_and(created-2, saw-5)
complm(lonely-9, that-6)
nsubj(lonely-9, he-7)
cop(lonely-9, was-8)
ccomp(saw-5, lonely-9)
cc(knew-14, but-11)
nsubj(knew-14, God-12)
advmod(knew-14, already-13)
parataxis(created-2, knew-14)
complm(going-18, that-15)
nsubj(going-18, Adam-16)
xsubj(lonely-21, Adam-16)
aux(going-18, was-17)
ccomp(knew-14, going-18)
aux(lonely-21, to-19)
cop(lonely-21, be-20)
xcomp(going-18, lonely-21)

(ROOT
  (S
    (INTJ (WRB Why))
    (VP
      (VP (VB create)
        (NP (NNP Adam)))
      (, ,)
      (VP (VB wait)
        (SBAR (IN for)
          (S
            (NP (PRP him))
            (VP (TO to)
              (VP (VB get)
                (ADJP (JJ lonely)))))))
      (, ,)
      (VP
        (ADVP (RB then))
        (VB create)
        (NP (NNP Eve))))
    (. ?)))

dep(create-2, Why-1)
root(ROOT-0, create-2)
dobj(create-2, Adam-3)
dep(create-2, wait-5)
mark(lonely-10, for-6)
nsubj(lonely-10, him-7)
aux(lonely-10, to-8)
dep(lonely-10, get-9)
advcl(wait-5, lonely-10)
xcomp(wait-5, lonely-10)
advmod(create-13, then-12)
dep(create-2, create-13)
dobj(create-13, Eve-14)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBP take)
          (NP (PDT both) (DT the) (NN Bible))
          (PP (IN as)
            (NP
              (NP (DT the) (JJ literal) (NN truth))
              (, ,)
              (CC and)
              (NP (DT the) (NN view))))
          (SBAR (IN that)
            (S
              (NP (NNP God))
              (VP (VBZ is)
                (ADJP (JJ omniscient))))))))
    (, ,)
    (NP (RB then) (WDT that))
    (VP (VBZ means)
      (SBAR
        (SBAR (IN that)
          (S
            (NP (NNP God))
            (ADVP (RB deliberately))
            (VP (VBD created)
              (NP (DT an)
                (ADJP (JJ imperfect))
                (NN mankind)))))
        (: ...)
        (CC and)
        (SBAR (IN if)
          (S
            (NP (PRP we))
            (ADVP (RB further))
            (VP (VBP take)
              (SBAR (IN that)
                (S
                  (NP (NNP God))
                  (VP (VBZ is)
                    (ADJP (JJ omnipotent))
                    (ADVP (RB then))
                    (SBAR (IN that)
                      (S
                        (VP (VBZ means)
                          (SBAR (IN that)
                            (S
                              (NP (NNP God))
                              (VP (VBD created)
                                (NP (DT an)
                                  (ADJP (JJ imperfect))
                                  (NN mankind))
                                (SBAR (RB even) (IN though)
                                  (S
                                    (NP (DT a) (JJ perfect) (NN mankind))
                                    (VP (MD could)
                                      (VP (VB be)
                                        (VP (VBN created))))))))))))))))))))
    (. .)))

mark(take-3, If-1)
nsubj(take-3, we-2)
advcl(means-22, take-3)
predet(Bible-6, both-4)
det(Bible-6, the-5)
dobj(take-3, Bible-6)
det(truth-10, the-8)
amod(truth-10, literal-9)
prep_as(take-3, truth-10)
det(view-14, the-13)
prep_as(take-3, view-14)
conj_and(truth-10, view-14)
complm(omniscient-18, that-15)
nsubj(omniscient-18, God-16)
cop(omniscient-18, is-17)
ccomp(take-3, omniscient-18)
advmod(that-21, then-20)
nsubj(means-22, that-21)
root(ROOT-0, means-22)
complm(created-26, that-23)
nsubj(created-26, God-24)
advmod(created-26, deliberately-25)
ccomp(means-22, created-26)
det(mankind-29, an-27)
amod(mankind-29, imperfect-28)
dobj(created-26, mankind-29)
mark(take-35, if-32)
nsubj(take-35, we-33)
advmod(take-35, further-34)
ccomp(means-22, take-35)
conj_and(created-26, take-35)
complm(omnipotent-39, that-36)
nsubj(omnipotent-39, God-37)
cop(omnipotent-39, is-38)
ccomp(take-35, omnipotent-39)
advmod(omnipotent-39, then-40)
complm(means-42, that-41)
ccomp(omnipotent-39, means-42)
complm(created-45, that-43)
nsubj(created-45, God-44)
ccomp(means-42, created-45)
det(mankind-48, an-46)
amod(mankind-48, imperfect-47)
dobj(created-45, mankind-48)
advmod(created-56, even-49)
dep(created-56, though-50)
det(mankind-53, a-51)
amod(mankind-53, perfect-52)
nsubjpass(created-56, mankind-53)
aux(created-56, could-54)
auxpass(created-56, be-55)
dep(created-45, created-56)

(ROOT
  (S ('' '')
    (NP (DT Some))
    (ADVP (IN of) (DT the))
    (VP (VBD translations)
      (SBAR
        (S
          (NP (PRP I))
          (VP (MD would) (RB n't)
            (VP (VB recommend)))))
      (. .))
    (. .)))

nsubj(translations-5, Some-2)
advmod(translations-5, of-3)
dep(of-3, the-4)
root(ROOT-0, translations-5)
nsubj(recommend-9, I-6)
aux(recommend-9, would-7)
neg(recommend-9, n't-8)
ccomp(translations-5, recommend-9)

(ROOT
  (S
    (NP (PRP they))
    (VP (VBP are)
      (PP (IN in)
        (NP
          (NP (PRP$ my) (NN opinion))
          (X
            (ADVP (RB clearly))
            (NP (JJ inferior) (NNS versions))
            (. .)))))
    (. .)))

nsubj(are-2, they-1)
root(ROOT-0, are-2)
poss(opinion-5, my-4)
prep_in(are-2, opinion-5)
dep(versions-8, clearly-6)
amod(versions-8, inferior-7)
dep(opinion-5, versions-8)

(ROOT
  (S ('' '')
    (NP (WP What))
    (VP (VBZ makes)
      (S
        (NP (DT those) (NNS translations))
        (ADJP (JJ inferior))))
    (. ?)))

nsubj(makes-3, What-2)
root(ROOT-0, makes-3)
det(translations-5, those-4)
nsubj(inferior-6, translations-5)
xcomp(makes-3, inferior-6)

