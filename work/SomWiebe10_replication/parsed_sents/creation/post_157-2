(ROOT
  (S
    (S
      (VP (VB Let)
        (S
          (NP (POS 's))
          (VP (VB look)
            (PP (IN at)
              (NP
                (NP (DT the) (NN argument))
                (PP (IN in)
                  (NP (JJR more) (NN detail)))))))))
    (: :) (: --)
    (S
      (PP (IN In)
        (NP
          (NP (DT all)
            (ADJP (RB irreducibly) (JJ complex))
            (NNS systems))
          (SBAR
            (WHPP (IN in)
              (WHNP (WDT which)))
            (S
              (NP
                (NP (DT the) (NN cause))
                (PP (IN of)
                  (NP (DT the) (NN system))))
              (VP (VBZ is)
                (VP (VBN known)
                  (PP (IN by)
                    (NP (NN experience)
                      (CC or)
                      (NN observation)))))))))
      (, ,)
      (NP
        (NP (JJ intelligent) (NN design))
        (CC or)
        (NP (NN engineering)))
      (VP (VBD played)
        (NP
          (NP (DT a) (NN role))
          (PRN (-LRB- -LRB-)
            (PP (IN in))
            (-RRB- -RRB-)))
        (NP
          (NP (DT the) (NN origin))
          (PP (IN of)
            (NP (DT the) (NN system))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(look-3, 's-2)
ccomp(Let-1, look-3)
det(argument-6, the-5)
prep_at(look-3, argument-6)
amod(detail-9, more-8)
prep_in(argument-6, detail-9)
det(systems-16, all-13)
advmod(complex-15, irreducibly-14)
amod(systems-16, complex-15)
prep_in(played-35, systems-16)
rel(known-25, which-18)
det(cause-20, the-19)
nsubjpass(known-25, cause-20)
det(system-23, the-22)
prep_of(cause-20, system-23)
auxpass(known-25, is-24)
rcmod(systems-16, known-25)
agent(known-25, experience-27)
agent(known-25, observation-29)
conj_or(experience-27, observation-29)
amod(design-32, intelligent-31)
nsubj(played-35, design-32)
conj_or(design-32, engineering-34)
nsubj(played-35, engineering-34)
parataxis(Let-1, played-35)
det(role-37, a-36)
iobj(played-35, role-37)
dep(role-37, in-39)
det(origin-42, the-41)
dobj(played-35, origin-42)
det(system-45, the-44)
prep_of(origin-42, system-45)

(ROOT
  (S
    (ADVP (RB Now))
    (VP (VB remember)
      (SBAR
        (SBAR (IN that)
          (S
            (NP (NN complexity))
            (VP (VBZ refers)
              (PP (TO to)
                (NP (PRP$ our) (NN absence)
                  (S
                    (VP (TO to)
                      (VP (VB understand)
                        (SBAR
                          (WHADVP (WRB how))
                          (S
                            (VP (TO to)
                              (VP (VB explain)
                                (NP (NN something))))))))))))))
        (, ,)
        (CC and)
        (SBAR (IN that)
          (S
            (NP (DT the) (NN statement))
            (ADVP (RB basically))
            (VP (VBZ states)
              (SBAR (IN that) (`` ``)
                (S
                  (SBAR
                    (WHADVP (WRB when))
                    (S
                      (S
                        (NP (PRP we))
                        (VP (VBP do) (RB not)
                          (VP (VB understand)
                            (NP (NN something)))))
                      ('' '')
                      (CC and)
                      (S
                        (NP (PRP it))
                        (VP (VBZ is) (`` ``)
                          (ADJP (JJ irreducible))
                          ('' '')))))
                  (ADVP (RB then))
                  (NP (PRP it))
                  (VP (MD must)
                    (VP (VB be)
                      (VP (VBN designed)))))))))))
    (. .)))

advmod(remember-2, Now-1)
root(ROOT-0, remember-2)
complm(refers-5, that-3)
nsubj(refers-5, complexity-4)
ccomp(remember-2, refers-5)
poss(absence-8, our-7)
prep_to(refers-5, absence-8)
aux(understand-10, to-9)
infmod(absence-8, understand-10)
advmod(explain-13, how-11)
aux(explain-13, to-12)
ccomp(understand-10, explain-13)
xcomp(understand-10, explain-13)
dobj(explain-13, something-14)
complm(states-21, that-17)
det(statement-19, the-18)
nsubj(states-21, statement-19)
advmod(states-21, basically-20)
ccomp(remember-2, states-21)
conj_and(refers-5, states-21)
complm(designed-41, that-22)
advmod(understand-28, when-24)
nsubj(understand-28, we-25)
aux(understand-28, do-26)
neg(understand-28, not-27)
advcl(designed-41, understand-28)
dobj(understand-28, something-29)
nsubj(irreducible-35, it-32)
cop(irreducible-35, is-33)
conj_and(understand-28, irreducible-35)
advcl(designed-41, irreducible-35)
advmod(designed-41, then-37)
nsubjpass(designed-41, it-38)
aux(designed-41, must-39)
auxpass(designed-41, be-40)
ccomp(states-21, designed-41)

