(ROOT
  (S (: --)
    (NP
      (NP (JJ JoeThe) (NN design) (NN inference))
      (VP (VBN reached)
        (PP (VBN based)
          (PP (IN on)
            (NP
              (NP (PRP$ our) (NN knowledge))
              (PP (IN of)
                (SBAR
                  (WHNP (WP what))
                  (S
                    (NP (NN nature))
                    (, ,)
                    (S
                      (VP (VBG operating)
                        (ADVP (RB freely))
                        (NP
                          (NP (NN can))
                          (CC &)
                          (S
                            (VP (MD can) (RB not)
                              (VP (VB do)))))))
                    (, ,)
                    (VP (VBN coupled)
                      (PP (IN with)
                        (NP
                          (NP (PRP$ our) (NN knowledge))
                          (PP (IN of)
                            (SBAR
                              (WHNP (WP what))
                              (S
                                (VP (VBG designing)
                                  (NP (NNS agencies)))))))))))))))))
    (VP (MD can)
      (VP (VB do)))
    (. .)))

amod(inference-4, JoeThe-2)
nn(inference-4, design-3)
nsubj(do-31, inference-4)
partmod(inference-4, reached-5)
prepc_based_on(reached-5, on-7)
poss(knowledge-9, our-8)
pobj(reached-5, knowledge-9)
dobj(coupled-22, what-11)
nsubj(coupled-22, nature-12)
partmod(coupled-22, operating-14)
advmod(operating-14, freely-15)
dobj(operating-14, can-16)
aux(do-20, can-18)
neg(do-20, not-19)
dobj(operating-14, do-20)
conj_and(can-16, do-20)
prepc_of(knowledge-9, coupled-22)
poss(knowledge-25, our-24)
prep_with(coupled-22, knowledge-25)
nsubj(designing-28, what-27)
prepc_of(knowledge-25, designing-28)
dobj(designing-28, agencies-29)
aux(do-31, can-30)
root(ROOT-0, do-31)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP do) (RB not)
      (VP (VB know)
        (SBAR (IN that)
          (S
            (S
              (VP (VBG designing)
                (NP (NNS agencies))))
            (VP (MD can)
              (VP (VB design)
                (NP
                  (NP (DT a) (NN genome))
                  (CC or)
                  (NP (DT a) (NN flagella)))))))))
    (. .)))

nsubj(know-4, We-1)
aux(know-4, do-2)
neg(know-4, not-3)
root(ROOT-0, know-4)
complm(design-9, that-5)
csubj(design-9, designing-6)
dobj(designing-6, agencies-7)
aux(design-9, can-8)
ccomp(know-4, design-9)
det(genome-11, a-10)
dobj(design-9, genome-11)
det(flagella-14, a-13)
dobj(design-9, flagella-14)
conj_or(genome-11, flagella-14)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP (DT no)
        (ADJP (JJ inference)
          (PP (TO to)
            (ADJP (JJS best))))
        (NN explanation)))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(explanation-7, no-3)
amod(explanation-7, inference-4)
prep_to(inference-4, best-6)
nsubj(is-2, explanation-7)

(ROOT
  (S
    (S
      (NP (DT The) (NN design) (NN infernence))
      (VP (VBZ is)
        (ADVP (RB alo))
        (RB not)
        (ADJP (JJ disallowed))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (SBAR (RB just) (IN that)
        (S
          (NP (PRP it))
          (VP (MD can) (RB not)
            (VP (VB compete)
              (PP (IN with)
                (NP (DT the) (`` ``)
                  (S
                    (NP (PRP we))
                    (VP (VBP do) (RB n't)
                      (VP (VB know))))
                  ('' '') (NN explanation)))
              (SBAR (IN as)
                (S
                  (NP (PRP it))
                  (VP (VBZ fails)
                    (S
                      (VP (TO to)
                        (VP (VB add)
                          (NP (NN anything)))))))))))))
    (. .)))

det(infernence-3, The-1)
nn(infernence-3, design-2)
nsubj(disallowed-7, infernence-3)
cop(disallowed-7, is-4)
advmod(disallowed-7, alo-5)
neg(disallowed-7, not-6)
ccomp('s-10, disallowed-7)
nsubj('s-10, it-9)
root(ROOT-0, 's-10)
advmod(compete-16, just-11)
dep(compete-16, that-12)
nsubj(compete-16, it-13)
aux(compete-16, can-14)
neg(compete-16, not-15)
ccomp('s-10, compete-16)
det(explanation-25, the-18)
nsubj(know-23, we-20)
aux(know-23, do-21)
neg(know-23, n't-22)
dep(explanation-25, know-23)
prep_with(compete-16, explanation-25)
mark(fails-28, as-26)
nsubj(fails-28, it-27)
xsubj(add-30, it-27)
advcl(compete-16, fails-28)
aux(add-30, to-29)
xcomp(fails-28, add-30)
dobj(add-30, anything-31)

(ROOT
  (S
    (VP (VB SImple)
      (ADVP (RB really)))))

root(ROOT-0, SImple-1)
advmod(SImple-1, really-2)

