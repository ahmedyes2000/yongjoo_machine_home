(ROOT
  (S (IN So)
    (SBAR (IN if)
      (S
        (NP (PRP we))
        (VP (MD can) (RB not)
          (VP (VB constrain)
            (NP (DT the) (NN explanation))))))
    (, ,)
    (NP (NNP ID))
    (VP (MD can) (RB not)
      (ADVP (RB even))
      (VP (VB venture)
        (S
          (VP (TO to)
            (VP (VB compete)
              (PP (IN with)
                (NP
                  (NP (PRP$ our) (NN ignorance))
                  (, ,)
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBZ is)
                        (ADVP (RB basically))
                        (NP
                          (NP (DT the) (NN position))
                          (SBAR
                            (WHADVP (WRB when))
                            (S
                              (NP (DT all))
                              (VP (VBN known)
                                (NP
                                  (NP (NNS processes))
                                  (PP (IN of)
                                    (NP
                                      (NP
                                        (NP (NN chance))
                                        (ADVP (CC or)))
                                      (PRN (-LRB- -LRB-)
                                        (NP (NNP and) (. ?))
                                        (-RRB- -RRB-)))))))))))))))))))))

dep(venture-14, So-1)
mark(constrain-6, if-2)
nsubj(constrain-6, we-3)
aux(constrain-6, can-4)
neg(constrain-6, not-5)
advcl(venture-14, constrain-6)
det(explanation-8, the-7)
dobj(constrain-6, explanation-8)
nsubj(venture-14, ID-10)
xsubj(compete-16, ID-10)
aux(venture-14, can-11)
neg(venture-14, not-12)
advmod(venture-14, even-13)
root(ROOT-0, venture-14)
aux(compete-16, to-15)
xcomp(venture-14, compete-16)
poss(ignorance-19, our-18)
prep_with(compete-16, ignorance-19)
nsubj(position-25, ignorance-19)
cop(position-25, is-22)
advmod(position-25, basically-23)
det(position-25, the-24)
rcmod(ignorance-19, position-25)
tmod(known-28, position-25)
advmod(known-28, when-26)
nsubj(known-28, all-27)
dep(position-25, known-28)
dobj(known-28, processes-29)
prep_of(processes-29, chance-31)
advmod(chance-31, or-32)
appos(chance-31, and-34)

