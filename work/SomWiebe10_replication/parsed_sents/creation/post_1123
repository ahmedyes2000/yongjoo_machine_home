(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBD were) (RB n't)
          (VP
            (ADVP (RB continually))
            (VBG evolving)))))
    (, ,)
    (NP
      (NP (JJS most))
      (PP (IN of)
        (NP (PRP us))))
    (VP (MD would) (RB n't)
      (VP (VB be)
        (VP (VBN offended)
          (PP (IN by)
            (NP
              (NP (DT the) (NN way))
              (SBAR
                (S
                  (NP (DT the) (NN rest))
                  (VP (VBP are)
                    (VP (VBG degenerating))))))))))
    (. .)))

mark(evolving-6, If-1)
nsubj(evolving-6, we-2)
aux(evolving-6, were-3)
neg(evolving-6, n't-4)
advmod(evolving-6, continually-5)
advcl(offended-14, evolving-6)
nsubjpass(offended-14, most-8)
prep_of(most-8, us-10)
aux(offended-14, would-11)
neg(offended-14, n't-12)
auxpass(offended-14, be-13)
root(ROOT-0, offended-14)
det(way-17, the-16)
agent(offended-14, way-17)
dobj(degenerating-21, way-17)
det(rest-19, the-18)
nsubj(degenerating-21, rest-19)
aux(degenerating-21, are-20)
rcmod(way-17, degenerating-21)

(ROOT
  (FRAG (: \/)
    (VP (VBD -RRB-)
      (SBAR
        (S
          (SBAR
            (WHADVP (WRB When))
            (S
              (NP (EX there))
              (VP (VBP are)
                (NP
                  (NP (NNS people))
                  (VP (VBG going)
                    (PP (IN around)
                      (S
                        (VP
                          (VP (VBG beating)
                            (PRT (RP up))
                            (NP (DT the) (JJ elderly)))
                          (CC or)
                          (VP (VBG murdering)
                            (NP (DT each) (JJ other))
                            (PP (IN for)
                              (NP
                                (NP (DT the) (NN price))
                                (PP (IN of)
                                  (NP (DT a) (CD six) (NN pack))))))
                          (, ,)
                          (CC and)
                          (VP (VBG being)
                            (VP (VBN rewarded)
                              (CONJP (RB instead) (IN of))
                              (VBN punished)))))))))))
          (, ,)
          (NP (EX there))
          (VP (VBZ is)
            (NP (DT no) (NN place)
              (S
                (VP (TO to)
                  (VP (VB go)
                    (ADVP (IN than) (RB up))))))))))
    (. .)))

punct(is-33, \/-1)
advmod(are-5, When-3)
expl(are-5, there-4)
advcl(is-33, are-5)
nsubj(are-5, people-6)
partmod(people-6, going-7)
prepc_around(going-7, beating-9)
prt(beating-9, up-10)
det(elderly-12, the-11)
dobj(beating-9, elderly-12)
prepc_around(going-7, murdering-14)
conj_or(beating-9, murdering-14)
det(other-16, each-15)
dobj(murdering-14, other-16)
det(price-19, the-18)
prep_for(murdering-14, price-19)
det(pack-23, a-21)
num(pack-23, six-22)
prep_of(price-19, pack-23)
auxpass(rewarded-27, being-26)
prepc_around(going-7, rewarded-27)
conj_and(beating-9, rewarded-27)
conj_and(beating-9, punished-30)
conj_negcc(rewarded-27, punished-30)
expl(is-33, there-32)
root(ROOT-0, is-33)
det(place-35, no-34)
nsubj(is-33, place-35)
aux(go-37, to-36)
infmod(place-35, go-37)
advmod(go-37, than-38)
advmod(than-38, up-39)

(ROOT
  (S
    (S
      (VP (VBD \/) (-RRB- -RRB-)
        (NP
          (NP
            (ADVP (CC But))
            (DT that))
          (VP (NN might)))
        (ADVP (VB be))))
    (NP (WDT what))
    (VP (VBZ has)
      (S
        (VP (TO to)
          (VP (VB happen)
            (PP (IN in)
              (NP
                (NP (NN order))
                (PP (IN for)
                  (NP (NN mankind))))))))
      (S
        (VP (TO to)
          (VP (VB achieve)
            (NP
              (NP (DT the) (JJ next) (NN level))
              (PP (IN of)
                (NP (NN understanding))))))))
    (. .)))

dep(has-8, \/-1)
advmod(that-4, But-3)
dobj(\/-1, that-4)
dep(that-4, might-5)
advmod(\/-1, be-6)
nsubj(has-8, what-7)
xsubj(happen-10, what-7)
xsubj(achieve-16, what-7)
root(ROOT-0, has-8)
aux(happen-10, to-9)
xcomp(has-8, happen-10)
prep_in(happen-10, order-12)
prep_for(order-12, mankind-14)
aux(achieve-16, to-15)
xcomp(has-8, achieve-16)
det(level-19, the-17)
amod(level-19, next-18)
dobj(achieve-16, level-19)
prep_of(level-19, understanding-21)

