(ROOT
  (S (: ...)
    (NP (PRP we))
    (ADVP (RB absolutely))
    (VP (VBP exclude)
      (NP (JJ natural) (NN selection))
      (PP (IN as)
        (NP (DT a) (NN designer))))
    (. !)))

nsubj(exclude-4, we-2)
advmod(exclude-4, absolutely-3)
root(ROOT-0, exclude-4)
amod(selection-6, natural-5)
dobj(exclude-4, selection-6)
det(designer-9, a-8)
prep_as(exclude-4, designer-9)

(ROOT
  (S
    (NP (DT the) (JJ real) (NN trick))
    (VP (VBZ is)
      (VP (VBG convincing)
        (NP (DT the) (NN public))
        (SBAR (IN that)
          (S
            (NP (NN macro-evolution))
            (VP (VBZ is)
              (NP
                (NP (DT a) (JJ scientific) (NN fact))
                (SBAR
                  (WHADVP (WRB when))
                  (S
                    (NP (PRP it))
                    (VP (VBZ has)
                      (ADVP (RB never))
                      (VP (VBN been)
                        (VP (VBN observed)
                          (SBAR
                            (WHNP (WDT which))
                            (S
                              (VP (VBZ is)
                                (NP
                                  (NP (DT a) (NN requirement))
                                  (PP (IN for)
                                    (NP (NN science))))))))))))))))))
    (. .)))

det(trick-3, the-1)
amod(trick-3, real-2)
nsubj(convincing-5, trick-3)
aux(convincing-5, is-4)
root(ROOT-0, convincing-5)
det(public-7, the-6)
dobj(convincing-5, public-7)
complm(fact-13, that-8)
nsubj(fact-13, macro-evolution-9)
cop(fact-13, is-10)
det(fact-13, a-11)
amod(fact-13, scientific-12)
ccomp(convincing-5, fact-13)
tmod(observed-19, fact-13)
advmod(observed-19, when-14)
nsubjpass(observed-19, it-15)
aux(observed-19, has-16)
neg(observed-19, never-17)
auxpass(observed-19, been-18)
dep(fact-13, observed-19)
nsubj(requirement-23, which-20)
cop(requirement-23, is-21)
det(requirement-23, a-22)
ccomp(observed-19, requirement-23)
prep_for(requirement-23, science-25)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB know)
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (PRP you))
              (VP (VBP get)
                (NP (PRP$ your) (NN information))))))))
    (CC but)
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB know)
          (NP
            (NP (DT any) (NNP ID) (NNS people))
            (SBAR
              (WHNP (WP who))
              (S
                (VP (VBP include)
                  (ADJP (JJ non-ID))
                  (PP (IN as)
                    (NP
                      (NP (NN part))
                      (PP (IN of)
                        (NP (PRP$ their) (NN belief) (NN system))))))))))))
    (. .)))

nsubj(know-4, I-1)
aux(know-4, do-2)
neg(know-4, n't-3)
root(ROOT-0, know-4)
advmod(get-7, where-5)
nsubj(get-7, you-6)
advcl(know-4, get-7)
poss(information-9, your-8)
dobj(get-7, information-9)
nsubj(know-14, I-11)
aux(know-14, do-12)
neg(know-14, n't-13)
conj_but(know-4, know-14)
det(people-17, any-15)
nn(people-17, ID-16)
dobj(know-14, people-17)
nsubj(include-19, people-17)
rcmod(people-17, include-19)
acomp(include-19, non-ID-20)
prep_as(include-19, part-22)
poss(system-26, their-24)
nn(system-26, belief-25)
prep_of(part-22, system-26)

(ROOT
  (S
    (NP (NNS Lets))
    (VP (VBP do)
      (NP (DT this) (NN sir)))
    (. .)))

nsubj(do-2, Lets-1)
root(ROOT-0, do-2)
det(sir-4, this-3)
dobj(do-2, sir-4)

(ROOT
  (S
    (NP (NNS Lets))
    (VP (VBP bring)
      (NP (PRP it))
      (ADVP (RB home))
      (PP (TO to)
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (PRP we))
            (VP (VBP live))))))
    (. .)))

nsubj(bring-2, Lets-1)
root(ROOT-0, bring-2)
dobj(bring-2, it-3)
advmod(bring-2, home-4)
advmod(live-8, where-6)
nsubj(live-8, we-7)
prepc_to(bring-2, live-8)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (JJ human) (NN body))
        (VP (VBZ is) (RB not)
          (NP (DT an) (JJ intelligent) (NN design))
          (ADVP (RB then)))))
    (NP (PRP you))
    (VP (VBP tell)
      (NP
        (NP (PRP me))
        (SBAR
          (WHNP (WP what))
          (S
            (VP (VBZ is)
              (NP
                (NP (DT the) (NN definition))
                (PP (IN for)
                  (NP (DT an) (JJ intelligent) (NN design)))))))))
    (. .)))

mark(design-9, If-1)
det(body-4, the-2)
amod(body-4, human-3)
nsubj(design-9, body-4)
cop(design-9, is-5)
neg(design-9, not-6)
det(design-9, an-7)
amod(design-9, intelligent-8)
advcl(tell-12, design-9)
advmod(design-9, then-10)
nsubj(tell-12, you-11)
root(ROOT-0, tell-12)
dobj(tell-12, me-13)
nsubj(definition-17, me-13)
cop(definition-17, is-15)
det(definition-17, the-16)
rcmod(me-13, definition-17)
det(design-21, an-19)
amod(design-21, intelligent-20)
prep_for(definition-17, design-21)

(ROOT
  (SINV (`` ``)
    (FRAG (RB WHAT))
    ('' '')
    (VP (VBZ IS)
      (NP
        (NP (DT A) (NNP INTELLIGENT) (NNP DESIGN))
        (CC AND)
        (NP (`` ``) (JJ WHY) ('' '') (NNS IS))))
    (NP (JJ YOUR) (NNP EXAMPLE) (NNP AN) (NNP INTELLIGENT) (NNP DESIGN))
    (. ?)))

dep(DESIGN-7, WHAT-2)
cop(DESIGN-7, IS-4)
det(DESIGN-7, A-5)
nn(DESIGN-7, INTELLIGENT-6)
root(ROOT-0, DESIGN-7)
amod(IS-12, WHY-10)
conj_and(DESIGN-7, IS-12)
amod(DESIGN-17, YOUR-13)
nn(DESIGN-17, EXAMPLE-14)
nn(DESIGN-17, AN-15)
nn(DESIGN-17, INTELLIGENT-16)
nsubj(DESIGN-7, DESIGN-17)

(ROOT
  (S
    (NP (JJ simple) (NNS straight))
    (ADVP (RB forward))
    (VP (VBP question))
    (. .)))

amod(straight-2, simple-1)
nsubj(question-4, straight-2)
advmod(question-4, forward-3)
root(ROOT-0, question-4)

(ROOT
  (SBARQ
    (WHNP (WP what))
    (SQ
      (VP (VBZ is)
        (NP (PRP$ your) (JJ simple) (JJ straight) (JJ forward) (NN answer))))
    (. ?)))

nsubj(answer-7, what-1)
cop(answer-7, is-2)
poss(answer-7, your-3)
amod(answer-7, simple-4)
amod(answer-7, straight-5)
amod(answer-7, forward-6)
root(ROOT-0, answer-7)

(ROOT
  (S
    (VP (VB bet)
      (SBAR
        (S
          (NP (PRP you))
          (VP (MD ca) (RB n't)
            (VP (VB do)
              (NP (PRP it)))))))))

root(ROOT-0, bet-1)
nsubj(do-5, you-2)
aux(do-5, ca-3)
neg(do-5, n't-4)
ccomp(bet-1, do-5)
dobj(do-5, it-6)

