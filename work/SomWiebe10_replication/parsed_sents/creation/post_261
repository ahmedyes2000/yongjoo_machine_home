(ROOT
  (SQ
    (VP (`` ``) (VB Why) (RB not))
    (. ?)))

root(ROOT-0, Why-2)
neg(Why-2, not-3)

(ROOT
  (SBARQ
    (WHNP (WDT What) (NN qualities))
    (SQ (VBZ does)
      (NP (DT the) (NNS designers))
      (VP (VB have)
        (S
          (NP (DT that))
          (VP (VB make)
            (NP (PRP them))
            (PP (IN beyond)
              (NP (NN study)))))))
    (. ?)))

det(qualities-2, What-1)
dobj(have-6, qualities-2)
aux(have-6, does-3)
det(designers-5, the-4)
nsubj(have-6, designers-5)
root(ROOT-0, have-6)
nsubj(make-8, that-7)
ccomp(have-6, make-8)
dobj(make-8, them-9)
prep_beyond(make-8, study-11)

(ROOT
  (S (`` ``)
    (PP (IN Without)
      (NP
        (NP
          (NP (DT that))
          (RRC
            (ADVP (RB then))
            (NP
              (NP (DT the) (NN argument))
              (SBAR (IN that)
                (S
                  (NP (JJ random) (NN mutation))
                  (VP (MD can)
                    (ADVP (RB only))
                    (VP (VB go)
                      (ADVP
                        (ADVP (RB so) (RB far))
                        (, ,)
                        (CC but)
                        (ADVP (RB not) (RBR further))))))))))
        (PRN (-LRB- -LRB-)
          (SBAR
            (WHADVP (RB even) (WRB when))
            (S
              (VP (VBN given)
                (NP
                  (NP (DT an)
                    (ADJP
                      (ADVP (RB arbitrarily))
                      (JJ long))
                    (NN period))
                  (PP (IN of)
                    (NP (NN time)))))))
          (-RRB- -RRB-))))
    (, ,)
    (VP (VBZ is)
      (ADVP (RB still))
      (NP (DT a) (JJR better) (NN discription)))
    (. .)))

prep_without(discription-35, that-3)
advmod(argument-6, then-4)
det(argument-6, the-5)
rcmod(that-3, argument-6)
dobj(go-12, argument-6)
complm(go-12, that-7)
amod(mutation-9, random-8)
nsubj(go-12, mutation-9)
aux(go-12, can-10)
advmod(go-12, only-11)
dep(argument-6, go-12)
advmod(far-14, so-13)
advmod(go-12, far-14)
dep(further-18, not-17)
advmod(go-12, further-18)
conj_but(far-14, further-18)
advmod(when-21, even-20)
advmod(given-22, when-21)
dep(that-3, given-22)
det(period-26, an-23)
advmod(long-25, arbitrarily-24)
amod(period-26, long-25)
dobj(given-22, period-26)
prep_of(period-26, time-28)
cop(discription-35, is-31)
advmod(discription-35, still-32)
det(discription-35, a-33)
amod(discription-35, better-34)
root(ROOT-0, discription-35)

(ROOT
  (S ('' '')
    (NP (RB So))
    (VP (MD would)
      (NP (PRP you))
      (S
        (VP (VB say)
          (ADVP (RB then))
          (SBAR (IN that)
            (S
              (S
                (VP (VBG sticking)
                  (PP (IN with)
                    (NP (DT the) (NN notion)))
                  (SBAR (IN that)
                    (S
                      (NP (NNP mutations) (NNP +) (NNS selections))
                      (VP (VBZ has)
                        (NP (PRP$ its) (NNS limits)))))))
              (VP (VBZ is)
                (NP
                  (NP (DT a) (JJR better) (NN theory))
                  (PP (IN than)
                    (S
                      (VP (VBG saying)
                        (NP
                          (NP (DT a) (NN guidance))
                          (PP (IN of)
                            (NP
                              (NP (DT some) (NN kind))
                              (VP (VBN brought)
                                (NP
                                  (NP (DT some) (NNS features))
                                  (PP (IN in)
                                    (NP (NN question))))
                                (PP (TO to)
                                  (NP (NN existence)))))))))))))))))
    (. ?)))

nsubj(would-3, So-2)
root(ROOT-0, would-3)
dobj(would-3, you-4)
dep(would-3, say-5)
advmod(say-5, then-6)
complm(theory-22, that-7)
csubj(theory-22, sticking-8)
det(notion-11, the-10)
prep_with(sticking-8, notion-11)
complm(has-16, that-12)
nn(selections-15, mutations-13)
nn(selections-15, +-14)
nsubj(has-16, selections-15)
ccomp(sticking-8, has-16)
poss(limits-18, its-17)
dobj(has-16, limits-18)
cop(theory-22, is-19)
det(theory-22, a-20)
amod(theory-22, better-21)
ccomp(say-5, theory-22)
prepc_than(theory-22, saying-24)
det(guidance-26, a-25)
dobj(saying-24, guidance-26)
det(kind-29, some-28)
prep_of(guidance-26, kind-29)
partmod(kind-29, brought-30)
det(features-32, some-31)
dobj(brought-30, features-32)
prep_in(features-32, question-34)
prep_to(brought-30, existence-36)

(ROOT
  (S (`` ``)
    (NP (PRP I))
    (VP (MD would)
      (VP (VB think)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (MD would)
              (VP (VB be)
                (PP (IN beyond)
                  (ADVP (RB maybe)))))))))
    (. .)))

nsubj(think-4, I-2)
aux(think-4, would-3)
root(ROOT-0, think-4)
complm(be-8, that-5)
nsubj(be-8, it-6)
aux(be-8, would-7)
ccomp(think-4, be-8)
prep(be-8, beyond-9)
pcomp(beyond-9, maybe-10)

(ROOT
  (S
    (S
      (VP (VBG Knowing)
        (NP
          (NP (DT the) (NN nature))
          (PP (IN of)
            (NP (DT the) (NNS designers))))))
    (VP (MD would)
      (VP (VB give)
        (NP
          (NP (DT a) (JJ huge) (NN amount))
          (PP (IN of)
            (NP (NN insight))))
        (PP (IN into)
          (SBAR
            (WHADVP (WRB why))
            (S
              (NP (PRP they))
              (VP (VBD were)
                (VP (VBG designing)
                  (NP (NN life))
                  (PP (IN on)
                    (NP (DT this) (NN planet))))))))))
    (. .)))

csubj(give-8, Knowing-1)
det(nature-3, the-2)
dobj(Knowing-1, nature-3)
det(designers-6, the-5)
prep_of(nature-3, designers-6)
aux(give-8, would-7)
root(ROOT-0, give-8)
det(amount-11, a-9)
amod(amount-11, huge-10)
dobj(give-8, amount-11)
prep_of(amount-11, insight-13)
advmod(designing-18, why-15)
nsubj(designing-18, they-16)
aux(designing-18, were-17)
prepc_into(give-8, designing-18)
dobj(designing-18, life-19)
det(planet-22, this-21)
prep_on(designing-18, planet-22)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP think)
      (S
        (NP (PRP we))
        (DT both)
        (VP (VB agree)
          (SBAR (IN that)
            (S
              (S
                (S
                  (NP (JJ such) (NN knowledge))
                  (VP (MD would)
                    (ADVP (IN in) (NN fact))
                    (VP (VB give)
                      (NP (PRP us))
                      (NP (JJ huge) (NN insight)))))
                (, ,)
                (CC but)
                (SQ (VBP are)
                  (NP (PRP you))))
              (S
                (ADVP (RB also))
                (VP (VBG saying)
                  (SBAR
                    (S
                      (NP (PRP it))
                      (VP (VBZ 's)
                        (ADJP (JJ NECESSARY)
                          (S
                            (VP (TO to)
                              (VP (VB know)
                                (NP
                                  (NP (DT the) (NN nature))
                                  (PP (IN of)
                                    (NP (DT the) (NN intellect))))
                                (SBAR (IN in) (NN order)
                                  (S
                                    (VP (TO to)
                                      (VP (VB identify)
                                        (NP
                                          (NP (NNS systems)
                                            (CC and)
                                            (NNS features))
                                          (ADJP (RB as) (VBN designed)))))))))))))))))))))
    (. ?)))

nsubj(think-3, I-2)
root(ROOT-0, think-3)
nsubj(agree-6, we-4)
dep(agree-6, both-5)
ccomp(think-3, agree-6)
complm(give-13, that-7)
amod(knowledge-9, such-8)
nsubj(give-13, knowledge-9)
aux(give-13, would-10)
advmod(give-13, in-11)
dep(in-11, fact-12)
ccomp(agree-6, give-13)
iobj(give-13, us-14)
amod(insight-16, huge-15)
dobj(give-13, insight-16)
ccomp(agree-6, are-19)
conj_but(give-13, are-19)
nsubj(are-19, you-20)
advmod(saying-22, also-21)
dep(give-13, saying-22)
nsubj(NECESSARY-25, it-23)
cop(NECESSARY-25, 's-24)
ccomp(saying-22, NECESSARY-25)
aux(know-27, to-26)
xcomp(NECESSARY-25, know-27)
det(nature-29, the-28)
dobj(know-27, nature-29)
det(intellect-32, the-31)
prep_of(nature-29, intellect-32)
mark(identify-36, in-33)
dep(identify-36, order-34)
aux(identify-36, to-35)
purpcl(know-27, identify-36)
dobj(identify-36, systems-37)
dobj(identify-36, features-39)
conj_and(systems-37, features-39)
advmod(designed-41, as-40)
amod(systems-37, designed-41)

(ROOT
  (S (`` ``)
    (S
      (VP (VBG Knowing)
        (NP (DT the) (NNS methods))))
    (VP (MD would)
      (VP (VB allow)
        (S
          (NP (PRP us))
          (VP (TO to)
            (VP (VB replicate)
              (NP (PRP them))
              (PP (IN in)
                (NP (DT the) (NN laboratory))))))))
    (. .)))

csubj(allow-6, Knowing-2)
det(methods-4, the-3)
dobj(Knowing-2, methods-4)
aux(allow-6, would-5)
root(ROOT-0, allow-6)
nsubj(replicate-9, us-7)
aux(replicate-9, to-8)
xcomp(allow-6, replicate-9)
dobj(replicate-9, them-10)
det(laboratory-13, the-12)
prep_in(replicate-9, laboratory-13)

(ROOT
  (S ('' '')
    (NP (NNP Would) (PRP you))
    (ADVP (RB then))
    (VP
      (VP (VBP say)
        (SBAR (IN that)
          (S
            (NP (NNP ID))
            (VP (VBZ is) (RB not)
              (NP (NN science))))))
      (CC or)
      (VP (VBZ is)
        (ADJP (JJ insufficient)
          (SBAR (IN because)
            (S
              (NP (PRP it))
              (VP (MD can) (RB not)
                (VP (VB be)
                  (VP (VBN replicated)
                    (CC or)
                    (VBN repeated)))))))))
    (. ?)))

nsubj(say-5, Would-2)
nsubj(insufficient-13, Would-2)
dep(Would-2, you-3)
advmod(say-5, then-4)
root(ROOT-0, say-5)
complm(science-10, that-6)
nsubj(science-10, ID-7)
cop(science-10, is-8)
neg(science-10, not-9)
ccomp(say-5, science-10)
cop(insufficient-13, is-12)
conj_or(say-5, insufficient-13)
mark(replicated-19, because-14)
nsubjpass(replicated-19, it-15)
nsubjpass(repeated-21, it-15)
aux(replicated-19, can-16)
neg(replicated-19, not-17)
auxpass(replicated-19, be-18)
ccomp(insufficient-13, replicated-19)
ccomp(insufficient-13, repeated-21)
conj_or(replicated-19, repeated-21)

(ROOT
  (S (`` ``)
    (S
      (NP (PRP We))
      (VP (MD could)
        (ADVP (RB also))
        (VP (VB go)
          (CC and)
          (VB meet)
          (NP (PRP them)))))
    (, ,)
    (NP (PRP I))
    (VP (VBP know)
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBP 've)
            (NP
              (NP (JJ several) (NNS complaints))
              (PP (IN on)
                (NP
                  (NP (DT this) (NN body))
                  (SBAR
                    (S
                      (NP (PRP they))
                      (VP (VBN designed)
                        (PP (IN for)
                          (NP (PRP me)))))))))
            (SBAR (IN that)
              (S
                (NP (PRP I))
                (VP (MD 'd)
                  (VP (VB like)
                    (S
                      (VP (TO to)
                        (VP (VB have)
                          (VP (VBN cleared)
                            (PRT (RP up))))))))))))))
    (. .)))

nsubj(go-5, We-2)
nsubj(meet-7, We-2)
aux(go-5, could-3)
advmod(go-5, also-4)
ccomp(know-11, go-5)
conj_and(go-5, meet-7)
ccomp(know-11, meet-7)
dobj(go-5, them-8)
nsubj(know-11, I-10)
root(ROOT-0, know-11)
nsubj('ve-13, I-12)
ccomp(know-11, 've-13)
amod(complaints-15, several-14)
dobj('ve-13, complaints-15)
det(body-18, this-17)
prep_on(complaints-15, body-18)
dobj(designed-20, body-18)
nsubj(designed-20, they-19)
rcmod(body-18, designed-20)
prep_for(designed-20, me-22)
complm(like-26, that-23)
nsubj(like-26, I-24)
xsubj(cleared-29, I-24)
aux(like-26, 'd-25)
ccomp('ve-13, like-26)
aux(cleared-29, to-27)
aux(cleared-29, have-28)
xcomp(like-26, cleared-29)
prt(cleared-29, up-30)

(ROOT
  (S ('' '')
    (PP (IN Yeah)
      (NP
        (NP (JJ same))
        (ADVP (RB here))))
    (, ,)
    (NP (RB much))
    (VP (VBP like)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP (PRP I))
          (VP (MD would)
            (VP (VB like)
              (S
                (VP (TO to)
                  (VP (VB complain)
                    (PP (TO to)
                      (NP (NNP GM)))
                    (PP (IN for)
                      (S
                        (VP (VBG giving)
                          (NP (PRP$ their) (NNS Hummers))
                          (NP
                            (NP (DT a) (NNP MPG))
                            (PP (IN of)
                              (NP
                                (NP
                                  (QP (RB only) (CD 10))
                                  (NNS miles))
                                (NP (DT a) (NN gallon))))))))))))))))
    (. .)))

prep_yeah(like-7, same-3)
advmod(same-3, here-4)
nsubj(like-7, much-6)
root(ROOT-0, like-7)
advmod(like-11, how-8)
nsubj(like-11, I-9)
xsubj(complain-13, I-9)
aux(like-11, would-10)
ccomp(like-7, like-11)
aux(complain-13, to-12)
xcomp(like-11, complain-13)
prep_to(complain-13, GM-15)
prepc_for(complain-13, giving-17)
poss(Hummers-19, their-18)
dep(giving-17, Hummers-19)
det(MPG-21, a-20)
dobj(giving-17, MPG-21)
quantmod(10-24, only-23)
num(miles-25, 10-24)
prep_of(MPG-21, miles-25)
det(gallon-27, a-26)
dep(miles-25, gallon-27)

(ROOT
  (S (`` ``)
    (S (RB Not)
      (VP (VBG being)
        (UCP
          (ADJP (JJ able))
          (TO to)
          (ADVP (RB directly)))))
    (VP (VBP observe)
      (NP (PRP it)))
    (. .)))

neg(able-4, Not-2)
cop(able-4, being-3)
csubj(observe-7, able-4)
dep(able-4, to-5)
advmod(able-4, directly-6)
root(ROOT-0, observe-7)
dobj(observe-7, it-8)

(ROOT
  (S
    (ADVP (RB Thus))
    (NP (NNS conclusions))
    (VP (VBP are)
      (ADVP (RB only))
      (VP (VBN drawn)
        (PP (VBN based)
          (PP (IN on)
            (NP
              (NP (JJ natural) (NNS features))
              (PP (IN in)
                (NP (NN question))))))))
    (. .)))

advmod(drawn-5, Thus-1)
nsubjpass(drawn-5, conclusions-2)
auxpass(drawn-5, are-3)
advmod(drawn-5, only-4)
root(ROOT-0, drawn-5)
prepc_based_on(drawn-5, on-7)
amod(features-9, natural-8)
pobj(drawn-5, features-9)
prep_in(features-9, question-11)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB see)
        (S
          (NP (PRP it))
          (NP (DT that) (NN way)))))
    (. .)))

nsubj(see-5, I-2)
aux(see-5, do-3)
neg(see-5, n't-4)
root(ROOT-0, see-5)
nsubj(way-8, it-6)
det(way-8, that-7)
xcomp(see-5, way-8)

(ROOT
  (S ('' '')
    (PP (IN Like)
      (NP
        (NP (PRP it))
        (CC or)
        (NP (RB not))))
    (, ,)
    (NP (DT that))
    (VP (VBZ 's)
      (NP
        (NP (DT the) (NN way))
        (SBAR
          (S
            (NP (NNP ID))
            (VP (VBZ works))))))
    (. .)))

prep_like(way-10, it-3)
conj_or(it-3, not-5)
prep_like(way-10, not-5)
nsubj(way-10, that-7)
cop(way-10, 's-8)
det(way-10, the-9)
root(ROOT-0, way-10)
dobj(works-12, way-10)
nsubj(works-12, ID-11)
rcmod(way-10, works-12)

(ROOT
  (S
    (NP (PRP It))
    (VP
      (VP (VBZ studies)
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP we))
            (VP (MD can)
              (VP (VB observe))))))
      (CC and)
      (VP (VBZ draws)
        (NP (NNS inferences))
        (PP (IN from)
          (NP (RB there)))))
    (. .)))

nsubj(studies-2, It-1)
nsubj(draws-8, It-1)
root(ROOT-0, studies-2)
dobj(observe-6, what-3)
nsubj(observe-6, we-4)
aux(observe-6, can-5)
ccomp(studies-2, observe-6)
conj_and(studies-2, draws-8)
dobj(draws-8, inferences-9)
prep(draws-8, from-10)
pobj(from-10, there-11)

(ROOT
  (S ('' '')
    (NP (DT A) (NN theory))
    (VP (VBD quantifying)
      (SBAR
        (S
          (NP
            (NP (DT the) (NNS designers))
            (, ,)
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (MD could)
                  (VP (VB be)
                    (VP (VBN used)
                      (S
                        (VP (TO to)
                          (VP (VB make)
                            (NP
                              (ADJP (JJ accurate))
                              (NNS predictions))
                            (PP (IN about)
                              (NP (PRP$ their) (JJ next) (NN action)))))))))))
            (, ,))
          (VP (MD would)
            (VP (VB solidify)
              (NP
                (NP (NNP ID))
                (PP (IN as)
                  (NP (DT a) (VBG working) (NN theory)))))))))
    (. .)))

det(theory-3, A-2)
nsubj(quantifying-4, theory-3)
root(ROOT-0, quantifying-4)
det(designers-6, the-5)
nsubjpass(used-11, designers-6)
nsubj(solidify-22, designers-6)
aux(used-11, could-9)
auxpass(used-11, be-10)
rcmod(designers-6, used-11)
aux(make-13, to-12)
xcomp(used-11, make-13)
amod(predictions-15, accurate-14)
dobj(make-13, predictions-15)
poss(action-19, their-17)
amod(action-19, next-18)
prep_about(make-13, action-19)
aux(solidify-22, would-21)
ccomp(quantifying-4, solidify-22)
dobj(solidify-22, ID-23)
det(theory-27, a-25)
amod(theory-27, working-26)
prep_as(ID-23, theory-27)

(ROOT
  (NP ('' '')
    (CC Define)
    (NP
      (NP (DT a) (`` ``) (VBG working))
      (VP (VBN theory)))
    (. .)))

cc(a-3, Define-2)
root(ROOT-0, a-3)
amod(a-3, working-5)
partmod(a-3, theory-6)

(ROOT
  (S ('' '')
    (S (CC And)
      (NP (PRP$ your) (JJ basic) (NN point))
      (VP (VBZ is)
        (SBAR (IN that) (IN unless)
          (S
            (NP (PRP we))
            (VP (MD can)
              (VP (VB see)
                (NP (DT the) (JJ telic) (NN force))
                (PP (IN in)
                  (NP (NN action)))))))))
    (RB then)
    (S
      (NP (PRP we))
      (VP (MD can) (RB not)
        (VP (VB determine)
          (SBAR (IN if)
            (S
              (NP (NN something))
              (VP (VBD was)
                (NP
                  (NP (DT the) (NN product))
                  (PP (IN of)
                    (NP (CD one) (NNS correct))))))))))
    (. ?)))

cc(is-6, And-2)
poss(point-5, your-3)
amod(point-5, basic-4)
nsubj(is-6, point-5)
root(ROOT-0, is-6)
complm(see-11, that-7)
dep(see-11, unless-8)
nsubj(see-11, we-9)
aux(see-11, can-10)
ccomp(is-6, see-11)
det(force-14, the-12)
amod(force-14, telic-13)
dobj(see-11, force-14)
prep_in(see-11, action-16)
advmod(is-6, then-17)
nsubj(determine-21, we-18)
aux(determine-21, can-19)
neg(determine-21, not-20)
ccomp(is-6, determine-21)
mark(product-26, if-22)
nsubj(product-26, something-23)
cop(product-26, was-24)
det(product-26, the-25)
advcl(determine-21, product-26)
num(correct-29, one-28)
prep_of(product-26, correct-29)

