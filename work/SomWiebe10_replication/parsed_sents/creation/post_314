(ROOT
  (S (`` ``)
    (NP
      (NP (DT The) (NN theory))
      (PP (IN of)
        (NP (JJ intelligent) (NN design))))
    (VP (VBZ holds)
      (SBAR (IN that)
        (S
          (NP
            (NP (JJ certain) (NNS features))
            (PP
              (PP (IN of)
                (NP (DT the) (NN universe)))
              (CC and)
              (PP (IN of)
                (NP (VBG living) (NNS things)))))
          (VP (VBP are)
            (VP (RBS best) (VBN explained)
              (PP (IN by)
                (NP (DT an) (JJ intelligent) (NN cause) ('' '') (NN Fine))))))))
    (. .)))

det(theory-3, The-2)
nsubj(holds-7, theory-3)
amod(design-6, intelligent-5)
prep_of(theory-3, design-6)
root(ROOT-0, holds-7)
complm(explained-20, that-8)
amod(features-10, certain-9)
nsubjpass(explained-20, features-10)
det(universe-13, the-12)
prep_of(features-10, universe-13)
amod(things-17, living-16)
prep_of(features-10, things-17)
conj_and(universe-13, things-17)
auxpass(explained-20, are-18)
advmod(explained-20, best-19)
ccomp(holds-7, explained-20)
det(Fine-26, an-22)
amod(Fine-26, intelligent-23)
nn(Fine-26, cause-24)
agent(explained-20, Fine-26)

(ROOT
  (S (CC And)
    (NP (DT that))
    (VP (VBZ 's)
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (DT this) (`` ``) (NN theory) ('' ''))
          (VP (VBZ is) (RB not)
            (NP (NN science))))))
    (. .)))

cc('s-3, And-1)
nsubj('s-3, that-2)
root(ROOT-0, 's-3)
advmod(science-11, why-4)
det(theory-7, this-5)
nsubj(science-11, theory-7)
cop(science-11, is-9)
neg(science-11, not-10)
advcl('s-3, science-11)

(ROOT
  (NP (DT A) (NN scientist) (. ?)))

det(scientist-2, A-1)
root(ROOT-0, scientist-2)

(ROOT
  (FRAG (CC Or)
    (NP (DT a) (NN theologian) (. ?))))

dep(theologian-3, Or-1)
det(theologian-3, a-2)
root(ROOT-0, theologian-3)

(ROOT
  (SBARQ
    (WHNP (WDT What) (NN criteria))
    (SQ
      (VP (MD will)
        (VP (VB be)
          (VP (VBN used)))))
    (. ?)))

det(criteria-2, What-1)
nsubjpass(used-5, criteria-2)
aux(used-5, will-3)
auxpass(used-5, be-4)
root(ROOT-0, used-5)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP know)
      (NP (PRP it))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (PRP I))
          (VP (VBP see)
            (NP (PRP it))))))
    (. ?)))

nsubj(know-2, I-1)
root(ROOT-0, know-2)
dobj(know-2, it-3)
advmod(see-6, when-4)
nsubj(see-6, I-5)
advcl(know-2, see-6)
dobj(see-6, it-7)

(ROOT
  (NP
    (NP (DT Some) (NN nonsense))
    (PP (IN about)
      (NP
        (NP (`` ``) (NN irreducible) (NN complexity) ('' ''))
        (CC or)
        (NP (`` ``) (JJ specified) (NN information) ('' ''))))
    (. ?)))

det(nonsense-2, Some-1)
root(ROOT-0, nonsense-2)
nn(complexity-6, irreducible-5)
prep_about(nonsense-2, complexity-6)
amod(information-11, specified-10)
prep_about(nonsense-2, information-11)
conj_or(complexity-6, information-11)

(ROOT
  (NP (FW LOL) (. .)))

root(ROOT-0, LOL-1)

(ROOT
  (S
    (NP (PRP$ Your) (`` ``) (NN intelligent) (NN cause) ('' ''))
    (VP (VBZ is)
      (ADJP (RB completely) (JJ undefined)))
    (. .)))

poss(cause-4, Your-1)
nn(cause-4, intelligent-3)
nsubj(undefined-8, cause-4)
cop(undefined-8, is-6)
advmod(undefined-8, completely-7)
root(ROOT-0, undefined-8)

(ROOT
  (S
    (NP
      (NP (PRP$ Its) (NNS powers))
      (, ,)
      (NP
        (NP (NNS limitations))
        (, ,)
        (NP (NN method))
        (, ,)
        (NP (NN time) (NN frame))
        (, ,) (FW etc.)))
    (VP (VBP are)
      (ADJP (RB completely) (JJ undefined)))
    (. .)))

poss(powers-2, Its-1)
nsubj(undefined-14, powers-2)
appos(powers-2, limitations-4)
appos(limitations-4, method-6)
nn(frame-9, time-8)
appos(limitations-4, frame-9)
dep(limitations-4, etc.-11)
cop(undefined-14, are-12)
advmod(undefined-14, completely-13)
root(ROOT-0, undefined-14)

(ROOT
  (SQ
    (VP (VB Are)
      (S
        (NP (PRP you))
        (VP (VBG going)
          (S
            (VP (TO to)
              (VP (VB make)
                (NP (`` ``) (NNS predictions) ('' '')))))))
      (PRN (-LRB- -LRB-)
        (ADVP (RB as)
          (PP (TO to)
            (SBAR
              (WHADVP (WRB where))
              (S
                (NP (NNP Tiktaalik))
                (VP (MD will)
                  (VP (VB be)
                    (VP (VBN found))))))))
        (-RRB- -RRB-)))
    (. ?)))

root(ROOT-0, Are-1)
nsubj(going-3, you-2)
xsubj(make-5, you-2)
dep(Are-1, going-3)
aux(make-5, to-4)
xcomp(going-3, make-5)
dobj(make-5, predictions-7)
advmod(found-16, where-12)
nsubjpass(found-16, Tiktaalik-13)
aux(found-16, will-14)
auxpass(found-16, be-15)
prepc_as_to(Are-1, found-16)

(ROOT
  (S (CC And)
    (, ,)
    (PP (IN of)
      (NP (NN course)))
    (, ,)
    (NP
      (NP (DT the) (`` ``) (NNS features) ('' ''))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP claim)
            (SBAR
              (S
                (NP (PRP you))
                (VP (VBP are)
                  (VP (VBG trying)
                    (S
                      (VP (TO to)
                        (VP (VB explain))))))))))))
    (VP (MD can)
      (VP (VB be)
        (VP
          (ADVP (RB easily))
          (VBN explained)
          (PP (IN by)
            (NP
              (ADJP (RB completely) (JJ natural))
              (NNS causes))))))
    (. .)))

cc(explained-20, And-1)
prep_of(explained-20, course-4)
det(features-8, the-6)
nsubjpass(explained-20, features-8)
nsubj(claim-11, you-10)
rcmod(features-8, claim-11)
nsubj(trying-14, you-12)
xsubj(explain-16, you-12)
aux(trying-14, are-13)
ccomp(claim-11, trying-14)
aux(explain-16, to-15)
xcomp(trying-14, explain-16)
aux(explained-20, can-17)
auxpass(explained-20, be-18)
advmod(explained-20, easily-19)
root(ROOT-0, explained-20)
advmod(natural-23, completely-22)
amod(causes-24, natural-23)
agent(explained-20, causes-24)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP are)
      (VP (VBG trying)
        (S
          (VP (TO to)
            (VP (VB prove)
              (NP (DT a) (JJ negative)))))))
    (. .)))

nsubj(trying-3, You-1)
xsubj(prove-5, You-1)
aux(trying-3, are-2)
root(ROOT-0, trying-3)
aux(prove-5, to-4)
xcomp(trying-3, prove-5)
det(negative-7, a-6)
dobj(prove-5, negative-7)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP wish)
      (S
        (VP (TO to)
          (VP (VB prove)
            (SBAR (IN that)
              (S
                (NP (NN evolution))
                (VP (MD can) (RB not)
                  (VP (VB explain)
                    (NP (DT this))))))))))
    (. .)))

nsubj(wish-2, You-1)
xsubj(prove-4, You-1)
root(ROOT-0, wish-2)
aux(prove-4, to-3)
xcomp(wish-2, prove-4)
complm(explain-9, that-5)
nsubj(explain-9, evolution-6)
aux(explain-9, can-7)
neg(explain-9, not-8)
ccomp(prove-4, explain-9)
dobj(explain-9, this-10)

(ROOT
  (NP (FW Fail) (. .)))

root(ROOT-0, Fail-1)

(ROOT
  (SBARQ (RB So) (, ,)
    (WHNP (WP who))
    (SQ
      (VP (VBZ is)
        (VP (VBG going)
          (S
            (VP (TO to)
              (VP (VB decide)
                (PP (IN on)
                  (NP
                    (NP (DT the) (`` ``) (JJS best))
                    (NP (NN explanation) ('' ''))))))))))
    (. ?)))

advmod(going-5, So-1)
nsubj(going-5, who-3)
aux(going-5, is-4)
root(ROOT-0, going-5)
aux(decide-7, to-6)
xcomp(going-5, decide-7)
det(best-11, the-9)
prep_on(decide-7, best-11)
dep(best-11, explanation-12)

