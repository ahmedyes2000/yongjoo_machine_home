(ROOT
  (S
    (NP (JJ Intelligent) (NN design))
    (VP (VBZ does)
      (VP (VB have)
        (NP (NN merit))))
    (. .)))

amod(design-2, Intelligent-1)
nsubj(have-4, design-2)
aux(have-4, does-3)
root(ROOT-0, have-4)
dobj(have-4, merit-5)

(ROOT
  (S
    (ADVP (RB However))
    (NP (PRP it))
    (ADVP (RB maybe))
    (VP (VBZ usefulto)
      (S
        (VP (VB use)
          (NP (JJR clearer) (NNS terms))
          (ADVP (RB then))
          (, ,)
          (NP (`` ``) (JJ intelligent) (NN design) ('' '')))))
    (. .)))

advmod(usefulto-4, However-1)
nsubj(usefulto-4, it-2)
advmod(usefulto-4, maybe-3)
root(ROOT-0, usefulto-4)
ccomp(usefulto-4, use-5)
amod(terms-7, clearer-6)
dobj(use-5, terms-7)
advmod(use-5, then-8)
amod(design-12, intelligent-11)
dobj(use-5, design-12)

(ROOT
  (FRAG
    (SBAR (IN Unless)
      (S
        (NP (PRP we))
        (VP (VBP view)
          (NP
            (NP (DT the) (NN environment))
            (PP (IN as)
              (NP (DT an) (JJ intelligent) (NN entity))))))
      (. .))
    (. .)))

mark(view-3, Unless-1)
nsubj(view-3, we-2)
root(ROOT-0, view-3)
det(environment-5, the-4)
dobj(view-3, environment-5)
det(entity-9, an-7)
amod(entity-9, intelligent-8)
prep_as(environment-5, entity-9)

(ROOT
  (S
    (SBAR (IN IF)
      (S
        (NP (JJ such) (NN change))
        (VP (VBD was)
          (VP (VBN forced)
            (PP (IN upon)
              (NP (DT a) (NN species)))
            (PP (IN by)
              (NP (JJ catastrophic) (NNS events)))))))
    (, ,)
    (NP (DT the) (NNS species))
    (VP (MD would)
      (VP (VB become)
        (ADJP (JJ extinct))))
    (: ;)
    (S
      (PP (IN before)
        (NP (JJ random) (NN mutation)))
      (, ,)
      (VP (MD could)
        (VP (VB find)
          (NP (DT the) (JJ correct) (NN body) (NNS designs))
          (, ,)
          (S
            (VP (TO to)
              (VP (VB allow)
                (NP (NN survival))))))))
    (. .)))

mark(forced-5, IF-1)
amod(change-3, such-2)
nsubjpass(forced-5, change-3)
auxpass(forced-5, was-4)
advcl(extinct-17, forced-5)
det(species-8, a-7)
prep_upon(forced-5, species-8)
amod(events-11, catastrophic-10)
agent(forced-5, events-11)
det(species-14, the-13)
nsubj(extinct-17, species-14)
aux(extinct-17, would-15)
cop(extinct-17, become-16)
root(ROOT-0, extinct-17)
amod(mutation-21, random-20)
prep_before(find-24, mutation-21)
aux(find-24, could-23)
parataxis(extinct-17, find-24)
det(designs-28, the-25)
amod(designs-28, correct-26)
nn(designs-28, body-27)
dobj(find-24, designs-28)
aux(allow-31, to-30)
xcomp(find-24, allow-31)
dobj(allow-31, survival-32)

(ROOT
  (S
    (NP
      (ADVP (RB So))
      (RB not) (RB only))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN survival))
        (PP (IN of)
          (NP (DT the) (JJ first) (NN life) (NN improbable))))
      (, ,)
      (PP (IN without)
        (NP (JJ pre-designed) (NN survival) (NNS mechanisms))))
    (. .)))

advmod(only-3, So-1)
neg(only-3, not-2)
nsubj(survival-6, only-3)
cop(survival-6, is-4)
det(survival-6, the-5)
root(ROOT-0, survival-6)
det(improbable-11, the-8)
amod(improbable-11, first-9)
nn(improbable-11, life-10)
prep_of(survival-6, improbable-11)
amod(mechanisms-16, pre-designed-14)
nn(mechanisms-16, survival-15)
prep_without(survival-6, mechanisms-16)

(ROOT
  (S
    (NP (NNP Life))
    (VP (VBD evolving)
      (NP (JJ drastic) (NN body) (NN plan) (NNS changes))
      (, ,)
      (S
        (VP (TO to)
          (VP (VB survive)
            (PP (IN in)
              (NP
                (ADJP (RB totally) (JJ different))
                (NNS environments)))))))
    (. .)))

nsubj(evolving-2, Life-1)
xsubj(survive-9, Life-1)
root(ROOT-0, evolving-2)
amod(changes-6, drastic-3)
nn(changes-6, body-4)
nn(changes-6, plan-5)
dobj(evolving-2, changes-6)
aux(survive-9, to-8)
xcomp(evolving-2, survive-9)
advmod(different-12, totally-11)
amod(environments-13, different-12)
prep_in(survive-9, environments-13)

(ROOT
  (S
    (VP (VBZ Is)
      (ADVP (RB also))
      (ADJP (JJ unlikely)
        (S
          (VP (TO to)
            (VP (VB have)
              (VP (VBN happened)))))))
    (. .)))

cop(unlikely-3, Is-1)
advmod(unlikely-3, also-2)
root(ROOT-0, unlikely-3)
aux(happened-6, to-4)
aux(happened-6, have-5)
xcomp(unlikely-3, happened-6)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB believe)
        (SBAR
          (S
            (NP (DT an) (JJ honest) (NN mind))
            (VP (MD could)
              (VP (VB conclude)
                (NP
                  (NP (DT this))
                  (VP (VBN happened)
                    (ADVP (RB incrementally))
                    (PP (IN over)
                      (NP
                        (NP (NNS eons))
                        (PP (IN of)
                          (NP (NN time)))))))))))))
    (. .)))

nsubj(believe-4, I-1)
aux(believe-4, do-2)
neg(believe-4, n't-3)
root(ROOT-0, believe-4)
det(mind-7, an-5)
amod(mind-7, honest-6)
nsubj(conclude-9, mind-7)
aux(conclude-9, could-8)
ccomp(believe-4, conclude-9)
dobj(conclude-9, this-10)
partmod(this-10, happened-11)
advmod(happened-11, incrementally-12)
prep_over(happened-11, eons-14)
prep_of(eons-14, time-16)

(ROOT
  (S
    (ADVP (DT No) (NN matter)
      (SBAR
        (WHNP
          (WHADJP (WRB how) (JJ much))
          (NN time))
        (S
          (VP (VBZ is)
            (ADJP (JJ involved))
            (, ,)
            (SBAR (IN because)
              (FRAG
                (WHPP (IN with)
                  (WHNP (WDT that) (NN idea)))))))))
    (, ,)
    (NP (PRP$ your))
    (ADVP (RB always))
    (VP (VB putting)
      (NP (DT the) (NN cart))
      (PP (IN before)
        (NP (DT the) (NN horse))))
    (. .)))

dep(matter-2, No-1)
advmod(putting-16, matter-2)
advmod(much-4, how-3)
amod(time-5, much-4)
nsubj(involved-7, time-5)
cop(involved-7, is-6)
dep(matter-2, involved-7)
mark(with-10, because-9)
advcl(involved-7, with-10)
det(idea-12, that-11)
pobj(with-10, idea-12)
nsubj(putting-16, your-14)
advmod(putting-16, always-15)
root(ROOT-0, putting-16)
det(cart-18, the-17)
dobj(putting-16, cart-18)
det(horse-21, the-20)
prep_before(putting-16, horse-21)

(ROOT
  (S
    (NP
      (NP (DT The) (NN designed))
      (PRN (-LRB- -LRB-)
        (NP (NN cart))
        (-RRB- -RRB-)))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN pulled)
          (PP (IN by)
            (NP
              (NP (DT the) (NN environment))
              (PRN (-LRB- -LRB-)
                (NP (NN horse))
                (-RRB- -RRB-)))))))
    (. .)))

det(designed-2, The-1)
nsubjpass(pulled-8, designed-2)
appos(designed-2, cart-4)
aux(pulled-8, can-6)
auxpass(pulled-8, be-7)
root(ROOT-0, pulled-8)
det(environment-11, the-10)
agent(pulled-8, environment-11)
appos(environment-11, horse-13)

(ROOT
  (S (CC But)
    (NP (DT a) (NN horsecannot))
    (VP (VBP build)
      (NP (DT a) (NN cart)))
    (. .)))

cc(build-4, But-1)
det(horsecannot-3, a-2)
nsubj(build-4, horsecannot-3)
root(ROOT-0, build-4)
det(cart-6, a-5)
dobj(build-4, cart-6)

(ROOT
  (S
    (NP (DT Neither))
    (VP (MD can)
      (NP (PRP it))
      (S
        (VP (VB change)
          (NP (DT a) (NN cart))
          (PP (IN into)
            (NP (DT a) (NN boat)
              (CC or)
              (NN airplane))))))
    (. .)))

nsubj(can-2, Neither-1)
root(ROOT-0, can-2)
dobj(can-2, it-3)
dep(can-2, change-4)
det(cart-6, a-5)
dobj(change-4, cart-6)
det(boat-9, a-8)
prep_into(change-4, boat-9)
prep_into(change-4, airplane-11)
conj_or(boat-9, airplane-11)

(ROOT
  (S (-LRB- -LRB-)
    (NP
      (NP (NNP Designed))
      (PP (IN with)
        (PP (IN for)
          (NP (NN knowledge))))
      (PP (IN of)
        (NP (NN purpose)))
      (-RRB- -RRB-))
    (, ,)
    (VP (VBZ is)
      (ADJP
        (ADJP (RB much) (JJR more))
        (PP (TO to)
          (NP (DT the) (NN point)))))
    (. .)))

nsubj(more-12, Designed-2)
prep(Designed-2, with-3)
pcomp(with-3, for-4)
prep_for(with-3, knowledge-5)
prep_of(Designed-2, purpose-7)
cop(more-12, is-10)
advmod(more-12, much-11)
root(ROOT-0, more-12)
det(point-15, the-14)
prep_to(more-12, point-15)

(ROOT
  (S
    (NP (DT The) (JJ mindless) (NN environment))
    (VP (MD ca) (RB n't)
      (VP (VB do)
        (NP (NN anything))
        (, ,)
        (PP (IN without)
          (NP (DT a) (JJ pre-designed) (NN mechanism)))))
    (. .)))

det(environment-3, The-1)
amod(environment-3, mindless-2)
nsubj(do-6, environment-3)
aux(do-6, ca-4)
neg(do-6, n't-5)
root(ROOT-0, do-6)
dobj(do-6, anything-7)
det(mechanism-12, a-10)
amod(mechanism-12, pre-designed-11)
prep_without(do-6, mechanism-12)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP do) (RB n't)
        (VP (VB see)
          (NP
            (NP (DT the) (NN environment))
            (VP (VBG incubating)
              (NP (JJ new) (NN life)))))))
    (, ,)
    (CC or)
    (S
      (ADVP (RB totally))
      (NP (JJ new) (NN body) (NNS plans))
      (NP (NN today)))
    (. .)))

nsubj(see-4, We-1)
aux(see-4, do-2)
neg(see-4, n't-3)
root(ROOT-0, see-4)
det(environment-6, the-5)
dobj(see-4, environment-6)
partmod(environment-6, incubating-7)
amod(life-9, new-8)
dobj(incubating-7, life-9)
advmod(today-16, totally-12)
amod(plans-15, new-13)
nn(plans-15, body-14)
dep(today-16, plans-15)
conj_or(see-4, today-16)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (MD would)
      (NP (PRP we))
      (VP (VB conclude)
        (NP
          (NP (PRP it))
          (VP
            (ADVP (RB only))
            (VBN happened)
            (PP (IN in)
              (NP (DT the) (NN past))))
          (: ;)
          (PP (IN in)
            (NP (DT a)
              (ADJP (RB even) (RBR more) (JJ hostel))
              (NN environment) (NN ?!))))))))

advmod(conclude-4, Why-1)
aux(conclude-4, would-2)
nsubj(conclude-4, we-3)
root(ROOT-0, conclude-4)
dobj(conclude-4, it-5)
advmod(happened-7, only-6)
partmod(it-5, happened-7)
det(past-10, the-9)
prep_in(happened-7, past-10)
det(?!-18, a-13)
advmod(hostel-16, even-14)
advmod(hostel-16, more-15)
amod(?!-18, hostel-16)
nn(?!-18, environment-17)
prep_in(it-5, ?!-18)

(ROOT
  (S
    (NP (NNP Macro) (NNP Evolution))
    (VP (VBZ is)
      (NP
        (NP (RB all) (RB about))
        (, ,)
        (NP
          (NP (NN problem))
          (VP (VBG solving)
            (NP (NNS mechanisms))
            (, ,)
            (S
              (ADVP (RB spontaneously))
              (VP (VBG generating)))))))
    (. .)))

nn(Evolution-2, Macro-1)
nsubj(about-5, Evolution-2)
cop(about-5, is-3)
advmod(about-5, all-4)
root(ROOT-0, about-5)
appos(about-5, problem-7)
partmod(problem-7, solving-8)
dobj(solving-8, mechanisms-9)
advmod(generating-12, spontaneously-11)
partmod(solving-8, generating-12)
xcomp(solving-8, generating-12)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP (JJ difficult) (, ,) (RB even) (JJ improbable)
        (S
          (VP (TO to)
            (VP (VB imagine)
              (SBAR
                (WHADVP (WRB how))
                (S
                  (NP (PDT such) (DT a) (NN process))
                  (VP (MD could)
                    (VP (VB happen)))))
              (: ;)
              (PP (IN without)
                (S
                  (VP (VBG being)
                    (NP (NN jump))))))))
        (SBAR
          (S
            (VP (VBD started))))))
    (. .)))

nsubj(improbable-6, It-1)
cop(improbable-6, is-2)
amod(improbable-6, difficult-3)
advmod(improbable-6, even-5)
root(ROOT-0, improbable-6)
aux(imagine-8, to-7)
xcomp(improbable-6, imagine-8)
advmod(happen-14, how-9)
predet(process-12, such-10)
det(process-12, a-11)
nsubj(happen-14, process-12)
aux(happen-14, could-13)
ccomp(imagine-8, happen-14)
cop(jump-18, being-17)
prepc_without(imagine-8, jump-18)
dep(improbable-6, started-19)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (PP (IN as)
        (NP
          (NP (JJ many) (JJ opposing) (NNS forces))
          (PP (IN in)
            (NP (DT the) (NN environment)))))
      (SBAR (IN as)
        (S
          (NP (EX there))
          (VP (VBP are)
            (ADJP (JJ beneficial))))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
amod(forces-6, many-4)
amod(forces-6, opposing-5)
prep_as(are-2, forces-6)
det(environment-9, the-8)
prep_in(forces-6, environment-9)
mark(are-12, as-10)
expl(are-12, there-11)
advcl(are-2, are-12)
acomp(are-12, beneficial-13)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB How))
      (S
        (VP (MD could))))
    (, ,)
    (NP
      (NP (JJ fragile))
      (, ,)
      (NP (JJ non-evolved) (NN life))
      (, ,))
    (VP (VBP survive)
      (PP (IN in)
        (NP (DT a) (JJ hostile) (NN environment))))
    (. ?)))

advmod(could-2, How-1)
dep(survive-9, could-2)
nsubj(survive-9, fragile-4)
amod(life-7, non-evolved-6)
appos(fragile-4, life-7)
root(ROOT-0, survive-9)
det(environment-13, a-11)
amod(environment-13, hostile-12)
prep_in(survive-9, environment-13)

(ROOT
  (S (RBR Further) (, ,)
    (NP (WDT what))
    (VP (MD would)
      (VP (VB cause)
        (S
          (NP (NNS successfuldesigns))
          (VP (TO to)
            (VP (VB leave)
              (NP
                (NP (CD one) (NN environment))
                (, ,)
                (PP (IN for)
                  (NP (DT a)
                    (ADJP (RB totally) (JJ alien))
                    (NNS environments)))))))))
    (. ?)))

advmod(cause-5, Further-1)
nsubj(cause-5, what-3)
aux(cause-5, would-4)
root(ROOT-0, cause-5)
nsubj(leave-8, successfuldesigns-6)
aux(leave-8, to-7)
xcomp(cause-5, leave-8)
num(environment-10, one-9)
dobj(leave-8, environment-10)
det(environments-16, a-13)
advmod(alien-15, totally-14)
amod(environments-16, alien-15)
prep_for(environment-10, environments-16)

(ROOT
  (S
    (NP (NNP Sea) (NN life))
    (ADVP (RB too))
    (VP (VB land)
      (NP (NN life)))
    (. .)))

nn(life-2, Sea-1)
nsubj(land-4, life-2)
advmod(land-4, too-3)
root(ROOT-0, land-4)
dobj(land-4, life-5)

(ROOT
  (S
    (NP (EX There))
    (VP (MD would)
      (VP (VB be)
        (NP
          (NP (NN nothing))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (MD would)
                (VP (VB lead)
                  (NP (DT a) (JJ successful) (NN species))
                  (, ,)
                  (S
                    (VP (TO to)
                      (VP
                        (VP (VB make)
                          (NP (PDT such) (DT a) (JJ drastic) (NN move))
                          (PP (IN from)
                            (NP (CD one) (NN environment)))
                          (PP (TO to)
                            (NP (DT a)
                              (ADJP (RB totally) (JJ alien))
                              (NN one))))
                        (, ,)
                        (CC and)
                        (VP (VB fill)
                          (NP (DT the) (NN earth)))))))))))))
    (. .)))

expl(nothing-4, There-1)
aux(nothing-4, would-2)
cop(nothing-4, be-3)
root(ROOT-0, nothing-4)
nsubj(lead-7, nothing-4)
aux(lead-7, would-6)
rcmod(nothing-4, lead-7)
det(species-10, a-8)
amod(species-10, successful-9)
dobj(lead-7, species-10)
aux(make-13, to-12)
xcomp(lead-7, make-13)
predet(move-17, such-14)
det(move-17, a-15)
amod(move-17, drastic-16)
dobj(make-13, move-17)
num(environment-20, one-19)
prep_from(make-13, environment-20)
det(one-25, a-22)
advmod(alien-24, totally-23)
amod(one-25, alien-24)
prep_to(make-13, one-25)
xcomp(lead-7, fill-28)
conj_and(make-13, fill-28)
det(earth-30, the-29)
dobj(fill-28, earth-30)

