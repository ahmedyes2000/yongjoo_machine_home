(ROOT
  (S ('' '')
    (PP (VBG None)
      (PP (IN of)
        (SBAR
          (WHNP (WDT which))
          (S
            (ADVP (RB even))
            (VP (VBP have)
              (NP (NN anything))
              (PP (TO to)))))))
    (VP (VBP do)
      (PP (IN with)
        (NP (NNP ID))))
    (. .)))

prep(do-9, None-2)
pcomp(None-2, of-3)
nsubj(have-6, which-4)
advmod(have-6, even-5)
prepc_of(None-2, have-6)
dobj(have-6, anything-7)
prep(have-6, to-8)
root(ROOT-0, do-9)
prep_with(do-9, ID-11)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD would)
      (VP (VB be)
        (PP (IN like)
          (S
            (VP (VBG saying)
              (SBAR
                (S
                  (NP (NNP Evolution))
                  (VP (VBZ has)
                    (NP
                      (NP (RB plenty))
                      (PP (IN of)
                        (NP (NNS holes))))))))))
        (SBAR (IN because)
          (S
            (NP (PRP it))
            (VP (MD can) (RB not)
              (VP (VB explain)
                (NP
                  (NP (DT the) (NN origin))
                  (PP (IN of)
                    (NP (NN matter))))))))))
    (. .)))

nsubj(be-3, It-1)
aux(be-3, would-2)
root(ROOT-0, be-3)
prepc_like(be-3, saying-5)
nsubj(has-7, Evolution-6)
ccomp(saying-5, has-7)
dobj(has-7, plenty-8)
prep_of(plenty-8, holes-10)
mark(explain-15, because-11)
nsubj(explain-15, it-12)
aux(explain-15, can-13)
neg(explain-15, not-14)
advcl(be-3, explain-15)
det(origin-17, the-16)
dobj(explain-15, origin-17)
prep_of(origin-17, matter-19)

