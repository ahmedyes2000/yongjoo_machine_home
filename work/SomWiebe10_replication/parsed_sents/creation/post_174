(ROOT
  (S
    (NP (NNS Theories))
    (VP (VBP are) (RB not)
      (VP (VBN supported)
        (PP (IN by)
          (S
            (VP (VBG finding)
              (NP (VBG confirming) (NN evidence))
              (ADVP (RB only)))))))
    (. .)))

nsubjpass(supported-4, Theories-1)
auxpass(supported-4, are-2)
neg(supported-4, not-3)
root(ROOT-0, supported-4)
agent(supported-4, finding-6)
amod(evidence-8, confirming-7)
dobj(finding-6, evidence-8)
advmod(finding-6, only-9)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP are)
      (ADVP (RB largely))
      (VP (VBN supported)
        (PP (IN by)
          (S
            (ADVP (RB consistently))
            (VP (VBG failing)
              (S
                (VP (TO to)
                  (VP (VB find)
                    (NP (JJ disconfirming) (NN evidence))))))))))
    (. .)))

nsubjpass(supported-4, They-1)
auxpass(supported-4, are-2)
advmod(supported-4, largely-3)
root(ROOT-0, supported-4)
advmod(failing-7, consistently-6)
agent(supported-4, failing-7)
aux(find-9, to-8)
xcomp(failing-7, find-9)
amod(evidence-11, disconfirming-10)
dobj(find-9, evidence-11)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (SBAR (IN because)
        (S
          (NP (PRP we))
          (VP (VBP have)
            (NP
              (NP (NNS experiences))
              (PP (IN of)
                (NP (JJ designed) (NNS things)))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBP cause)
                    (NP (JJ great) (NN pain)
                      (CC and)
                      (NN suffering))))))))))
    (. .)))

nsubj(is-2, This-1)
root(ROOT-0, is-2)
mark(have-5, because-3)
nsubj(have-5, we-4)
advcl(is-2, have-5)
dobj(have-5, experiences-6)
nsubj(cause-11, experiences-6)
amod(things-9, designed-8)
prep_of(experiences-6, things-9)
rcmod(experiences-6, cause-11)
amod(pain-13, great-12)
dobj(cause-11, pain-13)
dobj(cause-11, suffering-15)
conj_and(pain-13, suffering-15)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD would)
      (VP (VB like)
        (S
          (VP (TO to)
            (VP (VB see)
              (S
                (NP (JJ real) (NNS scientists))
                (VP (VB do)
                  (NP
                    (NP (JJ real) (NNS tests))
                    (PP (IN of)
                      (NP (NNP ID)))))))))))
    (. .)))

nsubj(like-3, I-1)
xsubj(see-5, I-1)
aux(like-3, would-2)
root(ROOT-0, like-3)
aux(see-5, to-4)
xcomp(like-3, see-5)
amod(scientists-7, real-6)
nsubj(do-8, scientists-7)
ccomp(see-5, do-8)
amod(tests-10, real-9)
dobj(do-8, tests-10)
prep_of(tests-10, ID-12)

(ROOT
  (S
    (ADVP (RB Conversely))
    (, ,)
    (NP (PRP they))
    (VP (VBP are)
      (VP (VBN refuted)
        (PP (IN by)
          (S
            (VP
              (ADVP (RB consistently))
              (VBG finding)
              (NP (VBG disconfirming) (NN evidence)))))))
    (. .)))

advmod(refuted-5, Conversely-1)
nsubjpass(refuted-5, they-3)
auxpass(refuted-5, are-4)
root(ROOT-0, refuted-5)
advmod(finding-8, consistently-7)
agent(refuted-5, finding-8)
amod(evidence-10, disconfirming-9)
dobj(finding-8, evidence-10)

(ROOT
  (S
    (S
      (VP (VBG Confirming)
        (CC or)
        (VBG disconfirming)
        (NP (NN evidence))))
    (VP (VBZ is)
      (VP (VBN determined)
        (PP (IN by)
          (S
            (VP (VBG making)
              (NP (NNS predictions)))))))
    (. .)))

csubjpass(determined-6, Confirming-1)
conj_or(Confirming-1, disconfirming-3)
csubjpass(determined-6, disconfirming-3)
dobj(Confirming-1, evidence-4)
auxpass(determined-6, is-5)
root(ROOT-0, determined-6)
agent(determined-6, making-8)
dobj(making-8, predictions-9)

(ROOT
  (S
    (PP (IN On)
      (NP
        (NP (DT the) (NN condition))
        (SBAR (IN that)
          (S
            (NP (DT the) (NNS predictions))
            (ADVP (RB logically))
            (VP (VBP follow)
              (PP (IN from)
                (NP
                  (NP (DT the) (NN explanation))
                  (SBAR
                    (S
                      (NP (DT the) (NN theory))
                      (VP (VBZ provides)))))))))))
    (, ,)
    (S
      (NP (VBN failed) (NNS predictions))
      (VP (VBP are)
        (VP (VBG disconfirming)
          (NP (NN evidence)))))
    (CC and)
    (S
      (NP (JJ successful) (NNS predictions))
      (VP (VBP are)
        (VP (VBG confirming)
          (NP (NN evidence)))))
    (. .)))

det(condition-3, the-2)
dobj(follow-8, condition-3)
prep_on(disconfirming-19, condition-3)
complm(follow-8, that-4)
det(predictions-6, the-5)
nsubj(follow-8, predictions-6)
advmod(follow-8, logically-7)
dep(condition-3, follow-8)
det(explanation-11, the-10)
prep_from(follow-8, explanation-11)
dobj(provides-14, explanation-11)
det(theory-13, the-12)
nsubj(provides-14, theory-13)
rcmod(explanation-11, provides-14)
amod(predictions-17, failed-16)
nsubj(disconfirming-19, predictions-17)
aux(disconfirming-19, are-18)
root(ROOT-0, disconfirming-19)
dobj(disconfirming-19, evidence-20)
amod(predictions-23, successful-22)
nsubj(confirming-25, predictions-23)
aux(confirming-25, are-24)
conj_and(disconfirming-19, confirming-25)
dobj(confirming-25, evidence-26)

(ROOT
  (S
    (SBAR (IN Although)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (ADJP (JJ clear))
          (SBAR (IN that)
            (S
              (NP (NNP ID))
              (VP (VBZ has)
                (VP (VBN led)
                  (PP (TO to)
                    (NP (DT some) (JJ successful) (NNS predictions))))))))))
    (, ,)
    (NP
      (NP (DT the) (JJS best) (NN way))
      (PP (TO to)
        (NP (NN test) (NN ID))))
    (VP (VBZ is)
      (ADVP (RB ultimately))
      (S
        (VP (TO to)
          (VP
            (VP (VB derive)
              (NP
                (NP (NNS predictions))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (ADVP (RB logically))
                    (VP (VBP follow)
                      (PP (IN from)
                        (NP (DT the) (NN explanation))))))))
            (CC and)
            (VP
              (ADVP
                (ADVP (RB never))
                (PRN (-LRB- -LRB-)
                  (CC or)
                  (FRAG
                    (ADVP (RB hardly))
                    (ADVP (RB ever)))
                  (-RRB- -RRB-)))
              (VB make)
              (NP (VBN failed) (NNS predictions)))))))
    (. .)))

mark(clear-4, Although-1)
nsubj(clear-4, it-2)
cop(clear-4, is-3)
advcl(is-20, clear-4)
complm(led-8, that-5)
nsubj(led-8, ID-6)
aux(led-8, has-7)
ccomp(clear-4, led-8)
det(predictions-12, some-10)
amod(predictions-12, successful-11)
prep_to(led-8, predictions-12)
det(way-16, the-14)
amod(way-16, best-15)
nsubj(is-20, way-16)
xsubj(derive-23, way-16)
nn(ID-19, test-18)
prep_to(way-16, ID-19)
root(ROOT-0, is-20)
advmod(is-20, ultimately-21)
aux(derive-23, to-22)
xcomp(is-20, derive-23)
dobj(derive-23, predictions-24)
nsubj(follow-27, predictions-24)
advmod(follow-27, logically-26)
rcmod(predictions-24, follow-27)
det(explanation-30, the-29)
prep_from(follow-27, explanation-30)
advmod(make-38, never-32)
dep(never-32, or-34)
dep(or-34, hardly-35)
dep(hardly-35, ever-36)
xcomp(is-20, make-38)
conj_and(derive-23, make-38)
amod(predictions-40, failed-39)
dobj(make-38, predictions-40)

(ROOT
  (S
    (NP
      (NP (DT Those))
      (VP (VBN opposed)
        (PP (TO to)
          (NP (NNP ID)))))
    (VP (MD must)
      (VP
        (VP (VB use)
          (NP (NNP ID)))
        (CC and)
        (VP (VB generate)
          (NP (VBN failed) (NNS predictions))
          (SBAR (RB even)
            (WHADVP (WRB when))
            (S
              (NP (DT the) (NNS predictions))
              (ADVP (RB logically))
              (VP (VBP follow)
                (PP (IN from)
                  (NP (DT the) (NN explanation)))))))))
    (. .)))

nsubj(use-6, Those-1)
nsubj(generate-9, Those-1)
partmod(Those-1, opposed-2)
prep_to(opposed-2, ID-4)
aux(use-6, must-5)
root(ROOT-0, use-6)
dobj(use-6, ID-7)
conj_and(use-6, generate-9)
amod(predictions-11, failed-10)
dobj(generate-9, predictions-11)
advmod(follow-17, even-12)
advmod(follow-17, when-13)
det(predictions-15, the-14)
nsubj(follow-17, predictions-15)
advmod(follow-17, logically-16)
dep(generate-9, follow-17)
det(explanation-20, the-19)
prep_from(follow-17, explanation-20)

(ROOT
  (S
    (NP
      (NP (NNS Predictions))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBP do) (RB not)
            (ADVP (RB logically))
            (VP (VB follow)
              (PP (IN from)
                (NP (DT the) (NN explanation))))))))
    (VP (MD will) (RB not)
      (VP (VB be)
        (NP
          (NP (DT a) (NN test))
          (PP (IN of)
            (NP (NNP ID))))))
    (. .)))

nsubj(follow-6, Predictions-1)
nsubj(test-14, Predictions-1)
aux(follow-6, do-3)
neg(follow-6, not-4)
advmod(follow-6, logically-5)
rcmod(Predictions-1, follow-6)
det(explanation-9, the-8)
prep_from(follow-6, explanation-9)
aux(test-14, will-10)
neg(test-14, not-11)
cop(test-14, be-12)
det(test-14, a-13)
root(ROOT-0, test-14)
prep_of(test-14, ID-16)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP
      (NP (NN stating) ('' ''))
      (SBAR
        (S
          (SBAR (IN If)
            (S
              (NP (EX there))
              (VP (VBZ is)
                (NP
                  (NP (NN design))
                  (PP (IN in)
                    (NP (NN nature)))))))
          (, ,)
          (NP (RB then) (NN nature))
          (VP (MD will)
            (VP (VB be)
              (ADJP (JJ perfect))))
          ('' ''))))
    (VP (VBZ contains)
      (NP
        (NP (DT a) (NN prediction))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ does) (RB not)
              (ADVP (RB logically))
              (VP (VB follow)
                (PP (IN from)
                  (NP (DT the) (NN explanation)))))))))
    (. .)))

prep_for(contains-19, example-2)
dobj(perfect-17, stating-4)
nsubj(contains-19, stating-4)
mark(is-8, If-6)
expl(is-8, there-7)
advcl(perfect-17, is-8)
nsubj(is-8, design-9)
prep_in(design-9, nature-11)
advmod(nature-14, then-13)
nsubj(perfect-17, nature-14)
aux(perfect-17, will-15)
cop(perfect-17, be-16)
rcmod(stating-4, perfect-17)
root(ROOT-0, contains-19)
det(prediction-21, a-20)
dobj(contains-19, prediction-21)
nsubj(follow-26, prediction-21)
aux(follow-26, does-23)
neg(follow-26, not-24)
advmod(follow-26, logically-25)
rcmod(prediction-21, follow-26)
det(explanation-29, the-28)
prep_from(follow-26, explanation-29)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (SBAR (IN because)
        (S
          (NP (PRP we))
          (VP (VBP have)
            (NP
              (NP (DT a) (NN wealth))
              (PP (IN of)
                (NP
                  (NP (NNS experiences))
                  (PP (IN with)
                    (NP
                      (NP (JJ designed) (NNS objects))
                      (, ,)
                      (SBAR
                        (WHNP
                          (NP (NN none))
                          (WHPP (IN of)
                            (WHNP (WDT which))))
                        (S
                          (VP (VBP are) (`` ``)
                            (ADJP (JJ perfect))
                            ('' '')))))))))))))
    (. .)))

nsubj(is-2, This-1)
root(ROOT-0, is-2)
mark(have-5, because-3)
nsubj(have-5, we-4)
advcl(is-2, have-5)
det(wealth-7, a-6)
dobj(have-5, wealth-7)
prep_of(wealth-7, experiences-9)
amod(objects-12, designed-11)
prep_with(experiences-9, objects-12)
prep_of(none-14, objects-12)
nsubj(perfect-19, none-14)
cop(perfect-19, are-17)
rcmod(objects-12, perfect-19)

(ROOT
  (S
    (S
      (NP
        (NP (DT Another) (NN example))
        (PP (IN of)
          (NP (DT an) (NN illogical))))
      (VP (VBD prediction)
        (SBAR
          (S
            (VP (VBZ is))))
        ('' '')
        (SBAR (IN If)
          (S
            (NP (DT the) (NN world))
            (VP (VBZ is)
              (VP (VBN designed)))))))
    (, ,) (RB then)
    (S
      (NP (EX there))
      (VP (MD should)
        (VP (VB be)
          (NP
            (NP (DT no) (NN pain))
            (CC and)
            (NP (NN suffering) ('' ''))))))
    (. .)))

det(example-2, Another-1)
nsubj(prediction-6, example-2)
det(illogical-5, an-4)
prep_of(example-2, illogical-5)
root(ROOT-0, prediction-6)
ccomp(prediction-6, is-7)
mark(designed-13, If-9)
det(world-11, the-10)
nsubjpass(designed-13, world-11)
auxpass(designed-13, is-12)
advcl(prediction-6, designed-13)
advmod(prediction-6, then-15)
expl(pain-20, there-16)
aux(pain-20, should-17)
cop(pain-20, be-18)
det(pain-20, no-19)
ccomp(prediction-6, pain-20)
ccomp(prediction-6, suffering-22)
conj_and(pain-20, suffering-22)

