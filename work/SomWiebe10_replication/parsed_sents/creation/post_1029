(ROOT
  (S
    (NP (NNP ID))
    (VP (VBZ does)
      (S
        (VP (VB undermine)
          (NP (NN evolution))))
      (, ,)
      (SBAR (IN because)
        (S
          (NP
            (NP (NNS supporters))
            (PP (IN of)
              (NP (NNP ID))))
          (VP (VBP wish)
            (S
              (VP (TO to)
                (VP (VB put)
                  (NP (DT a) (NN sticker))
                  (PP (IN in)
                    (NP
                      (NP (DT every) (NN textbook))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (VBZ says)
                            (NP (NN something))
                            (PP (IN along)
                              (NP
                                (NP (DT the) (NNS lines))
                                (PP (IN of))))
                            (: :) (`` ``)
                            (S
                              (NP (NNP Evolution))
                              (VP (VBZ is)
                                (ADVP (RB just))
                                (NP (DT a) (NN theory))))))))))))))))
    (. .)))

nsubj(does-2, ID-1)
root(ROOT-0, does-2)
ccomp(does-2, undermine-3)
dobj(undermine-3, evolution-4)
mark(wish-10, because-6)
nsubj(wish-10, supporters-7)
xsubj(put-12, supporters-7)
prep_of(supporters-7, ID-9)
advcl(does-2, wish-10)
aux(put-12, to-11)
xcomp(wish-10, put-12)
det(sticker-14, a-13)
dobj(put-12, sticker-14)
det(textbook-17, every-16)
prep_in(put-12, textbook-17)
nsubj(says-19, textbook-17)
rcmod(textbook-17, says-19)
dobj(says-19, something-20)
det(lines-23, the-22)
prep_along(says-19, lines-23)
prep(lines-23, of-24)
nsubj(theory-31, Evolution-27)
cop(theory-31, is-28)
advmod(theory-31, just-29)
det(theory-31, a-30)
dep(says-19, theory-31)

(ROOT
  (S
    (NP (PRP It))
    (VP
      (VP (VBZ is) (RB not)
        (NP (DT a) (NN fact)))
      (, ,)
      (CC and)
      (VP (VBZ has) (RB not)
        (VP (VBN been)
          (VP (VBN proven)))))
    (. .)))

nsubj(fact-5, It-1)
nsubjpass(proven-11, It-1)
cop(fact-5, is-2)
neg(fact-5, not-3)
det(fact-5, a-4)
root(ROOT-0, fact-5)
aux(proven-11, has-8)
neg(proven-11, not-9)
auxpass(proven-11, been-10)
conj_and(fact-5, proven-11)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD would)
      (VP (VB be)
        (ADJP (JJ interested)
          (PP (IN in)
            (S
              (VP (VBG hearing)
                (NP (PRP$ their) (NN opinion))))))))
    (. .)))

nsubj(interested-4, I-1)
aux(interested-4, would-2)
cop(interested-4, be-3)
root(ROOT-0, interested-4)
prepc_in(interested-4, hearing-6)
poss(opinion-8, their-7)
dobj(hearing-6, opinion-8)

(ROOT
  (S
    (SBAR (IN While)
      (S
        (PP (IN on)
          (NP
            (NP (NNS fallacies))
            (ADVP (RB however))))
        (, ,)
        (NP (PRP I))
        (VP (VBP think)
          (SBAR
            (S
              (NP (PRP we))
              (VP (MD should)
                (VP (VB address)
                  (NP (DT the) (NN straw) (NN man)))))))))
    (NP (PRP you))
    (VP (VBP continue)
      (S
        (VP (TO to)
          (VP (VB present)
            (PP (IN as)
              (NP (PRP$ your) (NN reason)))
            (PP (IN for)
              (S
                (VP (VBG defending)
                  (NP (NNP ID)))))))))
    (. .)))

mark(think-7, While-1)
prep_on(think-7, fallacies-3)
advmod(fallacies-3, however-4)
nsubj(think-7, I-6)
advcl(continue-15, think-7)
nsubj(address-10, we-8)
aux(address-10, should-9)
ccomp(think-7, address-10)
det(man-13, the-11)
nn(man-13, straw-12)
dobj(address-10, man-13)
nsubj(continue-15, you-14)
xsubj(present-17, you-14)
root(ROOT-0, continue-15)
aux(present-17, to-16)
xcomp(continue-15, present-17)
poss(reason-20, your-19)
prep_as(present-17, reason-20)
prepc_for(present-17, defending-22)
dobj(defending-22, ID-23)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ previous) (NNS debates)))
    (, ,)
    (NP (PRP you))
    (VP (VBD said)
      (SBAR
        (S
          (NP (NNS scientists))
          (VP (VBD were)
            (VP (VBN fired)
              (PP (IN for) (`` ``)
                (S
                  (VP
                    (ADVP (RB just))
                    (VBG mentioning)
                    (NP (NNP ID))))))))))
    (. .) ('' '')))

amod(debates-3, previous-2)
prep_in(said-6, debates-3)
nsubj(said-6, you-5)
root(ROOT-0, said-6)
nsubjpass(fired-9, scientists-7)
auxpass(fired-9, were-8)
ccomp(said-6, fired-9)
prep(fired-9, for-10)
advmod(mentioning-13, just-12)
dep(for-10, mentioning-13)
dobj(mentioning-13, ID-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBD gave)
      (NP (PRP you))
      (NP
        (NP (DT a) (NN list))
        (PP (IN of)
          (NP
            (NP (NNS people))
            (SBAR
              (SBAR
                (S
                  (NP (PRP you))
                  (VP (MD might)
                    (VP (VB be)
                      (VP (VBG referring)
                        (PP (TO to)))))))
              (, ,)
              (CC and)
              (SBAR
                (WHADVP (WRB why))
                (S
                  (NP (DT this))
                  (VP (VBD was) (RB not)
                    (NP (DT the) (NN case))
                    (PP (IN with)
                      (NP
                        (NP (DT each))
                        (PP (IN of)
                          (NP (PRP them)))))))))))))
    (. .)))

nsubj(gave-2, I-1)
root(ROOT-0, gave-2)
iobj(gave-2, you-3)
det(list-5, a-4)
dobj(gave-2, list-5)
prep_of(list-5, people-7)
nsubj(referring-11, you-8)
aux(referring-11, might-9)
aux(referring-11, be-10)
dep(people-7, referring-11)
prep(referring-11, to-12)
advmod(case-20, why-15)
nsubj(case-20, this-16)
cop(case-20, was-17)
neg(case-20, not-18)
det(case-20, the-19)
dep(people-7, case-20)
conj_and(referring-11, case-20)
prep_with(case-20, each-22)
prep_of(each-22, them-24)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB never))
    (VP
      (VP (VBD responded)
        (PP (TO to)
          (NP (DT that) (NN argument))))
      (, ,)
      (CC and)
      (VP (VBP have) (RB n't)
        (VP (VBN mentioned)
          (NP (PRP it))
          (ADVP (IN since))
          (, ,)
          (SBAR (IN so)
            (S
              (NP (PRP I))
              (VP (VBP am)
                (VP (VBG going)
                  (S
                    (VP (TO to)
                      (VP (VB assume)
                        (SBAR (IN that)
                          (S
                            (NP (PRP you))
                            (VP (VBP admit)
                              (SBAR (IN that)
                                (S
                                  (NP (PRP you))
                                  (VP (VBD were)
                                    (VP (VBN mistaken))))))))))))))))))
    (. .)))

nsubj(responded-3, You-1)
nsubj(mentioned-11, You-1)
neg(responded-3, never-2)
root(ROOT-0, responded-3)
det(argument-6, that-5)
prep_to(responded-3, argument-6)
aux(mentioned-11, have-9)
neg(mentioned-11, n't-10)
conj_and(responded-3, mentioned-11)
dobj(mentioned-11, it-12)
advmod(mentioned-11, since-13)
mark(going-18, so-15)
nsubj(going-18, I-16)
xsubj(assume-20, I-16)
aux(going-18, am-17)
advcl(mentioned-11, going-18)
aux(assume-20, to-19)
xcomp(going-18, assume-20)
complm(admit-23, that-21)
nsubj(admit-23, you-22)
ccomp(assume-20, admit-23)
complm(mistaken-27, that-24)
nsubjpass(mistaken-27, you-25)
auxpass(mistaken-27, were-26)
ccomp(admit-23, mistaken-27)

(ROOT
  (S (-LRB- -LRB-)
    (PP (IN If) (RB not))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (VP (VB love)
        (SBAR (IN for)
          (S
            (NP (PRP you))
            (VP (TO to)
              (VP (VB give)
                (NP (PRP me))
                (NP
                  (NP (DT an) (NN example))
                  (PP (IN of)
                    (NP (NN someone)))
                  (SBAR
                    (WHNP (WP who))
                    (S
                      (VP (VBD was)
                        (VP (VBN fired)
                          (PP (IN for)
                            (S
                              (VP (VBG bringing)
                                (PRT (RP up))
                                (NP (DT the) (NN topic))))))))))))))))
    (. .) (-RRB- -RRB-)))

prep(love-7, If-2)
neg(If-2, not-3)
nsubj(love-7, I-5)
aux(love-7, would-6)
root(ROOT-0, love-7)
mark(give-11, for-8)
nsubj(give-11, you-9)
aux(give-11, to-10)
advcl(love-7, give-11)
xcomp(love-7, give-11)
iobj(give-11, me-12)
det(example-14, an-13)
dobj(give-11, example-14)
nsubjpass(fired-19, example-14)
prep_of(example-14, someone-16)
auxpass(fired-19, was-18)
rcmod(example-14, fired-19)
prepc_for(fired-19, bringing-21)
prt(bringing-21, up-22)
det(topic-24, the-23)
dobj(bringing-21, topic-24)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP
      (NP (PRP$ your) (NN reason))
      (PP (IN for)
        (S
          (VP (VBG defending)
            (NP (NNP ID))))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP
            (NP (NNS people))
            (PRN (-LRB- -LRB-)
              (PP (IN like)
                (NP (PRP me)))
              (-RRB- -RRB-)))
          (VP (VBP get)
            (ADJP (VBN upset)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (DT the) (NN topic))
                  (VP (VBZ is)
                    (VP (VBN brought)
                      (PRT (RP up)))))))))))
    (. .)))

advmod(is-8, Now-1)
poss(reason-4, your-3)
nsubj(is-8, reason-4)
prepc_for(reason-4, defending-6)
dobj(defending-6, ID-7)
root(ROOT-0, is-8)
complm(upset-16, that-9)
nsubjpass(upset-16, people-10)
dep(people-10, like-12)
pobj(like-12, me-13)
auxpass(upset-16, get-15)
ccomp(is-8, upset-16)
advmod(brought-21, when-17)
det(topic-19, the-18)
nsubjpass(brought-21, topic-19)
auxpass(brought-21, is-20)
dep(upset-16, brought-21)
prt(brought-21, up-22)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP me))
        (VP (VB repeat)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (PRP I))
              (VP (VBD said)
                (ADVP (RBR earlier))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(repeat-3, me-2)
ccomp(Let-1, repeat-3)
dobj(said-6, what-4)
nsubj(said-6, I-5)
ccomp(repeat-3, said-6)
advmod(said-6, earlier-7)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP want)
          (S
            (VP (TO to)
              (VP (VB talk)
                (PP (IN about)
                  (NP (NN philosophy)
                    (CC or)
                    (NN theology)))))))))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (VP (VB be)
        (ADJP (RB perfectly) (JJ willing)
          (S
            (VP (TO to)
              (VP (VB talk)
                (PP (IN about)
                  (NP
                    (NP (DT a) (`` ``) (VBG guiding) (NN force) ('' ''))
                    (SBAR
                      (WHNP (WDT that))
                      (S
                        (VP (VBZ controls)
                          (NP (NN life)))))))))))))
    (. .)))

mark(want-3, If-1)
nsubj(want-3, you-2)
xsubj(talk-5, you-2)
advcl(willing-15, want-3)
aux(talk-5, to-4)
xcomp(want-3, talk-5)
prep_about(talk-5, philosophy-7)
prep_about(talk-5, theology-9)
conj_or(philosophy-7, theology-9)
nsubj(willing-15, I-11)
aux(willing-15, would-12)
cop(willing-15, be-13)
advmod(willing-15, perfectly-14)
root(ROOT-0, willing-15)
aux(talk-17, to-16)
xcomp(willing-15, talk-17)
det(force-22, a-19)
amod(force-22, guiding-21)
prep_about(talk-17, force-22)
nsubj(controls-25, force-22)
rcmod(force-22, controls-25)
dobj(controls-25, life-26)

(ROOT
  (S
    (ADVP (RB However))
    (PRN (, ,)
      (SBAR (IN until)
        (S
          (NP (PRP you))
          (VP (VBP have)
            (NP
              (NP (DT some) (NN evidence))
              (, ,)
              (CC or)
              (ADVP (RB even))
              (NP
                (NP (DT some) (NN type))
                (PP (IN of)
                  (NP (JJ realistic) (NN scenario))))))))
      (, ,))
    (ADVP (RB then))
    (NP (PRP we))
    (VP (MD ca) (RB n't)
      (VP (VB talk)
        (PP (IN about)
          (NP (PRP it)))
        (PP (IN in)
          (NP (DT a) (JJ scientific) (NN way)))))
    (. .)))

advmod(talk-21, However-1)
mark(have-5, until-3)
nsubj(have-5, you-4)
parataxis(talk-21, have-5)
det(evidence-7, some-6)
dobj(have-5, evidence-7)
dobj(have-5, even-10)
advmod(evidence-7, even-10)
conj_or(evidence-7, even-10)
det(type-12, some-11)
dobj(have-5, type-12)
conj_or(evidence-7, type-12)
amod(scenario-15, realistic-14)
prep_of(type-12, scenario-15)
advmod(talk-21, then-17)
nsubj(talk-21, we-18)
aux(talk-21, ca-19)
neg(talk-21, n't-20)
root(ROOT-0, talk-21)
prep_about(talk-21, it-23)
det(way-27, a-25)
amod(way-27, scientific-26)
prep_in(talk-21, way-27)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is) (RB n't)
      (ADJP (JJ possible)))
    (. .)))

nsubj(possible-4, It-1)
cop(possible-4, is-2)
neg(possible-4, n't-3)
root(ROOT-0, possible-4)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (PRP I))
        (VP (VBP get)
          (ADJP (JJ angry) (IN about)))))
    (VP (VBZ is)
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (NNS people))
          (VP (VBP attempt)
            (S
              (VP (TO to)
                (VP (VB teach)
                  (NP
                    (NP (NNP ID))
                    (PP (IN in)
                      (NP (NN school)))))))))))
    (. .)))

dobj(angry-4, What-1)
nsubj(angry-4, I-2)
dep(angry-4, get-3)
csubj(is-6, angry-4)
dep(angry-4, about-5)
root(ROOT-0, is-6)
advmod(attempt-9, when-7)
nsubj(attempt-9, people-8)
xsubj(teach-11, people-8)
advcl(is-6, attempt-9)
aux(teach-11, to-10)
xcomp(attempt-9, teach-11)
dobj(teach-11, ID-12)
prep_in(ID-12, school-14)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (NP (JJ other) (NNS possibilities)))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
amod(possibilities-4, other-3)
nsubj(are-2, possibilities-4)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (ADVP (RB already))
      (VP (VBN agreed)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (MD should) (RB n't)
              (VP (VB be)
                (VP (VBN taught)
                  (PP (IN in)
                    (NP (NN school))))))))))
    (. .)))

nsubj(agreed-4, You-1)
aux(agreed-4, have-2)
advmod(agreed-4, already-3)
root(ROOT-0, agreed-4)
complm(taught-10, that-5)
nsubjpass(taught-10, it-6)
aux(taught-10, should-7)
neg(taught-10, n't-8)
auxpass(taught-10, be-9)
ccomp(agreed-4, taught-10)
prep_in(taught-10, school-12)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm) (RB not)
      (ADJP (RB even) (JJ sure)
        (PP (IN at)
          (NP
            (NP (DT this) (NN point))
            (SBAR
              (WHADVP (WRB why))
              (S
                (NP (PRP you))
                (VP (VBP 're)
                  (VP (VBG disagreeing)
                    (PP (IN with)
                      (NP (PRP me)))))))))))
    (. .)))

nsubj(sure-5, I-1)
cop(sure-5, 'm-2)
neg(sure-5, not-3)
advmod(sure-5, even-4)
root(ROOT-0, sure-5)
det(point-8, this-7)
prep_at(sure-5, point-8)
advmod(disagreeing-12, why-9)
nsubj(disagreeing-12, you-10)
aux(disagreeing-12, 're-11)
rcmod(point-8, disagreeing-12)
prep_with(disagreeing-12, me-14)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP 'm)
        (ADVP (RB just))
        (VP (VBG saying)
          (SBAR (IN that)
            (S
              (NP (NNS things))
              (VP (VBP are) (RB n't)
                (NP (NNS ALWAYS))
                (SBAR (IN as)
                  (S
                    (NP (PRP they))
                    (VP (VBP seem))))))))))
    (, ,)
    (CC and)
    (S
      (ADVP (DT no) (NN matter)
        (SBAR
          (WHADJP (WRB how) (JJ hard))
          (S
            (NP (PRP we))
            (VP (VBP try)))))
      (, ,)
      (NP (PRP we))
      (VP (MD wo) (RB n't)
        (VP (VB be)
          (ADJP (JJ able)
            (S
              (VP (TO to)
                (VP (VB reason)
                  (NP (JJ certain) (NNS aspects))
                  (PRT (RP out))))))
          (SBAR (IN because)
            (S
              (NP (PRP$ our) (NN brain))
              (VP (MD wo) (RB n't)
                (VP (VB accept)
                  (NP (PRP it)))))))))
    (. .)))

nsubj(saying-4, I-1)
aux(saying-4, 'm-2)
advmod(saying-4, just-3)
root(ROOT-0, saying-4)
complm(ALWAYS-9, that-5)
nsubj(ALWAYS-9, things-6)
cop(ALWAYS-9, are-7)
neg(ALWAYS-9, n't-8)
ccomp(saying-4, ALWAYS-9)
mark(seem-12, as-10)
nsubj(seem-12, they-11)
advcl(ALWAYS-9, seem-12)
dep(matter-16, no-15)
advmod(able-26, matter-16)
advmod(hard-18, how-17)
dep(try-20, hard-18)
nsubj(try-20, we-19)
dep(matter-16, try-20)
nsubj(able-26, we-22)
aux(able-26, wo-23)
neg(able-26, n't-24)
cop(able-26, be-25)
conj_and(saying-4, able-26)
aux(reason-28, to-27)
xcomp(able-26, reason-28)
amod(aspects-30, certain-29)
dobj(reason-28, aspects-30)
prt(reason-28, out-31)
mark(accept-37, because-32)
poss(brain-34, our-33)
nsubj(accept-37, brain-34)
aux(accept-37, wo-35)
neg(accept-37, n't-36)
advcl(able-26, accept-37)
dobj(accept-37, it-38)

(ROOT
  (S (CC So)
    (S
      (NP (PRP we))
      (VP (MD should)
        (VP (VB fill)
          (PP (IN in)
            (NP
              (NP (DT the) (NNS gaps))
              (PP (IN with)
                (NP (`` ``)
                  (NP (PRP it) (POS 's))
                  (NN magic) ('' '')))))
          (, ,)
          (ADVP (CC or)))))
    ('' '')
    (NP (NNP God))
    (VP (VBD did)
      (NP (PRP it) ('' '')))
    (. ?)))

cc(did-18, So-1)
nsubj(fill-4, we-2)
aux(fill-4, should-3)
dep(did-18, fill-4)
det(gaps-7, the-6)
prep_in(fill-4, gaps-7)
poss(magic-12, it-10)
prep_with(gaps-7, magic-12)
advmod(fill-4, or-15)
nsubj(did-18, God-17)
root(ROOT-0, did-18)
dobj(did-18, it-19)

(ROOT
  (FRAG
    (ADVP (RB Again))
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP want)
          (S
            (VP (TO to)
              (VP (VB say)
                (NP
                  (NP
                    (NP (DT this))
                    (PP (IN as)
                      (NP (DT a) (JJ personal) (NN belief) (NN GREAT))))
                  (X (SYM \*)))))))))
    (. .)))

root(ROOT-0, Again-1)
mark(want-4, if-2)
nsubj(want-4, you-3)
xsubj(say-6, you-3)
dep(Again-1, want-4)
aux(say-6, to-5)
xcomp(want-4, say-6)
dobj(say-6, this-7)
det(GREAT-12, a-9)
amod(GREAT-12, personal-10)
nn(GREAT-12, belief-11)
prep_as(this-7, GREAT-12)
dep(this-7, \*-13)

(ROOT
  (S (CC But)
    (NP (PRP it))
    (VP (VBZ is)
      (ADJP (JJR better))
      (S
        (VP (TO to)
          (VP (VB say)
            (SBAR
              (S
                (NP (PRP I))
                (VP (VBP do) (RB n't)
                  (VP
                    (VP (VB know))
                    (, ,)
                    (CC and)
                    (VP (VB try)
                      (S
                        (VP (TO to)
                          (VP (VB figure)
                            (NP (PRP it))
                            (PRT (RP out))
                            (ADVP (RB rationally))))))))))))))
    (. .)))

cc(better-4, But-1)
nsubj(better-4, it-2)
xsubj(say-6, it-2)
cop(better-4, is-3)
root(ROOT-0, better-4)
aux(say-6, to-5)
xcomp(better-4, say-6)
nsubj(know-10, I-7)
nsubj(try-13, I-7)
xsubj(figure-15, I-7)
aux(know-10, do-8)
neg(know-10, n't-9)
ccomp(say-6, know-10)
ccomp(say-6, try-13)
conj_and(know-10, try-13)
aux(figure-15, to-14)
xcomp(try-13, figure-15)
dobj(figure-15, it-16)
prt(figure-15, out-17)
advmod(figure-15, rationally-18)

(ROOT
  (S
    (ADVP (RB Usually))
    (, ,)
    (NP (DT the) (NNS results))
    (VP (VBP are)
      (ADJP (RB pretty) (RB damn)
        (PP (IN useful)
          (NP (-LRB- -LRB-) (JJ modern) (NN medicine) (, ,) (NNS airplanes) (, ,) (NNS computers) (, ,) (FW etc.)))))
    (. .) (. .)))

advmod(damn-7, Usually-1)
det(results-4, the-3)
nsubj(damn-7, results-4)
cop(damn-7, are-5)
advmod(damn-7, pretty-6)
root(ROOT-0, damn-7)
amod(computers-15, modern-10)
nn(computers-15, medicine-11)
dep(computers-15, airplanes-13)
prep_useful(damn-7, computers-15)
dep(computers-15, etc.-17)

(ROOT
  (S (CC But)
    (S
      (ADVP (RB maybe))
      (NP (DT that))
      (VP (VBZ 's) (RB all)
        (VP (VBN made)
          (PRT (RP up)))))
    (CC and)
    (S
      (NP (PRP we))
      (VP (VBP 're)
        (ADVP (RB just))
        (VP (VBG rationalizing)
          (NP (NN magic)))))
    (. .)))

advmod(made-6, maybe-2)
nsubjpass(made-6, that-3)
auxpass(made-6, 's-4)
advmod(made-6, all-5)
root(ROOT-0, made-6)
prt(made-6, up-7)
nsubj(rationalizing-12, we-9)
aux(rationalizing-12, 're-10)
advmod(rationalizing-12, just-11)
conj_and(made-6, rationalizing-12)
dobj(rationalizing-12, magic-13)

(ROOT
  (S
    (ADVP (RB Hell))
    (, ,)
    (S
      (ADVP (RB right) (RB now))
      (ADVP (RB maybe))
      (NP (PRP I))
      (VP (VBP 'm)
        (VP (VBG typing)
          (PP (IN on)
            (NP (DT a) (JJ magic) (NN keyboard))))))
    (CC and)
    (S
      (NP (PRP$ my) (NN brain))
      (VP (VBZ is)
        (VP (VBG rationalizing)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (PRP it))
              (VP (VBZ sees)
                (PP (IN by)
                  (S
                    (VP (VBG saying)
                      (SBAR (IN that)
                        (S
                          (NP (PRP$ my) (NN computer))
                          (VP (VBZ is)
                            (ADVP (RB just))
                            (NP
                              (NP (DT a) (NN bunch))
                              (PP (IN of)
                                (NP
                                  (NP (VBN integrated) (NNS circuits))
                                  (VP (VBN powered)
                                    (PP (IN by)
                                      (NP
                                        (NP (DT a) (NN stream))
                                        (PP (IN of)
                                          (NP (NNS electrons)))))))))))))))))))))
    (. .)))

advmod(typing-8, Hell-1)
advmod(now-4, right-3)
advmod(typing-8, now-4)
advmod(typing-8, maybe-5)
nsubj(typing-8, I-6)
aux(typing-8, 'm-7)
root(ROOT-0, typing-8)
det(keyboard-12, a-10)
amod(keyboard-12, magic-11)
prep_on(typing-8, keyboard-12)
poss(brain-15, my-14)
nsubj(rationalizing-17, brain-15)
aux(rationalizing-17, is-16)
conj_and(typing-8, rationalizing-17)
dobj(sees-20, what-18)
nsubj(sees-20, it-19)
ccomp(rationalizing-17, sees-20)
prepc_by(sees-20, saying-22)
complm(bunch-29, that-23)
poss(computer-25, my-24)
nsubj(bunch-29, computer-25)
cop(bunch-29, is-26)
advmod(bunch-29, just-27)
det(bunch-29, a-28)
ccomp(saying-22, bunch-29)
amod(circuits-32, integrated-31)
prep_of(bunch-29, circuits-32)
partmod(circuits-32, powered-33)
det(stream-36, a-35)
agent(powered-33, stream-36)
prep_of(stream-36, electrons-38)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD must)
      (VP (VB be)
        (VP (VBG fucking)
          (ADJP (JJ delusional)))))
    (. .)))

nsubj(fucking-4, I-1)
aux(fucking-4, must-2)
aux(fucking-4, be-3)
root(ROOT-0, fucking-4)
acomp(fucking-4, delusional-5)

(ROOT
  (S ('' '')
    (S
      (S
        (VP (TO To)
          (VP (VB deny)
            (NP (DT that) (NNP ID)))))
      (VP (VBZ is)
        (VP (VBG being)
          (VP (VBN used)
            (S
              (VP (TO to)
                (VP (VB undermine)
                  (NP
                    (CONJP (RB not) (JJ only))
                    (NP (NN evolution))
                    (, ,)
                    (CC but)
                    (NP
                      (NP (NN science))
                      (PP (IN as)
                        (NP (DT a) (NN whole))))))))))))
    (, ,)
    (VP (VBZ is) (: ...)
      (S
        (VP (TO to)
          (VP (VB put)
            (NP (PRP it))
            (ADVP (RB lightly))))))
    (NP (DT a) (JJ dumb) (NN thing)
      (S
        (VP (TO to)
          (VP (VB do)))))
    (. .)))

aux(deny-3, To-2)
csubjpass(used-8, deny-3)
det(ID-5, that-4)
dobj(deny-3, ID-5)
aux(used-8, is-6)
auxpass(used-8, being-7)
ccomp(is-21, used-8)
aux(undermine-10, to-9)
xcomp(used-8, undermine-10)
neg(only-12, not-11)
preconj(evolution-13, only-12)
dobj(undermine-10, evolution-13)
dobj(undermine-10, science-16)
conj_but(evolution-13, science-16)
det(whole-19, a-18)
prep_as(science-16, whole-19)
root(ROOT-0, is-21)
aux(put-24, to-23)
parataxis(is-21, put-24)
xcomp(is-21, put-24)
dobj(put-24, it-25)
advmod(put-24, lightly-26)
det(thing-29, a-27)
amod(thing-29, dumb-28)
dep(is-21, thing-29)
aux(do-31, to-30)
infmod(thing-29, do-31)

(ROOT
  (S
    (S
      (VP (VB Look)
        (PP (IN at)
          (NP (DT the) (NN video)))))
    (NP (PRP I))
    (VP (VBD posted))
    (. .)))

dep(posted-6, Look-1)
det(video-4, the-3)
prep_at(Look-1, video-4)
nsubj(posted-6, I-5)
root(ROOT-0, posted-6)

(ROOT
  (S
    (PP (IN In)
      (NP (PRP it)))
    (NP (PRP you))
    (VP (MD can)
      (ADVP (RB actually))
      (VP (VB see)
        (NP (NNS people))
        (S
          (VP (VBG using)
            (S
              (NP (NNP ID))
              (VP (TO to)
                (VP (VB do)
                  (NP (RB just) (DT that)))))))))
    (. .)))

prep_in(see-6, it-2)
nsubj(see-6, you-3)
aux(see-6, can-4)
advmod(see-6, actually-5)
root(ROOT-0, see-6)
dobj(see-6, people-7)
xcomp(see-6, using-8)
nsubj(do-11, ID-9)
aux(do-11, to-10)
xcomp(using-8, do-11)
advmod(that-13, just-12)
dobj(do-11, that-13)

(ROOT
  (FRAG
    (SBAR (IN If)
      (S
        (NP
          (NP (PRP you))
          (CC or)
          (NP (NN anyone) (RB else)))
        (VP (VBZ wants)
          (S
            (VP (TO to)
              (VP (VB believe)
                (PP (IN in)
                  (NP (DT some) (VBG guiding) (NN force)))))))))
    (, ,)
    (ADVP (JJ great))
    (. .)))

mark(wants-6, If-1)
nsubj(wants-6, you-2)
xsubj(believe-8, you-2)
conj_or(you-2, anyone-4)
nsubj(wants-6, anyone-4)
xsubj(believe-8, anyone-4)
advmod(anyone-4, else-5)
dep(great-14, wants-6)
aux(believe-8, to-7)
xcomp(wants-6, believe-8)
det(force-12, some-10)
amod(force-12, guiding-11)
prep_in(believe-8, force-12)
root(ROOT-0, great-14)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (SBAR
        (WHNP (WP what))
        (S
          (NP
            (NP (NN freedom))
            (PP (IN of)
              (NP (NN religion))))
          (VP (VBZ is) (RB all)
            (ADJP (IN about))))))
    (. .)))

nsubj('s-2, That-1)
root(ROOT-0, 's-2)
dobj(about-9, what-3)
nsubj(about-9, freedom-4)
prep_of(freedom-4, religion-6)
cop(about-9, is-7)
advmod(about-9, all-8)
ccomp('s-2, about-9)

(ROOT
  (S
    (NP (DT No) (NN one))
    (VP (VBZ is)
      (VP (VBG attacking)
        (NP
          (NP (NN anyone) (POS 's))
          (JJ personal) (NNS beliefs))))
    (. .)))

det(one-2, No-1)
nsubj(attacking-4, one-2)
aux(attacking-4, is-3)
root(ROOT-0, attacking-4)
poss(beliefs-8, anyone-5)
amod(beliefs-8, personal-7)
dobj(attacking-4, beliefs-8)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP think)
          (SBAR (IN that)
            (S
              (NP (EX there))
              (VP (VBP are)
                (NP
                  (NP (JJ significant) (NN number))
                  (PP (IN of)
                    (NP
                      (NP (NNS scientists))
                      (SBAR
                        (WHNP (WP who))
                        (S
                          (VP (VBP disagree)
                            (PP (IN with)
                              (NP (PRP me)))))))))))))))
    (, ,)
    (NP (PRP I))
    (VP (VBP challenge)
      (S
        (NP (PRP you))
        (VP (TO to)
          (VP (VB find)
            (S
              (NP (PRP me))
              (NP (DT some)))))))
    (. .)))

mark(think-3, If-1)
nsubj(think-3, you-2)
advcl(challenge-17, think-3)
complm(are-6, that-4)
expl(are-6, there-5)
ccomp(think-3, are-6)
amod(number-8, significant-7)
nsubj(are-6, number-8)
prep_of(number-8, scientists-10)
nsubj(disagree-12, scientists-10)
rcmod(scientists-10, disagree-12)
prep_with(disagree-12, me-14)
nsubj(challenge-17, I-16)
root(ROOT-0, challenge-17)
nsubj(find-20, you-18)
aux(find-20, to-19)
xcomp(challenge-17, find-20)
nsubj(some-22, me-21)
xcomp(find-20, some-22)

