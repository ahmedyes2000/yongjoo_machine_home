(ROOT
  (S (`` ``)
    (PP (IN Because)
      (NP
        (NP (NN science))
        (SBAR (IN as)
          (S
            (NP (PRP we))
            (VP (VBP know)
              (NP (PRP it))
              (NP (NN today)))))))
    (VP (MD can)
      (ADVP (RB only))
      (VP (VB answer)
        (NP
          (NP (CD one))
          (PP (IN of)
            (NP (PRP them))))))
    (. .)))

prep_because(answer-11, science-3)
mark(know-6, as-4)
nsubj(know-6, we-5)
dep(science-3, know-6)
dobj(know-6, it-7)
tmod(know-6, today-8)
aux(answer-11, can-9)
advmod(answer-11, only-10)
root(ROOT-0, answer-11)
dobj(answer-11, one-12)
prep_of(one-12, them-14)

(ROOT
  (FRAG
    (WHADVP (RB '') (WRB Why))
    (NP (RB not))
    (. ?)))

dep(not-3, Why-2)
root(ROOT-0, not-3)

(ROOT
  (S
    (S
      (VP (VBG Knowing)
        (NP
          (NP (DT the) (NN nature))
          (PP (IN of)
            (NP (DT the) (NNS designers))))))
    (VP (MD would)
      (VP (VB give)
        (NP
          (NP (DT a) (JJ huge) (NN amount))
          (PP (IN of)
            (NP (NN insight))))
        (PP (IN into)
          (SBAR
            (WHADVP (WRB why))
            (S
              (NP (PRP they))
              (VP (VBD were)
                (VP (VBG designing)
                  (NP (NN life))
                  (PP (IN on)
                    (NP (DT this) (NN planet))))))))))
    (. .)))

csubj(give-8, Knowing-1)
det(nature-3, the-2)
dobj(Knowing-1, nature-3)
det(designers-6, the-5)
prep_of(nature-3, designers-6)
aux(give-8, would-7)
root(ROOT-0, give-8)
det(amount-11, a-9)
amod(amount-11, huge-10)
dobj(give-8, amount-11)
prep_of(amount-11, insight-13)
advmod(designing-18, why-15)
nsubj(designing-18, they-16)
aux(designing-18, were-17)
prepc_into(give-8, designing-18)
dobj(designing-18, life-19)
det(planet-22, this-21)
prep_on(designing-18, planet-22)

(ROOT
  (S
    (S
      (VP (VBG Knowing)
        (NP (DT the) (NNS methods))))
    (VP (MD would)
      (VP (VB allow)
        (S
          (NP (PRP us))
          (VP (TO to)
            (VP (VB replicate)
              (NP (PRP them))
              (PP (IN in)
                (NP (DT the) (NN laboratory))))))))
    (. .)))

csubj(allow-5, Knowing-1)
det(methods-3, the-2)
dobj(Knowing-1, methods-3)
aux(allow-5, would-4)
root(ROOT-0, allow-5)
nsubj(replicate-8, us-6)
aux(replicate-8, to-7)
xcomp(allow-5, replicate-8)
dobj(replicate-8, them-9)
det(laboratory-12, the-11)
prep_in(replicate-8, laboratory-12)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (MD could)
        (ADVP (RB also))
        (VP (VB go)
          (CC and)
          (VB meet)
          (NP (PRP them)))))
    (, ,)
    (NP (PRP I))
    (VP (VBP know)
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBP 've)
            (NP
              (NP (JJ several) (NNS complaints))
              (PP (IN on)
                (NP
                  (NP (DT this) (NN body))
                  (SBAR
                    (S
                      (NP (PRP they))
                      (VP (VBN designed)
                        (PP (IN for)
                          (NP (PRP me)))))))))
            (SBAR (IN that)
              (S
                (NP (PRP I))
                (VP (MD 'd)
                  (VP (VB like)
                    (S
                      (VP (TO to)
                        (VP (VB have)
                          (VP (VBN cleared)
                            (PRT (RP up))))))))))))))
    (. .)))

nsubj(go-4, We-1)
nsubj(meet-6, We-1)
aux(go-4, could-2)
advmod(go-4, also-3)
ccomp(know-10, go-4)
conj_and(go-4, meet-6)
ccomp(know-10, meet-6)
dobj(go-4, them-7)
nsubj(know-10, I-9)
root(ROOT-0, know-10)
nsubj('ve-12, I-11)
ccomp(know-10, 've-12)
amod(complaints-14, several-13)
dobj('ve-12, complaints-14)
det(body-17, this-16)
prep_on(complaints-14, body-17)
dobj(designed-19, body-17)
nsubj(designed-19, they-18)
rcmod(body-17, designed-19)
prep_for(designed-19, me-21)
complm(like-25, that-22)
nsubj(like-25, I-23)
xsubj(cleared-28, I-23)
aux(like-25, 'd-24)
ccomp('ve-12, like-25)
aux(cleared-28, to-26)
aux(cleared-28, have-27)
xcomp(like-25, cleared-28)
prt(cleared-28, up-29)

(ROOT
  (SBARQ
    (WHNP (WDT What) (NN qualities))
    (SQ (VBZ does)
      (NP (DT the) (NNS designers))
      (VP (VB have)
        (S
          (NP (DT that))
          (VP (VB make)
            (NP (PRP them))
            (PP (IN beyond)
              (NP (NN study)))))))
    (. ?)))

det(qualities-2, What-1)
dobj(have-6, qualities-2)
aux(have-6, does-3)
det(designers-5, the-4)
nsubj(have-6, designers-5)
root(ROOT-0, have-6)
nsubj(make-8, that-7)
ccomp(have-6, make-8)
dobj(make-8, them-9)
prep_beyond(make-8, study-11)

(ROOT
  (S (`` ``)
    (S
      (NP (PRP I))
      (VP (MD would)
        (VP (VB think))))
    (RB not) (, ,)
    (SBAR (IN since)
      (S
        (NP (NNP ID))
        (ADVP (RB only))
        (VP (VBZ tries)
          (S
            (VP (TO to)
              (VP (VB identify)
                (NP
                  (NP (DT the) (NNS features))
                  (PP (IN of)
                    (NP
                      (NP (DT the) (JJ natural) (NN world))
                      (SBAR
                        (WHNP (WDT which))
                        (S
                          (VP (VBP are)
                            (VP (VBN designed)))
                          (: ...))))))))))))
    (CC and)
    (S
      (NP (NN nothing))
      (ADJP (JJR more)))
    (. .)))

nsubj(think-4, I-2)
nsubj(more-25, I-2)
aux(think-4, would-3)
root(ROOT-0, think-4)
neg(think-4, not-5)
mark(tries-10, since-7)
nsubj(tries-10, ID-8)
xsubj(identify-12, ID-8)
advmod(tries-10, only-9)
dep(think-4, tries-10)
aux(identify-12, to-11)
xcomp(tries-10, identify-12)
det(features-14, the-13)
dobj(identify-12, features-14)
det(world-18, the-16)
amod(world-18, natural-17)
prep_of(features-14, world-18)
nsubjpass(designed-21, world-18)
auxpass(designed-21, are-20)
rcmod(world-18, designed-21)
dep(more-25, nothing-24)
conj_and(think-4, more-25)

(ROOT
  (S
    (NP
      (NP (VBG Asking) (NNS questions))
      (PP (IN about)
        (NP (DT the) (NN designer))))
    (VP (VBP are)
      (ADJP (JJ separate)
        (PP (IN from)
          (S
            (VP (VBG determining)
              (SBAR (IN if)
                (S
                  (NP (NN something))
                  (VP (VBD was)
                    (VP (VBN planned))))
                (CC or)
                (RB not)))))))
    (. .)))

amod(questions-2, Asking-1)
nsubj(separate-7, questions-2)
det(designer-5, the-4)
prep_about(questions-2, designer-5)
cop(separate-7, are-6)
root(ROOT-0, separate-7)
prepc_from(separate-7, determining-9)
mark(planned-13, if-10)
nsubjpass(planned-13, something-11)
auxpass(planned-13, was-12)
advcl(determining-9, planned-13)
advcl(determining-9, not-15)
conj_or(planned-13, not-15)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB see)
        (S
          (NP (PRP it))
          (NP (DT that) (NN way)))))
    (. .)))

nsubj(see-5, I-2)
aux(see-5, do-3)
neg(see-5, n't-4)
root(ROOT-0, see-5)
nsubj(way-8, it-6)
det(way-8, that-7)
xcomp(see-5, way-8)

(ROOT
  (S
    (NP
      (NP
        (NP (DT A) (NN theory))
        (VP (VBG quantifying)
          (NP (DT the) (NNS designers))))
      (, ,)
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (MD could)
            (VP (VB be)
              (VP (VBN used)
                (S
                  (VP (TO to)
                    (VP (VB make)
                      (NP
                        (ADJP (JJ accurate))
                        (NNS predictions))
                      (PP (IN about)
                        (NP (PRP$ their) (JJ next) (NN action)))))))))))
      (, ,))
    (VP (MD would)
      (VP (VB solidify)
        (NP
          (NP (NNP ID))
          (PP (IN as)
            (NP (DT a) (VBG working) (NN theory))))))
    (. .)))

det(theory-2, A-1)
nsubjpass(used-10, theory-2)
nsubj(solidify-21, theory-2)
partmod(theory-2, quantifying-3)
det(designers-5, the-4)
dobj(quantifying-3, designers-5)
aux(used-10, could-8)
auxpass(used-10, be-9)
rcmod(theory-2, used-10)
aux(make-12, to-11)
xcomp(used-10, make-12)
amod(predictions-14, accurate-13)
dobj(make-12, predictions-14)
poss(action-18, their-16)
amod(action-18, next-17)
prep_about(make-12, action-18)
aux(solidify-21, would-20)
root(ROOT-0, solidify-21)
dobj(solidify-21, ID-22)
det(theory-26, a-24)
amod(theory-26, working-25)
prep_as(ID-22, theory-26)

(ROOT
  (S
    (PP (IN Without)
      (NP (DT that)))
    (NP
      (NP
        (ADVP (RB then))
        (DT the) (NN argument))
      (SBAR (IN that)
        (S
          (NP (JJ random) (NN mutation))
          (VP (MD can)
            (ADVP (RB only))
            (VP (VB go)
              (ADVP
                (ADVP (RB so) (RB far))
                (, ,)
                (CC but)
                (ADVP (RB not) (RBR further)))
              (PRN (-LRB- -LRB-)
                (SBAR
                  (WHADVP (RB even) (WRB when))
                  (S
                    (VP (VBN given)
                      (NP
                        (NP (DT an)
                          (ADJP
                            (ADVP (RB arbitrarily))
                            (JJ long))
                          (NN period))
                        (PP (IN of)
                          (NP (NN time)))))))
                (-RRB- -RRB-))))))
      (, ,))
    (VP (VBZ is)
      (ADVP (RB still))
      (NP (DT a) (JJR better) (NN discription)))
    (. .)))

prep_without(discription-34, that-2)
advmod(argument-5, then-3)
det(argument-5, the-4)
dobj(go-11, argument-5)
nsubj(discription-34, argument-5)
complm(go-11, that-6)
amod(mutation-8, random-7)
nsubj(go-11, mutation-8)
aux(go-11, can-9)
advmod(go-11, only-10)
dep(argument-5, go-11)
advmod(far-13, so-12)
advmod(go-11, far-13)
dep(further-17, not-16)
advmod(go-11, further-17)
conj_but(far-13, further-17)
advmod(when-20, even-19)
advmod(given-21, when-20)
parataxis(go-11, given-21)
det(period-25, an-22)
advmod(long-24, arbitrarily-23)
amod(period-25, long-24)
dobj(given-21, period-25)
prep_of(period-25, time-27)
cop(discription-34, is-30)
advmod(discription-34, still-31)
det(discription-34, a-32)
amod(discription-34, better-33)
root(ROOT-0, discription-34)

(ROOT
  (S ('' '')
    (ADVP (RB Maybe))
    (, ,)
    (ADVP (CC but))
    (NP (DT those) (NNS questions))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN inferred)
          (PP (IN without)
            (NP
              (NP (NN knowledge))
              (PP (IN of)
                (NP (NNS intentions)
                  (CC and)
                  (NNS methods))))))))
    (. .)))

advmod(inferred-9, Maybe-2)
advmod(inferred-9, but-4)
det(questions-6, those-5)
nsubjpass(inferred-9, questions-6)
aux(inferred-9, can-7)
auxpass(inferred-9, be-8)
root(ROOT-0, inferred-9)
prep_without(inferred-9, knowledge-11)
prep_of(knowledge-11, intentions-13)
prep_of(knowledge-11, methods-15)
conj_and(intentions-13, methods-15)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (MD would)
      (VP (VB think)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (MD would)
              (VP (VB be)
                (PP (IN beyond)
                  (ADVP (RB maybe)))))))))
    (. .)))

nsubj(think-4, I-2)
aux(think-4, would-3)
root(ROOT-0, think-4)
complm(be-8, that-5)
nsubj(be-8, it-6)
aux(be-8, would-7)
ccomp(think-4, be-8)
prep(be-8, beyond-9)
pcomp(beyond-9, maybe-10)

