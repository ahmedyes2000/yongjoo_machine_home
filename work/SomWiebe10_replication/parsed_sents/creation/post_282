(ROOT
  (S
    (SBAR
      (PRN (: --)
        (NP (NNP ICDesign))
        (: --))
      (S (`` ``)
        (NP (NNP WHAT))
        ('' '')
        (VP (VBZ IS)
          (NP (DT A) (NNP INTELLIGENT) (NNP DESIGN) (NNP AND) (`` ``) (NNP WHY) ('' '')))))
    (VP (VBZ IS)
      (NP (JJ YOUR) (NNP EXAMPLE) (NNP AN) (NNP INTELLIGENT) (NNP DESIGN)))
    (. ?)))

dep(WHY-13, ICDesign-2)
nsubj(WHY-13, WHAT-5)
cop(WHY-13, IS-7)
det(WHY-13, A-8)
nn(WHY-13, INTELLIGENT-9)
nn(WHY-13, DESIGN-10)
nn(WHY-13, AND-11)
csubj(DESIGN-20, WHY-13)
cop(DESIGN-20, IS-15)
amod(DESIGN-20, YOUR-16)
nn(DESIGN-20, EXAMPLE-17)
nn(DESIGN-20, AN-18)
nn(DESIGN-20, INTELLIGENT-19)
root(ROOT-0, DESIGN-20)

(ROOT
  (S
    (NP (JJ simple) (NNS straight))
    (ADVP (RB forward))
    (VP (VBP question))
    (. .)))

amod(straight-2, simple-1)
nsubj(question-4, straight-2)
advmod(question-4, forward-3)
root(ROOT-0, question-4)

(ROOT
  (S
    (NP
      (NP (DT The) (NN notion))
      (PP (IN of)
        (NP
          (NP (NN design))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ emerges)
                (PP (IN from)
                  (NP (DT the) (NN design) (NN inference)))))))))
    (VP (MD must) (RB not)
      (VP (VB be)
        (VP (VBN confused)
          (PP (IN with)
            (NP
              (NP (JJ intelligent) (NN agency))
              ('' '')
              (SBAR
                (S
                  (NP
                    (NP (DT The) (NN notion))
                    (PP (IN of)
                      (NP (NN design))))
                  (VP (MD should) (RB not)
                    (VP (VB be)
                      (VP (VBN confuse)
                        (PP (IN with)
                          (NP (JJ intelligent) (NN agency)))))))))))))
    (. .)))

det(notion-2, The-1)
nsubjpass(confused-14, notion-2)
prep_of(notion-2, design-4)
nsubj(emerges-6, design-4)
rcmod(design-4, emerges-6)
det(inference-10, the-8)
nn(inference-10, design-9)
prep_from(emerges-6, inference-10)
aux(confused-14, must-11)
neg(confused-14, not-12)
auxpass(confused-14, be-13)
root(ROOT-0, confused-14)
amod(agency-17, intelligent-16)
prep_with(confused-14, agency-17)
det(notion-20, The-19)
nsubjpass(confuse-26, notion-20)
prep_of(notion-20, design-22)
aux(confuse-26, should-23)
neg(confuse-26, not-24)
auxpass(confuse-26, be-25)
rcmod(agency-17, confuse-26)
amod(agency-29, intelligent-28)
prep_with(confuse-26, agency-29)

(ROOT
  (SBARQ
    (ADVP (RB Now))
    (WHNP
      (WHADJP (WRB how) (JJ many))
      (NP
        (NP (NNP ID) (NNS proponents))
        (CC or)
        (NP (NNS enthusiasts))))
    (SQ
      (VP (VBP are)
        (ADJP (JJ familiar)
          (PP (IN with)
            (NP (DT this) (JJ hidden) (NN gem))))))
    (. ?)))

advmod(familiar-9, Now-1)
advmod(many-3, how-2)
amod(proponents-5, many-3)
nn(proponents-5, ID-4)
nsubj(familiar-9, proponents-5)
conj_or(proponents-5, enthusiasts-7)
nsubj(familiar-9, enthusiasts-7)
cop(familiar-9, are-8)
root(ROOT-0, familiar-9)
det(gem-13, this-11)
amod(gem-13, hidden-12)
prep_with(familiar-9, gem-13)

(ROOT
  (S
    (NP (NNP Let) (POS 's))
    (VP (VBP give)
      (NP
        (NP (DT an) (NN example))
        (PP (IN of)
          (PRN (-LRB- -LRB-)
            (VP (VBN failed))
            (-RRB- -RRB-))
          (NP (JJ intelligent) (NN design)))))
    (. .)))

nsubj(give-3, Let-1)
possessive(Let-1, 's-2)
root(ROOT-0, give-3)
det(example-5, an-4)
dobj(give-3, example-5)
dep(example-5, failed-8)
amod(design-11, intelligent-10)
prep_of(example-5, design-11)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (NNP Newton))
        (VP (VBD arrived)
          (PP (IN at)
            (NP
              (NP (PRP$ his) (NNS laws))
              (PP (IN of)
                (NP (NN motion))))))))
    (, ,)
    (NP (PRP he))
    (VP (VBD was)
      (VP (VBN shocked)
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP he))
            (VP (VBD realized)
              (SBAR (IN that)
                (S
                  (NP
                    (NP (DT the) (NNS orbits))
                    (PP (IN of)
                      (NP (NNS planets))))
                  (VP (MD could) (RB not)
                    (ADVP (RB possibly))
                    (VP (VB be)
                      (ADJP (JJ stable)))))))))))
    (. .)))

advmod(arrived-3, When-1)
nsubj(arrived-3, Newton-2)
advcl(shocked-12, arrived-3)
poss(laws-6, his-5)
prep_at(arrived-3, laws-6)
prep_of(laws-6, motion-8)
nsubjpass(shocked-12, he-10)
auxpass(shocked-12, was-11)
root(ROOT-0, shocked-12)
advmod(realized-15, when-13)
nsubj(realized-15, he-14)
advcl(shocked-12, realized-15)
complm(stable-25, that-16)
det(orbits-18, the-17)
nsubj(stable-25, orbits-18)
prep_of(orbits-18, planets-20)
aux(stable-25, could-21)
neg(stable-25, not-22)
advmod(stable-25, possibly-23)
cop(stable-25, be-24)
ccomp(realized-15, stable-25)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (`` ``) (VB explain) ('' '')
          (NP (DT the) (JJ stable) (NNS orbits)))))
    (, ,)
    (NP (NNP Newton))
    (VP (VBD invoked)
      (NP
        (NP (DT a) (`` ``) (VBG helping) (NN hand) ('' ''))
        (PP (IN of)
          (NP (NNP God)))))
    (. .)))

aux(explain-3, To-1)
purpcl(invoked-10, explain-3)
det(orbits-7, the-5)
amod(orbits-7, stable-6)
dobj(explain-3, orbits-7)
nsubj(invoked-10, Newton-9)
root(ROOT-0, invoked-10)
det(hand-14, a-11)
amod(hand-14, helping-13)
dobj(invoked-10, hand-14)
prep_of(hand-14, God-17)

(ROOT
  (S (RB Only)
    (SBAR
      (WHADVP (WRB when))
      (S
        (NP
          (NP (NNP Laplace))
          (, ,)
          (NP
            (NP (DT some) (NN half))
            (ADVP
              (NP (DT a) (NN century))
              (RBR later)))
          (, ,))
        (VP (VBD realized)
          (NP
            (NP (NNP Newton) (POS 's))
            (NNS mistakes)))))
    (, ,)
    (VP (VBD was)
      (NP
        (NP (DT the) (NN necessity))
        (PP (IN of)
          (NP
            (NP (VBN said) (JJ intelligent) (NN designer))
            (VP (VBN removed))))))
    (. .)))

advmod(necessity-18, Only-1)
advmod(realized-11, when-2)
nsubj(realized-11, Laplace-3)
det(half-6, some-5)
appos(Laplace-3, half-6)
det(century-8, a-7)
npadvmod(later-9, century-8)
advmod(half-6, later-9)
advcl(necessity-18, realized-11)
poss(mistakes-14, Newton-12)
dobj(realized-11, mistakes-14)
cop(necessity-18, was-16)
det(necessity-18, the-17)
root(ROOT-0, necessity-18)
amod(designer-22, said-20)
amod(designer-22, intelligent-21)
prep_of(necessity-18, designer-22)
partmod(designer-22, removed-23)

(ROOT
  (S
    (NP
      (NP (NNP Newton) (POS 's))
      (NN appeal)
      (S
        (VP (TO to)
          (VP (VB design)))))
    (VP (VBZ is)
      (VP (VBN based)
        (PP (IN on)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (NNP ID) (NNS proponents))
              (VP (VBP have)
                (VP (VBN come)
                  (S
                    (VP (TO to)
                      (VP (VB define)
                        (PP (IN as)
                          (NP (DT the) (`` ``) (NN design) (NN inference) ('' '')))))))))))))
    (. .)))

poss(appeal-3, Newton-1)
nsubjpass(based-7, appeal-3)
aux(design-5, to-4)
infmod(appeal-3, design-5)
auxpass(based-7, is-6)
root(ROOT-0, based-7)
dobj(come-13, what-9)
nn(proponents-11, ID-10)
nsubj(come-13, proponents-11)
xsubj(define-15, proponents-11)
aux(come-13, have-12)
prepc_on(based-7, come-13)
aux(define-15, to-14)
xcomp(come-13, define-15)
det(inference-20, the-17)
nn(inference-20, design-19)
prep_as(define-15, inference-20)

(ROOT
  (S
    (NP (DT This))
    (VP (MD should)
      (VP (VB teach)
        (S
          (NP (PRP us))
          (UCP
            (ADVP (RB once))
            (CC and)
            (PP (IN for)
              (NP (DT all)))))
        (SBAR (IN that)
          (S
            (NP
              (NP (DT an) (NN appeal))
              (PP (TO to)
                (NP (NN design))))
            (, ,)
            (SBAR
              (WHADVP (WRB when))
              (S
                (VP (VBG lacking)
                  (NP (NN anything) (JJR more))
                  (PP (IN than)
                    (NP (NN ignorance))))))
            (, ,)
            (VP (VBZ is) (RB not)
              (ADJP (RB very) (JJ reliable))
              (, ,)
              (S
                (ADVP (RB historically))
                (VP (VBG speaking))))))))
    (. .)))

nsubj(teach-3, This-1)
aux(teach-3, should-2)
root(ROOT-0, teach-3)
dep(once-5, us-4)
dep(teach-3, once-5)
dep(teach-3, for-7)
conj_and(once-5, for-7)
pobj(for-7, all-8)
complm(reliable-25, that-9)
det(appeal-11, an-10)
nsubj(reliable-25, appeal-11)
prep_to(appeal-11, design-13)
advmod(lacking-16, when-15)
advcl(reliable-25, lacking-16)
dep(more-18, anything-17)
dobj(lacking-16, more-18)
prep_than(lacking-16, ignorance-20)
cop(reliable-25, is-22)
neg(reliable-25, not-23)
advmod(reliable-25, very-24)
ccomp(teach-3, reliable-25)
advmod(speaking-28, historically-27)
xcomp(reliable-25, speaking-28)

(ROOT
  (SQ (NNP Does)
    (NP (DT this))
    (VP (VB help))
    (. ?)))

dep(help-3, Does-1)
nsubj(help-3, this-2)
root(ROOT-0, help-3)

(ROOT
  (SQ (VBP Do)
    (NP (PRP you))
    (VP (VB have)
      (NP (DT a) (JJ paypal) (NN account)))
    (. ?)))

aux(have-3, Do-1)
nsubj(have-3, you-2)
root(ROOT-0, have-3)
det(account-6, a-4)
amod(account-6, paypal-5)
dobj(have-3, account-6)

(ROOT
  (S
    (SBAR
      (WHADJP (RB Oh) (WP what))
      (S
        (NP (DT the) (NN heck))))
    (, ,)
    (NP (DT this) (NN one))
    (VP (VBZ is)
      (PP (IN on)
        (NP (PRP me))))
    (: ...)))

dep(heck-4, Oh-1)
dep(Oh-1, what-2)
det(heck-4, the-3)
dep(is-8, heck-4)
det(one-7, this-6)
nsubj(is-8, one-7)
root(ROOT-0, is-8)
prep_on(is-8, me-10)

(ROOT
  (SBARQ
    (WHNP (WP what))
    (SQ
      (VP (VBZ is)
        (NP (PRP$ your) (JJ simple) (JJ straight) (JJ forward) (NN answer))))
    (. ?)))

nsubj(answer-7, what-1)
cop(answer-7, is-2)
poss(answer-7, your-3)
amod(answer-7, simple-4)
amod(answer-7, straight-5)
amod(answer-7, forward-6)
root(ROOT-0, answer-7)

(ROOT
  (S
    (S
      (VP (VB bet)
        (SBAR
          (S
            (NP (PRP you))
            (VP (MD ca) (RB n't)
              (VP (VB do)
                (NP (PRP it))))))))
    (: --)
    (S
      (NP (PRP You))
      (VP (MD should) (RB not)
        (VP (VB be)
          (NP (DT a) (VBG betting) (NN man))
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (PRP you))
              (VP (VBP are)
                (VP (VBG bluffing)
                  (ADVP
                    (ADVP (RB so) (RB obviously))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NN hint))
                        (: :)
                        (NP (DT all) (NNS caps)))
                      (-RRB- -RRB-))))))))))
    (. .)))

root(ROOT-0, bet-1)
nsubj(do-5, you-2)
aux(do-5, ca-3)
neg(do-5, n't-4)
ccomp(bet-1, do-5)
dobj(do-5, it-6)
nsubj(man-14, You-8)
aux(man-14, should-9)
neg(man-14, not-10)
cop(man-14, be-11)
det(man-14, a-12)
amod(man-14, betting-13)
parataxis(bet-1, man-14)
advmod(bluffing-18, when-15)
nsubj(bluffing-18, you-16)
aux(bluffing-18, are-17)
advcl(man-14, bluffing-18)
advmod(obviously-20, so-19)
advmod(bluffing-18, obviously-20)
dep(obviously-20, hint-22)
det(caps-25, all-24)
dep(hint-22, caps-25)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP ask)
        (NP (DT some) (JJ good) (NNS questions))))
    (CC and)
    (S
      (SBAR (IN since)
        (S
          (NP (PRP you))
          (`` ``)
          (VP (VBP see)
            (NP (NN design)))
          ('' '')))
      (, ,)
      (NP (PRP you))
      (VP (MD may)
        (VP (VB be)
          (VP (VBN horrified)
            (S
              (VP (TO to)
                (VP (VB find)
                  (PRT (RP out))
                  (SBAR
                    (WHADVP (WRB how))
                    (S
                      (NP (DT the) (NNP Intelligent) (NNP Design) (NN movement))
                      (VP (VBZ has)
                        (VP (VBN defined)
                          (NP (NN design))
                          (S
                            (VP (TO to)
                              (VP (VB be)
                                (ADJP
                                  (ADJP (NN nothing) (JJR more))
                                  (PP (IN than)
                                    (NP
                                      (NP
                                        (NP (DT the) (`` ``) (NN set) (JJ theoretic) (NN complement))
                                        (PP (IN of)
                                          (NP (DT the) (NN disjunction) (NN regularity-or-chance))))
                                      ('' '')
                                      (CC or)
                                      (NP
                                        (NP (DT that))
                                        (SBAR
                                          (WHNP (WDT which))
                                          (S
                                            (VP (VBZ remains)
                                              (SBAR (IN once)
                                                (S
                                                  (NP (PRP one))
                                                  (VBZ has)
                                                  (VP (VB eliminate)
                                                    (NP
                                                      (NP (NN regularity))
                                                      (PP (IN of)
                                                        (NP (NN chance) (NNS hypotheses))))))))))))))))))))))))))))
    (. .)))

nsubj(ask-2, You-1)
root(ROOT-0, ask-2)
det(questions-5, some-3)
amod(questions-5, good-4)
dobj(ask-2, questions-5)
mark(see-10, since-7)
nsubj(see-10, you-8)
advcl(horrified-17, see-10)
dobj(see-10, design-11)
nsubjpass(horrified-17, you-14)
aux(horrified-17, may-15)
auxpass(horrified-17, be-16)
conj_and(ask-2, horrified-17)
aux(find-19, to-18)
xcomp(horrified-17, find-19)
prt(find-19, out-20)
advmod(defined-27, how-21)
det(movement-25, the-22)
nn(movement-25, Intelligent-23)
nn(movement-25, Design-24)
nsubj(defined-27, movement-25)
aux(defined-27, has-26)
ccomp(find-19, defined-27)
dobj(defined-27, design-28)
aux(nothing-31, to-29)
cop(nothing-31, be-30)
xcomp(defined-27, nothing-31)
dep(nothing-31, more-32)
det(complement-38, the-34)
nn(complement-38, set-36)
amod(complement-38, theoretic-37)
prep_than(nothing-31, complement-38)
det(regularity-or-chance-42, the-40)
nn(regularity-or-chance-42, disjunction-41)
prep_of(complement-38, regularity-or-chance-42)
prep_than(nothing-31, that-45)
conj_or(complement-38, that-45)
nsubj(remains-47, that-45)
rcmod(that-45, remains-47)
mark(eliminate-51, once-48)
nsubj(eliminate-51, one-49)
dep(eliminate-51, has-50)
advcl(remains-47, eliminate-51)
dobj(eliminate-51, regularity-52)
nn(hypotheses-55, chance-54)
prep_of(regularity-52, hypotheses-55)

(ROOT
  (FRAG
    (ADJP (VBN Shocked))
    (. ?)))

root(ROOT-0, Shocked-1)

(ROOT
  (INTJ (UH ...)))


(ROOT
  (S
    (NP (PRP I))
    (VP (VBP bet)
      (S
        (S (CC but)
          (NP (NNS things))
          (VP (VBP get)
            (ADJP (JJR worse))
            (, ,)
            (SBAR (IN in) (NN order)
              (S
                (VP (TO to)
                  (VP (VB go)
                    (PP (IN from)
                      (NP (NN design)))
                    (PP (TO to) (`` ``)
                      (NP (NN designer))
                      ('' ''))))))))
        (, ,)
        (S
          (NP (DT the) (NNP ID) (NN movement))
          (VP (VBZ uses)
            (NP
              (NP (NN induction))
              (, ,)
              (SBAR
                (WHNP (WDT which))
                (S
                  (PP (IN of)
                    (NP (NN course)))
                  (VP (VBZ has)
                    (NP (PRP$ its) (JJ usual) (NNS problems))
                    (PRN (: --)
                      (NP (NNP Ryan) (NNP Nichols))
                      (: --))))))))
        (S
          (SBAR (IN Before)
            (S
              (NP (PRP I))
              (VP (VBP proceed))))
          (, ,)
          (ADVP (RB however))
          (, ,)
          (NP (PRP I))
          (VP (VBP note)
            (SBAR (IN that)
              (S
                (NP (NNP Dembski))
                (VP (VBZ makes)
                  (NP (DT an) (JJ important) (NN concession))
                  (PP (TO to)
                    (NP (PRP$ his) (NNS critics))))))))))
    (. .)))

nsubj(bet-2, I-1)
root(ROOT-0, bet-2)
cc(worse-6, but-3)
nsubj(worse-6, things-4)
dep(worse-6, get-5)
dep(bet-2, worse-6)
mark(go-11, in-8)
dep(go-11, order-9)
aux(go-11, to-10)
purpcl(worse-6, go-11)
prep_from(go-11, design-13)
prep_to(go-11, designer-16)
det(movement-21, the-19)
nn(movement-21, ID-20)
nsubj(uses-22, movement-21)
dep(worse-6, uses-22)
dobj(uses-22, induction-23)
nsubj(has-28, induction-23)
prep_of(has-28, course-27)
rcmod(induction-23, has-28)
poss(problems-31, its-29)
amod(problems-31, usual-30)
dobj(has-28, problems-31)
nn(Nichols-34, Ryan-33)
dep(has-28, Nichols-34)
mark(proceed-38, Before-36)
nsubj(proceed-38, I-37)
advcl(note-43, proceed-38)
advmod(note-43, however-40)
nsubj(note-43, I-42)
dep(worse-6, note-43)
complm(makes-46, that-44)
nsubj(makes-46, Dembski-45)
ccomp(note-43, makes-46)
det(concession-49, an-47)
amod(concession-49, important-48)
dobj(makes-46, concession-49)
poss(critics-52, his-51)
prep_to(makes-46, critics-52)

(ROOT
  (S
    (NP (PRP He))
    (VP (VBZ refuses)
      (S
        (VP (TO to)
          (VP (VB make)
            (NP
              (NP (DT the) (JJ second) (NN assumption))
              (VP (VBN noted)
                (PP (IN above))))))))
    (. .)))

nsubj(refuses-2, He-1)
xsubj(make-4, He-1)
root(ROOT-0, refuses-2)
aux(make-4, to-3)
xcomp(refuses-2, make-4)
det(assumption-7, the-5)
amod(assumption-7, second-6)
dobj(make-4, assumption-7)
partmod(assumption-7, noted-8)
prep(noted-8, above-9)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (DT the) (NNP EF))
        (VP (VBZ implies)
          (SBAR (IN that)
            (S
              (NP (JJ certain) (NNS systems))
              (VP (VBP are)
                (ADVP (RB intelligently))
                (VP (VBN designed))))))))
    (, ,)
    (NP (NNP Dembski))
    (VP (VBZ does) (RB not)
      (VP (VB think)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ follows)
              (SBAR (IN that)
                (S
                  (NP (EX there))
                  (VP (VBZ is)
                    (NP
                      (NP (DT some) (JJ intelligent) (NN designer))
                      (CC or)
                      (NP (JJ other)))))))))))
    (. .)))

advmod(implies-4, When-1)
det(EF-3, the-2)
nsubj(implies-4, EF-3)
advcl(think-15, implies-4)
complm(designed-10, that-5)
amod(systems-7, certain-6)
nsubjpass(designed-10, systems-7)
auxpass(designed-10, are-8)
advmod(designed-10, intelligently-9)
ccomp(implies-4, designed-10)
nsubj(think-15, Dembski-12)
aux(think-15, does-13)
neg(think-15, not-14)
root(ROOT-0, think-15)
nsubj(follows-17, it-16)
ccomp(think-15, follows-17)
complm(is-20, that-18)
expl(is-20, there-19)
ccomp(follows-17, is-20)
det(designer-23, some-21)
amod(designer-23, intelligent-22)
nsubj(is-20, designer-23)
nsubj(is-20, other-25)
conj_or(designer-23, other-25)

(ROOT
  (S
    (NP (PRP He))
    (VP (VBZ says)
      (SBAR (IN that) (, ,) (`` ``)
        (S
          (SBAR (RB even) (IN though)
            (S
              (PP (IN in)
                (NP (NN practice)))
              (NP (JJ inferring) (NN design))
              (VP (VBZ is)
                (NP
                  (NP (DT the) (JJ first) (NN step))
                  (PP (IN in)
                    (S
                      (VP (VBG identifying)
                        (NP
                          (NP (DT an) (JJ intelligent) (NN agent))
                          (, ,)
                          (VP (VBN taken)
                            (PP (IN by)
                              (NP (PRP itself))))))))))))
          (NP (NN design))
          (VP (VBZ does) (RB not)
            (VP (VB require)
              (SBAR (IN that)
                (S
                  (NP (PDT such) (DT an) (NN agent))
                  (VP (VB be)
                    (VP (VBN posited))))))))))
    (. .)))

nsubj(says-2, He-1)
root(ROOT-0, says-2)
complm(require-28, that-3)
advmod(step-15, even-6)
dep(step-15, though-7)
prep_in(step-15, practice-9)
amod(design-11, inferring-10)
nsubj(step-15, design-11)
cop(step-15, is-12)
det(step-15, the-13)
amod(step-15, first-14)
advcl(require-28, step-15)
prepc_in(step-15, identifying-17)
det(agent-20, an-18)
amod(agent-20, intelligent-19)
dobj(identifying-17, agent-20)
partmod(agent-20, taken-22)
agent(taken-22, itself-24)
nsubj(require-28, design-25)
aux(require-28, does-26)
neg(require-28, not-27)
ccomp(says-2, require-28)
complm(posited-34, that-29)
predet(agent-32, such-30)
det(agent-32, an-31)
nsubjpass(posited-34, agent-32)
auxpass(posited-34, be-33)
ccomp(require-28, posited-34)

