(ROOT
  (S
    (PP
      (ADVP (RB However))
      (IN for)
      (S
        (VP (VBG multi)
          (NP (JJ cellular) (NN life))
          (S
            (VP (TO to)
              (VP (VB survive)
                (CC and)
                (VB reproduce)))))))
    (NP (PRP it))
    (VP (MD would)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB have)
              (NP (DT a) (NN way)
                (S
                  (VP (TO to)
                    (VP (VB keep)
                      (NP (JJ other) (NN life))
                      (PP (IN from)
                        (S
                          (VP (VBG interfering)
                            (SBAR (IN in)
                              (S
                                (NP (PRP it))
                                (VP (VBZ s)
                                  (NP (NNS processes)))))))))))))))))
    (. .)))

advmod(have-12, However-1)
prepc_for(have-12, multi-3)
amod(life-5, cellular-4)
dobj(multi-3, life-5)
aux(survive-7, to-6)
xcomp(multi-3, survive-7)
xcomp(multi-3, reproduce-9)
conj_and(survive-7, reproduce-9)
nsubj(have-12, it-10)
xsubj(have-14, it-10)
aux(have-12, would-11)
root(ROOT-0, have-12)
aux(have-14, to-13)
xcomp(have-12, have-14)
det(way-16, a-15)
dobj(have-14, way-16)
aux(keep-18, to-17)
infmod(way-16, keep-18)
amod(life-20, other-19)
dobj(keep-18, life-20)
prepc_from(keep-18, interfering-22)
mark(processes-26, in-23)
nsubj(processes-26, it-24)
cop(processes-26, s-25)
advcl(interfering-22, processes-26)

