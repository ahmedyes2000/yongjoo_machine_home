(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN argument))
        (VP (VBD were)
          (ADJP (RB purely) (JJ eliminative)))))
    (, ,)
    (NP (PRP one))
    (VP (MD might)
      (VP (VB be)
        (VP (VBN justified)
          (PP (IN in)
            (S
              (VP (VBG saying)
                (SBAR (IN that)
                  (S
                    (NP
                      (NP (DT the) (NN move))
                      (PP (IN from)
                        (NP
                          (NP (VBN specified) (NN complexity))
                          (PP (TO to)
                            (NP (DT a) (JJ designing) (NN intelligence))))))
                    (VP (VBZ is)
                      (NP
                        (NP (DT an) (NN argument))
                        (PP (IN from)
                          (NP
                            (NP (NN ignorance))
                            (PRN (-LRB- -LRB-)
                              (NP
                                (NP (NN i.) (CD 1.))
                                (, ,)
                                (NP (RB not) (NNP X) (NNP therefore) (NNP Y)))
                              (-RRB- -RRB-))))))))))))))
    (. .)))

mark(eliminative-6, If-1)
det(argument-3, the-2)
nsubj(eliminative-6, argument-3)
cop(eliminative-6, were-4)
advmod(eliminative-6, purely-5)
advcl(justified-11, eliminative-6)
nsubjpass(justified-11, one-8)
aux(justified-11, might-9)
auxpass(justified-11, be-10)
root(ROOT-0, justified-11)
prepc_in(justified-11, saying-13)
complm(argument-26, that-14)
det(move-16, the-15)
nsubj(argument-26, move-16)
amod(complexity-19, specified-18)
prep_from(move-16, complexity-19)
det(intelligence-23, a-21)
amod(intelligence-23, designing-22)
prep_to(complexity-19, intelligence-23)
cop(argument-26, is-24)
det(argument-26, an-25)
ccomp(saying-13, argument-26)
prep_from(argument-26, ignorance-28)
dep(ignorance-28, i.-30)
num(i.-30, 1.-31)
neg(Y-36, not-33)
nn(Y-36, X-34)
nn(Y-36, therefore-35)
appos(i.-30, Y-36)

