(ROOT
  (SBARQ (`` ``)
    (WHNP (WP Who))
    (SQ
      (VP (VBD designed)
        (NP (DT the) (NN designer))))
    (. ?)))

nsubj(designed-3, Who-2)
root(ROOT-0, designed-3)
det(designer-5, the-4)
dobj(designed-3, designer-5)

(ROOT
  (S ('' '')
    (S
      (S
        (VP (VBZ is)
          (ADJP (DT a) (JJ valid)
            (CC and)
            (JJ important))))
      (VP (VBP point)))
    (, ,)
    (CC and)
    (S
      (NP (NNP IDs))
      (VP (VBZ fatal)
        (NP (NN flaw))))
    (. .)))

cop(valid-4, is-2)
dep(valid-4, a-3)
csubj(point-7, valid-4)
conj_and(valid-4, important-6)
csubj(point-7, important-6)
root(ROOT-0, point-7)
nsubj(fatal-11, IDs-10)
conj_and(point-7, fatal-11)
dobj(fatal-11, flaw-12)

(ROOT
  (S
    (S
      (VP (VBG Assuming)
        (SBAR (IN that)
          (S
            (NP (PRP you) (NNPS IDers))
            (VP (VBP are) (RB not)
              (VP (VBG hypothesizing)
                (NP (NN god))))))
        (PRN (-LRB- -LRB-)
          (SBAR
            (WHNP (WDT which))
            (S
              (VP (MD would)
                (VP
                  (VP (VB make)
                    (NP (DT this) (DT a) (JJ theological) (NN debate)))
                  (, ,)
                  (CC and)
                  (VP (VB make)
                    (NP
                      (NP (NNP ID) (NNP creationism-in-sheep) (POS 's))
                      (JJ -) (NN clothing)))))))
          (-RRB- -RRB-))))
    (, ,)
    (NP (PRP you))
    (VP (MD must) (RB then)
      (VP (VB be)
        (VP (VBG suggesting)
          (SBAR (IN that)
            (S
              (NP (DT the) (NNP First) (NN Designer))
              (VP (MD would)
                (VP (VB have)
                  (VP (VBN been)
                    (ADJP (JJ complex) (RB enough)
                      (S
                        (VP (TO to)
                          (VP (VB design)
                            (NP
                              (NP (DT the) (JJ next) (NN designer))
                              (PP (IN in)
                                (NP (DT the) (NN chain))))
                            (PP (IN without)
                              (S
                                (VP (VBG being)
                                  (VP (VBN designed)
                                    (NP (PRP itself))))))))))))))))))
    (. .)))

partmod(suggesting-31, Assuming-1)
complm(hypothesizing-7, that-2)
dep(IDers-4, you-3)
nsubj(hypothesizing-7, IDers-4)
aux(hypothesizing-7, are-5)
neg(hypothesizing-7, not-6)
ccomp(Assuming-1, hypothesizing-7)
dobj(hypothesizing-7, god-8)
nsubj(make-12, which-10)
nsubj(make-19, which-10)
aux(make-12, would-11)
parataxis(Assuming-1, make-12)
predet(debate-16, this-13)
det(debate-16, a-14)
amod(debate-16, theological-15)
dobj(make-12, debate-16)
parataxis(Assuming-1, make-19)
conj_and(make-12, make-19)
nn(creationism-in-sheep-21, ID-20)
poss(clothing-24, creationism-in-sheep-21)
dobj(make-19, clothing-24)
nsubj(suggesting-31, you-27)
aux(suggesting-31, must-28)
advmod(suggesting-31, then-29)
aux(suggesting-31, be-30)
root(ROOT-0, suggesting-31)
complm(complex-39, that-32)
det(Designer-35, the-33)
nn(Designer-35, First-34)
nsubj(complex-39, Designer-35)
aux(complex-39, would-36)
aux(complex-39, have-37)
cop(complex-39, been-38)
ccomp(suggesting-31, complex-39)
advmod(complex-39, enough-40)
aux(design-42, to-41)
xcomp(complex-39, design-42)
det(designer-45, the-43)
amod(designer-45, next-44)
dobj(design-42, designer-45)
det(chain-48, the-47)
prep_in(designer-45, chain-48)
auxpass(designed-51, being-50)
prepc_without(design-42, designed-51)
dobj(designed-51, itself-52)

(ROOT
  (SQ (NNP Does)
    (NP (PRP$ your) (NN theory))
    (VP (VB allow)
      (PP (IN for)
        (NP
          (NP (DT the) (NN existence))
          (PP (IN of)
            (NP (DT a) (JJ natural) (, ,)
              (ADJP (CC but)
                (JJ complex)
                (CC and)
                (JJ intelligent))
              (NN being)
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBD was) (RB not)
                    (VP
                      (NP (PRP itself))
                      (VBN designed))))))))))
    (. ?)))

dep(allow-4, Does-1)
poss(theory-3, your-2)
nsubj(allow-4, theory-3)
root(ROOT-0, allow-4)
det(existence-7, the-6)
prep_for(allow-4, existence-7)
det(being-16, a-9)
amod(being-16, natural-10)
amod(being-16, complex-13)
conj_and(complex-13, intelligent-15)
amod(being-16, intelligent-15)
prep_of(existence-7, being-16)
nsubjpass(designed-21, that-17)
auxpass(designed-21, was-18)
neg(designed-21, not-19)
dobj(designed-21, itself-20)
ccomp(being-16, designed-21)

(ROOT
  (S
    (FRAG (IN If) (RB not))
    (, ,)
    (NP (RB then) (PRP we))
    (VP (VBP have)
      (NP (DT an) (JJ infinite) (NN regression)))
    (. .)))

dep(have-6, If-1)
neg(If-1, not-2)
advmod(we-5, then-4)
nsubj(have-6, we-5)
root(ROOT-0, have-6)
det(regression-9, an-7)
amod(regression-9, infinite-8)
dobj(have-6, regression-9)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (FRAG
        (ADVP (RB so))))
    (, ,)
    (WHADVP (WRB why))
    (SQ (RB not)
      (VP (VB hypothesize)
        (SBAR
          (SBAR (IN that)
            (S
              (NP (NNP Man))
              (VP (VBZ is)
                (NP
                  (NP (DT that))
                  (VP (VBG being))))))
          (, ,)
          (CC and)
          (SBAR (IN that)
            (S
              (NP (PRP we))
              (ADVP (RB just))
              (VP (VBP do) (RB n't)
                (ADVP (RB yet))
                (VP (VB understand)
                  (ADVP (WRB how))
                  (NP (PRP$ its) (JJ possible)))))))))
    (. ?)))

mark(so-2, If-1)
advcl(hypothesize-6, so-2)
advmod(hypothesize-6, why-4)
neg(hypothesize-6, not-5)
root(ROOT-0, hypothesize-6)
complm(that-10, that-7)
nsubj(that-10, Man-8)
cop(that-10, is-9)
ccomp(hypothesize-6, that-10)
partmod(that-10, being-11)
complm(understand-20, that-14)
nsubj(understand-20, we-15)
advmod(understand-20, just-16)
aux(understand-20, do-17)
neg(understand-20, n't-18)
advmod(understand-20, yet-19)
ccomp(hypothesize-6, understand-20)
conj_and(that-10, understand-20)
advmod(understand-20, how-21)
poss(possible-23, its-22)
dobj(understand-20, possible-23)

(ROOT
  (NP (NNP Sid)))

root(ROOT-0, Sid-1)

(ROOT
  (S
    (NP (NNP Jay) (NNP Richards))
    (VP (VBZ argues)
      (S
        (NP (DT that))
        (ADJP (RB not) (JJ knowing))
        ('' '')
        (SBAR
          (WHNP (WP Who))
          (S
            (VP (VBD designed)
              (NP (DT the) (NN designer)))))))
    (. ?)))

nn(Richards-2, Jay-1)
nsubj(argues-3, Richards-2)
root(ROOT-0, argues-3)
nsubj(designed-9, that-4)
neg(knowing-6, not-5)
dep(designed-9, knowing-6)
nsubj(designed-9, Who-8)
xcomp(argues-3, designed-9)
det(designer-11, the-10)
dobj(designed-9, designer-11)

(ROOT
  (S ('' '')
    (S
      (S
        (VP (VBZ does) (RB not)))
      (VP (VBP prove)))
    (IN that)
    (S
      (NP (EX there))
      (VP (VBD was)
        (NP (DT no) (NN designer))))
    (. .)))

csubj(prove-4, does-2)
neg(does-2, not-3)
root(ROOT-0, prove-4)
dep(prove-4, that-5)
expl(was-7, there-6)
ccomp(prove-4, was-7)
det(designer-9, no-8)
nsubj(was-7, designer-9)

(ROOT
  (S
    (SBAR (RB Just) (IN as)
      (S
        (NP (NN design))
        (VP (MD can)
          (VP (VB be)
            (VP (VBN inferred)
              (PP (IN from)
                (NP
                  (NP
                    (NP (NNP Mount) (NNP Rushmore))
                    (-LRB- -LRB-)
                    (NP (PRP$ his) (NN example))
                    (-RRB- -RRB-))
                  (PP (IN without)
                    (S
                      (VP (VBG knowing)
                        (NP (NN anything))
                        (PP (IN about)
                          (SBAR
                            (SBAR
                              (WHNP (WP who))
                              (S
                                (VP (VBD designed)
                                  (NP (PRP it)))))
                            (CC or)
                            (SBAR
                              (WHADVP (WRB where))
                              (S
                                (NP (PRP they))
                                (VP (VBD came)
                                  (PP (IN from)
                                    (PP (IN in)
                                      (NP (NN turn))))
                                  (, ,)
                                  (SBAR (IN so)
                                    (S
                                      (NP
                                        (NP (DT the) (NN complexity))
                                        (PP (IN of)
                                          (NP (NN life))))
                                      (VP (VBZ demonstrates)
                                        (NP (NN design))
                                        (SBAR (RB even) (IN though)
                                          (S
                                            (NP (PRP we))
                                            (VP (VBP know)
                                              (NP
                                                (NP (NN nothing))
                                                (PP (IN of)
                                                  (NP
                                                    (NP (DT the) (NN designer))
                                                    (PP (IN except)
                                                      (NP (DT that) (JJ he\/she\/they) (NN \/)))))))))))))))))))))))))))
    (NP (PRP it))
    (VP (VBZ exists))
    (. .)))

advmod(inferred-6, Just-1)
dep(inferred-6, as-2)
nsubjpass(inferred-6, design-3)
aux(inferred-6, can-4)
auxpass(inferred-6, be-5)
advcl(exists-49, inferred-6)
nn(Rushmore-9, Mount-8)
prep_from(inferred-6, Rushmore-9)
poss(example-12, his-11)
dep(Rushmore-9, example-12)
prepc_without(Rushmore-9, knowing-15)
dobj(knowing-15, anything-16)
nsubj(designed-19, who-18)
prepc_about(knowing-15, designed-19)
dobj(designed-19, it-20)
advmod(came-24, where-22)
nsubj(came-24, they-23)
prepc_about(knowing-15, came-24)
conj_or(designed-19, came-24)
prep(came-24, from-25)
pcomp(from-25, in-26)
prep_in(from-25, turn-27)
mark(demonstrates-34, so-29)
det(complexity-31, the-30)
nsubj(demonstrates-34, complexity-31)
prep_of(complexity-31, life-33)
advcl(came-24, demonstrates-34)
dobj(demonstrates-34, design-35)
advmod(know-39, even-36)
dep(know-39, though-37)
nsubj(know-39, we-38)
dep(demonstrates-34, know-39)
dobj(know-39, nothing-40)
det(designer-43, the-42)
prep_of(nothing-40, designer-43)
det(\/-47, that-45)
amod(\/-47, he\/she\/they-46)
prep_except(designer-43, \/-47)
nsubj(exists-49, it-48)
root(ROOT-0, exists-49)

(ROOT
  (NP (FW Fine) (. .)))

root(ROOT-0, Fine-1)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP agree)
      (SBAR (IN that)
        (S
          (NP
            (NP (NN lack))
            (PP (IN of)
              (NP
                (NP (NN knowledge))
                (PP (VBG concerning)
                  (NP (DT the) (NN designer))))))
          (VP (VBZ does) (RB not)
            (VP (VB prove)
              (SBAR
                (S
                  (NP (PRP he))
                  (VP (VBZ does) (RB n't)
                    (VP (VB exist))))))))))
    (. .)))

nsubj(agree-2, I-1)
root(ROOT-0, agree-2)
complm(prove-12, that-3)
nsubj(prove-12, lack-4)
prep_of(lack-4, knowledge-6)
det(designer-9, the-8)
prep_concerning(knowledge-6, designer-9)
aux(prove-12, does-10)
neg(prove-12, not-11)
ccomp(agree-2, prove-12)
nsubj(exist-16, he-13)
aux(exist-16, does-14)
neg(exist-16, n't-15)
ccomp(prove-12, exist-16)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB only))
    (VP (VBP argue)
      (SBAR (IN that)
        (S
          (PP (IN by)
            (NP
              (NP
                (NP (NNP IDs) (NNP OWN) (NNP ARGUMENT))
                (PRN (-LRB- -LRB-)
                  (SBAR (IN that)
                    (S
                      (NP (NN complexity))
                      (VP (VBZ requires)
                        (NP (JJ intelligent) (NN design)))))
                  (-RRB- -RRB-)))
              (, ,)
              (NP (DT the)
                (ADJP (JJ complex) (JJ intelligent))
                (NN designer))))
          (NP (PRP itself))
          (VP (VBD MUST)
            (NP
              (NP (NNP ALSO) (NNP HAVE) (NNP BEEN))
              (VP (VBN designed)))
            (, ,)
            (S
              (VP (VBG leading)
                (PP (TO to)
                  (NP (DT a) (JJ near-infinite) (NN regression)))
                (SBAR (IN that)
                  (S
                    (NP (NNP Richards) (PRP himself))
                    (VP (VBZ acknowledges))))))))))
    (. .)))

nsubj(argue-3, I-1)
advmod(argue-3, only-2)
root(ROOT-0, argue-3)
complm(MUST-22, that-4)
nn(ARGUMENT-8, IDs-6)
nn(ARGUMENT-8, OWN-7)
prep_by(MUST-22, ARGUMENT-8)
dep(requires-12, that-10)
nsubj(requires-12, complexity-11)
dep(ARGUMENT-8, requires-12)
amod(design-14, intelligent-13)
dobj(requires-12, design-14)
det(designer-20, the-17)
amod(intelligent-19, complex-18)
amod(designer-20, intelligent-19)
appos(ARGUMENT-8, designer-20)
nsubj(MUST-22, itself-21)
ccomp(argue-3, MUST-22)
nn(BEEN-25, ALSO-23)
nn(BEEN-25, HAVE-24)
dobj(MUST-22, BEEN-25)
partmod(BEEN-25, designed-26)
partmod(MUST-22, leading-28)
xcomp(MUST-22, leading-28)
det(regression-32, a-30)
amod(regression-32, near-infinite-31)
prep_to(leading-28, regression-32)
complm(acknowledges-36, that-33)
nsubj(acknowledges-36, Richards-34)
dep(Richards-34, himself-35)
ccomp(leading-28, acknowledges-36)

(ROOT
  (S
    (NP (NNP Richards))
    (ADVP (RB then))
    (VP (VBZ argues)
      (SBAR (IN that)
        (S
          (NP (DT each) (NN person))
          (VP (MD may)
            (VP (VB have)
              (NP
                (NP (PRP$ his) (JJ own) (NN explanation))
                (VP
                  (VP (VBG concerning)
                    (SBAR
                      (WHADVP (WRB how))
                      (S
                        (NP (NNP the) ('' '') (NNP First))
                        (VP (VBP Designer) ('' '')))))
                  (PRN (, ,)
                    (SINV (VB be)
                      (NP (PRP it))
                      (NP
                        (NP (NN god))
                        (, ,)
                        (NP (DT an)
                          (ADJP (JJ advanced) (JJ alien))
                          (NN species))))
                    (, ,))
                  (CC or)
                  (VP (NN matter)
                    (NP
                      (NP
                        (NP (PRP itself))
                        (-LRB- -LRB-)
                        (NP (PRP$ his) (NN example))
                        (-RRB- -RRB-))
                      (, ,)
                      (VP (VBD came)
                        (PP (IN into)
                          (NP (NN existence)))))))))))))
    (. .)))

nsubj(argues-3, Richards-1)
advmod(argues-3, then-2)
root(ROOT-0, argues-3)
complm(have-8, that-4)
det(person-6, each-5)
nsubj(have-8, person-6)
aux(have-8, may-7)
ccomp(argues-3, have-8)
poss(explanation-11, his-9)
amod(explanation-11, own-10)
dobj(have-8, explanation-11)
dep(explanation-11, concerning-12)
advmod(Designer-17, how-13)
nn(First-16, the-14)
nsubj(Designer-17, First-16)
ccomp(concerning-12, Designer-17)
cop(it-21, be-20)
parataxis(concerning-12, it-21)
parataxis(matter-30, it-21)
dep(it-21, god-22)
det(species-27, an-24)
amod(alien-26, advanced-25)
amod(species-27, alien-26)
appos(god-22, species-27)
dep(explanation-11, matter-30)
conj_or(concerning-12, matter-30)
dobj(matter-30, itself-31)
poss(example-34, his-33)
dep(itself-31, example-34)
partmod(itself-31, came-37)
prep_into(came-37, existence-39)

(ROOT
  (S (CC But)
    (S
      (ADVP (DT no) (NN matter)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (PRP you))
            (VP (VBP explain)
              (NP
                (NP (DT the) (NN existence))
                (PP (IN of)
                  (NP (DT a) (NNP First) (NN Designer))))))))
      (, ,)
      (NP (DT the) (NN explanation))
      (VP (MD must) (RB either)
        (VP (VB hypothesize)
          (NP (JJ complex) (NN intelligence))
          (PP (IN in)
            (NP
              (NP (DT the) (NN ABSENCE))
              (PP (IN of)
                (NP (DT a) (JJ previous) (NN designer))))))))
    (, ,)
    (CC or)
    (S
      (NP (PRP it))
      (VP (MD must)
        (VP (VB hypothesize)
          (NP (DT a) (JJ supernatural) (NN god))
          (SBAR (IN that)
            (SBAR
              (WHNP (WP who))
              (S
                (VP (VBZ does) (RB n't)
                  (VP (VB have)
                    (S
                      (VP (TO to)
                        (VP (VB obey)
                          (NP
                            (NP (NNP ID) (POS 's))
                            (NNS rules)))))))))))))
    (. .)))

dep(matter-3, no-2)
advmod(hypothesize-18, matter-3)
advmod(explain-6, how-4)
nsubj(explain-6, you-5)
dep(matter-3, explain-6)
det(existence-8, the-7)
dobj(explain-6, existence-8)
det(Designer-12, a-10)
nn(Designer-12, First-11)
prep_of(existence-8, Designer-12)
det(explanation-15, the-14)
nsubj(hypothesize-18, explanation-15)
aux(hypothesize-18, must-16)
advmod(hypothesize-18, either-17)
root(ROOT-0, hypothesize-18)
amod(intelligence-20, complex-19)
dobj(hypothesize-18, intelligence-20)
det(ABSENCE-23, the-22)
prep_in(hypothesize-18, ABSENCE-23)
det(designer-27, a-25)
amod(designer-27, previous-26)
prep_of(ABSENCE-23, designer-27)
nsubj(hypothesize-32, it-30)
aux(hypothesize-32, must-31)
conj_or(hypothesize-18, hypothesize-32)
det(god-35, a-33)
amod(god-35, supernatural-34)
dobj(hypothesize-32, god-35)
complm(have-40, that-36)
nsubj(have-40, who-37)
aux(have-40, does-38)
neg(have-40, n't-39)
dep(hypothesize-32, have-40)
aux(obey-42, to-41)
xcomp(have-40, obey-42)
poss(rules-45, ID-43)
dobj(obey-42, rules-45)

