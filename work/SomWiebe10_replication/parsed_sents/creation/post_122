(ROOT
  (S
    (NP (NNP ID))
    (VP (VBZ is)
      (VP (VBN offered)
        (PP (IN as)
          (NP
            (NP (DT an) (NN explanation))
            (PP (IN for)
              (NP
                (NP (DT the) (NN complexity))
                (PP (IN of)
                  (NP (NN life)))))))
        (PP (IN on)
          (NP
            (NP (NNP Earth))
            (, ,)
            (SBAR
              (WHNP (WDT which))
              (S (, ,)
                (PP (VBG according)
                  (PP (TO to)
                    (NP (NNP ID) (NNS proponents))))
                (, ,)
                (VP (MD can) (RB not)
                  (VP (VB be)
                    (VP (VBN explained)
                      (PP (IN by)
                        (NP
                          (NP (JJ random) (NN chance)
                            (CC and)
                            (NN survival))
                          (PP (IN of)
                            (NP (DT the) (JJS fittest))))))))))))))
    (. .)))

nsubjpass(offered-3, ID-1)
auxpass(offered-3, is-2)
root(ROOT-0, offered-3)
det(explanation-6, an-5)
prep_as(offered-3, explanation-6)
det(complexity-9, the-8)
prep_for(explanation-6, complexity-9)
prep_of(complexity-9, life-11)
prep_on(offered-3, Earth-13)
nsubjpass(explained-25, Earth-13)
prepc_according_to(explained-25, to-18)
nn(proponents-20, ID-19)
pobj(explained-25, proponents-20)
aux(explained-25, can-22)
neg(explained-25, not-23)
auxpass(explained-25, be-24)
rcmod(Earth-13, explained-25)
amod(chance-28, random-27)
agent(explained-25, chance-28)
agent(explained-25, survival-30)
conj_and(chance-28, survival-30)
det(fittest-33, the-32)
prep_of(chance-28, fittest-33)

(ROOT
  (S (CC But)
    (NP (NNP ID))
    (VP (VBZ suffers)
      (NP (DT a) (JJ fatal) (NN flaw)))
    (. .)))

cc(suffers-3, But-1)
nsubj(suffers-3, ID-2)
root(ROOT-0, suffers-3)
det(flaw-6, a-4)
amod(flaw-6, fatal-5)
dobj(suffers-3, flaw-6)

(ROOT
  (S (CC But)
    (NP (JJ human) (NN ignorance))
    (VP (VBZ does) (RB not)
      (VP (VB constitute)
        (NP
          (NP (NN evidence))
          (PP (IN for)
            (NP (DT an)
              (ADJP
                (ADJP (RB even) (RBR more) (JJ complex))
                (CC and)
                (ADJP (JJ inexplicable)))
              (NN intelligence))))))
    (. .)))

cc(constitute-6, But-1)
amod(ignorance-3, human-2)
nsubj(constitute-6, ignorance-3)
aux(constitute-6, does-4)
neg(constitute-6, not-5)
root(ROOT-0, constitute-6)
dobj(constitute-6, evidence-7)
det(intelligence-15, an-9)
advmod(complex-12, even-10)
advmod(complex-12, more-11)
amod(intelligence-15, complex-12)
conj_and(complex-12, inexplicable-14)
amod(intelligence-15, inexplicable-14)
prep_for(evidence-7, intelligence-15)

(ROOT
  (S
    (SBAR (RB Just) (IN because)
      (S
        (NP (PRP we))
        (VP (MD ca) (RB n't)
          (VP (VB explain)
            (NP (NN something))))))
    (VP (VBZ does) (RB n't)
      (VP (VB mean)
        (SBAR
          (S
            (NP (PRP it))
            (VP (MD can) (RB not)
              (VP (VB be)
                (VP (VBN explained))))))))
    (. .)))

advmod(explain-6, Just-1)
dep(explain-6, because-2)
nsubj(explain-6, we-3)
aux(explain-6, ca-4)
neg(explain-6, n't-5)
advcl(mean-10, explain-6)
csubj(mean-10, explain-6)
dobj(explain-6, something-7)
aux(mean-10, does-8)
neg(mean-10, n't-9)
root(ROOT-0, mean-10)
nsubjpass(explained-15, it-11)
aux(explained-15, can-12)
neg(explained-15, not-13)
auxpass(explained-15, be-14)
ccomp(mean-10, explained-15)

(ROOT
  (NP (NNP Sid)))

root(ROOT-0, Sid-1)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBP have)
          (S
            (VP (TO to)
              (VP (VB hypothesize)
                (NP (DT an) (JJ intelligent) (NN designer))
                (S
                  (VP (TO to)
                    (VP (VB explain)
                      (NP (NN life)))))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP we))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB hypothesize)
            (NP (DT another) (JJ intelligent) (NN designer))
            (S
              (VP (TO to)
                (VP (VB explain)
                  (NP
                    (NP (DT that) (JJ intelligent) (NN designer))
                    (, ,)
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (ADVP (RB also))
                        (VP (MD could) (RB not)
                          (VP (VB have)
                            (VP (VBN come) (IN about)
                              (PP (IN from)
                                (NP (JJ random) (NN chance))))))))))))))))
    (. .)))

mark(have-3, If-1)
nsubj(have-3, we-2)
xsubj(hypothesize-5, we-2)
advcl(need-15, have-3)
aux(hypothesize-5, to-4)
xcomp(have-3, hypothesize-5)
det(designer-8, an-6)
amod(designer-8, intelligent-7)
dobj(hypothesize-5, designer-8)
aux(explain-10, to-9)
xcomp(hypothesize-5, explain-10)
dobj(explain-10, life-11)
advmod(need-15, then-13)
nsubj(need-15, we-14)
xsubj(hypothesize-17, we-14)
root(ROOT-0, need-15)
aux(hypothesize-17, to-16)
xcomp(need-15, hypothesize-17)
det(designer-20, another-18)
amod(designer-20, intelligent-19)
dobj(hypothesize-17, designer-20)
aux(explain-22, to-21)
xcomp(hypothesize-17, explain-22)
det(designer-25, that-23)
amod(designer-25, intelligent-24)
dobj(explain-22, designer-25)
nsubj(come-32, designer-25)
advmod(come-32, also-28)
aux(come-32, could-29)
neg(come-32, not-30)
aux(come-32, have-31)
rcmod(designer-25, come-32)
dep(come-32, about-33)
amod(chance-36, random-35)
prep_from(come-32, chance-36)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB then))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB explain)
            (NP (DT the) (JJ second) (JJ intelligent) (NN designer))
            (PP
              (PP (IN with)
                (NP (DT a) (JJ third)))
              (, ,)
              (CC and)
              (RB so)
              (PP (IN on)
                (NP (NN ad) (NN infinitum))))))))
    (. .)))

nsubj(need-3, We-1)
xsubj(explain-5, We-1)
advmod(need-3, then-2)
root(ROOT-0, need-3)
aux(explain-5, to-4)
xcomp(need-3, explain-5)
det(designer-9, the-6)
amod(designer-9, second-7)
amod(designer-9, intelligent-8)
dobj(explain-5, designer-9)
prep(explain-5, with-10)
det(third-12, a-11)
pobj(with-10, third-12)
prep(explain-5, so-15)
advmod(with-10, so-15)
conj_and(with-10, so-15)
dep(with-10, on-16)
nn(infinitum-18, ad-17)
pobj(on-16, infinitum-18)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (ADVP (RB only)
        (NP (CD two) (NNS ways)))
      (S
        (VP (TO to)
          (VP (VB end)
            (NP (DT this) (JJ infinite) (NN regression))))))
    (. .)))

expl(are-2, There-1)
xsubj(end-7, There-1)
root(ROOT-0, are-2)
advmod(are-2, only-3)
num(ways-5, two-4)
pobj(only-3, ways-5)
aux(end-7, to-6)
xcomp(are-2, end-7)
det(regression-10, this-8)
amod(regression-10, infinite-9)
dobj(end-7, regression-10)

(ROOT
  (S
    (ADVP (RB First))
    (NP (PRP we))
    (VP (MD could)
      (VP (VB accept)
        (SBAR
          (SBAR (IN that)
            (S
              (NP
                (NP (NN intelligence))
                (CC and)
                (NP (JJ complex) (NN life) (NN CAN)))
              (VP (VBP come)
                (PRT (RP about))
                (PP (IN by)
                  (NP (JJ random) (NN chance))))))
          (, ,)
          (CC and)
          (SBAR (IN that)
            (S
              (NP
                (NP (DT the) (JJ first) (JJ intelligent) (NN designer))
                (PP (IN in)
                  (NP (DT this) (NN regression))))
              (VP (VBD did)
                (NP (RB exactly) (DT that))))))))
    (. .)))

advmod(accept-4, First-1)
nsubj(accept-4, we-2)
aux(accept-4, could-3)
root(ROOT-0, accept-4)
complm(come-11, that-5)
nsubj(come-11, intelligence-6)
amod(CAN-10, complex-8)
nn(CAN-10, life-9)
conj_and(intelligence-6, CAN-10)
nsubj(come-11, CAN-10)
ccomp(accept-4, come-11)
prt(come-11, about-12)
amod(chance-15, random-14)
prep_by(come-11, chance-15)
complm(did-26, that-18)
det(designer-22, the-19)
amod(designer-22, first-20)
amod(designer-22, intelligent-21)
nsubj(did-26, designer-22)
det(regression-25, this-24)
prep_in(designer-22, regression-25)
ccomp(accept-4, did-26)
conj_and(come-11, did-26)
advmod(that-28, exactly-27)
dobj(did-26, that-28)

(ROOT
  (S (CC But)
    (SBAR (IN if)
      (S
        (NP (PRP we))
        (VP (VBP do)
          (NP (DT this)))))
    (, ,)
    (ADVP (RB then))
    (VP (VBZ why) (RB not)
      (ADVP (RB just))
      (VP
        (VP (VB accept)
          (SBAR (IN that)
            (S
              (NP (NNP WE))
              (VP (VBD came)
                (PRT (RP about))
                (PP (IN by)
                  (NP (JJ random) (NN chance)))))))
        (CC and)
        (VP (VB avoid)
          (NP
            (NP (DT the) (NN need))
            (PP (IN for)
              (NP (DT any) (NN regression)))))))
    (. ?)))

cc(why-8, But-1)
mark(do-4, if-2)
nsubj(do-4, we-3)
dep(why-8, do-4)
dobj(do-4, this-5)
advmod(why-8, then-7)
root(ROOT-0, why-8)
neg(why-8, not-9)
advmod(why-8, just-10)
dep(why-8, accept-11)
complm(came-14, that-12)
nsubj(came-14, WE-13)
ccomp(accept-11, came-14)
prt(came-14, about-15)
amod(chance-18, random-17)
prep_by(came-14, chance-18)
dep(why-8, avoid-20)
conj_and(accept-11, avoid-20)
det(need-22, the-21)
dobj(avoid-20, need-22)
det(regression-25, any-24)
prep_for(need-22, regression-25)

(ROOT
  (S
    (ADVP (LS Second))
    (, ,)
    (NP (PRP we))
    (VP (MD could)
      (VP (VB hypothesize)
        (NP
          (NP (DT a) (JJ supernatural) (NN god))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBD did) (RB not)
                (VP (VB need)
                  (S
                    (VP (TO to)
                      (VP (VB be)
                        (VP (VBN designed)
                          (PP (IN by)
                            (NP (DT a) (JJ previous) (JJ intelligent) (NN designer))))))))))))
        (PRN (-LRB- -LRB-)
          (S
            (NP (RB maybe) (NN god))
            (VP (VBZ is)
              (NP (DT a) (JJ self-designing) (NN designer))))
          (. ?) (-RRB- -RRB-))))
    (. .)))

advmod(hypothesize-5, Second-1)
nsubj(hypothesize-5, we-3)
aux(hypothesize-5, could-4)
root(ROOT-0, hypothesize-5)
det(god-8, a-6)
amod(god-8, supernatural-7)
dobj(hypothesize-5, god-8)
nsubj(need-12, god-8)
aux(need-12, did-10)
neg(need-12, not-11)
rcmod(god-8, need-12)
aux(designed-15, to-13)
auxpass(designed-15, be-14)
xcomp(need-12, designed-15)
det(designer-20, a-17)
amod(designer-20, previous-18)
amod(designer-20, intelligent-19)
agent(designed-15, designer-20)
advmod(god-23, maybe-22)
nsubj(designer-27, god-23)
cop(designer-27, is-24)
det(designer-27, a-25)
amod(designer-27, self-designing-26)
parataxis(hypothesize-5, designer-27)

(ROOT
  (S (CC But)
    (SBAR (IN if)
      (S
        (S
          (NP (PRP we))
          (VP (VBP do)
            (NP (DT this))))
        (, ,) (RB then)
        (S
          (NP (NNP ID))
          (ADVP (RB clearly))
          (VP (VBZ becomes)
            (NP (DT a) (JJ religious) (NN argument))))))
    (, ,)
    (NP
      (NP (NN something) (NN ID) (NNS proponents))
      (PP (IN in)
        (NP (DT this) (NN debate))))
    (VP (VBP have)
      (VP (VBN denied)))
    (. .)))

cc(denied-22, But-1)
mark(do-4, if-2)
nsubj(do-4, we-3)
advcl(denied-22, do-4)
dobj(do-4, this-5)
advmod(do-4, then-7)
nsubj(argument-13, ID-8)
advmod(argument-13, clearly-9)
cop(argument-13, becomes-10)
det(argument-13, a-11)
amod(argument-13, religious-12)
dep(do-4, argument-13)
nn(proponents-17, something-15)
nn(proponents-17, ID-16)
nsubj(denied-22, proponents-17)
det(debate-20, this-19)
prep_in(proponents-17, debate-20)
aux(denied-22, have-21)
root(ROOT-0, denied-22)

(ROOT
  (S
    (PP (IN At)
      (NP (DT this) (NN point)))
    (NP (DT no) (NN one))
    (VP (MD can)
      (VP (VB explain)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (NN life\/intelligence))
            (VP (VBD formed)
              (PP (IN on)
                (NP (DT this) (NN planet))))))))
    (. .)))

det(point-3, this-2)
prep_at(explain-7, point-3)
det(one-5, no-4)
nsubj(explain-7, one-5)
aux(explain-7, can-6)
root(ROOT-0, explain-7)
advmod(formed-10, how-8)
nsubj(formed-10, life\/intelligence-9)
ccomp(explain-7, formed-10)
det(planet-13, this-12)
prep_on(formed-10, planet-13)

