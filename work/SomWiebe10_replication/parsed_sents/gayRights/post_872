(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (NN proposition) (CD 8))
          (VP (VBZ passes))))
      (, ,)
      (NP (PRP it))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN challenged)
            (PP (IN at)
              (NP (DT the) (JJS earliest) (JJ possible) (NN convenience)))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP it))
      (VP (MD will)
        (VP (VB end)
          (PRT (RP up))
          (PP (IN in)
            (NP
              (NP (DT the) (JJ same) (JJ supreme) (NN court))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBD allowed)
                    (NP (JJ gay) (NN marriage))
                    (PP (IN in)
                      (NP (DT the) (JJ first) (NN place)))))))))))
    (. .)))

mark(passes-4, If-1)
nsubj(passes-4, proposition-2)
num(proposition-2, 8-3)
advcl(challenged-9, passes-4)
nsubjpass(challenged-9, it-6)
aux(challenged-9, will-7)
auxpass(challenged-9, be-8)
root(ROOT-0, challenged-9)
det(convenience-14, the-11)
amod(convenience-14, earliest-12)
amod(convenience-14, possible-13)
prep_at(challenged-9, convenience-14)
nsubj(end-19, it-17)
aux(end-19, will-18)
conj_and(challenged-9, end-19)
prt(end-19, up-20)
det(court-25, the-22)
amod(court-25, same-23)
amod(court-25, supreme-24)
prep_in(end-19, court-25)
nsubj(allowed-27, court-25)
rcmod(court-25, allowed-27)
amod(marriage-29, gay-28)
dobj(allowed-27, marriage-29)
det(place-33, the-31)
amod(place-33, first-32)
prep_in(allowed-27, place-33)

(ROOT
  (SQ (MD Ca) (RB n't)
    (NP (PRP we))
    (ADVP (RB just))
    (VP (VB let)
      (S
        (NP (DT this))
        (VP (VB go))))
    (. ?)))

aux(let-5, Ca-1)
neg(let-5, n't-2)
nsubj(let-5, we-3)
advmod(let-5, just-4)
root(ROOT-0, let-5)
nsubj(go-7, this-6)
ccomp(let-5, go-7)

(ROOT
  (NP (NNP Michelle)))

root(ROOT-0, Michelle-1)

(ROOT
  (SQ (MD Ca) (RB n't)
    (NP (PRP we))
    (ADVP (RB just))
    (VP (VB allow)
      (S
        (NP (NNS people))
        (VP (TO to)
          (VP (VB live)
            (NP
              (NP
                (NP (PRP$ their) (JJ own) (NNS lives))
                (NP (DT the) (NN way)))
              (SBAR
                (S
                  (NP (PRP they))
                  (VP (VBP want)
                    (PP (TO to))))))))))
    (. ?)))

aux(allow-5, Ca-1)
neg(allow-5, n't-2)
nsubj(allow-5, we-3)
advmod(allow-5, just-4)
root(ROOT-0, allow-5)
nsubj(live-8, people-6)
aux(live-8, to-7)
xcomp(allow-5, live-8)
poss(lives-11, their-9)
amod(lives-11, own-10)
dobj(live-8, lives-11)
dobj(want-15, lives-11)
prep_to(want-15, lives-11)
det(way-13, the-12)
dep(lives-11, way-13)
nsubj(want-15, they-14)
rcmod(lives-11, want-15)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP do) (RB n't)
      (VP (VB hurt)
        (NP (NN anybody))))
    (. .)))

nsubj(hurt-4, They-1)
aux(hurt-4, do-2)
neg(hurt-4, n't-3)
root(ROOT-0, hurt-4)
dobj(hurt-4, anybody-5)

(ROOT
  (SQ (VBP Do)
    (NP (PRP you))
    (VP (VB think)
      (SBAR (IN that)
        (S
          (NP (PRP they))
          (VP (VBP do) (RB n't)
            (VP (VB get)
              (VP (VBN married)
                (PP (IN in)
                  (NP (PRP$ their) (JJ own) (NNS Churches)))))))))
    (. ?)))

aux(think-3, Do-1)
nsubj(think-3, you-2)
root(ROOT-0, think-3)
complm(married-9, that-4)
nsubjpass(married-9, they-5)
aux(married-9, do-6)
neg(married-9, n't-7)
auxpass(married-9, get-8)
ccomp(think-3, married-9)
poss(Churches-13, their-11)
amod(Churches-13, own-12)
prep_in(married-9, Churches-13)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ
      (VP (VBZ makes)
        (NP (PRP$ your) (NNS beliefs))
        (ADVP (RBR better))
        (PP (IN than)
          (NP (PRP theirs)))))
    (. ?)))

nsubj(makes-2, What-1)
root(ROOT-0, makes-2)
poss(beliefs-4, your-3)
dobj(makes-2, beliefs-4)
advmod(makes-2, better-5)
prep_than(makes-2, theirs-7)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP use)
      (NP (DT the) (JJ same) (NNP Bible)))
    (. .)))

nsubj(use-2, They-1)
root(ROOT-0, use-2)
det(Bible-5, the-3)
amod(Bible-5, same-4)
dobj(use-2, Bible-5)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP me))
        (VP (VB tell)
          (NP (PRP you))
          (NP (WP what)))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(tell-3, me-2)
ccomp(Let-1, tell-3)
iobj(tell-3, you-4)
dobj(tell-3, what-5)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP want)
      (S
        (NP (NNP ALL) (NNS people))
        (VP (TO to)
          (VP (VB have)
            (NP (JJ equal) (NNS rights))))))
    (. .)))

nsubj(want-2, I-1)
root(ROOT-0, want-2)
nn(people-4, ALL-3)
nsubj(have-6, people-4)
aux(have-6, to-5)
xcomp(want-2, have-6)
amod(rights-8, equal-7)
dobj(have-6, rights-8)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP they))
        (VP (VBP have)
          (S
            (VP (TO to)
              (VP (VB borrow)
                (NP (DT a) (NN word)
                  (S
                    (VP (TO to)
                      (VP (VB gain)
                        (NP (DT those) (NNS rights))
                        (PP (IN from)
                          (NP (JJ straight) (NNP America))))))))))
          (S
            (VP (TO to)
              (VP (VB achieve)
                (NP (PRP them))))))))
    (, ,)
    (NP (PRP I))
    (VP (VBP 'm)
      (NP
        (NP (DT all))
        (PP (IN for)
          (NP (PRP it)))))
    (. .)))

mark(have-3, If-1)
nsubj(have-3, they-2)
xsubj(borrow-5, they-2)
xsubj(achieve-16, they-2)
advcl(all-21, have-3)
aux(borrow-5, to-4)
xcomp(have-3, borrow-5)
det(word-7, a-6)
dobj(borrow-5, word-7)
aux(gain-9, to-8)
infmod(word-7, gain-9)
det(rights-11, those-10)
dobj(gain-9, rights-11)
amod(America-14, straight-13)
prep_from(gain-9, America-14)
aux(achieve-16, to-15)
xcomp(have-3, achieve-16)
dobj(achieve-16, them-17)
nsubj(all-21, I-19)
cop(all-21, 'm-20)
root(ROOT-0, all-21)
prep_for(all-21, it-23)

