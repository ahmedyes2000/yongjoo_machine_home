(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (MD can)
      (NP (PRP you))
      (VP (VB say)
        (SBAR (IN that)
          (S
            (NP (NNS genetics))
            (VP (VBZ does) (RB n't)
              (VP (VB dictate)
                (NP (DT a) (JJ persons) (JJ entire) (NN life))))))))
    (. .)))

advmod(say-4, How-1)
aux(say-4, can-2)
nsubj(say-4, you-3)
root(ROOT-0, say-4)
complm(dictate-9, that-5)
nsubj(dictate-9, genetics-6)
aux(dictate-9, does-7)
neg(dictate-9, n't-8)
ccomp(say-4, dictate-9)
det(life-13, a-10)
amod(life-13, persons-11)
amod(life-13, entire-12)
dobj(dictate-9, life-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT some))
        (VP (VBZ is)
          (VP (VBN born)
            (PP (IN with)
              (NP (DT a) (JJ genetic) (NN disorder)))))))
    (VP (VBP like)
      (NP (RB perhaps) (JJ cerebral) (NN palsy)))
    (. .)))

mark(born-4, If-1)
nsubjpass(born-4, some-2)
auxpass(born-4, is-3)
csubj(like-9, born-4)
det(disorder-8, a-6)
amod(disorder-8, genetic-7)
prep_with(born-4, disorder-8)
root(ROOT-0, like-9)
advmod(palsy-12, perhaps-10)
amod(palsy-12, cerebral-11)
dobj(like-9, palsy-12)

(ROOT
  (S
    (S
      (NP (EX There))
      (NP (JJ whole) (NN life))
      (VP
        (VP (VBZ is)
          (VP (VBG going)
            (S
              (VP (TO to)
                (VP (VB be)
                  (VP (VBN dictated)
                    (PP (IN by)
                      (NP
                        (NP (DT that) (NN disease))
                        (VP
                          (ADVP (RB there))
                          (VBG going)
                          (S
                            (VP (TO to)
                              (VP (VB have)
                                (NP
                                  (NP (NNS limitations))
                                  (PP (IN on)
                                    (SBAR
                                      (WHNP (WP what))
                                      (S
                                        (NP (PRP it))
                                        (VP (VBZ 's)
                                          (ADJP (JJ possible)
                                            (PP (IN for)
                                              (NP (PRP them))))
                                          (S
                                            (VP (TO to)
                                              (VP (VB do)))))))))))))))))))))
        (CC and)
        (, ,)
        (NP (PRP$ its) (JJ sad))))
    (CC but)
    (, ,)
    (S
      (NP (PRP they))
      (VP (VBP are)
        (ADVP (RB also))
        (VP (VBG going)
          (S
            (VP (TO to)
              (VP (VB be)
                (VP (VBN looked)
                  (PP (IN at) (IN as)
                    (NP (`` ``)
                      (NP (JJR lesser))
                      ('' '')
                      (PP (IN by)
                        (NP (JJ other) (NNS people))))))))))))
    (. .)))

expl(going-5, There-1)
xsubj(dictated-8, There-1)
amod(life-3, whole-2)
nsubj(going-5, life-3)
xsubj(dictated-8, life-3)
nsubj(sad-29, life-3)
aux(going-5, is-4)
root(ROOT-0, going-5)
aux(dictated-8, to-6)
auxpass(dictated-8, be-7)
xcomp(going-5, dictated-8)
det(disease-11, that-10)
agent(dictated-8, disease-11)
advmod(going-13, there-12)
partmod(disease-11, going-13)
aux(have-15, to-14)
xcomp(going-13, have-15)
dobj(have-15, limitations-16)
dep(possible-21, what-18)
nsubj(possible-21, it-19)
cop(possible-21, 's-20)
prepc_on(limitations-16, possible-21)
prep_for(possible-21, them-23)
aux(do-25, to-24)
xcomp(possible-21, do-25)
poss(sad-29, its-28)
conj_and(going-5, sad-29)
dobj(going-5, sad-29)
nsubj(going-5, sad-29)
nsubj(going-35, they-32)
xsubj(looked-38, they-32)
aux(going-35, are-33)
advmod(going-35, also-34)
ccomp(going-5, going-35)
conj_but(going-5, going-35)
aux(looked-38, to-36)
auxpass(looked-38, be-37)
xcomp(going-35, looked-38)
dep(looked-38, at-39)
prep_as(looked-38, lesser-42)
amod(people-46, other-45)
prep_by(lesser-42, people-46)

(ROOT
  (S
    (PP (RB Just) (IN like)
      (NP
        (NP (JJ certain) (NNS people))
        (VP (VB Look)
          (PRT (RP down))
          (NP (NNS others))
          (SBAR (IN because)
            (S
              (NP (EX there))
              (ADJP (JJ gay)))))))
    (, ,)
    (NP (NNS people))
    (VP (VBP look)
      (ADVP (RB down)
        (PP (IN on)
          (NP (NNS others))))
      (SBAR (IN because)
        (S
          (NP (DT the))
          (VP (VBP have)
            (NP
              (NP (JJ genetic) (NNS disorders))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (MD ca) (RB n't)
                    (VP (VB be)
                      (VP (VBN helped)))))))))))
    (. .)))

advmod(look-13, Just-1)
advcl(look-13, like-2)
amod(people-4, certain-3)
prep_like(look-13, people-4)
dep(people-4, Look-5)
prt(Look-5, down-6)
dobj(Look-5, others-7)
mark(gay-10, because-8)
expl(gay-10, there-9)
advcl(Look-5, gay-10)
nsubj(look-13, people-12)
root(ROOT-0, look-13)
advmod(look-13, down-14)
prep_on(down-14, others-16)
mark(have-19, because-17)
nsubj(have-19, the-18)
advcl(look-13, have-19)
amod(disorders-21, genetic-20)
dobj(have-19, disorders-21)
nsubjpass(helped-26, disorders-21)
aux(helped-26, ca-23)
neg(helped-26, n't-24)
auxpass(helped-26, be-25)
rcmod(disorders-21, helped-26)

(ROOT
  (S (RB So)
    (S
      (VP (TO to)
        (VP (VB say)
          (SBAR (IN that)
            (S
              (NP (NNS genetics))
              (VP (VBZ does) (RB n't)
                (VP (VB dictate)
                  (NP (PRP$ your) (NN life)))))))))
    (VP (VBZ is)
      (ADJP (RB completely) (JJ wrong)))
    (. .)))

advmod(wrong-13, So-1)
aux(say-3, to-2)
csubj(wrong-13, say-3)
complm(dictate-8, that-4)
nsubj(dictate-8, genetics-5)
aux(dictate-8, does-6)
neg(dictate-8, n't-7)
ccomp(say-3, dictate-8)
poss(life-10, your-9)
dobj(dictate-8, life-10)
cop(wrong-13, is-11)
advmod(wrong-13, completely-12)
root(ROOT-0, wrong-13)

(ROOT
  (S
    (S
      (SBAR (RB Even) (IN If)
        (S
          (NP (PRP you))
          (VP (VBD were)
            (ADJP (JJ right)
              (PP (IN about)
                (S
                  (VP (VBG being)
                    (ADJP (JJ able)
                      (S
                        (VP (TO to)
                          (VP (VB control)
                            (SBAR
                              (WHNP (WP what))
                              (S
                                (NP (PRP$ your) (JJ sexual) (NN orientation))
                                (VP (VBZ is)))))))))))))))
      (, ,)
      (NP (DT A) (JJ strait) (NN man))
      (VP (MD will)
        (ADVP (RB never))
        (VP (VB be)
          (ADJP (JJ happy))
          (SBAR (IN if)
            (S
              (NP (PRP he))
              (VP (VBZ 's)
                (PP (IN in)
                  (NP
                    (NP (DT a) (NN relationship))
                    (PP (IN with)
                      (NP (DT a) (JJ gay) (NN man)))))))))))
    (, ,)
    (CC and)
    (S
      (NP (DT a) (JJ gay) (NN man))
      (VP (MD will)
        (ADVP (RB never))
        (VP (VB be)
          (ADJP (JJ happy)
            (PP (IN in)
              (NP
                (NP (DT a) (NN relationship))
                (PP (IN with)
                  (NP (DT a) (NNS women)))))))))
    (. .)))

advmod(right-5, Even-1)
dep(right-5, If-2)
nsubj(right-5, you-3)
cop(right-5, were-4)
advcl(happy-23, right-5)
cop(able-8, being-7)
prepc_about(right-5, able-8)
aux(control-10, to-9)
xcomp(able-8, control-10)
dobj(is-15, what-11)
poss(orientation-14, your-12)
amod(orientation-14, sexual-13)
nsubj(is-15, orientation-14)
ccomp(control-10, is-15)
det(man-19, A-17)
amod(man-19, strait-18)
nsubj(happy-23, man-19)
aux(happy-23, will-20)
neg(happy-23, never-21)
cop(happy-23, be-22)
root(ROOT-0, happy-23)
mark('s-26, if-24)
nsubj('s-26, he-25)
advcl(happy-23, 's-26)
det(relationship-29, a-28)
prep_in('s-26, relationship-29)
det(man-33, a-31)
amod(man-33, gay-32)
prep_with(relationship-29, man-33)
det(man-38, a-36)
amod(man-38, gay-37)
nsubj(happy-42, man-38)
aux(happy-42, will-39)
neg(happy-42, never-40)
cop(happy-42, be-41)
conj_and(happy-23, happy-42)
det(relationship-45, a-44)
prep_in(happy-42, relationship-45)
det(women-48, a-47)
prep_with(relationship-45, women-48)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP make)
      (S
        (NP (PRP it))
        (ADJP (JJ sound)
          (PP (IN like)
            (S
              (VP (VBG being)
                (ADJP (JJ gay)
                  (SBAR
                    (S
                      (VP (VBZ is)
                        (NP
                          (NP (DT a) (NN disease))
                          (SBAR
                            (WHNP (WDT that))
                            (S
                              (VP (MD can)
                                (VP (VB be)
                                  (VP (VBN cured)
                                    (SBAR
                                      (WHADVP (WRB when))
                                      (S
                                        (NP (DT that))
                                        (VP (VBZ 's) (RB not)
                                          (NP (DT the) (NN case))
                                          (ADVP (IN at) (DT all)))))))))))))))))))))
    (. .)))

nsubj(make-2, You-1)
root(ROOT-0, make-2)
nsubj(sound-4, it-3)
xcomp(make-2, sound-4)
cop(gay-7, being-6)
prepc_like(sound-4, gay-7)
cop(disease-10, is-8)
det(disease-10, a-9)
dep(gay-7, disease-10)
nsubjpass(cured-14, disease-10)
aux(cured-14, can-12)
auxpass(cured-14, be-13)
rcmod(disease-10, cured-14)
advmod(case-20, when-15)
nsubj(case-20, that-16)
cop(case-20, 's-17)
neg(case-20, not-18)
det(case-20, the-19)
advcl(cured-14, case-20)
advmod(case-20, at-21)
pobj(at-21, all-22)

