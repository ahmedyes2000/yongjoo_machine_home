(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB just))
    (VP (VBP have)
      (S
        (VP (TO to)
          (VP (VB respond)
            (PP (TO to)
              (NP
                (NP
                  (NP (CD one))
                  (PP (IN of)
                    (NP (PRP$ your) (JJ last) (NNS statements))))
                (: :) (`` ``)
                (S
                  (SBAR (IN Until)
                    (S
                      (NP (PRP you))
                      (VP (MD can)
                        (VP (VB show)
                          (NP (PRP me))
                          (SBAR
                            (WHNP (WP what))
                            (S
                              (NP (JJ human) (NN right))
                              (VP (VBZ is)
                                (VP (VBG being)
                                  (VP (VBN denied))))))))))
                  (, ,)
                  (NP (PRP I))
                  (VP (VBP do) (RB n't)
                    (VP (VB know))))))
            (SBAR
              (WHADVP (WRB where))
              (S
                (NP (RB else))
                (VP (TO to)
                  (VP (VB go)
                    (PP (IN with)
                      (NP (DT this)))))))
            ('' '')
            (NP (DT The) (NN right))
            (PP (TO to)
              (NP
                (NP (NN life))
                (, ,)
                (NP (NNP LIBERTY))
                (, ,)
                (CC and)
                (NP
                  (NP (DT the) (NN PURSUIT))
                  (PP (IN OF)
                    (NP (NNP HAPPINESS))))))))))
    (. .)))

nsubj(have-3, I-1)
xsubj(respond-5, I-1)
advmod(have-3, just-2)
root(ROOT-0, have-3)
aux(respond-5, to-4)
xcomp(have-3, respond-5)
prep_to(respond-5, one-7)
poss(statements-11, your-9)
amod(statements-11, last-10)
prep_of(one-7, statements-11)
mark(show-17, Until-14)
nsubj(show-17, you-15)
aux(show-17, can-16)
advcl(know-29, show-17)
dobj(show-17, me-18)
dobj(denied-24, what-19)
amod(right-21, human-20)
nsubjpass(denied-24, right-21)
aux(denied-24, is-22)
auxpass(denied-24, being-23)
dep(show-17, denied-24)
nsubj(know-29, I-26)
aux(know-29, do-27)
neg(know-29, n't-28)
dep(one-7, know-29)
advmod(go-33, where-30)
nsubj(go-33, else-31)
aux(go-33, to-32)
xcomp(respond-5, go-33)
prep_with(go-33, this-35)
det(right-38, The-37)
dobj(respond-5, right-38)
prep_to(respond-5, life-40)
prep_to(respond-5, LIBERTY-42)
conj_and(life-40, LIBERTY-42)
det(PURSUIT-46, the-45)
prep_to(respond-5, PURSUIT-46)
conj_and(life-40, PURSUIT-46)
prep_of(PURSUIT-46, HAPPINESS-48)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (PP (IN in)
        (NP
          (NP (DT the) (NN Declaration))
          (PP (IN of)
            (NP (NN Independence))))))
    (. .)))

nsubj('s-2, It-1)
root(ROOT-0, 's-2)
det(Declaration-5, the-4)
prep_in('s-2, Declaration-5)
prep_of(Declaration-5, Independence-7)

(ROOT
  (S
    (NP
      (NP (DT The) (NN denial))
      (PP (IN of)
        (NP (JJ gay) (NN marriage))))
    (VP (VBZ is)
      (VP (VBG violating)
        (NP (CD two) (JJ basic) (JJ human) (NNS rights))))
    (. .)))

det(denial-2, The-1)
nsubj(violating-7, denial-2)
amod(marriage-5, gay-4)
prep_of(denial-2, marriage-5)
aux(violating-7, is-6)
root(ROOT-0, violating-7)
num(rights-11, two-8)
amod(rights-11, basic-9)
amod(rights-11, human-10)
dobj(violating-7, rights-11)

