(ROOT
  (S
    (ADVP (RB Furthermore))
    (, ,)
    (NP
      (NP
        (NP (PRP$ your) (NN idea))
        (SBAR (IN that)
          (S
            (NP (NNS children))
            (VP (MD should)
              (VP (VB be)
                (VP (VBN left)
                  (PP (TO to)
                    (NP (PRP$ their) (JJ biological) (NNS parents)))))))))
      (PRN (-LRB- -LRB-)
        (SBAR (IN while)
          (S
            (VP (VBG holding)
              (NP (DT no) (NN water)))))
        (-RRB- -RRB-)))
    (VP (VBZ is)
      (ADJP (JJ moot)
        (PP (IN in)
          (NP
            (NP (DT a) (NN discussion))
            (PP (IN of)
              (NP (NN adoption))
              (: -))))))
    (. .)))

advmod(moot-21, Furthermore-1)
poss(idea-4, your-3)
nsubj(moot-21, idea-4)
complm(left-9, that-5)
nsubjpass(left-9, children-6)
aux(left-9, should-7)
auxpass(left-9, be-8)
dep(idea-4, left-9)
poss(parents-13, their-11)
amod(parents-13, biological-12)
prep_to(left-9, parents-13)
mark(holding-16, while-15)
dep(idea-4, holding-16)
det(water-18, no-17)
dobj(holding-16, water-18)
cop(moot-21, is-20)
root(ROOT-0, moot-21)
det(discussion-24, a-23)
prep_in(moot-21, discussion-24)
prep_of(discussion-24, adoption-26)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS children))
      (, ,)
      (SBAR (IN if)
        (S
          (VP (VBD put)
            (PRT (RP up))
            (PP (IN for)
              (NP (NN adoption))))))
      (, ,))
    (VP (MD will)
      (ADVP (RB presumably))
      (RB not)
      (VP (VB be)
        (VP (VBN raised)
          (PP (IN by)
            (NP (PRP$ their) (JJ biological) (NNS parents))))))
    (. .)))

det(children-2, The-1)
nsubjpass(raised-14, children-2)
mark(put-5, if-4)
dep(children-2, put-5)
prt(put-5, up-6)
prep_for(put-5, adoption-8)
aux(raised-14, will-10)
advmod(raised-14, presumably-11)
neg(raised-14, not-12)
auxpass(raised-14, be-13)
root(ROOT-0, raised-14)
poss(parents-18, their-16)
amod(parents-18, biological-17)
agent(raised-14, parents-18)

(ROOT
  (S
    (NP
      (NP (DT The) (NN argument))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBD presented)
            (PP (IN in)
              (NP (DT that) (NN quote)))))))
    (VP (VBZ is)
      (ADJP (JJ moot))
      (, ,)
      (SBAR
        (SBAR (IN because)
          (S
            (S
              (LST (-LRB- -LRB-) (LS 1) (-RRB- -RRB-))
              (NP (PRP one))
              (VP (MD can)
                (ADVP (RB never))
                (VP (VB make)
                  (NP (PDT such) (DT a) (NN judgment))
                  (SBAR (IN unless)
                    (S
                      (NP (JJ compelling) (JJ scientific) (NN evidence))
                      (VP (VBZ has)
                        (VP (VBN arisen))))))))
            (PRN (-LRB- -LRB-)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBZ has) (RB not)
                    (VP (VBN been)
                      (VP (VBN provided))))))
              (-RRB- -RRB-))))
        (: ;)
        (CC and)
        (SBAR (IN because)
          (S
            (NP
              (NP
                (PRN (-LRB- -LRB-)
                  (NP (CD 2))
                  (-RRB- -RRB-))
                (NNS aspirations))
              (PP (IN of)
                (NP (DT an) (NN individual))))
            (VP (VBP do) (RB n't)
              (VP (VB translate)
                (PP (TO to)
                  (NP
                    (NP (NNS aspirations))
                    (PP (IN for)
                      (NP (DT the) (NN society)))))))))))
    (. .)))

det(argument-2, The-1)
dobj(presented-4, argument-2)
nsubj(moot-9, argument-2)
nsubj(presented-4, you-3)
rcmod(argument-2, presented-4)
det(quote-7, that-6)
prep_in(presented-4, quote-7)
cop(moot-9, is-8)
root(ROOT-0, moot-9)
mark(make-18, because-11)
dep(make-18, 1-13)
nsubj(make-18, one-15)
aux(make-18, can-16)
neg(make-18, never-17)
dep(moot-9, make-18)
predet(judgment-21, such-19)
det(judgment-21, a-20)
dobj(make-18, judgment-21)
mark(arisen-27, unless-22)
amod(evidence-25, compelling-23)
amod(evidence-25, scientific-24)
nsubj(arisen-27, evidence-25)
aux(arisen-27, has-26)
advcl(make-18, arisen-27)
nsubjpass(provided-33, which-29)
aux(provided-33, has-30)
neg(provided-33, not-31)
auxpass(provided-33, been-32)
dep(make-18, provided-33)
mark(translate-47, because-37)
appos(aspirations-41, 2-39)
nsubj(translate-47, aspirations-41)
det(individual-44, an-43)
prep_of(aspirations-41, individual-44)
aux(translate-47, do-45)
neg(translate-47, n't-46)
dep(moot-9, translate-47)
conj_and(make-18, translate-47)
prep_to(translate-47, aspirations-49)
det(society-52, the-51)
prep_for(aspirations-49, society-52)

(ROOT
  (S ('' '')
    (S
      (NP (PRP You))
      (VP (MD can)
        (VP (VB say)
          (SBAR
            (S
              (NP
                (NP (DT a) (NN child) (POS 's))
                (NNS peers))
              (VP (MD should) (RB n't)
                (VP (VB haze)
                  (NP (PRP them))
                  (PP (IN for)
                    (S
                      (VP (VBG being)
                        (NP
                          (NP (NN part))
                          (PP (IN of)
                            (NP (DT an) (JJ alternate) (NN lifestyle))))))))))))))
    (, ,)
    (CC and)
    (S
      (ADVP (DT no) (NN doubt))
      (NP (PRP they))
      (VP (MD should) (RB not)))
    (. .)))

nsubj(say-4, You-2)
aux(say-4, can-3)
root(ROOT-0, say-4)
det(child-6, a-5)
poss(peers-8, child-6)
nsubj(haze-11, peers-8)
aux(haze-11, should-9)
neg(haze-11, n't-10)
ccomp(say-4, haze-11)
dobj(haze-11, them-12)
cop(part-15, being-14)
prepc_for(haze-11, part-15)
det(lifestyle-19, an-17)
amod(lifestyle-19, alternate-18)
prep_of(part-15, lifestyle-19)
dep(doubt-23, no-22)
advmod(should-25, doubt-23)
nsubj(should-25, they-24)
conj_and(say-4, should-25)
neg(should-25, not-26)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ does) (RB n't)
      (VP (VB change)
        (NP (DT the) (NN fact))
        (SBAR (IN that)
          (S
            (NP (PRP they))
            (VP (VBP do))))))
    (. .)))

nsubj(change-4, That-1)
aux(change-4, does-2)
neg(change-4, n't-3)
root(ROOT-0, change-4)
det(fact-6, the-5)
dobj(change-4, fact-6)
complm(do-9, that-7)
nsubj(do-9, they-8)
ccomp(change-4, do-9)

(ROOT
  (S ('' '')
    (S (IN So)
      (NP (PRP you))
      (VP (MD would)
        (VP (VB punish)
          (NP (DT the) (NN child)))))
    (CC and)
    (S
      (NP (DT the) (NN child))
      (VP (VBZ 's)
        (NP (NNS parents))
        (PP (IN for)
          (NP
            (NP (DT an) (NN injustice))
            (VP (VBN committed)
              (PP (IN by)
                (NP (NN someone) (RB else))))))
        (: -)))
    (. ?)))

dep(punish-5, So-2)
nsubj(punish-5, you-3)
aux(punish-5, would-4)
root(ROOT-0, punish-5)
det(child-7, the-6)
dobj(punish-5, child-7)
det(child-10, the-9)
nsubj(parents-12, child-10)
cop(parents-12, 's-11)
conj_and(punish-5, parents-12)
det(injustice-15, an-14)
prep_for(parents-12, injustice-15)
partmod(injustice-15, committed-16)
agent(committed-16, someone-18)
advmod(someone-18, else-19)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (ADJP (JJ harsh)))
    (. .)))

nsubj(harsh-3, That-1)
cop(harsh-3, 's-2)
root(ROOT-0, harsh-3)

(ROOT
  (S (RB So)
    (VP (VB let)
      (S
        (NP (POS 's))
        (VP (VB see)
          (NP
            (NP (WP what) (NN evidence))
            (SBAR
              (S
                (NP (PRP you))
                (VP (VBP have))))))))
    (. .)))

advmod(let-2, So-1)
root(ROOT-0, let-2)
nsubj(see-4, 's-3)
ccomp(let-2, see-4)
dep(evidence-6, what-5)
dobj(see-4, evidence-6)
dobj(have-8, evidence-6)
nsubj(have-8, you-7)
rcmod(evidence-6, have-8)

(ROOT
  (S ('' '')
    (S
      (FRAG
        (WHADVP (WRB How) (JJ many))
        (PP (IN of)))
      (NP (PRP you))
      (VP (VBP have)
        (ADVP (RB ever))))
    (RB regretted)
    (S
      (NP (NNP NOT))
      (VP (VBG being)
        (VP (VBN raised)
          (PP (IN by)
            (NP (DT a) (JJ same) (NN sex) (NN couple))))))
    (. ?)))

advmod(many-3, How-2)
dep(have-6, many-3)
dep(many-3, of-4)
nsubj(have-6, you-5)
root(ROOT-0, have-6)
advmod(have-6, ever-7)
advmod(have-6, regretted-8)
nsubjpass(raised-11, NOT-9)
auxpass(raised-11, being-10)
dep(have-6, raised-11)
det(couple-16, a-13)
amod(couple-16, same-14)
nn(couple-16, sex-15)
agent(raised-11, couple-16)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBD were)
          (VP (VBG making)
            (NP
              (NP (DT the) (NN choice))
              (PP (IN for)
                (NP (PRP yourself))))))))
    (, ,)
    (SQ (VBZ is)
      (NP
        (NP (PRP it))
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (MD would)
              (VP (VB have)
                (VP (VBN chosen))))))))
    (. ?)))

mark(making-4, If-1)
nsubj(making-4, you-2)
aux(making-4, were-3)
advcl(is-10, making-4)
det(choice-6, the-5)
dobj(making-4, choice-6)
prep_for(choice-6, yourself-8)
root(ROOT-0, is-10)
nsubj(is-10, it-11)
dobj(chosen-16, it-11)
rel(chosen-16, what-12)
nsubj(chosen-16, you-13)
aux(chosen-16, would-14)
aux(chosen-16, have-15)
rcmod(it-11, chosen-16)

(ROOT
  (S (`` ``)
    (S
      (PP (IN In)
        (NP
          (NP (NN light))
          (PP (IN of)
            (NP (DT the) (NN evidence)))))
      (NP (PRP I))
      (VP (VBD presented)
        (ADVP (RB above))
        (, ,)
        (SBAR (IN that)
          (S
            (NP (NN argument))
            (VP (VBZ is)
              (ADJP (JJ equivalent)
                (PP (TO to)
                  (NP
                    (NP (DT any))
                    (PP (IN of)
                      (NP (DT the) (VBG following) (NNS arguments)))))))))))
    (: :)
    (SQ (VBP Have)
      (NP (PRP you))
      (VP (VBN regretted)
        (S (RB not)
          (VP (VBG being)
            (PP (IN of)
              (NP (DT the) (JJ opposite) (NN gender))))))
      (. ?))))

prep_in(presented-8, light-3)
det(evidence-6, the-5)
prep_of(light-3, evidence-6)
nsubj(presented-8, I-7)
root(ROOT-0, presented-8)
advmod(presented-8, above-9)
complm(equivalent-14, that-11)
nsubj(equivalent-14, argument-12)
cop(equivalent-14, is-13)
ccomp(presented-8, equivalent-14)
prep_to(equivalent-14, any-16)
det(arguments-20, the-18)
amod(arguments-20, following-19)
prep_of(any-16, arguments-20)
aux(regretted-24, Have-22)
nsubj(regretted-24, you-23)
parataxis(presented-8, regretted-24)
neg(being-26, not-25)
xcomp(regretted-24, being-26)
det(gender-30, the-28)
amod(gender-30, opposite-29)
prep_of(being-26, gender-30)

(ROOT
  (SQ (VBP Have)
    (NP (PRP you))
    (VP (VBN regretted)
      (S (RB not)
        (VP (VBG being)
          (VP (VBN born)
            (NP (CD ten) (NNS seconds))
            (PP (IN after)
              (NP (PRP$ your) (JJ actual) (NN birth)))))))
    (. ?)))

aux(regretted-3, Have-1)
nsubj(regretted-3, you-2)
root(ROOT-0, regretted-3)
neg(born-6, not-4)
auxpass(born-6, being-5)
xcomp(regretted-3, born-6)
num(seconds-8, ten-7)
dobj(born-6, seconds-8)
poss(birth-12, your-10)
amod(birth-12, actual-11)
prep_after(born-6, birth-12)

(ROOT
  (SQ (VBP Have)
    (NP (PRP you))
    (VP (VBN regretted)
      (S (RB not)
        (VP (VBG being)
          (PP (IN of)
            (NP (DT a) (JJ different) (NN race))))))
    (. ?)))

aux(regretted-3, Have-1)
nsubj(regretted-3, you-2)
root(ROOT-0, regretted-3)
neg(being-5, not-4)
xcomp(regretted-3, being-5)
det(race-9, a-7)
amod(race-9, different-8)
prep_of(being-5, race-9)

(ROOT
  (SQ (VBP Have)
    (NP (PRP you))
    (VP (VBN regretted)
      (S (RB not)
        (VP (VBG being)
          (VP (VBN born)
            (ADVP
              (NP (CD ten) (NNS miles))
              (RB away))))))
    (. ?)))

aux(regretted-3, Have-1)
nsubj(regretted-3, you-2)
root(ROOT-0, regretted-3)
neg(born-6, not-4)
auxpass(born-6, being-5)
xcomp(regretted-3, born-6)
num(miles-8, ten-7)
npadvmod(away-9, miles-8)
advmod(born-6, away-9)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP get)
      (NP (PRP$ my) (NN point)))
    (. .)))

nsubj(get-2, You-1)
root(ROOT-0, get-2)
poss(point-4, my-3)
dobj(get-2, point-4)

