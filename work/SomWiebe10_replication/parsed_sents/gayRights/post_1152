(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (VP
        (NP (DT a) (RB bit))
        (VBN lost)))
    (. .)))

nsubjpass(lost-5, I-1)
auxpass(lost-5, 'm-2)
det(bit-4, a-3)
dobj(lost-5, bit-4)
root(ROOT-0, lost-5)

(ROOT
  (SBARQ
    (WHADVP (WRB Where))
    (SQ (VBZ is)
      (NP
        (NP (PRP$ your) (NN evidence))
        (SBAR (IN that)
          (S
            (NP (JJ gay) (NN marriage))
            (VP (MD would)
              (VP (VB hurt)
                (NP (JJ heterosexual) (NN marriage))))))))
    (. ?)))

advmod(is-2, Where-1)
root(ROOT-0, is-2)
poss(evidence-4, your-3)
nsubj(is-2, evidence-4)
complm(hurt-9, that-5)
amod(marriage-7, gay-6)
nsubj(hurt-9, marriage-7)
aux(hurt-9, would-8)
dep(evidence-4, hurt-9)
amod(marriage-11, heterosexual-10)
dobj(hurt-9, marriage-11)

(ROOT
  (S
    (NP (DT The) (NN point))
    (VP (VBZ is)
      (VP
        (VP (VBN stated))
        (CONJP (CC but)
          (RB not))
        (VP (VBN backed)
          (PRT (RP up)))
        (CC or)
        (VP (VBD explained))))
    (. .)))

det(point-2, The-1)
nsubjpass(stated-4, point-2)
nsubjpass(backed-7, point-2)
nsubjpass(explained-10, point-2)
auxpass(stated-4, is-3)
root(ROOT-0, stated-4)
conj_negcc(stated-4, backed-7)
prt(backed-7, up-8)
conj_or(stated-4, explained-10)

(ROOT
  (S
    (NP
      (NP (DT The) (NN link))
      (VP (VBN provided)))
    (VP (VBZ does) (RB n't)
      (ADVP (RB actually))
      (VP (VB include)
        (NP
          (NP (DT any) (NN justification))
          (PP (IN for)
            (NP (DT this) (NN argument))))
        (ADVP (RB either))))
    (. .)))

det(link-2, The-1)
nsubj(include-7, link-2)
partmod(link-2, provided-3)
aux(include-7, does-4)
neg(include-7, n't-5)
advmod(include-7, actually-6)
root(ROOT-0, include-7)
det(justification-9, any-8)
dobj(include-7, justification-9)
det(argument-12, this-11)
prep_for(justification-9, argument-12)
advmod(include-7, either-13)

(ROOT
  (S
    (NP
      (NP (DT All))
      (SBAR
        (S
          (NP (PRP I))
          (VP (MD can)
            (VP (VB see)
              (VP (VBN offered)))))))
    (VP (VBZ is)
      (NP
        (NP (DT the) (`` ``) (NN yardstick) ('' '') (NN metaphor))
        (, ,)
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ does) (RB n't)
              (ADVP (RB really))
              (VP (VB make)
                (NP (NN sense))))))))
    (. .)))

dobj(see-4, All-1)
nsubj(metaphor-11, All-1)
nsubj(see-4, I-2)
aux(see-4, can-3)
rcmod(All-1, see-4)
dep(see-4, offered-5)
cop(metaphor-11, is-6)
det(metaphor-11, the-7)
nn(metaphor-11, yardstick-9)
root(ROOT-0, metaphor-11)
nsubj(make-17, metaphor-11)
aux(make-17, does-14)
neg(make-17, n't-15)
advmod(make-17, really-16)
rcmod(metaphor-11, make-17)
dobj(make-17, sense-18)

(ROOT
  (S
    (ADVP (RB Yes))
    (, ,)
    (VP
      (VP (VBG changing)
        (NP
          (NP (DT the) (NN definition))
          (PP (IN of)
            (NP (DT a) (NN meter)))))
      (PRN (-LRB- -LRB-)
        (ADJP (RB not) (`` ``) (JJ yardstick) ('' '')
          (SBAR
            (S
              (NP (WDT which))
              (VP (VBZ is) (RB not)
                (NP (DT a) (JJ defined) (NN measurement))))))
        (-RRB- -RRB-)))
    (VP (MD would)
      (VP (VB be)
        (NP (DT a) (NN problem))))
    (. .)))

advmod(changing-3, Yes-1)
root(ROOT-0, changing-3)
det(definition-5, the-4)
dobj(changing-3, definition-5)
det(meter-8, a-7)
prep_of(definition-5, meter-8)
neg(yardstick-12, not-10)
dep(changing-3, yardstick-12)
nsubj(measurement-19, which-14)
cop(measurement-19, is-15)
neg(measurement-19, not-16)
det(measurement-19, a-17)
amod(measurement-19, defined-18)
dep(yardstick-12, measurement-19)
aux(problem-24, would-21)
cop(problem-24, be-22)
det(problem-24, a-23)
dep(changing-3, problem-24)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD would)
      (VP (VB be)
        (ADJP (JJ tough)
          (S
            (VP (TO to)
              (VP (VB know)
                (SBAR
                  (WHADVP (WRB how) (RB long))
                  (S
                    (NP (DT a) (NN yard))
                    (VP (VBZ is))))))))))
    (. .)))

nsubj(tough-4, It-1)
aux(tough-4, would-2)
cop(tough-4, be-3)
root(ROOT-0, tough-4)
aux(know-6, to-5)
xcomp(tough-4, know-6)
advmod(long-8, how-7)
advmod(is-11, long-8)
det(yard-10, a-9)
nsubj(is-11, yard-10)
ccomp(know-6, is-11)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB see)
          (SBAR
            (WHADVP (WRB how))
            (S
              (NP (DT that))
              (VP (VBZ extrapolates)
                (PP (TO to)
                  (NP (NN marriage)))))))))
    (: ...)
    (SQ (VBP are)
      (NP (PRP you))
      (VP (VBG suggesting)
        (SBAR (IN that)
          (S
            (SBAR (IN if)
              (S
                (NP (NNS gays))
                (VP (VB marry))))
            (, ,)
            (NP
              (NP (JJ heterosexual) (NNS couples))
              (SBAR
                (WHNP (WP who))
                (S
                  (VP (VBP 've)
                    (VP (VBN been)
                      (VP (VBN married)
                        (PP (IN for)
                          (NP (NNS years)))))))))
            (VP (MD will) (RB not)
              (VP (VB know)
                (SBAR (IN if)
                  (S
                    (NP (PRP they))
                    (VP (VBP 're)
                      (UCP
                        (NP (JJ married))
                        (CC or)
                        (RB not)
                        (ADVP (RB anymore))))))))))))
    (. ?)))

nsubj(see-4, I-1)
aux(see-4, do-2)
neg(see-4, n't-3)
root(ROOT-0, see-4)
advmod(extrapolates-7, how-5)
nsubj(extrapolates-7, that-6)
ccomp(see-4, extrapolates-7)
prep_to(extrapolates-7, marriage-9)
aux(suggesting-13, are-11)
nsubj(suggesting-13, you-12)
parataxis(see-4, suggesting-13)
complm(know-29, that-14)
mark(marry-17, if-15)
nsubj(marry-17, gays-16)
advcl(know-29, marry-17)
amod(couples-20, heterosexual-19)
nsubjpass(married-24, couples-20)
nsubj(know-29, couples-20)
aux(married-24, 've-22)
auxpass(married-24, been-23)
rcmod(couples-20, married-24)
prep_for(married-24, years-26)
aux(know-29, will-27)
neg(know-29, not-28)
ccomp(suggesting-13, know-29)
mark(married-33, if-30)
nsubj(married-33, they-31)
cop(married-33, 're-32)
advcl(know-29, married-33)
neg(anymore-36, not-35)
advcl(know-29, anymore-36)
conj_or(married-33, anymore-36)

(ROOT
  (S
    (SBAR (IN If)
      (FRAG
        (NP (NN anything))))
    (, ,)
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (JJ traditional) (NN marriage))
          (VP (VBZ is)
            (VP (VBN harmed)
              (PP (IN by)
                (NP
                  (NP (DT the) (JJ high) (NN divorce) (NN rate))
                  (, ,)
                  (NP
                    (NP (JJ green) (NN card) (NNS marriages))
                    (, ,)
                    (NP
                      (NP (NNP Britney) (NNP Spears))
                      (VP (VBG getting)
                        (S
                          (VP (VBN married)
                            (PP (IN for)
                              (NP
                                (NP (DT a) (NN weekend))
                                (, ,)
                                (NP (FW etc.))))))))))))))))
    (. .)))

mark(anything-2, If-1)
advcl(think-5, anything-2)
nsubj(think-5, I-4)
root(ROOT-0, think-5)
amod(marriage-7, traditional-6)
nsubjpass(harmed-9, marriage-7)
auxpass(harmed-9, is-8)
ccomp(think-5, harmed-9)
det(rate-14, the-11)
amod(rate-14, high-12)
nn(rate-14, divorce-13)
agent(harmed-9, rate-14)
amod(marriages-18, green-16)
nn(marriages-18, card-17)
appos(rate-14, marriages-18)
nn(Spears-21, Britney-20)
appos(marriages-18, Spears-21)
partmod(Spears-21, getting-22)
dep(getting-22, married-23)
det(weekend-26, a-25)
prep_for(married-23, weekend-26)
appos(weekend-26, etc.-28)

(ROOT
  (SBARQ
    (FRAG
      (ADVP (RB Even))
      (RB then))
    (, ,)
    (SBARQ
      (WHADVP (WRB how))
      (SQ (VBZ is)
        (NP
          (NP (DT any) (JJ traditional) (`` ``) (JJ sacred) ('' '') (NN marriage))
          (VP (VBN harmed)))))
    (. ?)))

dep(then-2, Even-1)
dep(is-5, then-2)
advmod(is-5, how-4)
root(ROOT-0, is-5)
det(marriage-11, any-6)
amod(marriage-11, traditional-7)
amod(marriage-11, sacred-9)
nsubj(is-5, marriage-11)
partmod(marriage-11, harmed-12)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP$ your) (NN marriage))
        (VP (VBZ is)
          (ADJP (JJ sound)))))
    (, ,)
    (NP (PRP it))
    (VP (MD will) (RB not)
      (VP (VB be)
        (VP (VBN affected)
          (PP (IN by)
            (NP
              (NP (DT the) (NNS actions))
              (PP (IN of)
                (NP (JJ other) (NNS people))))))))
    (. .)))

mark(sound-5, If-1)
poss(marriage-3, your-2)
nsubj(sound-5, marriage-3)
cop(sound-5, is-4)
advcl(affected-11, sound-5)
nsubjpass(affected-11, it-7)
aux(affected-11, will-8)
neg(affected-11, not-9)
auxpass(affected-11, be-10)
root(ROOT-0, affected-11)
det(actions-14, the-13)
agent(affected-11, actions-14)
amod(people-17, other-16)
prep_of(actions-14, people-17)

