(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ (VBP are)
      (NP (PRP you))
      (VP (VBG trying)
        (S
          (VP (TO to)
            (VP (VB say)
              (ADVP (RB here)))))))
    (. ?)))

dep(trying-4, What-1)
aux(trying-4, are-2)
nsubj(trying-4, you-3)
xsubj(say-6, you-3)
root(ROOT-0, trying-4)
aux(say-6, to-5)
xcomp(trying-4, say-6)
advmod(say-6, here-7)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (ADVP (RB apparently))
      (VP (VBN missed)
        (NP (DT the) (NN point))))
    (. .)))

nsubj(missed-4, You-1)
aux(missed-4, have-2)
advmod(missed-4, apparently-3)
root(ROOT-0, missed-4)
det(point-6, the-5)
dobj(missed-4, point-6)

(ROOT
  (S
    (NP
      (NP (NNP Freedom))
      (PP (IN of)
        (NP
          (NP (NN speech)
            (CC and)
            (NN freedom))
          (PP (IN from)
            (NP
              (NP (DT the) (NNS consequences))
              (PP (IN of)
                (SBAR
                  (WHNP (WP what))
                  (S
                    (NP (PRP you))
                    (VP (VBP say))))))))))
    (VP (VBP are)
      (NP (CD two) (JJ different) (NNS things)))
    (. .)))

nsubj(things-16, Freedom-1)
prep_of(Freedom-1, speech-3)
prep_of(Freedom-1, freedom-5)
conj_and(speech-3, freedom-5)
det(consequences-8, the-7)
prep_from(speech-3, consequences-8)
dobj(say-12, what-10)
nsubj(say-12, you-11)
prepc_of(consequences-8, say-12)
cop(things-16, are-13)
num(things-16, two-14)
amod(things-16, different-15)
root(ROOT-0, things-16)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (NP (PRP you))
    (VP (MD ca) (RB n't)
      (VP (VB be)
        (VP (VBN thrown)
          (PP (IN in)
            (NP (NN jail)))
          (PP (IN for)
            (S
              (VP (VBG having)
                (NP (DT an) (NN opinion))))))))
    (. .)))

advmod(thrown-7, Also-1)
nsubjpass(thrown-7, you-3)
aux(thrown-7, ca-4)
neg(thrown-7, n't-5)
auxpass(thrown-7, be-6)
root(ROOT-0, thrown-7)
prep_in(thrown-7, jail-9)
prepc_for(thrown-7, having-11)
det(opinion-13, an-12)
dobj(having-11, opinion-13)

(ROOT
  (S (CC But)
    (, ,)
    (NP (PRP you))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN thrown)
          (PP (IN in)
            (NP (NN jail)))
          (PP (IN for)
            (S
              (VP (VBG acting)
                (PP (IN on)
                  (NP (PRP$ your) (NN opinion)))))))))
    (. .)))

cc(thrown-6, But-1)
nsubjpass(thrown-6, you-3)
aux(thrown-6, can-4)
auxpass(thrown-6, be-5)
root(ROOT-0, thrown-6)
prep_in(thrown-6, jail-8)
prepc_for(thrown-6, acting-10)
poss(opinion-13, your-12)
prep_on(acting-10, opinion-13)

(ROOT
  (S
    (VP (VB Try)
      (S
        (VP (TO to)
          (VP (VB be)
            (ADJP (RBR more) (JJ descriptive)
              (PP (IN with)
                (NP (PRP$ your) (NN argument))))))))
    (. .)))

root(ROOT-0, Try-1)
aux(descriptive-5, to-2)
cop(descriptive-5, be-3)
advmod(descriptive-5, more-4)
xcomp(Try-1, descriptive-5)
poss(argument-8, your-7)
prep_with(descriptive-5, argument-8)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD may)
        (VP (VB have)
          (NP (DT a) (JJ valid) (NN point)))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ 's) (RB not)
        (ADJP (JJ clear)
          (PP (IN in)
            (SBAR
              (WHNP (WP what))
              (S
                (NP (PRP you))
                (VP (VBP are)
                  (VP (VBG writing)))))))))
    (. .)))

nsubj(have-3, You-1)
aux(have-3, may-2)
root(ROOT-0, have-3)
det(point-6, a-4)
amod(point-6, valid-5)
dobj(have-3, point-6)
nsubj(clear-12, it-9)
cop(clear-12, 's-10)
neg(clear-12, not-11)
conj_but(have-3, clear-12)
dobj(writing-17, what-14)
nsubj(writing-17, you-15)
aux(writing-17, are-16)
prepc_in(clear-12, writing-17)

