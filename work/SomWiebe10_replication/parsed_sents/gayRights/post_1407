(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (DT the) (NN beginning))
        (PP (IN of)
          (NP (PRP$ my) (NN argument)))))
    (NP (PRP I))
    (VP (VBD explained)
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (PRP I))
          (VP (MD would) (RB not)
            (VP (VB choose)
              (S
                (VP (TO to)
                  (VP (VB allow)
                    (NP (DT a) (JJ homosexual))
                    (S
                      (VP (TO to)
                        (VP (VB adopt))))))))))))
    (. .)))

det(beginning-3, the-2)
prep_in(explained-8, beginning-3)
poss(argument-6, my-5)
prep_of(beginning-3, argument-6)
nsubj(explained-8, I-7)
root(ROOT-0, explained-8)
advmod(choose-13, why-9)
nsubj(choose-13, I-10)
xsubj(allow-15, I-10)
aux(choose-13, would-11)
neg(choose-13, not-12)
advcl(explained-8, choose-13)
aux(allow-15, to-14)
xcomp(choose-13, allow-15)
det(homosexual-17, a-16)
dobj(allow-15, homosexual-17)
aux(adopt-19, to-18)
xcomp(allow-15, adopt-19)

(ROOT
  (S
    (ADVP (RB Primarily))
    (, ,)
    (NP (DT the) (JJ homosexual))
    (VP (VBZ is)
      (ADJP (RB inescapably) (JJ self-centered)))
    (. .)))

advmod(self-centered-7, Primarily-1)
det(homosexual-4, the-3)
nsubj(self-centered-7, homosexual-4)
cop(self-centered-7, is-5)
advmod(self-centered-7, inescapably-6)
root(ROOT-0, self-centered-7)

(ROOT
  (S
    (NP
      (NP (DT The) (NN burden))
      (PP (IN of)
        (NP (NN proof))))
    (VP (VBZ belongs)
      (PP (TO to)
        (NP
          (NP (DT those))
          (SBAR
            (WHNP (WP who))
            (S
              (VP (VBP claim)
                (SBAR (IN that)
                  (S
                    (NP (NNS homosexuals))
                    (VP (VBP are)
                      (NP (JJ suitable) (NNS parents)))))))))))
    (. .)))

det(burden-2, The-1)
nsubj(belongs-5, burden-2)
prep_of(burden-2, proof-4)
root(ROOT-0, belongs-5)
prep_to(belongs-5, those-7)
nsubj(claim-9, those-7)
rcmod(those-7, claim-9)
complm(parents-14, that-10)
nsubj(parents-14, homosexuals-11)
cop(parents-14, are-12)
amod(parents-14, suitable-13)
ccomp(claim-9, parents-14)

(ROOT
  (S
    (VP (VB Consider)
      (NP
        (NP (DT the) (NN example))
        (PP (IN of)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (PRP you))
              (VP (VBP have)
                (VP (VBN accused)
                  (NP
                    (NP (PRP$ my) (NN argument))
                    (PP (IN of)
                      (S
                        (VP (VBG lacking))))))))))))
    (. .)))

root(ROOT-0, Consider-1)
det(example-3, the-2)
dobj(Consider-1, example-3)
dobj(accused-8, what-5)
nsubj(accused-8, you-6)
aux(accused-8, have-7)
prepc_of(example-3, accused-8)
poss(argument-10, my-9)
dobj(accused-8, argument-10)
prepc_of(argument-10, lacking-12)

(ROOT
  (S
    (S
      (S
        (NP (NNS Gays))
        (VP (VBP are)
          (ADJP (JJ bad))))
      (, ,)
      (NP (DT the) (JJ bad))
      (VP (MD should) (RB not)
        (VP (VB adopt))))
    (: ;)
    (S
      (ADVP (RB therefore))
      (, ,)
      (NP (NNS gays))
      (VP (MD should) (RB not)
        (VP (VB adopt))))
    (. .)))

nsubj(bad-3, Gays-1)
cop(bad-3, are-2)
ccomp(adopt-9, bad-3)
det(bad-6, the-5)
nsubj(adopt-9, bad-6)
aux(adopt-9, should-7)
neg(adopt-9, not-8)
root(ROOT-0, adopt-9)
advmod(adopt-16, therefore-11)
nsubj(adopt-16, gays-13)
aux(adopt-16, should-14)
neg(adopt-16, not-15)
parataxis(adopt-9, adopt-16)

(ROOT
  (S
    (S
      (NP (DT The) (NN argument))
      (VP (VBZ is)
        (ADJP (JJ valid))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (NP (NN petition) (NNS principii))
        (, ,)
        (S
          (VP (VBG begging)
            (NP (DT the) (NN question))))))
    (. .)))

det(argument-2, The-1)
nsubj(valid-4, argument-2)
cop(valid-4, is-3)
root(ROOT-0, valid-4)
nsubj(principii-10, it-7)
cop(principii-10, is-8)
nn(principii-10, petition-9)
conj_but(valid-4, principii-10)
partmod(principii-10, begging-12)
xcomp(principii-10, begging-12)
det(question-14, the-13)
dobj(begging-12, question-14)

(ROOT
  (S
    (S
      (NP (NNS Gays))
      (VP (VBP are) (RB not)
        (ADJP (JJ good))
        (, ,)
        (SBAR (RB only)
          (S
            (NP (DT the) (NN good))
            (VP (MD should)
              (VP (VB adopt)))))))
    (: ;)
    (S
      (ADVP (RB therefore))
      (, ,)
      (NP (NNS gays))
      (VP (MD should) (RB not)
        (VP (VB adopt))))
    (. .)))

nsubj(good-4, Gays-1)
cop(good-4, are-2)
neg(good-4, not-3)
root(ROOT-0, good-4)
advmod(adopt-10, only-6)
det(good-8, the-7)
nsubj(adopt-10, good-8)
aux(adopt-10, should-9)
ccomp(good-4, adopt-10)
advmod(adopt-17, therefore-12)
nsubj(adopt-17, gays-14)
aux(adopt-17, should-15)
neg(adopt-17, not-16)
parataxis(good-4, adopt-17)

(ROOT
  (S
    (NP (DT The) (NN argument))
    (VP (VBZ is)
      (ADJP (JJ invalid)
        (CC and)
        (JJ fallacious)))
    (. .)))

det(argument-2, The-1)
nsubj(invalid-4, argument-2)
nsubj(fallacious-6, argument-2)
cop(invalid-4, is-3)
root(ROOT-0, invalid-4)
conj_and(invalid-4, fallacious-6)

(ROOT
  (S
    (S
      (S
        (NP (NNS Gays))
        (VP (VBP are)
          (ADJP (JJ perverts))))
      (, ,)
      (NP (NNS perverts))
      (VP (VBP are)
        (ADJP (JJ evil))))
    (: ;)
    (S
      (ADVP (RB therefore))
      (, ,)
      (NP (NNS gays))
      (VP (MD should) (RB not)
        (VP (VB adopt))))
    (. .)))

nsubj(perverts-3, Gays-1)
cop(perverts-3, are-2)
ccomp(evil-7, perverts-3)
nsubj(evil-7, perverts-5)
cop(evil-7, are-6)
root(ROOT-0, evil-7)
advmod(adopt-14, therefore-9)
nsubj(adopt-14, gays-11)
aux(adopt-14, should-12)
neg(adopt-14, not-13)
parataxis(evil-7, adopt-14)

(ROOT
  (S
    (NP (NNP Argument))
    (VP (VBZ is)
      (ADJP (DT both) (JJ invalid)
        (CC and)
        (JJ fallacious)))
    (. .)))

nsubj(invalid-4, Argument-1)
nsubj(fallacious-6, Argument-1)
cop(invalid-4, is-2)
preconj(invalid-4, both-3)
root(ROOT-0, invalid-4)
conj_and(invalid-4, fallacious-6)

(ROOT
  (S
    (S
      (S
        (NP (NNS Gays))
        (VP (VBP are) (RB not)
          (ADJP (JJ evil))))
      (, ,)
      (NP (NN evil))
      (VP (VBZ is) (RB not)
        (ADJP (JJ good))))
    (: ;)
    (S
      (ADVP (RB therefore))
      (, ,)
      (NP (NNS gays))
      (VP (VBP are) (RB not)
        (ADJP (JJ good))))
    (. .)))

nsubj(evil-4, Gays-1)
cop(evil-4, are-2)
neg(evil-4, not-3)
ccomp(good-9, evil-4)
nsubj(good-9, evil-6)
cop(good-9, is-7)
neg(good-9, not-8)
root(ROOT-0, good-9)
advmod(good-16, therefore-11)
nsubj(good-16, gays-13)
cop(good-16, are-14)
neg(good-16, not-15)
parataxis(good-9, good-16)

(ROOT
  (S
    (S
      (SBAR
        (PRN (-LRB- -LRB-)
          (ADVP (RB Again))
          (ADJP (JJ invalid)
            (CC and)
            (JJ fallacious))
          (-RRB- -RRB-))
        (S
          (S (CC Or)
            (NP (PRP you))
            (VP (MD could)
              (VP (VB say))))
          (: :)
          (S
            (NP (CD 1))
            (VP (VBZ is) (RB not)
              (NP (CD 2))))))
      (, ,)
      (NP (CD 2))
      (VP (VBZ is) (RB not)
        (NP (CD 3))))
    (: ;)
    (S
      (ADVP (RB therefore))
      (NP (CD 1))
      (VP (VBZ is) (RB not)
        (NP (CD 3))))
    (. .)))

dep(invalid-3, Again-2)
dep(say-10, invalid-3)
conj_and(invalid-3, fallacious-5)
dep(say-10, fallacious-5)
cc(say-10, Or-7)
nsubj(say-10, you-8)
aux(say-10, could-9)
dep(3-20, say-10)
nsubj(2-15, 1-12)
cop(2-15, is-13)
neg(2-15, not-14)
parataxis(say-10, 2-15)
nsubj(3-20, 2-17)
cop(3-20, is-18)
neg(3-20, not-19)
root(ROOT-0, 3-20)
advmod(3-26, therefore-22)
nsubj(3-26, 1-23)
cop(3-26, is-24)
neg(3-26, not-25)
parataxis(3-20, 3-26)

(ROOT
  (S
    (NP (DT The) (NN conclusion))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP (VBN understood)
              (PP (IN as)
                (NP
                  (NP (DT a) (JJ universal) (NN statement))
                  (PP (IN of)
                    (NP (DT all) (NNS homosexuals)))
                  (, ,)
                  (ADJP (RB not) (JJ particular)))))))))
    (. .)))

det(conclusion-2, The-1)
nsubj(is-3, conclusion-2)
xsubj(understood-6, conclusion-2)
root(ROOT-0, is-3)
aux(understood-6, to-4)
auxpass(understood-6, be-5)
xcomp(is-3, understood-6)
det(statement-10, a-8)
amod(statement-10, universal-9)
prep_as(understood-6, statement-10)
det(homosexuals-13, all-12)
prep_of(statement-10, homosexuals-13)
neg(particular-16, not-15)
amod(statement-10, particular-16)

(ROOT
  (S
    (SBAR
      (PRN (-LRB- -LRB-)
        (ADVP (RB Again))
        (ADJP (JJ invalid)
          (CC and)
          (JJ fallacious))
        (-RRB- -RRB-))
      (S
        (NP (EX There))
        (VP (VBP are)
          (NP
            (NP (DT an) (JJ unlimited) (NN number))
            (PP (IN of)
              (NP
                (NP (NNS examples))
                (SBAR (IN that)
                  (S
                    (NP (PRP I))
                    (VP (MD could))))))))))
    (VP (VBP use)
      (S
        (VP (TO to)
          (VP (VB demonstrate)
            (NP
              (NP (DT the) (NN impossibility))
              (PP (IN of)
                (S
                  (VP
                    (ADVP (RB syllogistically))
                    (VBG proving)
                    (NP (DT a) (JJ negative) (NN conclusion))))))))))
    (. .)))

dep(invalid-3, Again-2)
dep(are-8, invalid-3)
conj_and(invalid-3, fallacious-5)
dep(are-8, fallacious-5)
expl(are-8, There-7)
csubj(use-17, are-8)
det(number-11, an-9)
amod(number-11, unlimited-10)
nsubj(are-8, number-11)
prep_of(number-11, examples-13)
dobj(could-16, examples-13)
complm(could-16, that-14)
nsubj(could-16, I-15)
dep(examples-13, could-16)
root(ROOT-0, use-17)
aux(demonstrate-19, to-18)
xcomp(use-17, demonstrate-19)
det(impossibility-21, the-20)
dobj(demonstrate-19, impossibility-21)
advmod(proving-24, syllogistically-23)
prepc_of(impossibility-21, proving-24)
det(conclusion-27, a-25)
amod(conclusion-27, negative-26)
dobj(proving-24, conclusion-27)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP suppose)
      (NP
        (NP (DT the) (NNS examples))
        (SBAR
          (S
            (NP (PRP I))
            (VP (VBP ve)
              (PP (VBD provided)
                (SBAR
                  (S
                    (VP (MD shall)
                      (VP (VB suffice)
                        (PP (IN for)
                          (NP
                            (NP (DT the) (NN subject))
                            (PP (IN at)
                              (NP (NN hand)))))))))))))))
    (. .)))

nsubj(suppose-2, I-1)
root(ROOT-0, suppose-2)
det(examples-4, the-3)
dobj(suppose-2, examples-4)
dobj(ve-6, examples-4)
nsubj(ve-6, I-5)
rcmod(examples-4, ve-6)
prep(ve-6, provided-7)
aux(suffice-9, shall-8)
dep(provided-7, suffice-9)
det(subject-12, the-11)
prep_for(suffice-9, subject-12)
prep_at(subject-12, hand-14)

(ROOT
  (S
    (NP
      (NP (PRP They))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (MD would)
            (VP (VB argue)
              (SBAR (IN that)
                (S
                  (NP (NNS homosexuals))
                  (VP (VBP are)
                    (NP (JJ suitable) (NNS parents))))))))))
    (VP (MD must)
      (VP (VB be)
        (VP (VBN burdened)
          (PP (IN by)
            (NP
              (NP (DT the) (NN burden))
              (PP (IN of)
                (NP (NN proof)))))
          (S
            (VP (TO to)
              (VP
                (ADVP (RB logically))
                (VB prove)
                (NP (PRP$ their) (NN point))))))))
    (. .)))

nsubj(argue-4, They-1)
nsubjpass(burdened-12, They-1)
aux(argue-4, would-3)
rcmod(They-1, argue-4)
complm(parents-9, that-5)
nsubj(parents-9, homosexuals-6)
cop(parents-9, are-7)
amod(parents-9, suitable-8)
ccomp(argue-4, parents-9)
aux(burdened-12, must-10)
auxpass(burdened-12, be-11)
root(ROOT-0, burdened-12)
det(burden-15, the-14)
agent(burdened-12, burden-15)
prep_of(burden-15, proof-17)
aux(prove-20, to-18)
advmod(prove-20, logically-19)
xcomp(burdened-12, prove-20)
poss(point-22, their-21)
dobj(prove-20, point-22)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB truly))
    (VP (VBD did)
      (VP (VB go)
        (PP (TO to)
          (NP
            (NP (DT an) (JJ extreme) (NN conclusion))
            (PP (IN in)
              (NP (PRP$ my) (JJ last) (NN argument)))))
        (, ,)
        (SBAR (IN as)
          (S
            (NP (PRP you))
            (VP (VBP have)
              (VP (VBN stated)))))))
    (. .)))

nsubj(go-4, I-1)
advmod(go-4, truly-2)
aux(go-4, did-3)
root(ROOT-0, go-4)
det(conclusion-8, an-6)
amod(conclusion-8, extreme-7)
prep_to(go-4, conclusion-8)
poss(argument-12, my-10)
amod(argument-12, last-11)
prep_in(conclusion-8, argument-12)
mark(stated-17, as-14)
nsubj(stated-17, you-15)
aux(stated-17, have-16)
advcl(go-4, stated-17)

(ROOT
  (S
    (ADVP (RB Yet))
    (, ,)
    (PP (RB only)
      (PP (IN for)
        (NP
          (NP (DT the) (NN purpose))
          (PP (IN of)
            (NP (JJ reductio) (NN ad) (NN absurdum))))))
    (, ,)
    (S
      (VP (VBG reducing)
        (NP (DT the) (NN proposition))
        (PP (IN until)
          (NP (PRP it)))))
    (VP (VBZ is)
      (ADJP (RB obviously) (JJ false)))
    (. .)))

advmod(false-19, Yet-1)
advmod(false-19, only-3)
det(purpose-6, the-5)
prep_for(false-19, purpose-6)
amod(absurdum-10, reductio-8)
nn(absurdum-10, ad-9)
prep_of(purpose-6, absurdum-10)
csubj(false-19, reducing-12)
det(proposition-14, the-13)
dobj(reducing-12, proposition-14)
prep_until(reducing-12, it-16)
cop(false-19, is-17)
advmod(false-19, obviously-18)
root(ROOT-0, false-19)

(ROOT
  (S (CC And)
    (ADVP (RB lastly))
    (, ,)
    (NP
      (NP (PRP$ your) (NN reference))
      (PP (TO to)
        (NP (DT the) (JJ legal) (NN system))))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN appeal))
        (PP (TO to)
          (NP
            (NP (NN authority))
            (, ,)
            (NP (NNP Argumentum) (NNP Ad) (NNP Verecundium))))))
    (. .)))

cc(appeal-12, And-1)
advmod(appeal-12, lastly-2)
poss(reference-5, your-4)
nsubj(appeal-12, reference-5)
det(system-9, the-7)
amod(system-9, legal-8)
prep_to(reference-5, system-9)
cop(appeal-12, is-10)
det(appeal-12, an-11)
root(ROOT-0, appeal-12)
prep_to(appeal-12, authority-14)
nn(Verecundium-18, Argumentum-16)
nn(Verecundium-18, Ad-17)
appos(authority-14, Verecundium-18)

(ROOT
  (S (-LRB- -LRB-)
    (NP
      (NP (DT the) (NN truth) (, ,) (NN falsity) (, ,)
        (CC or)
        (NN validity))
      (PP (IN of)
        (NP (DT an) (NN argument))))
    (VP (VBZ is) (RB not)
      (ADJP (JJ subject)
        (PP (TO to)
          (NP
            (NP (DT a) (JJ legal) (NN system) (-RRB- -RRB-) (NN Bare))
            (PP (IN in)
              (NP (NN mind))))))
      (SBAR (IN that)
        (S
          (NP (PRP$ my) (NNS arguments))
          (VP (VBP are)
            (PP (IN for)
              (NP
                (NP
                  (NP (DT the) (NN sake))
                  (PP (IN of)
                    (NP (NN knowledge))))
                (CC and)
                (NP
                  (NP (RB not) (DT the) (NN sake))
                  (PP (IN of)
                    (S
                      (VP (VBG attacking)
                        (CC or)
                        (VBG debating)))))))))))
    (: ;)
    (S
      (ADVP (RB so))
      (VP (VB take)
        (SBAR
          (S
            (NP
              (NP (DT no) (NN offence))
              (PP (IN for)
                (NP (NN none))))
            (VP (VBZ is)
              (VP (VBN intended)))))))
    (. .)))

det(truth-3, the-2)
nsubj(subject-14, truth-3)
conj_or(truth-3, falsity-5)
nsubj(subject-14, falsity-5)
conj_or(truth-3, validity-8)
nsubj(subject-14, validity-8)
det(argument-11, an-10)
prep_of(truth-3, argument-11)
cop(subject-14, is-12)
neg(subject-14, not-13)
root(ROOT-0, subject-14)
det(Bare-20, a-16)
amod(Bare-20, legal-17)
nn(Bare-20, system-18)
prep_to(subject-14, Bare-20)
prep_in(Bare-20, mind-22)
complm(are-26, that-23)
poss(arguments-25, my-24)
nsubj(are-26, arguments-25)
ccomp(subject-14, are-26)
det(sake-29, the-28)
prep_for(are-26, sake-29)
prep_of(sake-29, knowledge-31)
neg(sake-35, not-33)
det(sake-35, the-34)
prep_for(are-26, sake-35)
conj_and(sake-29, sake-35)
prepc_of(sake-35, attacking-37)
prepc_of(sake-35, debating-39)
conj_or(attacking-37, debating-39)
advmod(take-42, so-41)
parataxis(subject-14, take-42)
det(offence-44, no-43)
nsubjpass(intended-48, offence-44)
prep_for(offence-44, none-46)
auxpass(intended-48, is-47)
ccomp(take-42, intended-48)

(ROOT
  (S (CC And)
    (ADVP (RB hence))
    (, ,)
    (NP (DT no) (NN explanation))
    (VP (VBZ is)
      (VP (VBN required)
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP it))
            (VP (VBZ s)
              (NP
                (NP (CD two) (NNS homosexuals))
                (VP (VBG seeking)
                  (S
                    (VP (TO to)
                      (VP (VB adopt)))))))))))
    (. .)))

cc(required-7, And-1)
advmod(required-7, hence-2)
det(explanation-5, no-4)
nsubjpass(required-7, explanation-5)
auxpass(required-7, is-6)
root(ROOT-0, required-7)
advmod(homosexuals-12, when-8)
nsubj(homosexuals-12, it-9)
cop(homosexuals-12, s-10)
num(homosexuals-12, two-11)
advcl(required-7, homosexuals-12)
xsubj(adopt-15, homosexuals-12)
partmod(homosexuals-12, seeking-13)
aux(adopt-15, to-14)
xcomp(seeking-13, adopt-15)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (PRP I))
    (VP (MD will)
      (ADVP (RB now))
      (VP (VB take)
        (NP (DT the) (NN time)
          (S
            (VP (TO to)
              (VP (VB compound)
                (NP (PRP$ my) (NN argument))
                (PP (IN with)
                  (NP (JJ additional) (NNS facts)))
                (PP (IN after)
                  (S
                    (ADVP (RB already))
                    (VP (VBG having)
                      (ADVP (RB logically))
                      (VP (VBN established)
                        (NP (PRP$ my) (NN position))))))))))))
    (. .)))

advmod(take-6, However-1)
nsubj(take-6, I-3)
aux(take-6, will-4)
advmod(take-6, now-5)
root(ROOT-0, take-6)
det(time-8, the-7)
dobj(take-6, time-8)
aux(compound-10, to-9)
infmod(time-8, compound-10)
poss(argument-12, my-11)
dobj(compound-10, argument-12)
amod(facts-15, additional-14)
prep_with(compound-10, facts-15)
advmod(established-20, already-17)
aux(established-20, having-18)
advmod(established-20, logically-19)
prepc_after(compound-10, established-20)
poss(position-22, my-21)
dobj(established-20, position-22)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP claim)
      (SBAR (IN that)
        (S
          (NP
            (NP (PRP$ my) (NN argument))
            (, ,)
            (NP
              (NP (NNP fail))
              (PRN (-LRB- -LRB-) (PRP s) (-RRB- -RRB-))))
          (VP (TO to)
            (VP (VB address)
              (PRN (-LRB- -LRB-)
                (S
                  (VP (VBZ is)))
                (-RRB- -RRB-))
              (SBAR
                (WHADVP (WRB how))
                (S
                  (NP (DT a) (NNS Gay) (NN couple))
                  (VP (MD would) (RB not)
                    (VP (VB make)
                      (NP (DT a) (JJ suitable) (JJ parental) (NN unit)))))))))))
    (. .)))

nsubj(claim-2, You-1)
root(ROOT-0, claim-2)
complm(address-12, that-3)
poss(argument-5, my-4)
nsubj(address-12, argument-5)
appos(argument-5, fail-7)
dep(fail-7, s-9)
aux(address-12, to-11)
ccomp(claim-2, address-12)
xcomp(claim-2, address-12)
parataxis(address-12, is-14)
advmod(make-22, how-16)
det(couple-19, a-17)
nn(couple-19, Gay-18)
nsubj(make-22, couple-19)
aux(make-22, would-20)
neg(make-22, not-21)
ccomp(address-12, make-22)
det(unit-26, a-23)
amod(unit-26, suitable-24)
amod(unit-26, parental-25)
dobj(make-22, unit-26)

(ROOT
  (S
    (NP (PRP$ My) (NN reply))
    (VP (VBZ is)
      (S
        (INTJ (UH yes))
        (, ,)
        (NP (PRP I))
        (VP (VBD did) (RB not)
          (VP
            (VP (VB address)
              (NP (DT that) (NN question)))
            (, ,)
            (ADVP (RB now))
            (VP (VB consider)
              (NP (PRP$ my) (NN explanation)))))))
    (. .)))

poss(reply-2, My-1)
nsubj(is-3, reply-2)
root(ROOT-0, is-3)
dep(address-9, yes-4)
nsubj(address-9, I-6)
aux(address-9, did-7)
neg(address-9, not-8)
ccomp(is-3, address-9)
det(question-11, that-10)
dobj(address-9, question-11)
advmod(address-9, now-13)
dep(address-9, consider-14)
poss(explanation-16, my-15)
dobj(consider-14, explanation-16)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP are)
      (VP (VBG requesting)
        (SBAR (IN that)
          (S
            (NP (PRP I))
            (VP (VBP prove)
              (NP (DT a) (JJ negative) (NN conclusion))
              (, ,)
              (S
                (VP (VBG i.e.)
                  (SBAR
                    (WHADVP (WRB how))
                    (S
                      (NP (DT a) (JJ gay) (NN couple))
                      (VP (MD would)
                        (ADVP (RB NOT))
                        (VP (VB make)
                          (NP (DT a) (JJ suitable) (JJ parental) (NN unit)))))))))))))
    (. .)))

nsubj(requesting-3, You-1)
aux(requesting-3, are-2)
root(ROOT-0, requesting-3)
complm(prove-6, that-4)
nsubj(prove-6, I-5)
ccomp(requesting-3, prove-6)
det(conclusion-9, a-7)
amod(conclusion-9, negative-8)
dobj(prove-6, conclusion-9)
partmod(prove-6, i.e.-11)
xcomp(prove-6, i.e.-11)
advmod(make-18, how-12)
det(couple-15, a-13)
amod(couple-15, gay-14)
nsubj(make-18, couple-15)
aux(make-18, would-16)
neg(make-18, NOT-17)
ccomp(i.e.-11, make-18)
det(unit-22, a-19)
amod(unit-22, suitable-20)
amod(unit-22, parental-21)
dobj(make-18, unit-22)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADVP (RB logically))
      (ADJP (JJ impossible)
        (S
          (VP (TO to)
            (VP (VB prove)
              (NP (DT a) (JJ negative) (NN conclusion)))))))
    (. .)))

nsubj(impossible-4, It-1)
cop(impossible-4, is-2)
advmod(impossible-4, logically-3)
root(ROOT-0, impossible-4)
aux(prove-6, to-5)
xcomp(impossible-4, prove-6)
det(conclusion-9, a-7)
amod(conclusion-9, negative-8)
dobj(prove-6, conclusion-9)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD can) (RB not)
      (ADVP (RB syllogistically))
      (VP (VB arrive)
        (PP (IN at)
          (NP
            (NP (DT a) (JJ negative) (NN conclusion))
            (PP (IN from)
              (NP (JJ negative) (NNS propositions)))))))
    (. .)))

nsubj(arrive-5, I-1)
aux(arrive-5, can-2)
neg(arrive-5, not-3)
advmod(arrive-5, syllogistically-4)
root(ROOT-0, arrive-5)
det(conclusion-9, a-7)
amod(conclusion-9, negative-8)
prep_at(arrive-5, conclusion-9)
amod(propositions-12, negative-11)
prep_from(conclusion-9, propositions-12)

