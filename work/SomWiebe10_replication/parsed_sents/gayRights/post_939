(ROOT
  (S
    (NP (PRP I))
    (VP (VBP agree)
      (PP (IN with)
        (NP (PRP you))))
    (. .)))

nsubj(agree-2, I-1)
root(ROOT-0, agree-2)
prep_with(agree-2, you-4)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB want)
        (S
          (NP (PRP it))
          (NP (DT both) (NNS ways)))))
    (. .)))

nsubj(want-4, I-1)
aux(want-4, do-2)
neg(want-4, n't-3)
root(ROOT-0, want-4)
nsubj(ways-7, it-5)
det(ways-7, both-6)
xcomp(want-4, ways-7)

(ROOT
  (SBARQ
    (WHADVP
      (ADVP (RB So))
      (WRB where))
    (SQ (VBP do)
      (NP (PRP I))
      (VP (VB want)
        (NP
          (NP
            (NP (NN cake))
            (CC and)
            (S
              (VP (TO to)
                (VP (VB eat)))))
          (, ,)
          (ADJP (RB too) (JJ ???????)))))))

advmod(where-2, So-1)
advmod(want-5, where-2)
aux(want-5, do-3)
nsubj(want-5, I-4)
root(ROOT-0, want-5)
dobj(want-5, cake-6)
aux(eat-9, to-8)
dobj(want-5, eat-9)
conj_and(cake-6, eat-9)
infmod(cake-6, eat-9)
advmod(???????-12, too-11)
amod(cake-6, ???????-12)

(ROOT
  (FRAG
    (NP (NNP DUH))
    (. ?)))

root(ROOT-0, DUH-1)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP want)
      (NP
        (NP (DT the) (NN government) (NN OUT))
        (PP (IN of)
          (NP (PRP$ my) (NN life)))))
    (. .)))

nsubj(want-2, I-1)
root(ROOT-0, want-2)
det(OUT-5, the-3)
nn(OUT-5, government-4)
dobj(want-2, OUT-5)
poss(life-8, my-7)
prep_of(OUT-5, life-8)

(ROOT
  (S (CC But)
    (NP (PRP YOU))
    (VP (MD ca) (RB n't)
      (VP (VB have)
        (NP (PRP them))
        (PP
          (PP (IN in)
            (NP
              (NP (PRP$ my) (NN life))
              (PP (IN about)
                (NP (JJ other) (NNS things)))))
          (: ...)
          (PP (IN like)
            (SBAR
              (WHADVP (WRB how))
              (S
                (NP (PRP I))
                (VP (VBP raise)
                  (NP (NNP MY) (NNS children)))))))))
    (. .)))

cc(have-5, But-1)
nsubj(have-5, YOU-2)
aux(have-5, ca-3)
neg(have-5, n't-4)
root(ROOT-0, have-5)
dobj(have-5, them-6)
poss(life-9, my-8)
prep_in(have-5, life-9)
amod(things-12, other-11)
prep_about(life-9, things-12)
advmod(raise-17, how-15)
nsubj(raise-17, I-16)
prepc_like(have-5, raise-17)
nn(children-19, MY-18)
dobj(raise-17, children-19)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP I))
        (VP (VBP want)
          (S
            (VP (TO to)
              (VP (VB spank)
                (NP (NNP MY) (NN child))))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (NP
        (NP (NN none))
        (PP (IN of)
          (NP (PRP$ your) (NN business)))))
    (. .)))

mark(want-3, If-1)
nsubj(want-3, I-2)
xsubj(spank-5, I-2)
advcl(none-11, want-3)
aux(spank-5, to-4)
xcomp(want-3, spank-5)
nn(child-7, MY-6)
dobj(spank-5, child-7)
nsubj(none-11, it-9)
cop(none-11, is-10)
root(ROOT-0, none-11)
poss(business-14, your-13)
prep_of(none-11, business-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBD was)
      (VP (VBN spanked)
        (PP (IN by)
          (NP
            (NP (DT a) (JJ wonderful) (NN father))
            (SBAR
              (WHNP (WP who))
              (S
                (NP (NNP NEVER))
                (VP (VBD raised)
                  (NP (DT a) (NN hand))
                  (PP (TO to)
                    (NP (PRP me)))
                  (PP (IN in)
                    (NP (NN anger))))))))))
    (. .)))

nsubjpass(spanked-3, I-1)
auxpass(spanked-3, was-2)
root(ROOT-0, spanked-3)
det(father-7, a-5)
amod(father-7, wonderful-6)
agent(spanked-3, father-7)
dobj(raised-10, father-7)
rel(raised-10, who-8)
nsubj(raised-10, NEVER-9)
rcmod(father-7, raised-10)
det(hand-12, a-11)
dobj(raised-10, hand-12)
prep_to(raised-10, me-14)
prep_in(raised-10, anger-16)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP I))
        (VP (VBD had)
          (VP (VBN misbehaved)))))
    (, ,)
    (NP (PRP he))
    (VP (VBD sent)
      (NP (PRP me))
      (PP (TO to)
        (NP (PRP$ my) (NN room)))
      (SBAR (IN until)
        (S
          (NP (PRP he))
          (VP (VBD was)
            (ADJP
              (ADVP (RB no) (RBR longer))
              (JJ angry))))))
    (. .)))

advmod(misbehaved-4, When-1)
nsubj(misbehaved-4, I-2)
aux(misbehaved-4, had-3)
advcl(sent-7, misbehaved-4)
nsubj(sent-7, he-6)
root(ROOT-0, sent-7)
dobj(sent-7, me-8)
poss(room-11, my-10)
prep_to(sent-7, room-11)
mark(angry-17, until-12)
nsubj(angry-17, he-13)
cop(angry-17, was-14)
advmod(longer-16, no-15)
advmod(angry-17, longer-16)
advcl(sent-7, angry-17)

(ROOT
  (S (RB Then)
    (NP (PRP he))
    (VP
      (VP (VBD came)
        (PRT (RP in)))
      (CC and)
      (VP (VBD talked)
        (PP (TO to)
          (NP (PRP me)))
        (PP (IN about)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (PRP I))
              (VP (VBD had)
                (VP (VBN done)
                  (S
                    (ADJP (JJ wrong))))))))))
    (. .)))

advmod(came-3, Then-1)
nsubj(came-3, he-2)
nsubj(talked-6, he-2)
root(ROOT-0, came-3)
prt(came-3, in-4)
conj_and(came-3, talked-6)
prep_to(talked-6, me-8)
dobj(done-13, what-10)
nsubj(done-13, I-11)
aux(done-13, had-12)
prepc_about(talked-6, done-13)
acomp(done-13, wrong-14)

(ROOT
  (S (RB Then)
    (NP (PRP he))
    (VP (VBD told)
      (NP (PRP me))
      (SBAR (IN that)
        (S
          (NP (PRP he))
          (VP (VBD had)
            (S
              (VP (TO to)
                (VP (VB spank)
                  (S
                    (NP (PRP me))
                    (VP (TO to)
                      (VP (VB make)
                        (S
                          (NP (PRP me))
                          (VP (VB remember)))))))))
            (S (RB not)
              (VP (TO to)
                (VP (VB do)
                  (NP (PRP it))
                  (ADVP (RB again)))))))))
    (. .)))

advmod(told-3, Then-1)
nsubj(told-3, he-2)
root(ROOT-0, told-3)
dobj(told-3, me-4)
complm(had-7, that-5)
nsubj(had-7, he-6)
xsubj(spank-9, he-6)
xsubj(do-17, he-6)
ccomp(told-3, had-7)
aux(spank-9, to-8)
xcomp(had-7, spank-9)
nsubj(make-12, me-10)
aux(make-12, to-11)
xcomp(spank-9, make-12)
nsubj(remember-14, me-13)
ccomp(make-12, remember-14)
neg(do-17, not-15)
aux(do-17, to-16)
xcomp(had-7, do-17)
dobj(do-17, it-18)
advmod(do-17, again-19)

(ROOT
  (S (RB Then)
    (NP (PRP he))
    (VP (VBD gave)
      (NP (PRP me))
      (NP
        (NP (DT a) (NN spanking))
        (: ...)
        (NP (RB not) (DT a) (NN beating))))
    (. .)))

advmod(gave-3, Then-1)
nsubj(gave-3, he-2)
root(ROOT-0, gave-3)
iobj(gave-3, me-4)
det(spanking-6, a-5)
dobj(gave-3, spanking-6)
neg(beating-10, not-8)
det(beating-10, a-9)
dep(spanking-6, beating-10)

(ROOT
  (S
    (S
      (PP (IN Like))
      (NP (PRP I))
      (VP (VBD said)))
    (: ...)
    (S
      (NP (DT the) (NN license))
      (VP (VBZ is)
        (NP
          (NP (DT the) (JJ same))
          (PP (IN for)
            (NP (NN everyone))))))
    (: ...)
    (SBAR
      (WHNP (WP what))
      (S
        (NP (PRP you))
        (VP (VBP do)
          (SBAR (IN with)
            (S
              (NP (PRP it))
              (VP (VBZ is)
                (ADVP (RB up)
                  (PP (TO to)
                    (NP (PRP you))))))))))
    (. .)))

prep(said-3, Like-1)
nsubj(said-3, I-2)
root(ROOT-0, said-3)
det(license-6, the-5)
nsubj(same-9, license-6)
cop(same-9, is-7)
det(same-9, the-8)
parataxis(said-3, same-9)
prep_for(same-9, everyone-11)
dep(do-15, what-13)
dobj(is-18, what-13)
nsubj(do-15, you-14)
parataxis(said-3, do-15)
mark(is-18, with-16)
nsubj(is-18, it-17)
advcl(do-15, is-18)
advmod(is-18, up-19)
prep_to(up-19, you-21)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB never))
    (VP (VBD had)
      (NP (DT a) (NN mark)))
    (. .)))

nsubj(had-3, I-1)
neg(had-3, never-2)
root(ROOT-0, had-3)
det(mark-5, a-4)
dobj(had-3, mark-5)

(ROOT
  (NP (RB Not) (DT a) (JJ red) (NN bottom) (. .)))

neg(bottom-4, Not-1)
det(bottom-4, a-2)
amod(bottom-4, red-3)
root(ROOT-0, bottom-4)

(ROOT
  (S (IN So)
    (NP (PRP I))
    (VP (VBP believe)
      (SBAR
        (S
          (S
            (NP (PRP he))
            (VP (VBD did)
              (NP (DT a) (JJ good) (NN job))))
          (, ,)
          (CC and)
          (S
            (NP
              (NP (DT the) (NN idea))
              (SBAR (IN that)
                (S
                  (NP
                    (NP (DT some) (JJ knee-jerk) (NN reaction))
                    (PP (IN from)
                      (NP (DT a) (JJ do-gooder))))
                  (VP (MD could)
                    (VP (VB have)
                      (S
                        (NP (PRP me))
                        (VP (VBN arrested)
                          (PP (IN for)
                            (S
                              (VP (VBG disciplining)
                                (NP (PRP$ my) (NN child))))))))))))
            (VP (VBZ makes)
              (SBAR
                (S
                  (NP (PRP me))
                  (VP (VBZ FURIOUS)))))))))
    (. .)))

dep(believe-3, So-1)
nsubj(believe-3, I-2)
root(ROOT-0, believe-3)
nsubj(did-5, he-4)
dep(believe-3, did-5)
det(job-8, a-6)
amod(job-8, good-7)
dobj(did-5, job-8)
det(idea-12, the-11)
dobj(have-21, idea-12)
nsubj(makes-28, idea-12)
complm(have-21, that-13)
det(reaction-16, some-14)
amod(reaction-16, knee-jerk-15)
nsubj(have-21, reaction-16)
det(do-gooder-19, a-18)
prep_from(reaction-16, do-gooder-19)
aux(have-21, could-20)
dep(idea-12, have-21)
nsubj(arrested-23, me-22)
ccomp(have-21, arrested-23)
prepc_for(arrested-23, disciplining-25)
poss(child-27, my-26)
dobj(disciplining-25, child-27)
dep(believe-3, makes-28)
conj_and(did-5, makes-28)
nsubj(FURIOUS-30, me-29)
ccomp(makes-28, FURIOUS-30)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's) (RB not)
      (NP
        (NP (DT the) (NN government) (POS 's))
        (NN business)))
    (. .)))

nsubj(business-7, It-1)
cop(business-7, 's-2)
neg(business-7, not-3)
det(government-5, the-4)
poss(business-7, government-5)
root(ROOT-0, business-7)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP want)
      (NP
        (NP (DT the) (NN government))
        (PP (RB out) (IN of)
          (NP (PRP$ my) (NN business)))))
    (. .)))

nsubj(want-2, I-1)
root(ROOT-0, want-2)
det(government-4, the-3)
dobj(want-2, government-4)
poss(business-8, my-7)
prep_out_of(government-4, business-8)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ does) (RB n't)
      (VP (VB take)
        (NP (DT a) (NN village)
          (S
            (VP (TO to)
              (VP (VB raise)
                (NP (DT a) (NN child))))))))
    (. .)))

nsubj(take-4, It-1)
aux(take-4, does-2)
neg(take-4, n't-3)
root(ROOT-0, take-4)
det(village-6, a-5)
dobj(take-4, village-6)
aux(raise-8, to-7)
infmod(village-6, raise-8)
det(child-10, a-9)
dobj(raise-8, child-10)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ takes)
      (NP
        (NP (DT a) (NN family))
        (: ...)
        (NP (DT a) (JJ whole) (NN family))
        (, ,)
        (NP
          (NP (DT a) (VBG loving) (JJ whole) (NN family))
          (PP (IN with)
            (NP (JJ proper) (NNS values))))
        (CC and)
        (NP (DT a)
          (ADJP (JJ Mom)
            (PP (IN at)
              (NP (NN home)))
            (S
              (VP (TO to)
                (VP (VB pay)
                  (NP
                    (NP (NN attention))
                    (CC and)
                    (NP (DT a) (NNP Dad))))))
            (SBAR
              (WHNP (WP who))
              (S
                (VP
                  (VP (VBZ comes)
                    (NP (NN home)))
                  (CC and)
                  (VP (VBZ pays))))))
          (NN attention))))
    (. .)))

nsubj(takes-2, It-1)
root(ROOT-0, takes-2)
det(family-4, a-3)
dobj(takes-2, family-4)
det(family-8, a-6)
amod(family-8, whole-7)
dobj(takes-2, family-8)
conj_and(family-4, family-8)
det(family-13, a-10)
amod(family-13, loving-11)
amod(family-13, whole-12)
dobj(takes-2, family-13)
conj_and(family-4, family-13)
amod(values-16, proper-15)
prep_with(family-13, values-16)
det(attention-33, a-18)
amod(attention-33, Mom-19)
prep_at(Mom-19, home-21)
aux(pay-23, to-22)
xcomp(Mom-19, pay-23)
dobj(pay-23, attention-24)
det(Dad-27, a-26)
dobj(pay-23, Dad-27)
conj_and(attention-24, Dad-27)
nsubj(comes-29, who-28)
nsubj(pays-32, who-28)
dep(Mom-19, comes-29)
dobj(comes-29, home-30)
dep(Mom-19, pays-32)
conj_and(comes-29, pays-32)
dobj(takes-2, attention-33)
conj_and(family-4, attention-33)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ takes)
        (NP
          (NP (NN FAMILY))
          (: ...)
          (NP (RB not) (NN Government)))))
    (: ...)
    (CC and)
    (S
      (NP (PRP I))
      (VP (VBP want)
        (S
          (NP (PRP them))
          (NP
            (NP (NNP OUT))
            (PP (IN of)
              (NP (PRP$ my) (NN life)))))))
    (. .)))

nsubj(takes-2, It-1)
root(ROOT-0, takes-2)
dobj(takes-2, FAMILY-3)
neg(Government-6, not-5)
dep(FAMILY-3, Government-6)
nsubj(want-10, I-9)
conj_and(takes-2, want-10)
nsubj(OUT-12, them-11)
xcomp(want-10, OUT-12)
poss(life-15, my-14)
prep_of(OUT-12, life-15)

(ROOT
  (S
    (VP
      (VP (VB Go)
        (PP (TO to)
          (NP (DT a) (NN church))))
      (CC and)
      (VP (VB get)
        (VP (VBN married)
          (PP (IN under)
            (NP
              (NP (DT the) (NNS eyes))
              (PP (IN of)
                (NP (NNP God))))))))
    (. .)))

root(ROOT-0, Go-1)
det(church-4, a-3)
prep_to(Go-1, church-4)
auxpass(married-7, get-6)
conj_and(Go-1, married-7)
det(eyes-10, the-9)
prep_under(married-7, eyes-10)
prep_of(eyes-10, God-12)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (NP
        (NP (DT a) (NN license))
        (PP (IN for)
          (NP
            (NP (DT a) (JJ civil) (NN union))
            (PP (IN from)
              (NP (DT the) (NN government))))))
      (PP (RB not)
        (NP (DT a) (NN marriage) (NN license))))
    (. .)))

nsubj(have-2, You-1)
root(ROOT-0, have-2)
det(license-4, a-3)
dobj(have-2, license-4)
det(union-8, a-6)
amod(union-8, civil-7)
prep_for(license-4, union-8)
det(government-11, the-10)
prep_from(union-8, government-11)
prep(have-2, not-12)
det(license-15, a-13)
nn(license-15, marriage-14)
pobj(not-12, license-15)

(ROOT
  (S
    (NP (PRP$ Your) (NN church))
    (VP (VBZ lets)
      (S
        (NP (PRP you))
        (VP (VB get)
          (ADJP (JJ married)))))
    (. .)))

poss(church-2, Your-1)
nsubj(lets-3, church-2)
root(ROOT-0, lets-3)
nsubj(married-6, you-4)
dep(married-6, get-5)
ccomp(lets-3, married-6)

(ROOT
  (S
    (S
      (NP (DT The) (NN government))
      (VP (VBZ lets)
        (S
          (NP (PRP you))
          (VP (VB file)
            (NP (NNS taxes))
            (PP (IN as)
              (NP (DT a) (NN union)))))))
    (: ...)
    (FRAG
      (CONJP (RB not) (IN as))
      (NP (DT a) (JJ married) (NN couple)))
    (. .)))

det(government-2, The-1)
nsubj(lets-3, government-2)
root(ROOT-0, lets-3)
nsubj(file-5, you-4)
ccomp(lets-3, file-5)
dobj(file-5, taxes-6)
det(union-9, a-8)
prep_as(file-5, union-9)
dep(couple-15, not-11)
dep(not-11, as-12)
det(couple-15, a-13)
amod(couple-15, married-14)
dep(lets-3, couple-15)

(ROOT
  (S
    (NP (PRP$ Your) (NN company))
    (VP (VBZ lets)
      (S
        (NP (PRP you))
        (VP (VB buy)
          (NP (NN insurance))
          (PP (IN as)
            (NP
              (NP (DT a) (NN union))
              (, ,)
              (CONJP (RB not) (IN as))
              (NP (DT a) (NN couple)))))))
    (. .)))

poss(company-2, Your-1)
nsubj(lets-3, company-2)
root(ROOT-0, lets-3)
nsubj(buy-5, you-4)
ccomp(lets-3, buy-5)
dobj(buy-5, insurance-6)
det(union-9, a-8)
prep_as(buy-5, union-9)
det(couple-14, a-13)
prep_as(buy-5, couple-14)
conj_negcc(union-9, couple-14)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP file)
        (NP
          (NP (DT a) (NN will))
          (PP (IN as)
            (NP (DT a) (NN union))))))
    (: ...)
    (FRAG
      (CONJP (RB not) (IN as))
      (NP (DT a) (NN couple)))
    (. .)))

nsubj(file-2, You-1)
root(ROOT-0, file-2)
det(will-4, a-3)
dobj(file-2, will-4)
det(union-7, a-6)
prep_as(will-4, union-7)
dep(couple-12, not-9)
dep(not-9, as-10)
det(couple-12, a-11)
dep(file-2, couple-12)

(ROOT
  (S
    (NP
      (NP (JJ Whatever) (NN ceremony))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP choose)
            (S
              (VP (TO to)
                (VP (VB celebrate))))))))
    (VP (VBZ is)
      (ADVP (RB up)
        (PP (TO to)
          (NP (PRP you)))))
    (. .)))

amod(ceremony-2, Whatever-1)
dobj(choose-4, ceremony-2)
nsubj(is-7, ceremony-2)
nsubj(choose-4, you-3)
xsubj(celebrate-6, you-3)
rcmod(ceremony-2, choose-4)
aux(celebrate-6, to-5)
xcomp(choose-4, celebrate-6)
root(ROOT-0, is-7)
advmod(is-7, up-8)
prep_to(up-8, you-10)

