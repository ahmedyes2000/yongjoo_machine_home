(ROOT
  (S
    (S
      (S
        (NP (PRP I))
        (VP (VBP 've)
          (VP (VBN made)
            (NP (DT a) (JJ personal) (NN life) (NN choice)))))
      (CC and)
      (S
        (NP (PRP I))
        (VP (VBP think)
          (SBAR
            (S
              (NP (PRP I))
              (VP (VBP have)
                (NP
                  (NP (DT a) (JJ genetic) (NN disposition))
                  (PP (TO to)
                    (S
                      (VP (VBG taking)
                        (NP (JJ other) (NNS peoples) (NNS things))))))))))))
    (: ;)
    (S
      (NP (PRP I))
      (VP (VBP 'm)
        (NP (DT a) (NN thief))))
    (. .)))

nsubj(made-3, I-1)
aux(made-3, 've-2)
root(ROOT-0, made-3)
det(choice-7, a-4)
amod(choice-7, personal-5)
nn(choice-7, life-6)
dobj(made-3, choice-7)
nsubj(think-10, I-9)
conj_and(made-3, think-10)
nsubj(have-12, I-11)
ccomp(think-10, have-12)
det(disposition-15, a-13)
amod(disposition-15, genetic-14)
dobj(have-12, disposition-15)
prepc_to(disposition-15, taking-17)
amod(things-20, other-18)
nn(things-20, peoples-19)
dobj(taking-17, things-20)
nsubj(thief-25, I-22)
cop(thief-25, 'm-23)
det(thief-25, a-24)
parataxis(made-3, thief-25)

(ROOT
  (S
    (S
      (ADVP (RB Sometimes))
      (NP (PRP I))
      (VP (VBP do)
        (S
          (VP (VB get)
            (ADJP (JJ violent))
            (SBAR
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (PRP I))
                  (VP
                    (VP (VBP do)
                      (NP (PRP it)))
                    (CC and)
                    (VP (VBD hurt)
                      (NP (NNS people))))))
              (CC but)
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ 's)
                    (ADJP (JJ OK))
                    (S
                      (VP (VB cause)
                        (SBAR
                          (S
                            (NP (PRP I))
                            (VP (VBD was)
                              (VP (VBN born)
                                (SBAR
                                  (S
                                    (NP (DT this) (NN way)
                                      (CC and)
                                      (NN nobody))
                                    (VP (MD should)
                                      (VP (VB tell)
                                        (NP (PRP me))))))))))))
                    (SBAR
                      (WHNP (WP what))
                      (S
                        (NP (PRP I))
                        (VP (MD can)
                          (CC or)
                          (MD ca) (RB n't)
                          (VP (VB do)))))))))))))
    (: ;)
    (S
      (NP (PRP I))
      (VP (VBP 'm)
        (VP (VBN entitled)
          (S
            (VP (TO to)
              (VP (VB live)
                (NP (PRP$ my) (JJ live))
                (SBAR (IN as)
                  (S
                    (NP (PRP I))
                    (VP (VBP see)
                      (ADJP (JJ fit)))))))))))
    (. .)))

advmod(do-3, Sometimes-1)
nsubj(do-3, I-2)
root(ROOT-0, do-3)
dep(violent-5, get-4)
ccomp(do-3, violent-5)
advmod(do-8, when-6)
nsubj(do-8, I-7)
nsubj(hurt-11, I-7)
dep(violent-5, do-8)
dobj(do-8, it-9)
dep(violent-5, hurt-11)
conj_and(do-8, hurt-11)
dobj(hurt-11, people-12)
nsubj(OK-16, that-14)
cop(OK-16, 's-15)
dep(violent-5, OK-16)
conj_but(do-8, OK-16)
ccomp(OK-16, cause-17)
nsubjpass(born-20, I-18)
auxpass(born-20, was-19)
ccomp(cause-17, born-20)
det(way-22, this-21)
nsubj(tell-26, way-22)
conj_and(way-22, nobody-24)
nsubj(tell-26, nobody-24)
aux(tell-26, should-25)
ccomp(born-20, tell-26)
dobj(tell-26, me-27)
dobj(do-34, what-28)
nsubj(do-34, I-29)
aux(do-34, can-30)
ccomp(OK-16, ca-32)
aux(do-34, ca-32)
conj_or(do-34, ca-32)
neg(do-34, n't-33)
ccomp(OK-16, do-34)
nsubjpass(entitled-38, I-36)
xsubj(live-40, I-36)
auxpass(entitled-38, 'm-37)
parataxis(do-3, entitled-38)
aux(live-40, to-39)
xcomp(entitled-38, live-40)
poss(live-42, my-41)
dobj(live-40, live-42)
mark(see-45, as-43)
nsubj(see-45, I-44)
advcl(live-40, see-45)
acomp(see-45, fit-46)

(ROOT
  (S
    (S (CC And)
      (NP (PRP you))
      (VP (MD might)
        (VP (VB say))))
    (: ;)
    (S
      (NP (PRP I))
      (ADVP (RB just))
      (VP (VBP know)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ is))))))
    (. .)))

cc(say-4, And-1)
nsubj(say-4, you-2)
aux(say-4, might-3)
root(ROOT-0, say-4)
nsubj(know-8, I-6)
advmod(know-8, just-7)
parataxis(say-4, know-8)
nsubj(is-10, it-9)
ccomp(know-8, is-10)

(ROOT
  (S (IN So)
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB prove)
              (SBAR
                (S
                  (NP (PRP$ your) (NN argument))
                  (VP (VBZ is)
                    (ADJP (JJ false))
                    (SBAR (IN because)
                      (S
                        (NP (PRP you))
                        (VP (VBP know)
                          (ADVP (RB instinctively))
                          (SBAR (IN that)
                            (S
                              (NP (PRP it))
                              (VP (VBZ is)))))))))))))))
    (. .)))

dep(have-5, So-1)
nsubj(have-5, I-2)
xsubj(prove-7, I-2)
aux(have-5, do-3)
neg(have-5, n't-4)
root(ROOT-0, have-5)
aux(prove-7, to-6)
xcomp(have-5, prove-7)
poss(argument-9, your-8)
nsubj(false-11, argument-9)
cop(false-11, is-10)
ccomp(prove-7, false-11)
mark(know-14, because-12)
nsubj(know-14, you-13)
advcl(false-11, know-14)
advmod(know-14, instinctively-15)
complm(is-18, that-16)
nsubj(is-18, it-17)
ccomp(know-14, is-18)

(ROOT
  (S
    (PP (IN Oh)
      (NP (NN yeah)))
    (PRN (, ,)
      (SINV (MD could)
        (NP (PRP you))
        (VP (VB send)
          (NP (PRP me))
          (NP (PRP$ your) (NN address))))
      (, ,))
    (NP (PRP I))
    (VP (MD 'd)
      (VP (VB like)
        (S
          (VP (TO to)
            (VP (VB see)
              (SBAR
                (S
                  (VP (VBD were)
                    (NP (PRP you))
                    (ADVP (RB live))))))))))
    (. .)))

prep_oh(like-13, yeah-2)
aux(send-6, could-4)
nsubj(send-6, you-5)
parataxis(like-13, send-6)
iobj(send-6, me-7)
poss(address-9, your-8)
dobj(send-6, address-9)
nsubj(like-13, I-11)
xsubj(see-15, I-11)
aux(like-13, 'd-12)
root(ROOT-0, like-13)
aux(see-15, to-14)
xcomp(like-13, see-15)
cop(you-17, were-16)
ccomp(see-15, you-17)
advmod(you-17, live-18)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBD bet)
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP 've)
            (VP (VBN got)
              (NP (DT some) (JJ cool) (NN stuff)))))))
    (. .)))

nsubj(bet-2, I-1)
root(ROOT-0, bet-2)
nsubj(got-5, you-3)
aux(got-5, 've-4)
ccomp(bet-2, got-5)
det(stuff-8, some-6)
amod(stuff-8, cool-7)
dobj(got-5, stuff-8)

(ROOT
  (S
    (S
      (NP (NNP Final))
      (VP (VBD thought)))
    (, ,)
    (NP (PRP I))
    (VP (MD 'll)
      (VP (VB bet)
        (NP
          (NP (NN money))
          (SBAR
            (S
              (NP (PRP you))
              (VP (VBP do) (RB n't)
                (ADVP (RB instinctively))
                (VP (VB believe)
                  (NP (PRP$ your) (NN argument)))))))))
    (. .)))

nsubj(thought-2, Final-1)
ccomp(bet-6, thought-2)
nsubj(bet-6, I-4)
aux(bet-6, 'll-5)
root(ROOT-0, bet-6)
dobj(bet-6, money-7)
nsubj(believe-12, you-8)
aux(believe-12, do-9)
neg(believe-12, n't-10)
advmod(believe-12, instinctively-11)
rcmod(money-7, believe-12)
poss(argument-14, your-13)
dobj(believe-12, argument-14)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB only))
    (VP (VBP believe)
      (NP (PRP it))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP
            (NP (PRP$ your))
            (VP (VBG trying)
              (S
                (VP (TO to)
                  (VP (VB justify)
                    (NP (PRP$ your) (NN behavior))
                    (SBAR (IN that)
                      (S
                        (NP (PRP you))
                        (ADVP (RB instinctively))
                        (VP (VBP know)))))))))
          (VP (VBZ is)
            (ADJP (JJ wrong))))))
    (. .)))

nsubj(believe-3, You-1)
advmod(believe-3, only-2)
root(ROOT-0, believe-3)
dobj(believe-3, it-4)
advmod(wrong-17, when-5)
xsubj(justify-9, your-6)
nsubj(wrong-17, your-6)
partmod(your-6, trying-7)
aux(justify-9, to-8)
xcomp(trying-7, justify-9)
poss(behavior-11, your-10)
dobj(justify-9, behavior-11)
complm(know-15, that-12)
nsubj(know-15, you-13)
advmod(know-15, instinctively-14)
ccomp(justify-9, know-15)
cop(wrong-17, is-16)
advcl(believe-3, wrong-17)

(ROOT
  (S (CC But)
    (SBAR (IN If)
      (S
        (NP (NN somebody))
        (VP (VBZ is)
          (VP (VBG violating)
            (NP (PRP you))))))
    (S
      (NP (PRP I))
      (VP (MD 'd)
        (VP
          (VP (VB bet)
            (NP
              (NP
                (QP (DT a) (CD million))
                (NNS dollars))
              (SBAR
                (S
                  (NP (PRP you))
                  (VP (VBP get)
                    (ADJP (RB morally) (JJ objective))
                    (S
                      (ADJP (RB real) (JJ quick))))))))
          (CC and)
          (VP (VB say)
            (NP (NN something))
            (PP (IN like))))))
    (: ;)
    (S
      (NP (PRP you))
      (VP (MD should) (RB n't)
        (VP (VB do)
          (NP (DT that)))))
    (. .)))

mark(violating-5, If-2)
nsubj(violating-5, somebody-3)
aux(violating-5, is-4)
dep(bet-9, violating-5)
dobj(violating-5, you-6)
nsubj(bet-9, I-7)
nsubj(say-20, I-7)
aux(bet-9, 'd-8)
root(ROOT-0, bet-9)
quantmod(million-11, a-10)
num(dollars-12, million-11)
dobj(bet-9, dollars-12)
dobj(objective-16, dollars-12)
nsubj(objective-16, you-13)
dep(objective-16, get-14)
advmod(objective-16, morally-15)
rcmod(dollars-12, objective-16)
advmod(quick-18, real-17)
dep(objective-16, quick-18)
conj_and(bet-9, say-20)
dobj(say-20, something-21)
prep(say-20, like-22)
nsubj(do-27, you-24)
aux(do-27, should-25)
neg(do-27, n't-26)
parataxis(bet-9, do-27)
dobj(do-27, that-28)

(ROOT
  (SBARQ
    (WHPP (TO To)
      (WHNP (WDT which)))
    (SQ
      (NP (PRP I))
      (VP (MD would)
        (VP (VB reply))))
    (: ;)
    (ADJP (JJ why) (RB not))
    (. ?)))

prep_to(reply-5, which-2)
nsubj(reply-5, I-3)
aux(reply-5, would-4)
root(ROOT-0, reply-5)
dep(reply-5, why-7)
neg(why-7, not-8)

(ROOT
  (S (CC And)
    (NP (PRP you))
    (VP (MD might)
      (VP
        (VP (VB say))
        (: ;)
        (SBAR (IN because)
          (S
            (NP (PRP it))
            (VP (VBZ 's)
              (ADJP (JJ wrong)))))))
    (. .)))

cc(say-4, And-1)
nsubj(say-4, you-2)
aux(say-4, might-3)
root(ROOT-0, say-4)
mark(wrong-9, because-6)
nsubj(wrong-9, it-7)
cop(wrong-9, 's-8)
advcl(say-4, wrong-9)
parataxis(say-4, wrong-9)

(ROOT
  (S (CC And)
    (NP (PRP I))
    (VP (MD would)
      (VP (VB say) (: ;)
        (SBARQ
          (WHADVP (WRB how))
          (SQ (VBP do)
            (NP (PRP you))
            (VP (VB know)
              (SBAR
                (S
                  (NP (PRP it))
                  (VP (VBZ 's)
                    (ADJP (JJ wrong)))))))
          (. ?))))))

cc(say-4, And-1)
nsubj(say-4, I-2)
aux(say-4, would-3)
root(ROOT-0, say-4)
advmod(know-9, how-6)
aux(know-9, do-7)
nsubj(know-9, you-8)
parataxis(say-4, know-9)
nsubj(wrong-12, it-10)
cop(wrong-12, 's-11)
ccomp(know-9, wrong-12)

