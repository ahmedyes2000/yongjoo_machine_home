(ROOT
  (S
    (S
      (ADVP (RB Next))
      (NP (PRP you))
      (VP (MD 'll)
        (VP (VB be)
          (VP (VBG telling)
            (NP (PRP us))))))
    (NP (PRP we))
    (VP (MD should) (RB all)
      (VP
        (VP (VB catch)
          (NP (NNS bugs))
          (PP (IN in)
            (NP (DT a) (NN web))))
        (CC and)
        (VP (VB eat)
          (NP (PRP them))
          (SBAR (IN because)
            (S
              (NP (PRP it))
              (VP (VBZ works)
                (PP (IN for)
                  (NP (NNS spiders)))))))))
    (. .)))

advmod(telling-5, Next-1)
nsubj(telling-5, you-2)
aux(telling-5, 'll-3)
aux(telling-5, be-4)
dep(catch-10, telling-5)
dobj(telling-5, us-6)
nsubj(catch-10, we-7)
nsubj(eat-16, we-7)
aux(catch-10, should-8)
advmod(catch-10, all-9)
root(ROOT-0, catch-10)
dobj(catch-10, bugs-11)
det(web-14, a-13)
prep_in(catch-10, web-14)
conj_and(catch-10, eat-16)
dobj(eat-16, them-17)
mark(works-20, because-18)
nsubj(works-20, it-19)
advcl(eat-16, works-20)
prep_for(works-20, spiders-22)

(ROOT
  (S
    (NP (NNS Men)
      (CC and)
      (NNS women))
    (VP (VBP are) (RB not)
      (NP (DT the) (JJ same))
      (, ,)
      (S
        (ADJP (RB politically) (JJ correctness)
          (PP (TO to)
            (NP (DT the) (NN contrary))))))
    (. .)))

nsubj(same-7, Men-1)
conj_and(Men-1, women-3)
nsubj(same-7, women-3)
cop(same-7, are-4)
neg(same-7, not-5)
det(same-7, the-6)
root(ROOT-0, same-7)
advmod(correctness-10, politically-9)
dep(same-7, correctness-10)
det(contrary-13, the-12)
prep_to(correctness-10, contrary-13)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can)
      (VP (VB argue)
        (SBAR
          (SBAR (IN that)
            (S
              (NP
                (NP (JJ other) (NNS alternatives))
                (PP (TO to)
                  (NP (DT the) (JJ traditional) (NN family) (NN unit))))
              (VP (VBP are)
                (ADVP (RB equally))
                (NP
                  (NP (NN contra) (NN survival))
                  (, ,)
                  (NP
                    (NP (RB perhaps) (RB even))
                    (PP (IN with)
                      (NP (DT some) (JJ small) (NN merit))))))))
          (, ,)
          (CC but)
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ does) (RB n't)
                (VP (VB change)
                  (NP (DT the) (NN fact))
                  (SBAR (IN that)
                    (S
                      (NP (DT the) (JJ traditional) (NN family) (NN unit))
                      (VP (VBZ provides)
                        (NP (DT the) (JJS best) (JJ possible) (NNS benefits))
                        (PP (TO to)
                          (NP (NNS children)))))))))))))
    (. .)))

nsubj(argue-3, You-1)
aux(argue-3, can-2)
root(ROOT-0, argue-3)
complm(survival-15, that-4)
amod(alternatives-6, other-5)
nsubj(survival-15, alternatives-6)
det(unit-11, the-8)
amod(unit-11, traditional-9)
nn(unit-11, family-10)
prep_to(alternatives-6, unit-11)
cop(survival-15, are-12)
advmod(survival-15, equally-13)
nn(survival-15, contra-14)
ccomp(argue-3, survival-15)
advmod(even-18, perhaps-17)
appos(survival-15, even-18)
det(merit-22, some-20)
amod(merit-22, small-21)
prep_with(even-18, merit-22)
nsubj(change-28, that-25)
aux(change-28, does-26)
neg(change-28, n't-27)
ccomp(argue-3, change-28)
conj_but(survival-15, change-28)
det(fact-30, the-29)
dobj(change-28, fact-30)
complm(provides-36, that-31)
det(unit-35, the-32)
amod(unit-35, traditional-33)
nn(unit-35, family-34)
nsubj(provides-36, unit-35)
ccomp(change-28, provides-36)
det(benefits-40, the-37)
amod(benefits-40, best-38)
amod(benefits-40, possible-39)
dobj(provides-36, benefits-40)
prep_to(provides-36, children-42)

(ROOT
  (S
    (NP (NNP Children))
    (VP (VBP are) (RB not)
      (NP (NNS pets)))
    (. .)))

nsubj(pets-4, Children-1)
cop(pets-4, are-2)
neg(pets-4, not-3)
root(ROOT-0, pets-4)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD ca) (RB n't)
      (ADVP (RB even))
      (VP (VB begin)
        (S
          (VP (TO to)
            (VP (VB express)
              (SBAR
                (WHADVP (WRB how)
                  (ADJP (JJ low)))
                (S
                  (NP (PRP$ my) (NN opinion))
                  (VP (VBZ is)
                    (PP (IN of)
                      (NP
                        (NP (NN anyone))
                        (SBAR
                          (WHNP (WP who))
                          (S
                            (VP (MD would)
                              (VP (VB use)
                                (NP (NNS children))
                                (PP (IN as)
                                  (NP (NN bargaining) (NNS chips)))
                                (PP (IN as)
                                  (NP (DT a) (NN way)
                                    (S
                                      (VP (TO to)
                                        (VP (VB legitimize)
                                          (NP (PRP$ their) (JJ own) (NN lifestyle) (NNS choices)))))))))))))))))))))
    (. .)))

nsubj(begin-5, I-1)
xsubj(express-7, I-1)
aux(begin-5, ca-2)
neg(begin-5, n't-3)
advmod(begin-5, even-4)
root(ROOT-0, begin-5)
aux(express-7, to-6)
xcomp(begin-5, express-7)
advmod(is-12, how-8)
dep(how-8, low-9)
poss(opinion-11, my-10)
nsubj(is-12, opinion-11)
ccomp(express-7, is-12)
prep_of(is-12, anyone-14)
nsubj(use-17, anyone-14)
aux(use-17, would-16)
rcmod(anyone-14, use-17)
dobj(use-17, children-18)
nn(chips-21, bargaining-20)
prep_as(use-17, chips-21)
det(way-24, a-23)
prep_as(use-17, way-24)
aux(legitimize-26, to-25)
infmod(way-24, legitimize-26)
poss(choices-30, their-27)
amod(choices-30, own-28)
nn(choices-30, lifestyle-29)
dobj(legitimize-26, choices-30)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP want)
          (NP (DT a) (NN pet)))))
    (, ,)
    (VP (VB get)
      (NP
        (NP (DT a) (NN puppy))
        (CC or)
        (NP (DT a) (NN kitten))))
    (. .)))

mark(want-3, If-1)
nsubj(want-3, you-2)
advcl(get-7, want-3)
det(pet-5, a-4)
dobj(want-3, pet-5)
root(ROOT-0, get-7)
det(puppy-9, a-8)
dobj(get-7, puppy-9)
det(kitten-12, a-11)
dobj(get-7, kitten-12)
conj_or(puppy-9, kitten-12)

(ROOT
  (S
    (ADVP (RBR Better) (RB yet))
    (, ,)
    (S
      (VP (VB start)
        (UCP
          (PP (IN with)
            (NP (DT a) (JJ nice) (NN house) (NN plant)))
          (CC and)
          (SBAR (IN if)
            (S
              (NP (PRP it))
              (VP (VBZ 's)
                (ADVP (RB still))
                (ADJP (JJ alive)
                  (PP (IN after)
                    (NP (DT a) (NN year))))))))))
    (, ,)
    (VP (VBP get)
      (NP
        (NP (DT a) (NN fish))
        (CC or)
        (NP (DT a) (NN hamster))))
    (. .)))

advmod(yet-2, Better-1)
advmod(get-20, yet-2)
ccomp(get-20, start-4)
dep(start-4, with-5)
det(plant-9, a-6)
amod(plant-9, nice-7)
nn(plant-9, house-8)
pobj(with-5, plant-9)
mark(alive-15, if-11)
nsubj(alive-15, it-12)
cop(alive-15, 's-13)
advmod(alive-15, still-14)
dep(start-4, alive-15)
conj_and(with-5, alive-15)
det(year-18, a-17)
prep_after(alive-15, year-18)
root(ROOT-0, get-20)
det(fish-22, a-21)
dobj(get-20, fish-22)
det(hamster-25, a-24)
dobj(get-20, hamster-25)
conj_or(fish-22, hamster-25)

(ROOT
  (S
    (PP (IN With)
      (NP (NN experience)))
    (, ,)
    (NP (PRP you))
    (VP (MD may)
      (ADVP (RB eventually))
      (VP (VB become)
        (ADJP (JJ competent)
          (S
            (VP (TO to)
              (VP (VB care)
                (PP (IN for)
                  (NP
                    (NP (DT a) (NN critter))
                    (PP (IN as)
                      (NP
                        (ADJP (JJ complex)
                          (PP (IN as)
                            (NP (DT a) (NN baby))))
                        (NN cat)
                        (CC or)
                        (NN dog)))))))))))
    (. .)))

prep_with(competent-8, experience-2)
nsubj(competent-8, you-4)
aux(competent-8, may-5)
advmod(competent-8, eventually-6)
cop(competent-8, become-7)
root(ROOT-0, competent-8)
aux(care-10, to-9)
xcomp(competent-8, care-10)
det(critter-13, a-12)
prep_for(care-10, critter-13)
amod(cat-19, complex-15)
det(baby-18, a-17)
prep_as(complex-15, baby-18)
prep_as(critter-13, cat-19)
prep_as(critter-13, dog-21)
conj_or(cat-19, dog-21)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (JJ big) (NN difference))
        (PP (IN between)
          (NP
            (NP (DT a) (JJ pet) (NN kitten))
            (CC and)
            (NP (DT a) (JJ human) (NN child)))))
      (VP (VBZ is)
        (PP (IN with)
          (NP (DT the) (NN kitten)))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are) (RB not)
      (ADJP (JJ responsible)
        (PP (IN for)
          (S
            (VP (VBG teaching)
              (S
                (NP (PRP it))
                (NP
                  (NP (NN everything))
                  (SBAR
                    (S
                      (NP (PRP it))
                      (VP (MD will)
                        (VP (VB need)
                          (S
                            (VP (TO to)
                              (VP (VB know)
                                (S
                                  (VP (TO to)
                                    (VP (VB survive)
                                      (PP (IN for)
                                        (NP (DT the) (CD 50) (NN plus) (NNS years)))))))))))))
                  (SBAR
                    (S
                      (NP (PRP it))
                      (VP (MD will)
                        (VP (VB live)
                          (PP (IN after)
                            (S
                              (VP (VBG leaving)
                                (NP (PRP$ your) (NN care))))))))))))))))
    (. .)))

det(difference-3, The-1)
amod(difference-3, big-2)
nsubj(is-12, difference-3)
det(kitten-7, a-5)
amod(kitten-7, pet-6)
prep_between(difference-3, kitten-7)
det(child-11, a-9)
amod(child-11, human-10)
prep_between(difference-3, child-11)
conj_and(kitten-7, child-11)
ccomp(responsible-20, is-12)
det(kitten-15, the-14)
prep_with(is-12, kitten-15)
nsubj(responsible-20, you-17)
cop(responsible-20, are-18)
neg(responsible-20, not-19)
root(ROOT-0, responsible-20)
prepc_for(responsible-20, teaching-22)
nsubj(everything-24, it-23)
xcomp(teaching-22, everything-24)
dobj(need-27, everything-24)
dobj(live-39, everything-24)
nsubj(need-27, it-25)
xsubj(know-29, it-25)
aux(need-27, will-26)
rcmod(everything-24, need-27)
aux(know-29, to-28)
xcomp(need-27, know-29)
aux(survive-31, to-30)
xcomp(know-29, survive-31)
det(years-36, the-33)
num(years-36, 50-34)
nn(years-36, plus-35)
prep_for(survive-31, years-36)
nsubj(live-39, it-37)
aux(live-39, will-38)
rcmod(everything-24, live-39)
prepc_after(live-39, leaving-41)
poss(care-43, your-42)
dobj(leaving-41, care-43)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP have)
      (NP
        (NP (DT a) (JJ high) (NN opinion))
        (PP (IN of)
          (NP (JJ free) (NN will))))
      (SBAR (RB even) (IN though)
        (S
          (NP (PRP I))
          (VP (VBP do) (RB n't)
            (ADVP (RB always))
            (VP (VB agree)
              (PP (IN with)
                (NP
                  (NP (DT the) (NN way))
                  (SBAR
                    (S
                      (NP (PRP it))
                      (VP (VBZ is)
                        (VP (VBN exercised))))))))))))
    (. .)))

nsubj(have-2, I-1)
root(ROOT-0, have-2)
det(opinion-5, a-3)
amod(opinion-5, high-4)
dobj(have-2, opinion-5)
amod(will-8, free-7)
prep_of(opinion-5, will-8)
advmod(agree-15, even-9)
dep(agree-15, though-10)
nsubj(agree-15, I-11)
aux(agree-15, do-12)
neg(agree-15, n't-13)
advmod(agree-15, always-14)
dep(have-2, agree-15)
det(way-18, the-17)
prep_with(agree-15, way-18)
nsubjpass(exercised-21, it-19)
auxpass(exercised-21, is-20)
rcmod(way-18, exercised-21)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP 're)
          (ADJP (JJ gay)))))
    (, ,)
    (NP (PRP I))
    (ADVP (RB fully))
    (VP (VB respect)
      (NP (PRP$ your) (NN right)
        (S
          (VP (TO to)
            (VP (VB be)
              (VP (VBN left)
                (ADVP (RB alone))
                (S
                  (VP (TO to)
                    (VP (VB make)
                      (NP
                        (NP (DT the) (JJS best) (NN life))
                        (SBAR
                          (S
                            (NP (PRP you))
                            (VP (MD can)
                              (PP (IN for)
                                (NP (PRP yourself))))))))))))))))
    (. .)))

mark(gay-4, If-1)
nsubj(gay-4, you-2)
cop(gay-4, 're-3)
advcl(respect-8, gay-4)
nsubj(respect-8, I-6)
advmod(respect-8, fully-7)
root(ROOT-0, respect-8)
poss(right-10, your-9)
dobj(respect-8, right-10)
aux(left-13, to-11)
auxpass(left-13, be-12)
infmod(right-10, left-13)
advmod(left-13, alone-14)
aux(make-16, to-15)
xcomp(left-13, make-16)
det(life-19, the-17)
amod(life-19, best-18)
dobj(make-16, life-19)
dobj(can-21, life-19)
nsubj(can-21, you-20)
rcmod(life-19, can-21)
prep_for(can-21, yourself-23)

(ROOT
  (S
    (NP
      (NP (DT The) (NN moment))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP say)
            (SBAR
              (S
                (NP (PRP you))
                (VP (MD should)
                  (VP (VB be)
                    (VP (VBN allowed)
                      (S
                        (VP (TO to)
                          (VP (VB impose)
                            (NP (PRP$ your) (NN will))
                            (PP (IN on)
                              (NP (DT another)))))))))))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB find)
        (NP (PRP me))
        (PP (IN in)
          (NP (JJ adament) (NN opposition)))
        (PP (TO to)
          (NP (PRP$ your) (NN position)))))
    (. .)))

det(moment-2, The-1)
nsubj(find-18, moment-2)
nsubj(say-4, you-3)
rcmod(moment-2, say-4)
nsubjpass(allowed-8, you-5)
aux(allowed-8, should-6)
auxpass(allowed-8, be-7)
ccomp(say-4, allowed-8)
aux(impose-10, to-9)
xcomp(allowed-8, impose-10)
poss(will-12, your-11)
dobj(impose-10, will-12)
prep_on(impose-10, another-14)
nsubj(find-18, you-16)
aux(find-18, will-17)
root(ROOT-0, find-18)
dobj(find-18, me-19)
amod(opposition-22, adament-21)
prep_in(find-18, opposition-22)
poss(position-25, your-24)
prep_to(find-18, position-25)

(ROOT
  (S
    (VP
      (VP (VB Do)
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (VBP like)
              (ADVP
                (ADVP (RB as) (RB long))
                (SBAR (IN as)
                  (S
                    (NP (PRP you))
                    (VP (VBP do)
                      (S
                        (NP (PRP me))
                        (NP
                          (NP (DT no) (NN harm))
                          (PP (IN in)
                            (NP (DT the) (NN process)))))))))))))
      (, ,)
      (CC and)
      (VP (VB leave)
        (NP (NNS children))
        (ADVP (RB alone))))
    (. .)))

root(ROOT-0, Do-1)
dobj(like-4, what-2)
nsubj(like-4, you-3)
ccomp(Do-1, like-4)
advmod(long-6, as-5)
advmod(like-4, long-6)
mark(do-9, as-7)
nsubj(do-9, you-8)
ccomp(long-6, do-9)
nsubj(harm-12, me-10)
det(harm-12, no-11)
xcomp(do-9, harm-12)
det(process-15, the-14)
prep_in(harm-12, process-15)
conj_and(Do-1, leave-18)
dobj(leave-18, children-19)
advmod(leave-18, alone-20)

(ROOT
  (S
    (NP
      (NP (NNS Millions))
      (PP (IN of)
        (NP
          (NP (NNS years))
          (PP (IN of)
            (NP (NN evolution))))))
    (VP (VBP have)
      (VP (VBN caused)
        (NP (NNS men)
          (CC and)
          (NNS women))
        (S
          (VP (TO to)
            (VP (VB adapt)
              (PP (TO to)
                (NP (DT the) (JJS best) (NN model)))
              (S
                (VP (TO to)
                  (VP (VB preserve)
                    (NP (DT the) (NN species))))))))))
    (. .)))

nsubj(caused-7, Millions-1)
prep_of(Millions-1, years-3)
prep_of(years-3, evolution-5)
aux(caused-7, have-6)
root(ROOT-0, caused-7)
dobj(caused-7, men-8)
dobj(caused-7, women-10)
conj_and(men-8, women-10)
aux(adapt-12, to-11)
xcomp(caused-7, adapt-12)
det(model-16, the-14)
amod(model-16, best-15)
prep_to(adapt-12, model-16)
aux(preserve-18, to-17)
xcomp(adapt-12, preserve-18)
det(species-20, the-19)
dobj(preserve-18, species-20)

(ROOT
  (S
    (S
      (NP (PRP One))
      (VP (VBZ is) (RB not)
        (ADJP
          (ADJP (JJR less))
          (PP (IN than)
            (NP (DT the) (JJ other))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP they))
      (VP (VBP are)
        (ADJP (JJ different))))
    (. .)))

nsubj(less-4, One-1)
cop(less-4, is-2)
neg(less-4, not-3)
root(ROOT-0, less-4)
det(other-7, the-6)
prep_than(less-4, other-7)
nsubj(different-12, they-10)
cop(different-12, are-11)
conj_but(less-4, different-12)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ takes)
      (NP
        (NP (DT the) (VBN combined) (JJ natural) (NNS adaptations))
        (PP (IN of)
          (NP (DT both)))
        (S
          (VP (TO to)
            (VP (VB produce)
              (NP
                (NP (DT an) (NN individual))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ is)
                      (ADJP (JJ able)
                        (S
                          (VP (TO to)
                            (VP (VB survive)
                              (CC and)
                              (VB reproduce)
                              (PP (IN in)
                                (NP (NN turn))))))))))))))))
    (. .)))

nsubj(takes-2, It-1)
root(ROOT-0, takes-2)
det(adaptations-6, the-3)
amod(adaptations-6, combined-4)
amod(adaptations-6, natural-5)
dobj(takes-2, adaptations-6)
prep_of(adaptations-6, both-8)
aux(produce-10, to-9)
infmod(adaptations-6, produce-10)
det(individual-12, an-11)
dobj(produce-10, individual-12)
nsubj(able-15, individual-12)
cop(able-15, is-14)
rcmod(individual-12, able-15)
aux(survive-17, to-16)
xcomp(able-15, survive-17)
xcomp(able-15, reproduce-19)
conj_and(survive-17, reproduce-19)
prep_in(survive-17, turn-21)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can)
        (VP (VB argue)
          (SBAR (IN until)
            (S
              (NP (NN hell))
              (VP (VBD freezed)
                (PRT (RP over))))))))
    (CC but)
    (S
      (NP (PRP you))
      (VP (MD will)
        (ADVP (RB never))
        (VP (VB legislate)
          (NP (JJ natural) (NN law))
          (PRT (RP out))
          (PP (IN of)
            (NP (NN existance))))))
    (. .)))

nsubj(argue-3, You-1)
aux(argue-3, can-2)
root(ROOT-0, argue-3)
mark(freezed-6, until-4)
nsubj(freezed-6, hell-5)
advcl(argue-3, freezed-6)
prt(freezed-6, over-7)
nsubj(legislate-12, you-9)
aux(legislate-12, will-10)
neg(legislate-12, never-11)
conj_but(argue-3, legislate-12)
amod(law-14, natural-13)
dobj(legislate-12, law-14)
prep_out_of(legislate-12, existance-17)

(ROOT
  (S
    (INTJ (UH Yeah))
    (, ,)
    (ADVP (RB maybe))
    (NP (PRP it))
    (VP (MD 'd)
      (VP (VB be)
        (ADJP
          (ADJP (JJR better))
          (SBAR (IN if)
            (S
              (NP (NNP pi))
              (VP (VBD was)
                (ADJP (JJ equal)
                  (PP (TO to)
                    (NP
                      (NP (CD 3))
                      (PP (RB instead) (IN of)
                        (NP (CD 3.145926))))))))))))
    (: ...)))

dep(better-7, Yeah-1)
advmod(better-7, maybe-3)
nsubj(better-7, it-4)
aux(better-7, 'd-5)
cop(better-7, be-6)
root(ROOT-0, better-7)
mark(equal-11, if-8)
nsubj(equal-11, pi-9)
cop(equal-11, was-10)
ccomp(better-7, equal-11)
prep_to(equal-11, 3-13)
prep_instead_of(3-13, 3.145926-16)

(ROOT
  (NP (FW .) (. .)))


(ROOT
  (S
    (NP
      (PRN (, ,)
        (PP (CC but)
          (NP (JJ wishful) (NN thinking)))))
    (VP (MD will)
      (ADVP (RB never))
      (VP (VB make)
        (NP (PRP it))
        (ADVP (RB so))))
    (. .)))

nsubj(make-7, but-2)
amod(thinking-4, wishful-3)
dep(but-2, thinking-4)
aux(make-7, will-5)
neg(make-7, never-6)
root(ROOT-0, make-7)
dobj(make-7, it-8)
advmod(make-7, so-9)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ is)
        (SBAR
          (WHNP (WP what))
          (S
            (VP (VBZ is))))))
    (CC and)
    (S
      (NP (PRP we))
      (VP (VBP are)
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP we))
            (VP (VBP are))))))
    (. .)))

nsubj(is-2, It-1)
root(ROOT-0, is-2)
nsubj(is-4, what-3)
ccomp(is-2, is-4)
nsubj(are-7, we-6)
conj_and(is-2, are-7)
dobj(are-10, what-8)
nsubj(are-10, we-9)
ccomp(are-7, are-10)

(ROOT
  (S
    (S
      (S
        (NP (PRP I))
        (VP (VBP do) (RB not)
          (VP (VB mean)
            (S
              (VP (TO to)
                (VP (VB be)
                  (VP (VBN unkind))))))))
      (, ,)
      (CC but)
      (S
        (NP (NN homosexuality))
        (VP (VBZ is) (RB not)
          (NP (DT a) (NN survival) (NN characteristic)))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (NP (DT an) (JJ evolutionary) (JJ dead) (NN end)))
    (. .)))

nsubj(mean-4, I-1)
xsubj(unkind-7, I-1)
aux(mean-4, do-2)
neg(mean-4, not-3)
ccomp(end-22, mean-4)
aux(unkind-7, to-5)
auxpass(unkind-7, be-6)
xcomp(mean-4, unkind-7)
nsubj(characteristic-15, homosexuality-10)
cop(characteristic-15, is-11)
neg(characteristic-15, not-12)
det(characteristic-15, a-13)
nn(characteristic-15, survival-14)
conj_but(mean-4, characteristic-15)
ccomp(end-22, characteristic-15)
nsubj(end-22, it-17)
cop(end-22, 's-18)
det(end-22, an-19)
amod(end-22, evolutionary-20)
amod(end-22, dead-21)
root(ROOT-0, end-22)

