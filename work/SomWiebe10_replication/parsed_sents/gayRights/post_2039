(ROOT
  (SQ (VBD OF)
    (NP (NNP COURSE) (NNP GAYS) (NNP SHOULD) (NNP HAVE))
    (NP (DT THE) (NNP RIGHT) (NNP TO) (NNP MARRY) (NNP !!!!))
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP$ its))
        (VP (VBP love)
          (PRN (, ,)
            (S
              (NP (PRP it))
              (VP (VBZ has)
                (NP (DT no) (NNS limits))))
            (, ,))
          (NP (NN right)))))
    (. ?)))

root(ROOT-0, OF-1)
nn(HAVE-5, COURSE-2)
nn(HAVE-5, GAYS-3)
nn(HAVE-5, SHOULD-4)
nsubj(OF-1, HAVE-5)
det(!!!!-10, THE-6)
nn(!!!!-10, RIGHT-7)
nn(!!!!-10, TO-8)
nn(!!!!-10, MARRY-9)
dep(OF-1, !!!!-10)
advmod(love-13, When-11)
nsubj(love-13, its-12)
advcl(OF-1, love-13)
nsubj(has-16, it-15)
parataxis(love-13, has-16)
det(limits-18, no-17)
dobj(has-16, limits-18)
dobj(love-13, right-20)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD should) (RB n't)
      (VP (VB be)
        (VP (VBN discriminated)
          (PP (IN against) (IN over)
            (NP
              (NP (NN something))
              (ADJP (RB so) (JJ personal)))))))
    (. .)))

nsubjpass(discriminated-5, They-1)
aux(discriminated-5, should-2)
neg(discriminated-5, n't-3)
auxpass(discriminated-5, be-4)
root(ROOT-0, discriminated-5)
dep(discriminated-5, against-6)
prep_over(discriminated-5, something-8)
advmod(personal-10, so-9)
amod(something-8, personal-10)

(ROOT
  (S
    (ADVP (RB Its))
    (NP (PRP$ their) (NN life)
      (CC and)
      (NNS people))
    (VP (MD should) (RB n't)
      (VP (VB interfere)
        (PP (IN with)
          (NP
            (NP (DT a) (NNS persons))
            (ADVP (RB right)
              (PP (TO to)
                (NP (NN privacy)
                  (CC and)
                  (NN decision))))))
        (ADVP (DT no) (NN matter))
        (SBAR (IN whether)
          (CC or)
          (RB not)
          (S
            (NP (PRP they))
            (VP (VBP 're)
              (NP (DT the) (JJ same) (NN sex)))))))
    (. .)))

advmod(interfere-8, Its-1)
poss(life-3, their-2)
nsubj(interfere-8, life-3)
conj_and(life-3, people-5)
nsubj(interfere-8, people-5)
aux(interfere-8, should-6)
neg(interfere-8, n't-7)
root(ROOT-0, interfere-8)
det(persons-11, a-10)
prep_with(interfere-8, persons-11)
advmod(persons-11, right-12)
prep_to(right-12, privacy-14)
prep_to(right-12, decision-16)
conj_and(privacy-14, decision-16)
dep(matter-18, no-17)
advmod(interfere-8, matter-18)
complm(sex-26, whether-19)
ccomp(interfere-8, not-21)
conj_or(sex-26, not-21)
nsubj(sex-26, they-22)
cop(sex-26, 're-23)
det(sex-26, the-24)
amod(sex-26, same-25)
ccomp(interfere-8, sex-26)

(ROOT
  (S (CC And)
    (S
      (VP (TO to)
        (VP (VB tell)
          (NP (PRP you))
          (NP
            (NP (DT the) (NN truth))
            (VP
              (NP (PRP$ its))
              (PP (RB not)
                (S
                  (NP (PRP$ their) (NN fault))
                  (VP (VBG being)
                    (ADJP (JJ gay))))))))))
    (, ,)
    (S
      (NP (PRP$ their))
      (VP (VBN born)
        (PP (IN with)
          (NP (PRP it)))))
    (. .)))

cc(tell-3, And-1)
aux(tell-3, to-2)
root(ROOT-0, tell-3)
iobj(tell-3, you-4)
det(truth-6, the-5)
dobj(tell-3, truth-6)
dep(truth-6, its-7)
prep(its-7, not-8)
poss(fault-10, their-9)
nsubj(gay-12, fault-10)
cop(gay-12, being-11)
dep(not-8, gay-12)
nsubj(born-15, their-14)
dep(tell-3, born-15)
prep_with(born-15, it-17)

(ROOT
  (NP
    (NP (PRP It))
    (NP (DT a) (JJ mental) (NN thing))
    (. .)))

root(ROOT-0, It-1)
det(thing-4, a-2)
amod(thing-4, mental-3)
dep(It-1, thing-4)

(ROOT
  (NP
    (NP (PRP$ Their) (JJ normal))
    (NP (NNS people))
    (. !)))

poss(normal-2, Their-1)
root(ROOT-0, normal-2)
dep(normal-2, people-3)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB get)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (NNS people))
            (VP (MD can)
              (VP (VB say)
                (ADVP (RB otherwise))))))))
    (. .)))

nsubj(get-4, I-1)
aux(get-4, do-2)
neg(get-4, n't-3)
root(ROOT-0, get-4)
advmod(say-8, how-5)
nsubj(say-8, people-6)
aux(say-8, can-7)
ccomp(get-4, say-8)
advmod(say-8, otherwise-9)

