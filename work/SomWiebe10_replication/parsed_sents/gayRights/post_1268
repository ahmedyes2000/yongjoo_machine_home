(ROOT
  (S
    (ADVP (RB Again))
    (, ,)
    (NP (PRP I))
    (VP (VBP 'm) (RB not)
      (VP (VBG equating)
        (NP (JJ African-American) (JJ civil) (NNS rights))
        (PP (TO to)
          (NP (JJ homosexual) (JJ civil) (NNS rights)))))
    (. .)))

advmod(equating-6, Again-1)
nsubj(equating-6, I-3)
aux(equating-6, 'm-4)
neg(equating-6, not-5)
root(ROOT-0, equating-6)
amod(rights-9, African-American-7)
amod(rights-9, civil-8)
dobj(equating-6, rights-9)
amod(rights-13, homosexual-11)
amod(rights-13, civil-12)
prep_to(equating-6, rights-13)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (ADVP (RB just))
      (VP (VBG opposing)
        (NP (JJ originalist) (NN thinking))))
    (. .)))

nsubj(opposing-4, I-1)
aux(opposing-4, 'm-2)
advmod(opposing-4, just-3)
root(ROOT-0, opposing-4)
amod(thinking-6, originalist-5)
dobj(opposing-4, thinking-6)

(ROOT
  (NP ('' '')
    (CC And)
    (NP
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (DT the) (NN government))
          (VP
            (VP (VBZ steps)
              (PRT (RP in)))
            (CC and)
            (VP (VBZ requires)
              (S
                (NP (PRP me))
                (VP (TO to)
                  (VP (VB become)
                    (NP (DT a) (NN vegetarian))
                    (PP (IN like)
                      (NP (PRP you))))))))))
      (, ,)
      (NP
        (NP (NN will))
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP stand)
              (PP (IN with)
                (NP
                  (NP (PRP me))
                  (PP (IN in)
                    (NP (NN opposition)))))
              (PP (TO to)
                (NP (DT that) (NN intrusion))))))))
    (. ?)))

cc(will-18, And-2)
advmod(steps-6, when-3)
det(government-5, the-4)
nsubj(steps-6, government-5)
nsubj(requires-9, government-5)
dep(will-18, steps-6)
prt(steps-6, in-7)
conj_and(steps-6, requires-9)
dep(will-18, requires-9)
nsubj(vegetarian-14, me-10)
aux(vegetarian-14, to-11)
cop(vegetarian-14, become-12)
det(vegetarian-14, a-13)
xcomp(requires-9, vegetarian-14)
prep_like(vegetarian-14, you-16)
root(ROOT-0, will-18)
dobj(stand-20, will-18)
nsubj(stand-20, you-19)
rcmod(will-18, stand-20)
prep_with(stand-20, me-22)
prep_in(me-22, opposition-24)
det(intrusion-27, that-26)
prep_to(stand-20, intrusion-27)

(ROOT
  (S (`` ``)
    (NP (PRP I))
    (VP (MD will))
    (. .)))

nsubj(will-3, I-2)
root(ROOT-0, will-3)

(ROOT
  (S
    (SBAR (IN Because)
      (S
        (NP (NNS individuals))
        (VP (MD should)
          (VP (VB have)
            (NP (DT the) (NN right)
              (S
                (VP (TO to)
                  (VP (VB choose)
                    (NP (PRP$ their) (NNS lifestyles))
                    (ADVP
                      (ADVP (RB so) (RB long))
                      (SBAR (IN as)
                        (S
                          (NP (PRP it))
                          (VP (VBZ does) (RB n't)
                            (VP (VB disrupt)
                              (NP (DT another) (NN person)))))))))))))))
    (VP (VBZ 's)
      (NP
        (NP (NN life) (, ,) (NN liberty) (, ,) (NN property) (, ,)
          (CC or)
          (NN pursuit))
        (PP (IN of)
          (NP (NN happiness)))))
    (. .)))

mark(have-4, Because-1)
nsubj(have-4, individuals-2)
aux(have-4, should-3)
csubj(life-21, have-4)
det(right-6, the-5)
dobj(have-4, right-6)
aux(choose-8, to-7)
infmod(right-6, choose-8)
poss(lifestyles-10, their-9)
dobj(choose-8, lifestyles-10)
advmod(long-12, so-11)
advmod(choose-8, long-12)
mark(disrupt-17, as-13)
nsubj(disrupt-17, it-14)
aux(disrupt-17, does-15)
neg(disrupt-17, n't-16)
ccomp(long-12, disrupt-17)
det(person-19, another-18)
dobj(disrupt-17, person-19)
cop(life-21, 's-20)
root(ROOT-0, life-21)
conj_or(life-21, liberty-23)
conj_or(life-21, property-25)
conj_or(life-21, pursuit-28)
prep_of(life-21, happiness-30)

(ROOT
  (S
    (SBAR (IN Until)
      (S
        (NP (PRP it))
        (VP (MD can)
          (ADVP
            (ADVP (RB logically))
            (CC and)
            (ADVP (RB empirically)))
          (VP (VB be)
            (VP (VBN shown)
              (SBAR
                (SBAR (IN that)
                  (S
                    (NP (NN non) (NN vegetarianism))
                    (ADVP (RB directly))
                    (VP (VBZ harms)
                      (NP (DT another) (NN individual)))))
                (, ,)
                (CC and)
                (SBAR (IN that)
                  (S
                    (NP (DT that) (NN harm))
                    (VP (VBZ is)
                      (ADJP (JJ great) (RB enough)
                        (S
                          (VP (TO to)
                            (VP (VB warrant)
                              (NP (NN government) (NN intrusion)))))))))))))))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (ADVP (RB never))
      (VP (VB find)
        (S
          (NP (PRP it))
          (VP (VB fit)
            (PP (IN for)
              (NP (DT a) (NN government)
                (S
                  (VP (TO to)
                    (VP (VB coerce)
                      (NP (NNS people))
                      (PP (IN into)
                        (S
                          (VP (VBG becoming)
                            (NP (NNS vegetarians))))))))))))))
    (. .)))

mark(shown-8, Until-1)
nsubjpass(shown-8, it-2)
aux(shown-8, can-3)
advmod(shown-8, logically-4)
conj_and(logically-4, empirically-6)
advmod(shown-8, empirically-6)
auxpass(shown-8, be-7)
advcl(find-32, shown-8)
complm(harms-13, that-9)
nn(vegetarianism-11, non-10)
nsubj(harms-13, vegetarianism-11)
advmod(harms-13, directly-12)
ccomp(shown-8, harms-13)
det(individual-15, another-14)
dobj(harms-13, individual-15)
complm(great-22, that-18)
det(harm-20, that-19)
nsubj(great-22, harm-20)
cop(great-22, is-21)
ccomp(shown-8, great-22)
conj_and(harms-13, great-22)
advmod(great-22, enough-23)
aux(warrant-25, to-24)
xcomp(great-22, warrant-25)
nn(intrusion-27, government-26)
dobj(warrant-25, intrusion-27)
nsubj(find-32, I-29)
aux(find-32, would-30)
neg(find-32, never-31)
root(ROOT-0, find-32)
nsubj(fit-34, it-33)
ccomp(find-32, fit-34)
det(government-37, a-36)
prep_for(fit-34, government-37)
aux(coerce-39, to-38)
infmod(government-37, coerce-39)
dobj(coerce-39, people-40)
prepc_into(coerce-39, becoming-42)
attr(becoming-42, vegetarians-43)

(ROOT
  (S
    (ADVP (RB Similarly))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (ADVP (RB never))
      (VP (VB find)
        (S
          (NP (PRP it))
          (VP (VB fit)
            (PP (IN for)
              (NP (DT a) (NN government)
                (S
                  (VP (TO to)
                    (VP (VB coerce)
                      (NP (NNS people))
                      (PP (IN into)
                        (S
                          (VP (VBG becoming)
                            (NP (NN heterosexual))))))))))))))
    (. .)))

advmod(find-6, Similarly-1)
nsubj(find-6, I-3)
aux(find-6, would-4)
neg(find-6, never-5)
root(ROOT-0, find-6)
nsubj(fit-8, it-7)
ccomp(find-6, fit-8)
det(government-11, a-10)
prep_for(fit-8, government-11)
aux(coerce-13, to-12)
infmod(government-11, coerce-13)
dobj(coerce-13, people-14)
prepc_into(coerce-13, becoming-16)
attr(becoming-16, heterosexual-17)

(ROOT
  (S
    (NP (NNS THIS))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN point))
        (SBAR
          (S
            (NP (PRP I))
            (VP (VBP 'm)
              (VP (VBG making)))))))
    (. .)))

nsubj(point-4, THIS-1)
cop(point-4, is-2)
det(point-4, the-3)
root(ROOT-0, point-4)
dobj(making-7, point-4)
nsubj(making-7, I-5)
aux(making-7, 'm-6)
rcmod(point-4, making-7)

