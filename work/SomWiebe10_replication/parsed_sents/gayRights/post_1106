(ROOT
  (S
    (NP (DT A) (JJ civil) (NN union))
    (VP (MD can)
      (VP (VB be)
        (VP (VBN defined)
          (SBAR (RB just) (IN as)
            (S
              (NP (NN marriage))
              (VP (MD can)
                (VP (VB be)
                  (VP (VBN defined)))))))))
    (. .)))

det(union-3, A-1)
amod(union-3, civil-2)
nsubjpass(defined-6, union-3)
aux(defined-6, can-4)
auxpass(defined-6, be-5)
root(ROOT-0, defined-6)
advmod(defined-12, just-7)
dep(defined-12, as-8)
nsubjpass(defined-12, marriage-9)
aux(defined-12, can-10)
auxpass(defined-12, be-11)
ccomp(defined-6, defined-12)

(ROOT
  (S
    (NP (DT A) (NN dog))
    (VP (VBZ is) (RB not)
      (NP (DT a) (NN cat)))
    (. .)))

det(dog-2, A-1)
nsubj(cat-6, dog-2)
cop(cat-6, is-3)
neg(cat-6, not-4)
det(cat-6, a-5)
root(ROOT-0, cat-6)

(ROOT
  (S
    (NP (PRP We))
    (VP (MD could)
      (VP (VB have)
        (NP (DT a)
          (ADJP (JJ long)
            (CC and)
            (VBN valued))
          (NN debate))
        (PP (IN as)
          (PP (TO to)
            (SBAR (IN whether)
              (S
                (NP (`` ``) (NN marriage) ('' ''))
                (VP (MD should)
                  (VP (VB receive)
                    (NP
                      (NP (DT the) (JJ social\/legal) (NNS benefits))
                      (SBAR
                        (S
                          (NP (PRP it))
                          (VP (VBZ does)))))
                    (PRN (-LRB- -LRB-)
                      (CC or)
                      (VP
                        (PP (IN if)
                          (NP (PRP it)))
                        (MD should)
                        (VP (VB receive)
                          (NP (JJR more))))
                      (-RRB- -RRB-))))))))))
    (. .)))

nsubj(have-3, We-1)
aux(have-3, could-2)
root(ROOT-0, have-3)
det(debate-8, a-4)
amod(debate-8, long-5)
conj_and(long-5, valued-7)
amod(debate-8, valued-7)
dobj(have-3, debate-8)
prepc_as_to(have-3, to-10)
complm(receive-16, whether-11)
nsubj(receive-16, marriage-13)
aux(receive-16, should-15)
pcomp(have-3, receive-16)
det(benefits-19, the-17)
amod(benefits-19, social\/legal-18)
dobj(receive-16, benefits-19)
dobj(does-21, benefits-19)
nsubj(does-21, it-20)
rcmod(benefits-19, does-21)
dep(receive-27, or-23)
prep_if(receive-27, it-25)
aux(receive-27, should-26)
dep(receive-16, receive-27)
dobj(receive-27, more-28)

(ROOT
  (S (CC But)
    (PP (TO to)
      (NP (PRP me)))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (ADJP (JJ silly)
        (S
          (VP (TO to)
            (VP (VB deconstruct)
              (NP
                (NP (DT the) (NN meaning))
                (PP (IN of)
                  (NP (DT the) (NN word))))
              (PP (IN for)
                (NP
                  (NP (DT the) (NN sake))
                  (PP (IN of)
                    (S
                      (VP (VBG correcting)
                        (SBAR
                          (WHNP (WP what))
                          (S
                            (NP (PRP we))
                            (VP (VBP deem)
                              (S
                                (VP (TO to)
                                  (VP (VB be)
                                    (NP (DT an) (NN inequality))))))))))))))))))
    (. .)))

cc(silly-7, But-1)
prep_to(silly-7, me-3)
nsubj(silly-7, it-5)
cop(silly-7, is-6)
root(ROOT-0, silly-7)
aux(deconstruct-9, to-8)
xcomp(silly-7, deconstruct-9)
det(meaning-11, the-10)
dobj(deconstruct-9, meaning-11)
det(word-14, the-13)
prep_of(meaning-11, word-14)
det(sake-17, the-16)
prep_for(deconstruct-9, sake-17)
prepc_of(sake-17, correcting-19)
dep(deem-22, what-20)
nsubj(deem-22, we-21)
xsubj(inequality-26, we-21)
ccomp(correcting-19, deem-22)
aux(inequality-26, to-23)
cop(inequality-26, be-24)
det(inequality-26, an-25)
xcomp(deem-22, inequality-26)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (MD can)
        (VP (VB go)
          (PRT (RP down))
          (NP (DT this) (NN road)))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (NP
          (NP (DT the) (NN equivalent))
          (PP (IN of)
            (S
              (VP (VBG saying)
                (SBAR
                  (S
                    (NP (EX there))
                    (VP (VBP are)
                      (NP
                        (NP (JJ only) (NNS persons))
                        (PP (RB instead) (IN of)
                          (S
                            (VP (VBG being)
                              (NP (NNS men)
                                (CC and)
                                (NNS women)))))))))))))))
    (. .)))

nsubj(go-3, We-1)
aux(go-3, can-2)
root(ROOT-0, go-3)
prt(go-3, down-4)
det(road-6, this-5)
dobj(go-3, road-6)
nsubj(equivalent-12, it-9)
cop(equivalent-12, is-10)
det(equivalent-12, the-11)
conj_but(go-3, equivalent-12)
prepc_of(equivalent-12, saying-14)
expl(are-16, there-15)
ccomp(saying-14, are-16)
amod(persons-18, only-17)
nsubj(are-16, persons-18)
cop(men-22, being-21)
prepc_instead_of(persons-18, men-22)
prepc_instead_of(persons-18, women-24)
conj_and(men-22, women-24)

(ROOT
  (S
    (NP (PRP It))
    (VP
      (VP (VBZ answers)
        (NP (DT a) (NN question)))
      (CC and)
      (VP (VBZ opens)
        (PRT (RP up))
        (NP (DT a) (JJR larger) (NN question))))
    (. .)))

nsubj(answers-2, It-1)
nsubj(opens-6, It-1)
root(ROOT-0, answers-2)
det(question-4, a-3)
dobj(answers-2, question-4)
conj_and(answers-2, opens-6)
prt(opens-6, up-7)
det(question-10, a-8)
amod(question-10, larger-9)
dobj(opens-6, question-10)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT the) (JJ only) (NN route))
        (PP (TO to)
          (NP (DT the) (VBN needed) (NN outcome)))))
    (. .)))

nsubj(route-6, This-1)
cop(route-6, is-2)
neg(route-6, not-3)
det(route-6, the-4)
amod(route-6, only-5)
root(ROOT-0, route-6)
det(outcome-10, the-8)
amod(outcome-10, needed-9)
prep_to(route-6, outcome-10)

(ROOT
  (S
    (NP (DT A) (NN man))
    (VP (VBZ is) (RB not)
      (NP (DT a) (NN woman)))
    (. .)))

det(man-2, A-1)
nsubj(woman-6, man-2)
cop(woman-6, is-3)
neg(woman-6, not-4)
det(woman-6, a-5)
root(ROOT-0, woman-6)

(ROOT
  (S
    (NP
      (NP (DT A) (NN man))
      (VP (VBN wedded)
        (PP (TO to)
          (NP (CD two) (NNS wives)))))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT the) (JJ same) (NN thing))
        (PP (IN as)
          (NP
            (NP (DT a) (NN man))
            (VP (VBN wedded)
              (PP (TO to)
                (NP (NN thirteen) (NNS wives))))))))
    (. .)))

det(man-2, A-1)
nsubj(thing-11, man-2)
partmod(man-2, wedded-3)
num(wives-6, two-5)
prep_to(wedded-3, wives-6)
cop(thing-11, is-7)
neg(thing-11, not-8)
det(thing-11, the-9)
amod(thing-11, same-10)
root(ROOT-0, thing-11)
det(man-14, a-13)
prep_as(thing-11, man-14)
partmod(man-14, wedded-15)
nn(wives-18, thirteen-17)
prep_to(wedded-15, wives-18)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBD went)
      (PRT (RP down))
      (NP
        (NP (DT a) (JJ long) (NN road))
        (PP (IN as)
          (NP (DT a) (NN society))))
      (S
        (VP (VBG demanding)
          (SBAR
            (S
              (NP (EX there))
              (VP (VBZ is)
                (NP
                  (NP (DT no) (NN difference))
                  (PP (IN between)
                    (NP (NNS men)
                      (CC and)
                      (NNS women))))))))))
    (. .)))

nsubj(went-2, We-1)
root(ROOT-0, went-2)
prt(went-2, down-3)
det(road-6, a-4)
amod(road-6, long-5)
dobj(went-2, road-6)
det(society-9, a-8)
prep_as(road-6, society-9)
xcomp(went-2, demanding-10)
expl(is-12, there-11)
ccomp(demanding-10, is-12)
det(difference-14, no-13)
nsubj(is-12, difference-14)
prep_between(difference-14, men-16)
prep_between(difference-14, women-18)
conj_and(men-16, women-18)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT a) (JJ little) (`` ``) (NN expansion) (NN slot) ('' ''))
        (PP (IN in)
          (NP
            (NP (DT the) (NN brain))
            (SBAR
              (WHPP (IN into)
                (WHNP (WDT which)))
              (S
                (NP (DT a) (NN card))
                (VP (VBZ is)
                  (VP (VBN inserted)
                    (SBAR (IN that)
                      (S
                        (VP (VBZ is)
                          (VP (VBN labeled)
                            (ADJP (`` ``) (JJ male) ('' '')
                              (CC or)
                              (`` ``) (JJ female))))))))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
neg(is-2, not-3)
det(slot-8, a-4)
amod(slot-8, little-5)
nn(slot-8, expansion-7)
nsubj(is-2, slot-8)
det(brain-12, the-11)
prep_in(slot-8, brain-12)
rel(inserted-18, which-14)
det(card-16, a-15)
nsubjpass(inserted-18, card-16)
auxpass(inserted-18, is-17)
rcmod(brain-12, inserted-18)
complm(labeled-21, that-19)
auxpass(labeled-21, is-20)
ccomp(inserted-18, labeled-21)
acomp(labeled-21, male-23)
conj_or(female-27, male-23)
acomp(labeled-21, female-27)

(ROOT
  (S ('' '')
    (S (CC But)
      (PP (IN on)
        (NP (DT the) (JJ other) (NN hand)))
      (, ,)
      (NP (PRP it))
      (VP (VBD did) (RB not)
        (VP (VB add)
          (PP (TO to)
            (NP
              (NP (DT the) (NN richness))
              (PP (IN of)
                (NP (DT the) (JJ human) (NN experience)))))
          (PP (IN by)
            (S
              (VP (VBG failing)
                (S
                  (VP (TO to)
                    (VP (VB note)
                      (SBAR (IN that)
                        (FRAG
                          (NP (DT a) (NN man)))))))))))))
    (CC and)
    (S
      (NP (DT a) (NN woman))
      (VP (VBP are)
        (ADJP (JJ different))))
    (. .)))

det(hand-6, the-4)
amod(hand-6, other-5)
prep_on(add-11, hand-6)
nsubj(add-11, it-8)
aux(add-11, did-9)
neg(add-11, not-10)
root(ROOT-0, add-11)
det(richness-14, the-13)
prep_to(add-11, richness-14)
det(experience-18, the-16)
amod(experience-18, human-17)
prep_of(richness-14, experience-18)
prepc_by(add-11, failing-20)
aux(note-22, to-21)
xcomp(failing-20, note-22)
complm(man-25, that-23)
det(man-25, a-24)
dep(note-22, man-25)
det(woman-28, a-27)
nsubj(different-30, woman-28)
cop(different-30, are-29)
conj_and(add-11, different-30)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP
        (NP (DT no) (NN harm))
        (PP (IN in)
          (S
            (VP (VBG notating)
              (SBAR
                (SBAR (IN that)
                  (S
                    (NP
                      (NP (DT a) (NN man) (NN wedding))
                      (NP (DT a) (NN woman)))
                    (VP (VBZ is)
                      (ADJP (JJ different)
                        (PP (IN than)
                          (NP
                            (NP (DT a) (NN man) (NN wedding))
                            (NP (DT a) (NN man))))))))
                (: ;)
                (CC and)
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ is)
                      (ADJP (JJ different)
                        (PP (IN from)
                          (NP (NNS singleness)))))))))))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(harm-4, no-3)
nsubj(is-2, harm-4)
prepc_in(harm-4, notating-6)
complm(different-14, that-7)
det(wedding-10, a-8)
nn(wedding-10, man-9)
nsubj(different-14, wedding-10)
det(woman-12, a-11)
dep(wedding-10, woman-12)
cop(different-14, is-13)
ccomp(notating-6, different-14)
det(wedding-18, a-16)
nn(wedding-18, man-17)
prep_than(different-14, wedding-18)
det(man-20, a-19)
dep(wedding-18, man-20)
nsubj(different-25, that-23)
cop(different-25, is-24)
ccomp(notating-6, different-25)
conj_and(different-14, different-25)
prep_from(different-25, singleness-27)

(ROOT
  (S
    (NP (NNP Justice))
    (VP (VBZ does) (RB not)
      (VP (VB demand)
        (SBAR (IN that)
          (S
            (NP (DT a) (JJ single) (NN person))
            (VP (VB be)
              (VP (VBN defined)
                (S
                  (VP (VBN married)
                    (PP (IN for)
                      (NP
                        (NP (DT the) (NN sake))
                        (PP (IN of)
                          (S
                            (VP (VBG having)
                              (NP (NN access))
                              (PP (TO to)
                                (NP (DT the) (JJ same) (JJ legal)
                                  (CC and)
                                  (JJ social) (NNS benefits))))))))))))))))
    (. .)))

nsubj(demand-4, Justice-1)
aux(demand-4, does-2)
neg(demand-4, not-3)
root(ROOT-0, demand-4)
complm(defined-10, that-5)
det(person-8, a-6)
amod(person-8, single-7)
nsubjpass(defined-10, person-8)
auxpass(defined-10, be-9)
ccomp(demand-4, defined-10)
dep(defined-10, married-11)
det(sake-14, the-13)
prep_for(married-11, sake-14)
prepc_of(sake-14, having-16)
dobj(having-16, access-17)
dep(legal-21, the-19)
amod(legal-21, same-20)
prep_to(having-16, legal-21)
amod(benefits-24, social-23)
prep_to(having-16, benefits-24)
conj_and(legal-21, benefits-24)

(ROOT
  (FRAG (CC Or)
    (SBAR (IN that)
      (S
        (NP
          (NP (DT a) (JJ single) (NN person))
          (PP (IN in)
            (NP
              (NP (DT some) (NN form))
              (PP (IN of)
                (NP (JJ ongoing) (JJ sexual) (NN relationship))))))
        (VP (VB be)
          (VP (VBN defined)
            (PP (IN as)
              (NP (DT a) (NN marriage)))))))
    (. .)))

dep(defined-14, Or-1)
dep(defined-14, that-2)
det(person-5, a-3)
amod(person-5, single-4)
nsubjpass(defined-14, person-5)
det(form-8, some-7)
prep_in(person-5, form-8)
amod(relationship-12, ongoing-10)
amod(relationship-12, sexual-11)
prep_of(form-8, relationship-12)
auxpass(defined-14, be-13)
root(ROOT-0, defined-14)
det(marriage-17, a-16)
prep_as(defined-14, marriage-17)

