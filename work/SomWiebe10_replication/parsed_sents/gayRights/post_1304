(ROOT
  (FRAG
    (INTJ (UH Okay))
    (, ,)
    (NP (NN fine))
    (. .)))

dep(fine-3, Okay-1)
root(ROOT-0, fine-3)

(ROOT
  (S ('' '')
    (PP (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP (VB have)
            (NP
              (ADJP
                (ADVP (RB anymore))
                (JJ valid))
              (NNS points))
            (ADVP (RB then))))))
    (VP (VBD shut)
      (PRT (RP up)))
    (. !)))

nsubj(have-6, you-3)
aux(have-6, do-4)
neg(have-6, n't-5)
prepc_if(shut-11, have-6)
advmod(valid-8, anymore-7)
amod(points-9, valid-8)
dobj(have-6, points-9)
advmod(have-6, then-10)
root(ROOT-0, shut-11)
prt(shut-11, up-12)

(ROOT
  (S
    (NP (DT The) (JJ key) (NN word))
    (ADVP (RB there))
    (VP (VBZ is)
      (NP (NN everything)))
    (. .)))

det(word-3, The-1)
amod(word-3, key-2)
nsubj(everything-6, word-3)
advmod(everything-6, there-4)
cop(everything-6, is-5)
root(ROOT-0, everything-6)

(ROOT
  (S
    (NP (PRP It))
    (VP
      (VP (VBD sounded)
        (PP (TO to)
          (NP
            (NP (PRP me))
            (, ,))))
      (PRN (-LRB- -LRB-)
        (S
          (VP (VB forgive)
            (NP (PRP me))
            (SBAR (IN if)
              (S
                (NP (PRP I))
                (VP (VBP 'm)
                  (ADJP (JJ wrong)))))))
        (-RRB- -RRB-))
      (SBAR (IN that)
        (S
          (NP
            (NP (PRP you))
            (SBAR
              (WHADVP (WRB where))
              (S
                (VP (VBG blaming)
                  (NP (DT the) (NNP U.S.))
                  (PP (IN for)
                    (S
                      (VP (VBG letting)
                        (NP (NN religion)))))))))
          (VP (VBZ oppress)
            (NP (NNS people))))))
    (. .)))

nsubj(sounded-2, It-1)
root(ROOT-0, sounded-2)
prep_to(sounded-2, me-4)
parataxis(sounded-2, forgive-7)
dobj(forgive-7, me-8)
mark(wrong-12, if-9)
nsubj(wrong-12, I-10)
cop(wrong-12, 'm-11)
advcl(forgive-7, wrong-12)
dep(oppress-23, that-14)
nsubj(oppress-23, you-15)
advmod(blaming-17, where-16)
rcmod(you-15, blaming-17)
det(U.S.-19, the-18)
dobj(blaming-17, U.S.-19)
prepc_for(blaming-17, letting-21)
dobj(letting-21, religion-22)
ccomp(sounded-2, oppress-23)
dobj(oppress-23, people-24)

(ROOT
  (S
    (PP (IN If)
      (NP
        (NP (PRP you))
        (FRAG
          (WHADVP (WRB where)))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP you))
    (VP (VBP are)
      (ADJP (JJ wrong)))
    (. .)))

prep_if(wrong-8, you-2)
dep(you-2, where-3)
advmod(wrong-8, then-5)
nsubj(wrong-8, you-6)
cop(wrong-8, are-7)
root(ROOT-0, wrong-8)

(ROOT
  (S ('' '')
    (PP (IN Because)
      (S
        (NP (PRP they))
        (VP (VBD spent)
          (NP
            (NP (NNS millions))
            (PP (IN of)
              (NP (NNS dollars))))
          (S
            (VP (TO to)
              (VP (VB spread)))))))
    (VP (VBZ lies)
      (PP (IN about)
        (NP
          (NP (DT the) (NNP California) (NN constitution))
          (, ,)
          (NP (NNS schools))
          (, ,)
          (NP (NNP Obama))
          (, ,)
          (CC and)
          (NP
            (NP (DT a) (NN lot))
            (JJR more)))))
    (. .)))

nsubj(spent-4, they-3)
prepc_because(lies-10, spent-4)
dobj(spent-4, millions-5)
prep_of(millions-5, dollars-7)
aux(spread-9, to-8)
xcomp(spent-4, spread-9)
root(ROOT-0, lies-10)
det(constitution-14, the-12)
nn(constitution-14, California-13)
prep_about(lies-10, constitution-14)
prep_about(lies-10, schools-16)
conj_and(constitution-14, schools-16)
prep_about(lies-10, Obama-18)
conj_and(constitution-14, Obama-18)
det(lot-22, a-21)
dep(more-23, lot-22)
prep_about(lies-10, more-23)
conj_and(constitution-14, more-23)

(ROOT
  (S ('' '')
    (NP (WP What))
    (VP (VBZ lies))
    (. ?)))

nsubj(lies-3, What-2)
root(ROOT-0, lies-3)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP want)
      (S
        (NP (PRP you))
        (VP (TO to)
          (VP (VB tell)
            (NP (PRP me))
            (PP (IN in)
              (NP
                (NP (JJ full) (NN detail))
                (SBAR
                  (WHNP (RB exactly) (WP what))
                  (S
                    (VP (VBZ lies)
                      (NP (PRP$ my) (NN church) (NN spread))
                      (PP (IN about)
                        (NP
                          (NP (DT all))
                          (PP (IN of)
                            (NP (DT those) (NNS things)))))
                      (SBAR (IN that)
                        (S
                          (NP (PRP you))
                          (ADVP (RB so) (RB boldly))
                          (VP (VBD stated)))))))))))))
    (. .)))

nsubj(want-2, I-1)
root(ROOT-0, want-2)
nsubj(tell-5, you-3)
aux(tell-5, to-4)
xcomp(want-2, tell-5)
dobj(tell-5, me-6)
amod(detail-9, full-8)
prep_in(tell-5, detail-9)
nsubj(lies-12, detail-9)
advmod(what-11, exactly-10)
rcmod(detail-9, lies-12)
poss(spread-15, my-13)
nn(spread-15, church-14)
dobj(lies-12, spread-15)
prep_about(lies-12, all-17)
det(things-20, those-19)
prep_of(all-17, things-20)
complm(stated-25, that-21)
nsubj(stated-25, you-22)
advmod(boldly-24, so-23)
advmod(stated-25, boldly-24)
ccomp(lies-12, stated-25)

(ROOT
  (S
    (VP (VB Go)
      (ADVP (RB ahead)))
    (. .)))

root(ROOT-0, Go-1)
advmod(Go-1, ahead-2)

(ROOT
  (S (CC And)
    (VP (VB prove)
      (SBAR (IN that)
        (S
          (NP (PRP they))
          (VP (VBP are)
            (VP (VBZ lies))))))
    (. .)))

cc(prove-2, And-1)
root(ROOT-0, prove-2)
complm(lies-6, that-3)
nsubj(lies-6, they-4)
aux(lies-6, are-5)
ccomp(prove-2, lies-6)

(ROOT
  (FRAG (`` ``)
    (INTJ (UH No.))
    (. .)))


(ROOT
  (S
    (NP (PRP I))
    (VP (MD will)
      (PP (IN under)
        (NP (DT no) (NNS circumstances)))
      (VP (VB shut)
        (PRT (RP up))
        (, ,)
        (PP (IN at)
          (NP (PRP$ your) (NN command)))))
    (. .)))

nsubj(shut-6, I-1)
aux(shut-6, will-2)
det(circumstances-5, no-4)
prep_under(shut-6, circumstances-5)
root(ROOT-0, shut-6)
prt(shut-6, up-7)
poss(command-11, your-10)
prep_at(shut-6, command-11)

(ROOT
  (S (CC And)
    (NP (PRP it))
    (VP (VBZ 's)
      (ADVP (RB still))
      (ADJP (JJ belligerent)))
    (. .)))

cc(belligerent-5, And-1)
nsubj(belligerent-5, it-2)
cop(belligerent-5, 's-3)
advmod(belligerent-5, still-4)
root(ROOT-0, belligerent-5)

(ROOT
  (S
    (PP (IN Because)
      (ADVP (RB regardless)))
    (, ,)
    (NP
      (NP (PRP you))
      (SBAR
        (WHADVP (WRB where))
        (S
          (S
            (VP (VBG telling)
              (S
                (NP (PRP me))
                (VP (TO to)
                  (VP (VB shut)
                    (PRT (RP up)))))))
          (CC and)
          (S
            (VP (VBG assuming)
              (SBAR (IN that)
                (S
                  (NP (PRP I))
                  (VP (VBD did) (RB n't)))))))))
    (VP (VBP have)
      (NP (DT any)
        (ADJP (RBR more) (JJ valid))
        (NNS points)))
    (. .)))

prep(have-17, Because-1)
pcomp(Because-1, regardless-2)
nsubj(have-17, you-4)
advmod(telling-6, where-5)
rcmod(you-4, telling-6)
nsubj(shut-9, me-7)
aux(shut-9, to-8)
xcomp(telling-6, shut-9)
prt(shut-9, up-10)
rcmod(you-4, assuming-12)
conj_and(telling-6, assuming-12)
complm(did-15, that-13)
nsubj(did-15, I-14)
ccomp(assuming-12, did-15)
neg(did-15, n't-16)
root(ROOT-0, have-17)
det(points-21, any-18)
advmod(valid-20, more-19)
amod(points-21, valid-20)
dobj(have-17, points-21)

(ROOT
  (S (CC And)
    (VP (VBP do) (RB n't)
      (VP (VB say)
        (SBAR (IN that)
          (S
            (NP
              (NP (PRP you))
              (SBAR
                (WHADVP (WRB where))
                (S
                  (SBAR (RB not) (IN because)
                    (FRAG
                      (SBAR (IN if)
                        (S
                          (NP (DT that))
                          (VP (VBD was)
                            (ADJP (JJ true)))))))
                  (NP (PRP you))
                  (VP (MD would) (RB n't)
                    (VP (VB have))))))
            (VP (VBD said)
              (NP
                (NP (DT any))
                (PP (IN of)
                  (NP (DT that)))))))))
    (. .)))

cc(say-4, And-1)
aux(say-4, do-2)
neg(say-4, n't-3)
root(ROOT-0, say-4)
complm(said-18, that-5)
nsubj(said-18, you-6)
advmod(have-17, where-7)
dep(true-13, not-8)
dep(true-13, because-9)
mark(true-13, if-10)
nsubj(true-13, that-11)
cop(true-13, was-12)
advcl(have-17, true-13)
nsubj(have-17, you-14)
aux(have-17, would-15)
neg(have-17, n't-16)
rcmod(you-6, have-17)
ccomp(say-4, said-18)
dobj(said-18, any-19)
prep_of(any-19, that-21)

(ROOT
  (S ('' '')
    (S
      (SBAR (IN If)
        (S
          (NP (PRP you))
          (VP (VBP do) (RB n't)
            (VP (VB make)
              (NP (DT a) (JJ valid))))))
      (VP (VBP point)
        (ADVP (RB soon))))
    (, ,)
    (NP (PRP you))
    (VP (VBP 're)
      (VP (VBG going)
        (S
          (VP (TO to)
            (VP (VB look)
              (ADJP (RB very) (JJ stupid) ('' '')
                (SBAR
                  (S
                    (NP (PRP I))
                    (VP (VBP do) (RB n't)
                      (VP (VB care)
                        (SBAR
                          (WHNP (WP what))
                          (S
                            (NP
                              (NP (PRP$ your) (NN opinion))
                              (PP (IN of)
                                (NP (PRP me))))
                            (VP (VBZ is))))))))))))))
    (. .)))

mark(make-6, If-2)
nsubj(make-6, you-3)
aux(make-6, do-4)
neg(make-6, n't-5)
csubj(point-9, make-6)
det(valid-8, a-7)
dobj(make-6, valid-8)
ccomp(going-14, point-9)
advmod(point-9, soon-10)
nsubj(going-14, you-12)
xsubj(look-16, you-12)
aux(going-14, 're-13)
root(ROOT-0, going-14)
aux(look-16, to-15)
xcomp(going-14, look-16)
advmod(stupid-18, very-17)
acomp(look-16, stupid-18)
nsubj(care-23, I-20)
aux(care-23, do-21)
neg(care-23, n't-22)
dep(stupid-18, care-23)
dobj(is-29, what-24)
poss(opinion-26, your-25)
nsubj(is-29, opinion-26)
prep_of(opinion-26, me-28)
ccomp(care-23, is-29)

(ROOT
  (SQ (VBZ Is)
    (NP (DT this))
    (VP (VBG getting)
      (PP (IN through)
        (PP (TO to)
          (NP (PRP you)))))
    (. ?)))

aux(getting-3, Is-1)
nsubj(getting-3, this-2)
root(ROOT-0, getting-3)
prep(getting-3, through-4)
pcomp(through-4, to-5)
prep_to(through-4, you-6)

(ROOT
  (FRAG
    (ADVP (IN At) (DT all))
    (. ?)))

root(ROOT-0, At-1)
pobj(At-1, all-2)

(ROOT
  (S (`` ``)
    (CC And)
    (NP (PRP I))
    (VP (VBP 'm) (RB not)
      (VP (VBG accusing)
        (NP
          (NP (DT the) (NN country))
          (PP (IN of)
            (NP (NN everything))))))
    (. .)))

cc(accusing-6, And-2)
nsubj(accusing-6, I-3)
aux(accusing-6, 'm-4)
neg(accusing-6, not-5)
root(ROOT-0, accusing-6)
det(country-8, the-7)
dobj(accusing-6, country-8)
prep_of(country-8, everything-10)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBD did) (RB n't)
      (VP (VB say)
        (NP (DT that) (NN you))
        (FRAG
          (WHADVP (WRB where)))))
    (. .)))

nsubj(say-5, I-2)
aux(say-5, did-3)
neg(say-5, n't-4)
root(ROOT-0, say-5)
det(you-7, that-6)
dobj(say-5, you-7)
dep(say-5, where-8)

