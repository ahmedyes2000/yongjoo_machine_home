(ROOT
  (S
    (INTJ (UH OK))
    (, ,)
    (ADVP (RB so) (RB now))
    (NP (PRP you))
    (VP (VBP 're)
      (VP (VBG saying)
        (SBAR (IN that)
          (S
            (NP (PRP you))
            (VP (VBP follow)
              (NP
                (NP (DT the) (NN crowd))
                (PP (RB instead) (IN of)
                  (S
                    (VP (VBG making)
                      (PRT (RP up))
                      (NP (PRP$ your) (JJ own) (NN mind)))))))))))
    (. .)))

dep(saying-7, OK-1)
advmod(now-4, so-3)
advmod(saying-7, now-4)
nsubj(saying-7, you-5)
aux(saying-7, 're-6)
root(ROOT-0, saying-7)
complm(follow-10, that-8)
nsubj(follow-10, you-9)
ccomp(saying-7, follow-10)
det(crowd-12, the-11)
dobj(follow-10, crowd-12)
prepc_instead_of(crowd-12, making-15)
prt(making-15, up-16)
poss(mind-19, your-17)
amod(mind-19, own-18)
dobj(making-15, mind-19)

(ROOT
  (S
    (VP (VB Think)
      (PP (IN about)
        (NP (DT this))))
    (. .)))

root(ROOT-0, Think-1)
prep_about(Think-1, this-3)

(ROOT
  (SBARQ
    (WHNP
      (WHNP (WP What))
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBD were)
            (ADJP (JJ deaf))))
        (CC and)
        (RB only)))
    (SQ
      (VP (VBD wanted)
        (S
          (VP (TO to)
            (VP (VB hang)
              (PP (IN around)
                (NP (JJ deaf) (NNS people))))))))
    (. ?)))

nsubj(wanted-8, What-1)
mark(deaf-5, if-2)
nsubj(deaf-5, you-3)
cop(deaf-5, were-4)
dep(What-1, deaf-5)
dep(What-1, only-7)
advmod(deaf-5, only-7)
conj_and(deaf-5, only-7)
root(ROOT-0, wanted-8)
aux(hang-10, to-9)
xcomp(wanted-8, hang-10)
amod(people-13, deaf-12)
prep_around(hang-10, people-13)

(ROOT
  (SQ
    (SBAR
      (WHNP (WP What))
      (S
        (SBAR (IN if)
          (S
            (NP
              (NP (NNS people))
              (PP (IN with)
                (NP (NNS tinnitus))))
            (VP (VBD wanted)
              (S
                (VP (TO to)
                  (VP (VB be)
                    (VP (VBN called))))))))
        (NP (JJ deaf)
          (CC and)
          (JJ deaf) (NNS people))
        (VP (VBD were)
          (VP (VBN opposed)))))
    (, ,) (MD would)
    (NP (PRP they))
    (VP (VB be)
      (ADJP (JJ bigots)))
    (. ?)))

dobj(opposed-15, What-1)
mark(wanted-6, if-2)
nsubj(wanted-6, people-3)
xsubj(called-9, people-3)
prep_with(people-3, tinnitus-5)
advcl(opposed-15, wanted-6)
aux(called-9, to-7)
auxpass(called-9, be-8)
xcomp(wanted-6, called-9)
amod(people-13, deaf-10)
conj_and(deaf-10, deaf-12)
amod(people-13, deaf-12)
nsubjpass(opposed-15, people-13)
auxpass(opposed-15, were-14)
dep(bigots-20, opposed-15)
aux(bigots-20, would-17)
nsubj(bigots-20, they-18)
cop(bigots-20, be-19)
root(ROOT-0, bigots-20)

(ROOT
  (S
    (PP (IN In)
      (NP (DT any) (VBN given) (NN argument)))
    (, ,)
    (S
      (VP (TO to)
        (VP (VB use)
          (NP (NNS absolutes)))))
    (VP (VBZ is)
      (ADVP (RB usually))
      (ADJP (JJ wrong)))
    (. .)))

det(argument-4, any-2)
amod(argument-4, given-3)
prep_in(wrong-11, argument-4)
aux(use-7, to-6)
csubj(wrong-11, use-7)
dobj(use-7, absolutes-8)
cop(wrong-11, is-9)
advmod(wrong-11, usually-10)
root(ROOT-0, wrong-11)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB say)
          (SBAR (IN that) (`` ``)
            (S
              (NP
                (NP (NN everyone))
                (SBAR
                  (WHNP (WP who))
                  (S
                    (VP (VBZ opposes)
                      (NP (JJ gay) (NN marriage))))))
              (VP (VBZ is)
                (NP (DT a) (NN bigot))))
            ('' '')))))
    (VP (VBZ is)
      (ADJP (JJ wrong)))
    (. .)))

aux(say-2, To-1)
csubj(wrong-15, say-2)
complm(bigot-12, that-3)
nsubj(opposes-7, everyone-5)
nsubj(bigot-12, everyone-5)
rcmod(everyone-5, opposes-7)
amod(marriage-9, gay-8)
dobj(opposes-7, marriage-9)
cop(bigot-12, is-10)
det(bigot-12, a-11)
ccomp(say-2, bigot-12)
cop(wrong-15, is-14)
root(ROOT-0, wrong-15)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB say)
          (SBAR (IN that) (`` ``)
            (S
              (NP (NN everyone) (RB else))
              (VP (VBZ says)
                (SBAR (IN that)
                  (S
                    (NP
                      (NP (NN everyone))
                      (SBAR
                        (WHNP (WP who))
                        (S
                          (VP (VBZ opposes)
                            (NP (JJ gay) (NN marriage))))))
                    (VP (VBZ is)
                      (NP (DT a) (NN bigot))
                      (SBAR (IN so)
                        (S
                          (NP (PRP it))
                          (VP (MD must)
                            (VP (VB be)
                              (ADJP (JJ true)))))))))))
            ('' '')))))
    (VP (VBZ is)
      (ADJP (JJ wrong)))
    (. .)))

aux(say-2, To-1)
csubj(wrong-24, say-2)
complm(says-7, that-3)
nsubj(says-7, everyone-5)
advmod(everyone-5, else-6)
ccomp(say-2, says-7)
complm(bigot-16, that-8)
nsubj(opposes-11, everyone-9)
nsubj(bigot-16, everyone-9)
rcmod(everyone-9, opposes-11)
amod(marriage-13, gay-12)
dobj(opposes-11, marriage-13)
cop(bigot-16, is-14)
det(bigot-16, a-15)
ccomp(says-7, bigot-16)
mark(true-21, so-17)
nsubj(true-21, it-18)
aux(true-21, must-19)
cop(true-21, be-20)
advcl(bigot-16, true-21)
cop(wrong-24, is-23)
root(ROOT-0, wrong-24)

(ROOT
  (SQ (VBD Are)
    (NP (PRP you))
    (NP (NN saying))
    (SBAR (IN that)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (ADJP (RB physically) (JJ impossible)
            (PP (IN for)
              (NP (NN someone))))
          (S
            (VP (TO to)
              (VP (VB be)
                (PP (IN against)
                  (NP
                    (NP (JJ gay) (NN marriage))
                    (PP (IN for)
                      (NP (DT some) (NN reason) (JJ other)))))
                (PP (IN than)
                  (S
                    (VP (VBG being)
                      (NP (DT a) (NN bigot)))))))))))
    (. ?)))

cop(saying-3, Are-1)
nsubj(saying-3, you-2)
root(ROOT-0, saying-3)
complm(impossible-8, that-4)
nsubj(impossible-8, it-5)
xsubj(be-12, it-5)
cop(impossible-8, is-6)
advmod(impossible-8, physically-7)
dep(saying-3, impossible-8)
prep_for(impossible-8, someone-10)
aux(be-12, to-11)
xcomp(impossible-8, be-12)
amod(marriage-15, gay-14)
prep_against(be-12, marriage-15)
det(reason-18, some-17)
prep_for(marriage-15, reason-18)
amod(reason-18, other-19)
cop(bigot-23, being-21)
det(bigot-23, a-22)
prepc_than(be-12, bigot-23)

(ROOT
  (S
    (VP (VB Think)
      (PP (IN about)
        (NP (DT this))))
    (. .)))

root(ROOT-0, Think-1)
prep_about(Think-1, this-3)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (VBD were)
          (NP (DT a) (JJ true) (NN statement))
          (SBAR (IN that)
            (S
              (NP
                (NP (NN anyone))
                (SBAR
                  (WHNP (WP who))
                  (S
                    (VP (VBZ does) (RB n't)
                      (VP (VB want)
                        (S
                          (VP (TO to)
                            (VP (VB be)
                              (PP (IN around)
                                (NP (DT a) (JJ specific) (NN group)))))))))))
              (VP (VBZ is)
                (NP (DT a) (NN bigot))))))))
    (, ,)
    (WHADVP
      (ADVP (RB then))
      (WRB why))
    (SQ (VBZ does) (RB n't)
      (NP (DT the) (NN definition))
      (VP
        (PP (IN of)
          (NP (DT the) (NN word)))
        (VB say)
        (NP (DT that))))
    (. ?)))

mark(statement-6, If-1)
nsubj(statement-6, it-2)
cop(statement-6, were-3)
det(statement-6, a-4)
amod(statement-6, true-5)
advcl(say-32, statement-6)
complm(bigot-21, that-7)
nsubj(want-12, anyone-8)
nsubj(bigot-21, anyone-8)
aux(want-12, does-10)
neg(want-12, n't-11)
rcmod(anyone-8, want-12)
aux(be-14, to-13)
xcomp(want-12, be-14)
det(group-18, a-16)
amod(group-18, specific-17)
prep_around(be-14, group-18)
cop(bigot-21, is-19)
det(bigot-21, a-20)
ccomp(statement-6, bigot-21)
advmod(why-24, then-23)
advmod(say-32, why-24)
aux(say-32, does-25)
neg(say-32, n't-26)
det(definition-28, the-27)
nsubj(say-32, definition-28)
det(word-31, the-30)
prep_of(say-32, word-31)
root(ROOT-0, say-32)
dobj(say-32, that-33)

(ROOT
  (SQ (MD Could)
    (NP (PRP it))
    (VP (VB be)
      (SBAR (IN that)
        (S
          (NP (EX there))
          (VP (VBP are)
            (NP
              (NP (RB plenty))
              (PP (IN of)
                (NP
                  (NP (JJ other) (NNS reasons))
                  (PP (IN for)
                    (NP (NNS people)
                      (S (RB not)
                        (VP (TO to)
                          (VP (VB want)
                            (S
                              (VP (TO to)
                                (VP (VB be)
                                  (PP (IN around)
                                    (NP (DT a) (JJ specific) (NN group))))))))))))))))))
    (. ?)))

aux(be-3, Could-1)
nsubj(be-3, it-2)
root(ROOT-0, be-3)
complm(are-6, that-4)
expl(are-6, there-5)
ccomp(be-3, are-6)
nsubj(are-6, plenty-7)
amod(reasons-10, other-9)
prep_of(plenty-7, reasons-10)
prep_for(reasons-10, people-12)
neg(want-15, not-13)
aux(want-15, to-14)
infmod(people-12, want-15)
aux(be-17, to-16)
xcomp(want-15, be-17)
det(group-21, a-19)
amod(group-21, specific-20)
prep_around(be-17, group-21)

(ROOT
  (SBARQ
    (WHNP
      (WHNP (WP What))
      (SBAR (IN if)
        (S
          (NP (PRP you))
          (VP (VBD were)
            (ADJP (JJ shy))))
        (CC and)
        (RB only)))
    (SQ
      (VP (VBD wanted)
        (S
          (VP (TO to)
            (VP (VB hang)
              (PRT (RP around))
              (NP (PRP$ your) (JJ own) (NN kind)))))))
    (. ?)))

nsubj(wanted-8, What-1)
mark(shy-5, if-2)
nsubj(shy-5, you-3)
cop(shy-5, were-4)
dep(What-1, shy-5)
dep(What-1, only-7)
advmod(shy-5, only-7)
conj_and(shy-5, only-7)
root(ROOT-0, wanted-8)
aux(hang-10, to-9)
xcomp(wanted-8, hang-10)
prt(hang-10, around-11)
poss(kind-14, your-12)
amod(kind-14, own-13)
dobj(hang-10, kind-14)

