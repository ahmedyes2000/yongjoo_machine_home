(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP 'm) (RB not)
        (VP (VBG trying)
          (S
            (VP (TO to)
              (VP (VB incite)
                (NP (DT a) (NN conflict))
                (, ,)
                (ADVP (CC but))))))))
    (: ...)
    (SQ (VBP do) (RB n't)
      (NP (PRP you))
      (VP (VB have)
        (NP (PRP it))
        (ADVP (RB almost) (RB backwards))))
    (. ?)))

nsubj(trying-4, I-1)
xsubj(incite-6, I-1)
aux(trying-4, 'm-2)
neg(trying-4, not-3)
root(ROOT-0, trying-4)
aux(incite-6, to-5)
xcomp(trying-4, incite-6)
det(conflict-8, a-7)
dobj(incite-6, conflict-8)
advmod(incite-6, but-10)
aux(have-15, do-12)
neg(have-15, n't-13)
nsubj(have-15, you-14)
parataxis(trying-4, have-15)
dobj(have-15, it-16)
advmod(backwards-18, almost-17)
advmod(have-15, backwards-18)

(ROOT
  (S
    (S
      (NP (DT The) (NN couple))
      (VP (VBZ is)
        (PP (IN in)
          (NP (NN love)))))
    (, ,)
    (CC and)
    (S
      (NP (PRP they))
      (VP (VBP want)
        (NP
          (NP (DT a) (JJ public) (NN expression))
          (PP (IN of)
            (NP (DT that) (NN love))))))
    (. .)))

det(couple-2, The-1)
nsubj(is-3, couple-2)
root(ROOT-0, is-3)
prep_in(is-3, love-5)
nsubj(want-9, they-8)
conj_and(is-3, want-9)
det(expression-12, a-10)
amod(expression-12, public-11)
dobj(want-9, expression-12)
det(love-15, that-14)
prep_of(expression-12, love-15)

(ROOT
  (S
    (NP (DT The) (JJ legal) (NNS benefits))
    (VP (VBP are)
      (NP
        (NP (NNS ways))
        (PP (IN for)
          (NP (PRP them)))
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB practice)
                      (CC and)
                      (VB reinforce)
                      (NP (DT that) (NN love)))))))))))
    (. .)))

det(benefits-3, The-1)
amod(benefits-3, legal-2)
nsubj(ways-5, benefits-3)
cop(ways-5, are-4)
root(ROOT-0, ways-5)
prep_for(ways-5, them-7)
aux(able-10, to-8)
cop(able-10, be-9)
infmod(ways-5, able-10)
aux(practice-12, to-11)
xcomp(able-10, practice-12)
xcomp(able-10, reinforce-14)
conj_and(practice-12, reinforce-14)
det(love-16, that-15)
dobj(practice-12, love-16)

(ROOT
  (S
    (NP (DT The) (NNS benefits))
    (VP (VBP are) (RB n't)
      (NP (DT the) (NNS ends)))
    (. .)))

det(benefits-2, The-1)
nsubj(ends-6, benefits-2)
cop(ends-6, are-3)
neg(ends-6, n't-4)
det(ends-6, the-5)
root(ROOT-0, ends-6)

(ROOT
  (S
    (NP
      (NP (DT The) (NN expression)
        (CC and)
        (NN practice))
      (PP (IN of)
        (NP (NN love))))
    (VP (VBZ is))
    (. .)))

det(expression-2, The-1)
nsubj(is-7, expression-2)
conj_and(expression-2, practice-4)
nsubj(is-7, practice-4)
prep_of(expression-2, love-6)
root(ROOT-0, is-7)

