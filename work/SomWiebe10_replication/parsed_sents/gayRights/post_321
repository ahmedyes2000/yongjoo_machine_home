(ROOT
  (S
    (NP (PRP I))
    (VP (VBP understand)
      (S
        (NP (PRP it))
        (VP (TO to)
          (VP (VB mean)
            (SBAR (IN that)
              (S
                (NP (DT the) (NN motion))
                (VP (VBZ is)
                  (S
                    (VP (TO to)
                      (VP
                        (PP (IN out)
                          (NP (NN law)))
                        (VB non)
                        (NP (NN liberalism))))))))))))
    (. .)))

nsubj(understand-2, I-1)
root(ROOT-0, understand-2)
nsubj(mean-5, it-3)
aux(mean-5, to-4)
xcomp(understand-2, mean-5)
complm(is-9, that-6)
det(motion-8, the-7)
nsubj(is-9, motion-8)
xsubj(non-13, motion-8)
ccomp(mean-5, is-9)
aux(non-13, to-10)
prep_out(non-13, law-12)
xcomp(is-9, non-13)
dobj(non-13, liberalism-14)

(ROOT
  (S
    (NP
      (NP (DT the) (NN idea))
      (PP (IN that)
        (NP
          (QP (CD 2) (CD +2))
          (QP (CD =) (CD 4)))))
    (VP (VBZ is)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP
              (ADVP (RB out))
              (VBN lawed))))))
    (. .)))

det(idea-2, the-1)
nsubj(is-8, idea-2)
xsubj(lawed-12, idea-2)
number(+2-5, 2-4)
num(4-7, +2-5)
number(4-7, =-6)
prep_that(idea-2, 4-7)
root(ROOT-0, is-8)
aux(lawed-12, to-9)
auxpass(lawed-12, be-10)
advmod(lawed-12, out-11)
xcomp(is-8, lawed-12)

(ROOT
  (S
    (NP (CD 2) (CD +2))
    (VP (SYM =)
      (NP (NN anything)))
    (. .)))

num(+2-2, 2-1)
nsubj(anything-4, +2-2)
dep(anything-4, =-3)
root(ROOT-0, anything-4)

(ROOT
  (S
    (NP (DT that))
    (VP (VBZ 's)
      (NP
        (NP (DT the) (NN equality))
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP 're)
              (VP (VBG talking) (IN about)))))))
    (. .)))

nsubj(equality-4, that-1)
cop(equality-4, 's-2)
det(equality-4, the-3)
root(ROOT-0, equality-4)
dobj(talking-7, equality-4)
nsubj(talking-7, you-5)
aux(talking-7, 're-6)
rcmod(equality-4, talking-7)
dep(talking-7, about-8)

(ROOT
  (S
    (NP (NNS Liberals))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP (VBN removed)
              (PP (IN from)
                (NP (NN society))))))))
    (. .)))

nsubj(need-2, Liberals-1)
xsubj(removed-5, Liberals-1)
root(ROOT-0, need-2)
aux(removed-5, to-3)
auxpass(removed-5, be-4)
xcomp(need-2, removed-5)
prep_from(removed-5, society-7)

(ROOT
  (S
    (NP (EX there))
    (VP (MD should)
      (VP (VB be)
        (NP (DT a) (JJ liberal) (JJ free) (NN society))))
    (. .)))

expl(society-7, there-1)
aux(society-7, should-2)
cop(society-7, be-3)
det(society-7, a-4)
amod(society-7, liberal-5)
amod(society-7, free-6)
root(ROOT-0, society-7)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (NP (JJ societies) (NN obligation)
        (S
          (VP (TO to)
            (VP (VB remove)
              (NP (NNS liberals)))))))
    (. .)))

nsubj(obligation-4, It-1)
cop(obligation-4, 's-2)
amod(obligation-4, societies-3)
root(ROOT-0, obligation-4)
aux(remove-6, to-5)
infmod(obligation-4, remove-6)
dobj(remove-6, liberals-7)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB when))
      (S
        (NP (PRP you))
        (VP (VBP make)
          (NP (DT a) (NN decision)))))
    (, ,)
    (NP (PRP you))
    (VP (VBP do) (RB n't)
      (ADVP (RB just))
      (VP (VB do)
        (WHNP (WDT whatever))))
    (. .)))

advmod(make-3, when-1)
nsubj(make-3, you-2)
advcl(do-11, make-3)
det(decision-5, a-4)
dobj(make-3, decision-5)
nsubj(do-11, you-7)
aux(do-11, do-8)
neg(do-11, n't-9)
advmod(do-11, just-10)
root(ROOT-0, do-11)
dobj(do-11, whatever-12)

(ROOT
  (S
    (NP (DT The) (NNS liberals))
    (VP (VBP want)
      (SBAR
        (S
          (NP (SYM a))
          (`` ``)
          (VP (VBP do)
            (NP (NN anything) (NN clause)))
          ('' ''))))
    (. .)))

det(liberals-2, The-1)
nsubj(want-3, liberals-2)
root(ROOT-0, want-3)
nsubj(do-6, a-4)
ccomp(want-3, do-6)
nn(clause-8, anything-7)
dobj(do-6, clause-8)

(ROOT
  (S
    (NP (NN society))
    (VP (VBD was)
      (VP (VBN based)
        (PP (IN on)
          (NP (DT the) (NN opposite)))))
    (. .)))

nsubjpass(based-3, society-1)
auxpass(based-3, was-2)
root(ROOT-0, based-3)
det(opposite-6, the-5)
prep_on(based-3, opposite-6)

(ROOT
  (S
    (NP (PRP we))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB get)
            (ADJP (JJ rid))
            (PP (IN of)
              (NP (PRP them)))))))
    (. .)))

nsubj(need-2, we-1)
xsubj(rid-5, we-1)
root(ROOT-0, need-2)
aux(rid-5, to-3)
dep(rid-5, get-4)
xcomp(need-2, rid-5)
prep_of(rid-5, them-7)

