(ROOT
  (FRAG
    (INTJ (UH Yes))
    (, ,)
    (NP (NNP Joe))
    (. !)))

dep(Joe-3, Yes-1)
root(ROOT-0, Joe-3)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP are)
        (NP
          (NP (DT all))
          (PP (IN in)
            (NP (DT this))))
        (ADVP (RB together))))
    (CC and)
    (S
      (NP (PRP I))
      (VP (VBP 'm)
        (ADJP (JJ glad)
          (SBAR
            (S
              (NP (PRP you))
              (VP (VBD made)
                (NP (DT that) (NN statement))))))))
    (. !)))

nsubj(all-3, We-1)
cop(all-3, are-2)
root(ROOT-0, all-3)
prep_in(all-3, this-5)
advmod(all-3, together-6)
nsubj(glad-10, I-8)
cop(glad-10, 'm-9)
conj_and(all-3, glad-10)
nsubj(made-12, you-11)
dep(glad-10, made-12)
det(statement-14, that-13)
dobj(made-12, statement-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB think)
        (ADVP (RB harshly))
        (PP (IN of)
          (NP (PRP you)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP you))
            (VP
              (VP (VBP make)
                (NP (DT an) (JJ honest)))
              (CC and)
              (ADVP (RB well))
              (VP (VBD thought)
                (PRT (RP out))
                (NP (NN rebuttal))))))))
    (. .)))

nsubj(think-4, I-1)
aux(think-4, do-2)
neg(think-4, n't-3)
root(ROOT-0, think-4)
advmod(think-4, harshly-5)
prep_of(think-4, you-7)
advmod(make-10, when-8)
nsubj(make-10, you-9)
nsubj(thought-15, you-9)
advcl(think-4, make-10)
det(honest-12, an-11)
dobj(make-10, honest-12)
advcl(think-4, well-14)
advmod(make-10, well-14)
conj_and(make-10, well-14)
advcl(think-4, thought-15)
conj_and(make-10, thought-15)
prt(thought-15, out-16)
dobj(thought-15, rebuttal-17)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB only))
    (VP (VBP think)
      (ADVP (DT that) (NN way)
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP you))
            (VP (VBP start)
              (PP (IN with)
                (NP
                  (NP (PRP$ your) (JJ other) (NN type))
                  (PP (IN of)
                    (NP (NN debate)
                      (CC or)
                      (NNS arguments))))))))))
    (. !)))

nsubj(think-3, I-1)
advmod(think-3, only-2)
root(ROOT-0, think-3)
dep(way-5, that-4)
advmod(think-3, way-5)
advmod(start-8, when-6)
nsubj(start-8, you-7)
dep(way-5, start-8)
poss(type-12, your-10)
amod(type-12, other-11)
prep_with(start-8, type-12)
prep_of(type-12, debate-14)
prep_of(type-12, arguments-16)
conj_or(debate-14, arguments-16)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP say)
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP are)
            (ADVP (RB also))
            (VP (VBG fighting)
              (NP (DT the) (NNS courts))
              (PP (IN on)
                (NP (NN something)))
              (SBAR
                (S
                  (NP (PRP you))
                  (VP (VBP say)
                    (SBAR
                      (S
                        (NP (PRP you))
                        (VP (VBP 're) (RB not)
                          (ADJP (VBN entitled)
                            (PP (TO to))))))))))))))
    (. .)))

nsubj(say-2, You-1)
root(ROOT-0, say-2)
nsubj(fighting-6, you-3)
aux(fighting-6, are-4)
advmod(fighting-6, also-5)
ccomp(say-2, fighting-6)
det(courts-8, the-7)
dobj(fighting-6, courts-8)
prep_on(fighting-6, something-10)
nsubj(say-12, you-11)
dep(fighting-6, say-12)
nsubjpass(entitled-16, you-13)
auxpass(entitled-16, 're-14)
neg(entitled-16, not-15)
ccomp(say-12, entitled-16)
prep(entitled-16, to-17)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP do) (RB n't)
        (VP (VB know)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (DT that))
              (VP (MD may)
                (VP (VB be))))))))
    (CC but)
    (S
      (NP (PRP you))
      (VP (MD must)
        (VP (VB keep)
          (S
            (VP (VBG fighting)
              (PP (IN for)
                (NP (DT a) (NN reason))))))))
    (. .)))

nsubj(know-4, I-1)
aux(know-4, do-2)
neg(know-4, n't-3)
root(ROOT-0, know-4)
dobj(be-8, what-5)
nsubj(be-8, that-6)
aux(be-8, may-7)
ccomp(know-4, be-8)
nsubj(keep-12, you-10)
aux(keep-12, must-11)
conj_but(know-4, keep-12)
xcomp(keep-12, fighting-13)
det(reason-16, a-15)
prep_for(fighting-13, reason-16)

(ROOT
  (S
    (NP (PRP We))
    (, ,)
    (ADVP (RB too))
    (, ,)
    (VP (VBP fight)
      (PP (IN for)
        (NP (DT a) (NN reason))))
    (. .)))

nsubj(fight-5, We-1)
advmod(fight-5, too-3)
root(ROOT-0, fight-5)
det(reason-8, a-7)
prep_for(fight-5, reason-8)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP fight)
      (PP (IN for)
        (NP
          (NP (NN equality))
          (PP (IN in)
            (NP (DT all) (NNS things)))))
      (SBAR (IN because)
        (S
          (NP (PRP we))
          (VP (VBP are)
            (ADVP (RB also))
            (NP
              (NP (JJ viable) (JJ human) (NNS beings))
              (SBAR
                (WHNP (WP who))
                (S
                  (VP (VBP deserve)
                    (S
                      (VP (TO to)
                        (VP (VB be)
                          (VP (VBN treated)
                            (PP (IN as)
                              (NP (JJ such)))))))))))))))
    (. .)))

nsubj(fight-2, We-1)
root(ROOT-0, fight-2)
prep_for(fight-2, equality-4)
det(things-7, all-6)
prep_in(equality-4, things-7)
mark(beings-14, because-8)
nsubj(beings-14, we-9)
cop(beings-14, are-10)
advmod(beings-14, also-11)
amod(beings-14, viable-12)
amod(beings-14, human-13)
advcl(fight-2, beings-14)
nsubj(deserve-16, beings-14)
rcmod(beings-14, deserve-16)
aux(treated-19, to-17)
auxpass(treated-19, be-18)
xcomp(deserve-16, treated-19)
prep_such_as(treated-19, such-21)

