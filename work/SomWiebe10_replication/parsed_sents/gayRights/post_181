(ROOT
  (S
    (NP (PRP I))
    (VP (VBP have)
      (NP (DT no) (NN objection))
      (PP (TO to)
        (NP (JJ same) (NN sex) (NN marriage))))
    (. .)))

nsubj(have-2, I-1)
root(ROOT-0, have-2)
det(objection-4, no-3)
dobj(have-2, objection-4)
amod(marriage-8, same-6)
nn(marriage-8, sex-7)
prep_to(have-2, marriage-8)

(ROOT
  (S
    (NP (NNS People))
    (VP (MD should)
      (VP
        (VP (VB be)
          (VP (VBN left)
            (ADVP (RB alone))))
        (CC and)
        (VP (VB be)
          (VP (VBN allowed)
            (S
              (VP (TO to)
                (VP (VB do)
                  (SBAR
                    (WHNP (WDT whatever))
                    (S
                      (NP (PRP they))
                      (VP (VBP think)
                        (SBAR
                          (S
                            (VP (MD will)
                              (VP (VB make)
                                (S
                                  (NP (PRP them))
                                  (ADJP (JJ happy))
                                  (SBAR (RB as) (RB long) (IN as)
                                    (S
                                      (NP (PRP it))
                                      (VP (VBZ does) (RB n't)
                                        (VP (VB hurt)
                                          (S
                                            (NP (NN anyone))
                                            (ADJP (RB else))))))))))))))))))))))
    (. .)))

nsubjpass(left-4, People-1)
nsubjpass(allowed-8, People-1)
aux(left-4, should-2)
auxpass(left-4, be-3)
root(ROOT-0, left-4)
advmod(left-4, alone-5)
auxpass(allowed-8, be-7)
conj_and(left-4, allowed-8)
aux(do-10, to-9)
xcomp(allowed-8, do-10)
dep(think-13, whatever-11)
nsubj(make-15, whatever-11)
nsubj(think-13, they-12)
ccomp(do-10, think-13)
aux(make-15, will-14)
ccomp(think-13, make-15)
nsubj(hurt-24, them-16)
dep(hurt-24, happy-17)
advmod(hurt-24, as-18)
advmod(hurt-24, long-19)
dep(hurt-24, as-20)
nsubj(hurt-24, it-21)
aux(hurt-24, does-22)
neg(hurt-24, n't-23)
xcomp(make-15, hurt-24)
nsubj(else-26, anyone-25)
xcomp(hurt-24, else-26)

(ROOT
  (S
    (SBAR (IN With)
      (S
        (NP (DT that))
        (VP (VBD said))))
    (, ,)
    (NP (DT the) (JJS greatest) (NN advantage))
    (VP (VBZ comes)
      (PP (IN from)
        (S
          (VP (VBG growing)
            (PRT (RP up))
            (PP (IN in)
              (NP (DT a) (JJ loving) (NN home)))
            (, ,)
            (PP (IN with)
              (NP
                (NP (DT the) (CD two) (NNS people))
                (SBAR
                  (WHNP (WP who))
                  (S
                    (VP (VBD gave)
                      (NP (PRP you))
                      (NP
                        (NP (NN life))
                        (PP (IN in)
                          (NP (DT the) (JJ first) (NN place)))))))))))))
    (. .)))

mark(said-3, With-1)
nsubj(said-3, that-2)
advcl(comes-8, said-3)
det(advantage-7, the-5)
amod(advantage-7, greatest-6)
nsubj(comes-8, advantage-7)
root(ROOT-0, comes-8)
prepc_from(comes-8, growing-10)
prt(growing-10, up-11)
det(home-15, a-13)
amod(home-15, loving-14)
prep_in(growing-10, home-15)
det(people-20, the-18)
num(people-20, two-19)
prep_with(growing-10, people-20)
nsubj(gave-22, people-20)
rcmod(people-20, gave-22)
iobj(gave-22, you-23)
dobj(gave-22, life-24)
det(place-28, the-26)
amod(place-28, first-27)
prep_in(life-24, place-28)

(ROOT
  (S
    (NP (NN Anything) (RB else))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN disadvantage))
        (PP (IN by)
          (NP (NN definition)))))
    (. .)))

nsubj(disadvantage-5, Anything-1)
advmod(Anything-1, else-2)
cop(disadvantage-5, is-3)
det(disadvantage-5, a-4)
root(ROOT-0, disadvantage-5)
prep_by(disadvantage-5, definition-7)

(ROOT
  (S
    (PP (IN From)
      (NP (RB there)))
    (, ,)
    (NP (DT the) (NN argument))
    (VP (VBZ becomes)
      (NP
        (NP (CD one))
        (PP (IN of)
          (S
            (VP (VBG assiging)
              (NP (DT a) (NN value))
              (PP (TO to)
                (NP
                  (NP (DT the) (NN degree))
                  (PP (IN of)
                    (NP (NN disadvantage))))))))))
    (. .)))

prep(one-7, From-1)
pobj(From-1, there-2)
det(argument-5, the-4)
nsubj(one-7, argument-5)
cop(one-7, becomes-6)
root(ROOT-0, one-7)
prepc_of(one-7, assiging-9)
det(value-11, a-10)
dobj(assiging-9, value-11)
det(degree-14, the-13)
prep_to(assiging-9, degree-14)
prep_of(degree-14, disadvantage-16)

(ROOT
  (S
    (NP (DT That))
    (VP
      (VP (VBZ 's)
        (NP (DT no) (JJ easy) (NN task)))
      (CC and)
      (VP (VBZ involves)
        (NP
          (NP (JJ infinite) (NNS shades))
          (PP (IN of)
            (ADJP (JJ gray))))))
    (. .)))

nsubj(task-5, That-1)
nsubj(involves-7, That-1)
cop(task-5, 's-2)
det(task-5, no-3)
amod(task-5, easy-4)
root(ROOT-0, task-5)
conj_and(task-5, involves-7)
amod(shades-9, infinite-8)
dobj(involves-7, shades-9)
prep_of(shades-9, gray-11)

(ROOT
  (S
    (ADVP (RB Never))
    (NP (DT the) (JJR less))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP it))
        (VP (VBZ 's)
          (ADJP (JJ possible)
            (S
              (VP (TO to)
                (VP (VB identify)
                  (NP (DT the) (JJS best) (NN solution)))))))))
    (, ,)
    (NP (PRP it))
    (VP (MD should)
      (ADVP (RB also))
      (VP (VB be)
        (ADJP (JJ possible)
          (S
            (VP (TO to)
              (VP (VB say)
                (S
                  (NP
                    (NP (DT the) (JJ farther) (NN alternate))
                    (CC and)
                    (NP (JJR lesser) (NNS solutions)))
                  (ADJP (JJ deviate)
                    (PP (IN from)
                      (NP
                        (NP (DT the) (JJ ideal) (NN model))
                        (, ,)
                        (NP
                          (NP (DT the) (JJR greater))
                          (NP (DT the) (JJ resulting) (NN disadvantage)))))))))))))
    (. .)))

neg(possible-19, Never-1)
det(less-3, the-2)
nsubj(possible-19, less-3)
mark(possible-8, if-5)
nsubj(possible-8, it-6)
cop(possible-8, 's-7)
advcl(possible-19, possible-8)
aux(identify-10, to-9)
xcomp(possible-8, identify-10)
det(solution-13, the-11)
amod(solution-13, best-12)
dobj(identify-10, solution-13)
nsubj(possible-19, it-15)
aux(possible-19, should-16)
advmod(possible-19, also-17)
cop(possible-19, be-18)
root(ROOT-0, possible-19)
aux(say-21, to-20)
xcomp(possible-19, say-21)
det(alternate-24, the-22)
amod(alternate-24, farther-23)
nsubj(deviate-28, alternate-24)
amod(solutions-27, lesser-26)
conj_and(alternate-24, solutions-27)
nsubj(deviate-28, solutions-27)
xcomp(say-21, deviate-28)
det(model-32, the-30)
amod(model-32, ideal-31)
prep_from(deviate-28, model-32)
det(greater-35, the-34)
appos(model-32, greater-35)
det(disadvantage-38, the-36)
amod(disadvantage-38, resulting-37)
dep(greater-35, disadvantage-38)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can)
        (VP (VB say)
          (SBAR
            (S
              (NP (NN society))
              (VP (MD should)
                (VP (VB be)
                  (VP
                    (ADVP (RBR more))
                    (VBG accepting)
                    (PP (IN of)
                      (NP (JJ alternate) (NNS lifestyles)))))))))))
    (, ,)
    (CC and)
    (S
      (ADVP (DT no) (NN doubt))
      (NP (PRP it))
      (VP (MD should)))
    (. .)))

nsubj(say-3, You-1)
aux(say-3, can-2)
root(ROOT-0, say-3)
nsubj(accepting-8, society-4)
aux(accepting-8, should-5)
aux(accepting-8, be-6)
advmod(accepting-8, more-7)
ccomp(say-3, accepting-8)
amod(lifestyles-11, alternate-10)
prep_of(accepting-8, lifestyles-11)
dep(doubt-15, no-14)
advmod(should-17, doubt-15)
nsubj(should-17, it-16)
conj_and(say-3, should-17)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ does) (RB not)
      (VP (VB change)
        (NP (DT the) (NN fact))
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBZ does) (RB not))))))
    (. .)))

nsubj(change-4, That-1)
aux(change-4, does-2)
neg(change-4, not-3)
root(ROOT-0, change-4)
det(fact-6, the-5)
dobj(change-4, fact-6)
complm(does-9, that-7)
nsubj(does-9, it-8)
ccomp(change-4, does-9)
neg(does-9, not-10)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can)
        (VP (VB say)
          (SBAR
            (S
              (NP
                (NP (DT a) (NN child) (POS 's))
                (NNS peers))
              (VP (MD should) (RB n't)
                (VP (VB haze)
                  (NP (PRP them))
                  (PP (IN for)
                    (S
                      (VP (VBG being)
                        (NP
                          (NP (NN part))
                          (PP (IN of)
                            (NP (DT an) (JJ alternate) (NN lifestyle))))))))))))))
    (, ,)
    (CC and)
    (S
      (ADVP (DT no) (NN doubt))
      (NP (PRP they))
      (VP (MD should) (RB not)))
    (. .)))

nsubj(say-3, You-1)
aux(say-3, can-2)
root(ROOT-0, say-3)
det(child-5, a-4)
poss(peers-7, child-5)
nsubj(haze-10, peers-7)
aux(haze-10, should-8)
neg(haze-10, n't-9)
ccomp(say-3, haze-10)
dobj(haze-10, them-11)
cop(part-14, being-13)
prepc_for(haze-10, part-14)
det(lifestyle-18, an-16)
amod(lifestyle-18, alternate-17)
prep_of(part-14, lifestyle-18)
dep(doubt-22, no-21)
advmod(should-24, doubt-22)
nsubj(should-24, they-23)
conj_and(say-3, should-24)
neg(should-24, not-25)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ does) (RB n't)
      (VP (VB change)
        (NP (DT the) (NN fact))
        (SBAR (IN that)
          (S
            (NP (PRP they))
            (VP (VBP do))))))
    (. .)))

nsubj(change-4, That-1)
aux(change-4, does-2)
neg(change-4, n't-3)
root(ROOT-0, change-4)
det(fact-6, the-5)
dobj(change-4, fact-6)
complm(do-9, that-7)
nsubj(do-9, they-8)
ccomp(change-4, do-9)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP (JJ irrefutable))
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (ADVP (RB only))
            (ADJP (JJ possible)
              (S
                (VP (TO to)
                  (VP (VB produce)
                    (NP (NNS children))
                    (PP (IN through)
                      (NP (JJ heterosexual) (NNS means)))))))))))
    (. .)))

nsubj(irrefutable-3, It-1)
cop(irrefutable-3, is-2)
root(ROOT-0, irrefutable-3)
complm(possible-8, that-4)
nsubj(possible-8, it-5)
cop(possible-8, is-6)
advmod(possible-8, only-7)
ccomp(irrefutable-3, possible-8)
aux(produce-10, to-9)
xcomp(possible-8, produce-10)
dobj(produce-10, children-11)
amod(means-14, heterosexual-13)
prep_through(produce-10, means-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (, ,)
      (ADVP (RB however))
      (, ,)
      (S
        (ADVP (RB strongly))
        (VP (VB oppose)
          (NP (NN adoption))
          (PP (IN by)
            (NP (JJ same) (NN sex) (NNS couples))))))
    (. .)))

nsubj(do-2, I-1)
root(ROOT-0, do-2)
advmod(do-2, however-4)
advmod(oppose-7, strongly-6)
ccomp(do-2, oppose-7)
dobj(oppose-7, adoption-8)
amod(couples-12, same-10)
nn(couples-12, sex-11)
prep_by(oppose-7, couples-12)

(ROOT
  (S
    (NP
      (NP (NNS Millions))
      (PP (IN of)
        (NP
          (NP (NNS years))
          (PP (IN of)
            (NP (NN evolution))))))
    (VP (VBZ has)
      (VP (VBN defined)
        (ADVP (RB heterosexuality))
        (PP (IN as)
          (S
            (VP (VBG having)
              (NP
                (NP (DT the) (JJS highest) (NN advantage))
                (PP (IN for)
                  (NP (DT every) (NN life) (NN form))))
              (ADVP
                (ADVP (RBR higher))
                (PP (IN than)
                  (NP (NNS bacteria)))))))))
    (. .)))

nsubj(defined-7, Millions-1)
prep_of(Millions-1, years-3)
prep_of(years-3, evolution-5)
aux(defined-7, has-6)
root(ROOT-0, defined-7)
advmod(defined-7, heterosexuality-8)
prepc_as(defined-7, having-10)
det(advantage-13, the-11)
amod(advantage-13, highest-12)
dobj(having-10, advantage-13)
det(form-17, every-15)
nn(form-17, life-16)
prep_for(advantage-13, form-17)
advmod(having-10, higher-18)
prep_than(higher-18, bacteria-20)

(ROOT
  (S
    (PP (IN In)
      (NP
        (NP (DT the) (NN game))
        (PP (IN of)
          (NP
            (NP (NN survival))
            (PP (IN of)
              (NP (DT the) (JJS fittest)))))))
    (, ,)
    (NP (DT that))
    (VP (VBZ 's)
      (SBAR
        (WHNP (WP what))
        (S
          (VP (VBZ works)
            (ADVP (RBS best))))))
    (. .)))

det(game-3, the-2)
prep_in('s-11, game-3)
prep_of(game-3, survival-5)
det(fittest-8, the-7)
prep_of(survival-5, fittest-8)
nsubj('s-11, that-10)
root(ROOT-0, 's-11)
nsubj(works-13, what-12)
ccomp('s-11, works-13)
advmod(works-13, best-14)

(ROOT
  (S
    (NP
      (NP (DT A) (NN child))
      (VP (VBN raised)
        (PP (IN with)
          (NP (DT the) (NNS tools)))
        (S
          (VP (TO to)
            (VP (VB form)
              (NP (DT a) (JJ lasting) (NN bond))
              (PP (IN with)
                (NP
                  (NP (NNS members))
                  (PP (IN of)
                    (NP (DT the) (JJ opposite) (NN sex))))))))))
    (VP (VBZ has)
      (NP (DT the) (JJS greatest) (NN advantage))
      (, ,)
      (PP (IN by)
        (NP
          (NP (DT the) (JJ only) (NN definition))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ matters)))))))
    (. .)))

det(child-2, A-1)
xsubj(form-8, child-2)
nsubj(has-18, child-2)
partmod(child-2, raised-3)
det(tools-6, the-5)
prep_with(raised-3, tools-6)
aux(form-8, to-7)
xcomp(raised-3, form-8)
det(bond-11, a-9)
amod(bond-11, lasting-10)
dobj(form-8, bond-11)
prep_with(form-8, members-13)
det(sex-17, the-15)
amod(sex-17, opposite-16)
prep_of(members-13, sex-17)
root(ROOT-0, has-18)
det(advantage-21, the-19)
amod(advantage-21, greatest-20)
dobj(has-18, advantage-21)
det(definition-26, the-24)
amod(definition-26, only-25)
prep_by(has-18, definition-26)
nsubj(matters-28, definition-26)
rcmod(definition-26, matters-28)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (UCP
        (SBAR
          (WHNP (WP what))
          (S
            (VP (VBZ works)
              (NP
                (NP (JJS best))
                (PP (IN in)
                  (NP
                    (NP (NNS terms))
                    (PP (IN of)
                      (NP
                        (NP (DT both) (NN survival))
                        (PP (IN of)
                          (NP (DT the) (NN individual)))))))))))
        (CC and)
        (PP (IN of)
          (NP (DT the) (NN species)))))
    (. .)))

nsubj(is-2, It-1)
root(ROOT-0, is-2)
nsubj(works-4, what-3)
dep(is-2, works-4)
dobj(works-4, best-5)
prep_in(best-5, terms-7)
det(survival-10, both-9)
prep_of(terms-7, survival-10)
det(individual-13, the-12)
prep_of(survival-10, individual-13)
dep(is-2, of-15)
conj_and(works-4, of-15)
det(species-17, the-16)
pobj(of-15, species-17)

(ROOT
  (S
    (PP (IN In)
      (NP (DT that) (NN case)))
    (, ,)
    (NP (PRP you))
    (VP (VBP 're)
      (VP
        (VP (VBG taking)
          (NP (DT a) (JJ unique) (NN individual)))
        (CC and)
        (VP (VBG placing)
          (NP (DT that) (NN individual))
          (PP (IN in)
            (NP
              (NP (DT a) (NN situation))
              (SBAR
                (WHPP (IN in)
                  (WHNP (WDT which)))
                (S
                  (NP (PRP they))
                  (VP (VBP have)
                    (NP
                      (NP (DT no) (NN say))
                      (PP (IN in)
                        (NP (DT the) (NN matter))))))))))))
    (. .)))

det(case-3, that-2)
prep_in(taking-7, case-3)
nsubj(taking-7, you-5)
nsubj(placing-12, you-5)
aux(taking-7, 're-6)
root(ROOT-0, taking-7)
det(individual-10, a-8)
amod(individual-10, unique-9)
dobj(taking-7, individual-10)
conj_and(taking-7, placing-12)
det(individual-14, that-13)
dobj(placing-12, individual-14)
det(situation-17, a-16)
prep_in(placing-12, situation-17)
rel(have-21, which-19)
nsubj(have-21, they-20)
rcmod(situation-17, have-21)
det(say-23, no-22)
dobj(have-21, say-23)
det(matter-26, the-25)
prep_in(say-23, matter-26)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD 'll)
      (VP (VB put)
        (NP (DT this) (NN question))
        (PP (TO to)
          (NP
            (NP
              (NP (DT those))
              (PP (IN with)
                (NP (DT an) (VBG opposing) (NN view))))
            (: :)
            (SBARQ
              (WHNP
                (WHADJP (WRB How) (JJ many))
                (PP (IN of)
                  (NP (PRP you))))
              (SQ
                (VP (VBP have)
                  (ADVP (RB ever))
                  (VP (VBN regretted)
                    (NP
                      (NP (NNP NOT))
                      (VP (VBG being)
                        (VP (VBN raised)
                          (PP (IN by)
                            (NP (DT a) (JJ same) (NN sex) (NN couple)))))))))
              (. ?))))))))

nsubj(put-3, I-1)
aux(put-3, 'll-2)
root(ROOT-0, put-3)
det(question-5, this-4)
dobj(put-3, question-5)
prep_to(put-3, those-7)
det(view-11, an-9)
amod(view-11, opposing-10)
prep_with(those-7, view-11)
advmod(many-14, How-13)
nsubj(regretted-19, many-14)
prep_of(many-14, you-16)
aux(regretted-19, have-17)
advmod(regretted-19, ever-18)
dep(those-7, regretted-19)
dobj(regretted-19, NOT-20)
auxpass(raised-22, being-21)
partmod(NOT-20, raised-22)
det(couple-27, a-24)
amod(couple-27, same-25)
nn(couple-27, sex-26)
agent(raised-22, couple-27)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBD were)
          (VP (VBG making)
            (NP
              (NP (DT the) (NN choice))
              (PP (IN for)
                (NP (PRP yourself))))))))
    (, ,)
    (SQ (VBZ is)
      (NP
        (NP (PRP it))
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (MD would)
              (VP (VB have)
                (VP (VBN chosen))))))))
    (. ?)))

mark(making-4, If-1)
nsubj(making-4, you-2)
aux(making-4, were-3)
advcl(is-10, making-4)
det(choice-6, the-5)
dobj(making-4, choice-6)
prep_for(choice-6, yourself-8)
root(ROOT-0, is-10)
nsubj(is-10, it-11)
dobj(chosen-16, it-11)
rel(chosen-16, what-12)
nsubj(chosen-16, you-13)
aux(chosen-16, would-14)
aux(chosen-16, have-15)
rcmod(it-11, chosen-16)

(ROOT
  (S
    (NP (PRP$ My) (NNS parents))
    (VP (VBD were)
      (VP (VBN divorced)
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP I))
            (VP (VBD was)
              (NP (CD 7)))))))
    (. .)))

poss(parents-2, My-1)
nsubjpass(divorced-4, parents-2)
auxpass(divorced-4, were-3)
root(ROOT-0, divorced-4)
advmod(7-8, when-5)
nsubj(7-8, I-6)
cop(7-8, was-7)
advcl(divorced-4, 7-8)

(ROOT
  (S
    (S
      (NP (EX There))
      (VP (VBD were)
        (NP
          (NP (JJ many) (NNS times))
          (VP (VBG growing)
            (PRT (RP up))))))
    (NP (PRP I))
    (VP (VBD wished)
      (SBAR
        (S
          (NP (PRP they))
          (VP (VBD had)
            (VP (VBN stayed)
              (ADVP (RB together)))))))
    (. .)))

expl(were-2, There-1)
dep(wished-8, were-2)
amod(times-4, many-3)
nsubj(were-2, times-4)
partmod(times-4, growing-5)
prt(growing-5, up-6)
nsubj(wished-8, I-7)
root(ROOT-0, wished-8)
nsubj(stayed-11, they-9)
aux(stayed-11, had-10)
ccomp(wished-8, stayed-11)
advmod(stayed-11, together-12)

(ROOT
  (S
    (SBAR
      (ADVP (RB Never))
      (IN once)
      (S
        (S
          (VP (VBG growing)
            (PRT (RP up))))
        (VP (VBD did)
          (SBAR
            (S
              (NP (PRP it))
              (ADVP (RB even))
              (VP (VBP cross)
                (NP (PRP$ my) (NN mind)
                  (S
                    (VP (TO to)
                      (VP (VB wish)
                        (ADVP (RB either))))))))))))
    (VP (MD would)
      (VP (VB find)
        (NP
          (NP (DT a) (NN member))
          (PP (IN of)
            (NP (PRP$ their) (JJ own) (NN sex))))
        (SBAR (IN so)
          (S
            (NP (DT the) (CD two))
            (VP (MD could)
              (VP (VB raise)
                (NP (PRP me))
                (ADVP (RB together))))))))
    (. .)))

neg(did-5, Never-1)
dep(did-5, once-2)
csubj(did-5, growing-3)
prt(growing-3, up-4)
advcl(find-15, did-5)
csubj(find-15, did-5)
nsubj(cross-8, it-6)
advmod(cross-8, even-7)
ccomp(did-5, cross-8)
poss(mind-10, my-9)
dobj(cross-8, mind-10)
aux(wish-12, to-11)
infmod(mind-10, wish-12)
advmod(wish-12, either-13)
aux(find-15, would-14)
root(ROOT-0, find-15)
det(member-17, a-16)
dobj(find-15, member-17)
poss(sex-21, their-19)
amod(sex-21, own-20)
prep_of(member-17, sex-21)
mark(raise-26, so-22)
det(two-24, the-23)
nsubj(raise-26, two-24)
aux(raise-26, could-25)
advcl(find-15, raise-26)
dobj(raise-26, me-27)
advmod(raise-26, together-28)

(ROOT
  (S
    (PP (IN In)
      (NP (NN fact)))
    (, ,)
    (NP (PRP I))
    (VP (VBD was) (RB n't)
      (ADJP
        (ADVP (DT all) (DT that))
        (JJ crazy)
        (PP (IN about)
          (NP
            (NP (JJS most))
            (PP (IN of)
              (NP (PRP$ their) (JJ opposite) (NN sex) (NNS partners)))))))
    (. .)))

prep_in(crazy-9, fact-2)
nsubj(crazy-9, I-4)
cop(crazy-9, was-5)
neg(crazy-9, n't-6)
dep(that-8, all-7)
advmod(crazy-9, that-8)
root(ROOT-0, crazy-9)
prep_about(crazy-9, most-11)
poss(partners-16, their-13)
amod(partners-16, opposite-14)
nn(partners-16, sex-15)
prep_of(most-11, partners-16)

