(ROOT
  (S
    (NP (PRP I))
    (VP (VBP am)
      (ADJP (RB very) (JJ surprised)
        (SBAR (IN that)
          (S
            (NP (PRP you))
            (VP (MD would)
              (VP (VB opt)
                (S
                  (VP (TO to)
                    (VP (VB oppose)
                      (NP
                        (NP (DT an) (NN argument))
                        (PP (IN of)
                          (NP (NN mine))))
                      (ADVP
                        (ADVP (RB so) (RB soon))
                        (PP (IN after)
                          (NP (PRP$ our) (JJ last) (NN debate)))))))))))))
    (. .)))

nsubj(surprised-4, I-1)
cop(surprised-4, am-2)
advmod(surprised-4, very-3)
root(ROOT-0, surprised-4)
complm(opt-8, that-5)
nsubj(opt-8, you-6)
xsubj(oppose-10, you-6)
aux(opt-8, would-7)
ccomp(surprised-4, opt-8)
aux(oppose-10, to-9)
xcomp(opt-8, oppose-10)
det(argument-12, an-11)
dobj(oppose-10, argument-12)
prep_of(argument-12, mine-14)
advmod(soon-16, so-15)
advmod(oppose-10, soon-16)
poss(debate-20, our-18)
amod(debate-20, last-19)
prep_after(soon-16, debate-20)

(ROOT
  (S
    (ADVP (RB Perhaps))
    (NP (PRP you))
    (VP (VBD enjoyed)
      (NP (DT the) (NN debate)))
    (. ?)))

advmod(enjoyed-3, Perhaps-1)
nsubj(enjoyed-3, you-2)
root(ROOT-0, enjoyed-3)
det(debate-5, the-4)
dobj(enjoyed-3, debate-5)

(ROOT
  (S
    (NP (NNP A.) (PRP They))
    (VP (MD may)
      (VP (VB makeB)))
    (. .)))

nsubj(makeB-4, A.-1)
dep(A.-1, They-2)
aux(makeB-4, may-3)
root(ROOT-0, makeB-4)

(ROOT
  (FRAG
    (ADJP (RBR More) (JJ likelyC))
    (. .)))

advmod(likelyC-2, More-1)
root(ROOT-0, likelyC-2)

(ROOT
  (S
    (NP (NNP Fairly))
    (VP (VBD obviousD))
    (. .)))

nsubj(obviousD-2, Fairly-1)
root(ROOT-0, obviousD-2)

(ROOT
  (S
    (NP (NNP Must))
    (VP (VBP beE))
    (. .)))

nsubj(beE-2, Must-1)
root(ROOT-0, beE-2)

(ROOT
  (FRAG
    (ADJP (RBR More) (JJ likelyF))
    (. .)))

advmod(likelyF-2, More-1)
root(ROOT-0, likelyF-2)

(ROOT
  (NP (DT No) (JJ definitive) (NN proofG) (. .)))

det(proofG-3, No-1)
amod(proofG-3, definitive-2)
root(ROOT-0, proofG-3)

(ROOT
  (S
    (NP (DT The) (NN possibility))
    (VP (VBZ is)
      (NP
        (NP (DT a) (JJ strong) (NN oneDo))
        (SBAR
          (S
            (NP (PRP you))
            (ADVP (RB simply))
            (VP (VBP want)
              (S
                (VP (TO to)
                  (VP (VB engage)
                    (PP (IN in)
                      (NP (DT a) (NN debate)))))))))))
    (. ?)))

det(possibility-2, The-1)
nsubj(oneDo-6, possibility-2)
cop(oneDo-6, is-3)
det(oneDo-6, a-4)
amod(oneDo-6, strong-5)
root(ROOT-0, oneDo-6)
dobj(want-9, oneDo-6)
nsubj(want-9, you-7)
xsubj(engage-11, you-7)
advmod(want-9, simply-8)
rcmod(oneDo-6, want-9)
aux(engage-11, to-10)
xcomp(want-9, engage-11)
det(debate-14, a-13)
prep_in(engage-11, debate-14)

(ROOT
  (S
    (PP (IN If)
      (ADVP (RB so)))
    (, ,)
    (VP (VB name)
      (NP (DT the) (NN subject-matter)))
    (. .)))

prep(name-4, If-1)
pcomp(If-1, so-2)
root(ROOT-0, name-4)
det(subject-matter-6, the-5)
dobj(name-4, subject-matter-6)

(ROOT
  (S (CC But)
    (, ,)
    (ADVP (RB only)
      (PP (IN for)
        (NP
          (NP (DT the) (NN purpose))
          (PP (IN of)))))
    (VP (VBZ knowledge))
    (. .)))

cc(knowledge-8, But-1)
advmod(knowledge-8, only-3)
det(purpose-6, the-5)
prep_for(only-3, purpose-6)
prep(purpose-6, of-7)
root(ROOT-0, knowledge-8)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP s))
        (VP (VB see)
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP
                (NP (NN round) (NN number))
                (NP (CD two)))
              (VP (MD shall)
                (VP (VB lead)
                  (NP (DT the) (NN discourse)))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(see-3, s-2)
ccomp(Let-1, see-3)
advmod(lead-9, where-4)
nn(number-6, round-5)
nsubj(lead-9, number-6)
dep(number-6, two-7)
aux(lead-9, shall-8)
advcl(see-3, lead-9)
det(discourse-11, the-10)
dobj(lead-9, discourse-11)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBD asserted)))
    (: :)
    (S
      (NP
        (NP (DT The) (NN problem))
        (PP (IN with)
          (NP (PRP$ your) (NN argument))))
      (VP (VBZ is)
        (SBAR (IN that)
          (S
            (NP (PRP you))
            (VP (VBP look)
              (PP (IN at)
                (NP (NN evolution)))
              (PP (IN from)
                (NP (JJ simplistic) (NN perspective))))))))
    (. .)))

nsubj(asserted-2, You-1)
root(ROOT-0, asserted-2)
det(problem-5, The-4)
nsubj(is-9, problem-5)
poss(argument-8, your-7)
prep_with(problem-5, argument-8)
parataxis(asserted-2, is-9)
complm(look-12, that-10)
nsubj(look-12, you-11)
ccomp(is-9, look-12)
prep_at(look-12, evolution-14)
amod(perspective-17, simplistic-16)
prep_from(look-12, perspective-17)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP state)
        (SBAR (IN that)
          (S
            (NP (PRP$ my) (NN argument))
            (VP (VBZ has)
              (NP (DT a) (NN problem)))))))
    (: ;)
    (S
      (ADVP (RB however))
      (, ,)
      (NP (PRP you))
      (ADVP (RB then))
      (VP (VBP move)
        (PP (IN onto)
          (S
            (VP (VBG affirming)
              (SBAR (IN that)
                (S
                  (NP
                    (NP (PRP$ my) (NN view))
                    (PP (IN of)
                      (NP (NN evolution))))
                  (VP (VBZ is)
                    (PP (IN of)
                      (NP (DT a) (JJ simplistic) (NN perspective)))))))))))
    (. .)))

nsubj(state-2, You-1)
root(ROOT-0, state-2)
complm(has-6, that-3)
poss(argument-5, my-4)
nsubj(has-6, argument-5)
ccomp(state-2, has-6)
det(problem-8, a-7)
dobj(has-6, problem-8)
advmod(move-14, however-10)
nsubj(move-14, you-12)
advmod(move-14, then-13)
parataxis(state-2, move-14)
prepc_onto(move-14, affirming-16)
complm(is-22, that-17)
poss(view-19, my-18)
nsubj(is-22, view-19)
prep_of(view-19, evolution-21)
ccomp(affirming-16, is-22)
det(perspective-26, a-24)
amod(perspective-26, simplistic-25)
prep_of(is-22, perspective-26)

(ROOT
  (S
    (S
      (NP (PRP$ Your) (NN proposition))
      (VP (VBZ is)
        (ADJP (JJ identical)
          (PP (IN in)
            (NP (NN principle))))
        (PP (TO to)
          (NP (DT the) (JJ following) (NN proposition)))))
    (: :)
    (S
      (NP
        (NP (DT The) (NN problem))
        (PP (IN with)
          (NP (PRP$ your) (NN car))))
      (VP (VBZ is)
        (SBAR (IN that)
          (S
            (NP (PRP you))
            (VP (VBP are)
              (VP (VBG looking)
                (PP (IN at)
                  (NP (DT the) (NN gas) (NN cap)))
                (PP (IN from)
                  (NP (DT the) (JJ wrong) (NN side)))))))))
    (. .)))

poss(proposition-2, Your-1)
nsubj(identical-4, proposition-2)
cop(identical-4, is-3)
root(ROOT-0, identical-4)
prep_in(identical-4, principle-6)
det(proposition-10, the-8)
amod(proposition-10, following-9)
prep_to(identical-4, proposition-10)
det(problem-13, The-12)
nsubj(is-17, problem-13)
poss(car-16, your-15)
prep_with(problem-13, car-16)
parataxis(identical-4, is-17)
complm(looking-21, that-18)
nsubj(looking-21, you-19)
aux(looking-21, are-20)
ccomp(is-17, looking-21)
det(cap-25, the-23)
nn(cap-25, gas-24)
prep_at(looking-21, cap-25)
det(side-29, the-27)
amod(side-29, wrong-28)
prep_from(looking-21, side-29)

(ROOT
  (S
    (NP (DT Both) (NNS propositions))
    (VP (VBP are)
      (ADVP (RB simply))
      (ADJP (JJ irrational)))
    (. .)))

det(propositions-2, Both-1)
nsubj(irrational-5, propositions-2)
cop(irrational-5, are-3)
advmod(irrational-5, simply-4)
root(ROOT-0, irrational-5)

(ROOT
  (S
    (ADVP (RB Moreover))
    (, ,)
    (PP (RB instead) (IN of)
      (S
        (VP (VBG identifying)
          (NP
            (NP (DT the) (NN problem))
            (PP (IN of)
              (NP (PRP$ my) (NN argument)))))))
    (, ,)
    (NP (PRP$ your) (NN argument))
    (VP (VBZ proceeds)
      (S
        (VP (TO to)
          (VP (VB make)
            (NP
              (NP (NNS claims))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBP have) (RB not)
                    (VP (VBN been)
                      (VP
                        (ADVP (RB syllogistically))
                        (VBN demonstrated)))))))))))
    (. .)))

advmod(proceeds-14, Moreover-1)
prepc_instead_of(proceeds-14, identifying-5)
det(problem-7, the-6)
dobj(identifying-5, problem-7)
poss(argument-10, my-9)
prep_of(problem-7, argument-10)
poss(argument-13, your-12)
nsubj(proceeds-14, argument-13)
xsubj(make-16, argument-13)
root(ROOT-0, proceeds-14)
aux(make-16, to-15)
xcomp(proceeds-14, make-16)
dobj(make-16, claims-17)
nsubjpass(demonstrated-23, claims-17)
aux(demonstrated-23, have-19)
neg(demonstrated-23, not-20)
auxpass(demonstrated-23, been-21)
advmod(demonstrated-23, syllogistically-22)
rcmod(claims-17, demonstrated-23)

(ROOT
  (S
    (NP (DT The) (NN argument))
    (VP (VBZ presumes)
      (SBAR
        (SBAR (IN that)
          (S
            (NP (DT the) (NN audience))
            (VP (VBZ grants)
              (NP (DT the) (NNS propositions))
              (PP (IN without)
                (NP (NN argument))))))
        (: ;)
        (SBAR (IN unless)
          (S
            (PP (IN of)
              (NP (NN course)))
            (NP (PRP$ your) (NN argument))
            (VP (VBZ is)
              (ADJP (RB purely) (JJ hypothetical)))))))
    (. .)))

det(argument-2, The-1)
nsubj(presumes-3, argument-2)
root(ROOT-0, presumes-3)
dep(grants-7, that-4)
det(audience-6, the-5)
nsubj(grants-7, audience-6)
dep(presumes-3, grants-7)
det(propositions-9, the-8)
dobj(grants-7, propositions-9)
prep_without(grants-7, argument-11)
mark(hypothetical-20, unless-13)
prep_of(hypothetical-20, course-15)
poss(argument-17, your-16)
nsubj(hypothetical-20, argument-17)
cop(hypothetical-20, is-18)
advmod(hypothetical-20, purely-19)
dep(grants-7, hypothetical-20)

(ROOT
  (S (CC And)
    (ADVP (RB lastly))
    (, ,)
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN abundance))
        (PP (IN of)
          (NP
            (NP (NN uncertainty))
            (PP (IN in)
              (NP
                (NP (PRP$ your) (NN argument))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (PP (IN in)
                      (NP (NN turn)))
                    (VP (VBZ calls)
                      (PP (IN into)
                        (NP (NN question)))
                      (NP
                        (NP (DT the) (NN wherefore))
                        (PP (IN of)
                          (S
                            (VP (VBG asserting)
                              (NP (JJ such) (NNS things)))))))))))))))
    (. .)))

cc(is-5, And-1)
advmod(is-5, lastly-2)
expl(is-5, there-4)
root(ROOT-0, is-5)
det(abundance-7, an-6)
nsubj(is-5, abundance-7)
prep_of(abundance-7, uncertainty-9)
poss(argument-12, your-11)
prep_in(uncertainty-9, argument-12)
nsubj(calls-17, argument-12)
prep_in(calls-17, turn-16)
rcmod(argument-12, calls-17)
prep_into(calls-17, question-19)
det(wherefore-21, the-20)
dobj(calls-17, wherefore-21)
prepc_of(wherefore-21, asserting-23)
amod(things-25, such-24)
dobj(asserting-23, things-25)

