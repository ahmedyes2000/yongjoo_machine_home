(ROOT
  (S
    (S
      (ADVP (UH OK))
      (ADVP (RB maybe))
      (NP (PRP I))
      (VP (VBP 'm)
        (ADJP (JJ naive))))
    (CC but)
    (S
      (NP (PRP I))
      (ADVP (RB always))
      (VP (VBD thought)
        (SBAR (IN that)
          (S
            (NP
              (ADJP (RB very) (JJ complex))
              (NNS things))
            (VP (VBD had)
              (NP (NNS designers)))))))
    (. .)))

advmod(naive-5, OK-1)
advmod(naive-5, maybe-2)
nsubj(naive-5, I-3)
cop(naive-5, 'm-4)
root(ROOT-0, naive-5)
nsubj(thought-9, I-7)
advmod(thought-9, always-8)
conj_but(naive-5, thought-9)
complm(had-14, that-10)
advmod(complex-12, very-11)
amod(things-13, complex-12)
nsubj(had-14, things-13)
ccomp(thought-9, had-14)
dobj(had-14, designers-15)

(ROOT
  (S
    (NP (NNP Complexity))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN sign))
        (PP (IN of)
          (NP (NN intelligence)))
        (SBAR
          (S
            (NP (PRP I))
            (VP (VBD thought))))))
    (. .)))

nsubj(sign-4, Complexity-1)
cop(sign-4, is-2)
det(sign-4, a-3)
root(ROOT-0, sign-4)
dobj(thought-8, sign-4)
prep_of(sign-4, intelligence-6)
nsubj(thought-8, I-7)
rcmod(sign-4, thought-8)

(ROOT
  (FRAG (RB Not)
    (VP (TO to)
      (VP (VB mention)
        (SBAR (IN that)
          (S
            (NP (PRP you))
            (VP (MD would) (RB then)
              (VP (VB have)
                (S
                  (VP (TO to)
                    (VP
                      (VP (VB take)
                        (NP (DT this) (NN concept)))
                      (CC and)
                      (VP (VB write)
                        (NP (PRP it))
                        (PP (IN in)
                          (NP (DT a) (JJ genetic) (NN code)))))))))))))
    (. .)))

root(ROOT-0, Not-1)
aux(mention-3, to-2)
dep(Not-1, mention-3)
complm(have-8, that-4)
nsubj(have-8, you-5)
xsubj(take-10, you-5)
aux(have-8, would-6)
advmod(have-8, then-7)
ccomp(mention-3, have-8)
aux(take-10, to-9)
xcomp(have-8, take-10)
det(concept-12, this-11)
dobj(take-10, concept-12)
xcomp(have-8, write-14)
conj_and(take-10, write-14)
dobj(write-14, it-15)
det(code-19, a-17)
amod(code-19, genetic-18)
prep_in(write-14, code-19)

(ROOT
  (FRAG (CC And)
    (SBAR (IN if)
      (S
        (NP (DT that))
        (VP (VBZ 's) (RB not)
          (ADJP (JJ incredible) (RB enough)))))
    (. .)))

dep(incredible-6, And-1)
mark(incredible-6, if-2)
nsubj(incredible-6, that-3)
cop(incredible-6, 's-4)
neg(incredible-6, not-5)
root(ROOT-0, incredible-6)
advmod(incredible-6, enough-7)

(ROOT
  (S
    (ADVP (RB Just))
    (VP (VB think)
      (SBAR
        (WHNP (WP what))
        (S
          (NP (PRP it))
          (VP (VBZ takes)
            (S
              (VP (TO to)
                (VP (VB make)
                  (S
                    (NP (PRP it))
                    (ADJP (JJ beautiful))))))))))
    (. .)))

advmod(think-2, Just-1)
root(ROOT-0, think-2)
dep(takes-5, what-3)
nsubj(takes-5, it-4)
xsubj(make-7, it-4)
ccomp(think-2, takes-5)
aux(make-7, to-6)
xcomp(takes-5, make-7)
nsubj(beautiful-9, it-8)
xcomp(make-7, beautiful-9)

(ROOT
  (S
    (NP (PDT All) (DT this))
    (VP (TO to)
      (VP (VB say)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBZ 's)
              (ADJP (JJ plain)
                (SBAR
                  (S
                    (NP (PRP we))
                    (VP (VBP have)
                      (NP
                        (NP (DT a) (NN creator))
                        (, ,)
                        (NP
                          (NP (NN someone))
                          (SBAR
                            (WHNP (WP who))
                            (S
                              (VP (VBD designed)
                                (NP (PRP us))))))))))))))))
    (. .)))

predet(this-2, All-1)
nsubj(say-4, this-2)
aux(say-4, to-3)
root(ROOT-0, say-4)
complm(plain-8, that-5)
nsubj(plain-8, it-6)
cop(plain-8, 's-7)
ccomp(say-4, plain-8)
nsubj(have-10, we-9)
dep(plain-8, have-10)
det(creator-12, a-11)
dobj(have-10, creator-12)
appos(creator-12, someone-14)
nsubj(designed-16, someone-14)
rcmod(someone-14, designed-16)
dobj(designed-16, us-17)

(ROOT
  (FRAG
    (NP
      (NP (NN Someone))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBD had)
            (NP
              (NP (DT a) (NN purpose)
                (CC and)
                (NN function))
              (PP (IN in)
                (NP (NN mind)))
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (PRP we))
                  (VP (VBD were)
                    (VP (VBN designed))))))))))
    (. .)))

root(ROOT-0, Someone-1)
nsubj(had-3, Someone-1)
rcmod(Someone-1, had-3)
det(purpose-5, a-4)
dobj(had-3, purpose-5)
tmod(designed-13, purpose-5)
dobj(had-3, function-7)
conj_and(purpose-5, function-7)
tmod(designed-13, function-7)
prep_in(purpose-5, mind-9)
advmod(designed-13, when-10)
nsubjpass(designed-13, we-11)
auxpass(designed-13, were-12)
dep(purpose-5, designed-13)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADVP (RB then))
      (NP
        (NP (DT this) (NN designer))
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBZ determines)
              (NP (PRP$ our) (NN purpose)
                (CC and)
                (NN function))))))
      (, ,)
      (FRAG (RB not)
        (NP (PRP us))))
    (. .)))

nsubj(designer-5, It-1)
cop(designer-5, is-2)
advmod(designer-5, then-3)
det(designer-5, this-4)
root(ROOT-0, designer-5)
nsubj(determines-7, designer-5)
rcmod(designer-5, determines-7)
poss(purpose-9, our-8)
dobj(determines-7, purpose-9)
dobj(determines-7, function-11)
conj_and(purpose-9, function-11)
dep(designer-5, not-13)
dep(not-13, us-14)

(ROOT
  (S (CC So)
    (SBAR
      (ADVP (RB therefore))
      (IN if)
      (S
        (NP (PRP we))
        (VP (VBP have)
          (NP
            (NP (DT a) (NN purpose)
              (CC and)
              (NN function))
            (SBAR
              (WHPP (IN for)
                (WHNP (WDT which)))
              (S
                (NP (PRP we))
                (VP (VBD were)
                  (VP (VBN designed)))))))))
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP we))
          (VP (MD should)
            (VP (VB be)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB tell)
                      (PP (IN from)
                        (NP (DT the) (NNS results)))))))
              (SBAR (IN whether)
                (CC or)
                (RB not)
                (S
                  (NP (PRP we))
                  (VP (VBP are)
                    (VP (VBG using)
                      (NP (PRP$ our) (NNS bodies))
                      (PP (IN for)
                        (NP
                          (NP (DT the) (NN purpose))
                          (SBAR
                            (WHPP (IN for)
                              (WHNP (WDT which)))
                            (S
                              (NP (PRP they))
                              (VP (VBD were)
                                (VP (VBN designed))))))))))))))))
    (. .)))

cc(think-16, So-1)
advmod(have-5, therefore-2)
dep(have-5, if-3)
nsubj(have-5, we-4)
dep(think-16, have-5)
det(purpose-7, a-6)
dobj(have-5, purpose-7)
dobj(have-5, function-9)
conj_and(purpose-7, function-9)
rel(designed-14, which-11)
nsubjpass(designed-14, we-12)
auxpass(designed-14, were-13)
rcmod(purpose-7, designed-14)
nsubj(think-16, I-15)
root(ROOT-0, think-16)
nsubj(able-20, we-17)
aux(able-20, should-18)
cop(able-20, be-19)
ccomp(think-16, able-20)
aux(tell-22, to-21)
xcomp(able-20, tell-22)
det(results-25, the-24)
prep_from(tell-22, results-25)
complm(using-31, whether-26)
ccomp(able-20, not-28)
conj_or(using-31, not-28)
nsubj(using-31, we-29)
aux(using-31, are-30)
ccomp(able-20, using-31)
poss(bodies-33, our-32)
dobj(using-31, bodies-33)
det(purpose-36, the-35)
prep_for(using-31, purpose-36)
rel(designed-41, which-38)
nsubjpass(designed-41, they-39)
auxpass(designed-41, were-40)
rcmod(purpose-36, designed-41)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP (PRP$ my) (NN cell) (NN phone))
    (VP (VBZ has)
      (NP
        (NP (DT a) (NN purpose))
        (SBAR
          (WHPP (IN for)
            (WHNP (WDT which)))
          (S
            (NP (PRP it))
            (VP (VBD was)
              (VP (VBN designed)))))
        (: ;)
        (S
          (VP (TO To)
            (VP (VB make)
              (CC and)
              (VB take)
              (NP (NNS calls)))))))
    (. .)))

prep_for(has-7, example-2)
poss(phone-6, my-4)
nn(phone-6, cell-5)
nsubj(has-7, phone-6)
root(ROOT-0, has-7)
det(purpose-9, a-8)
dobj(has-7, purpose-9)
rel(designed-14, which-11)
nsubjpass(designed-14, it-12)
auxpass(designed-14, was-13)
rcmod(purpose-9, designed-14)
aux(make-17, To-16)
infmod(purpose-9, make-17)
infmod(purpose-9, take-19)
conj_and(make-17, take-19)
dobj(make-17, calls-20)

(ROOT
  (SBARQ
    (ADVP (RB Now))
    (WHNP (WP what))
    (SQ
      (VP (VBZ happens)
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP I))
            (VP (VBP think)
              (SBAR
                (S
                  (NP (PRP it))
                  (VP (MD will)
                    (ADVP (RB also))
                    (VP (VB make)
                      (NP (DT a) (JJ great) (NN hammer)))))))))))
    (. ?)))

advmod(happens-3, Now-1)
nsubj(happens-3, what-2)
root(ROOT-0, happens-3)
advmod(think-6, when-4)
nsubj(think-6, I-5)
advcl(happens-3, think-6)
nsubj(make-10, it-7)
aux(make-10, will-8)
advmod(make-10, also-9)
ccomp(think-6, make-10)
det(hammer-13, a-11)
amod(hammer-13, great-12)
dobj(make-10, hammer-13)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB quickly))
    (VP (VBP find)
      (PRT (RP out))
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBD was) (RB n't)
            (VP (VBN designed)
              (PP (IN for)
                (NP (DT that) (NN purpose))))))))
    (. .)))

nsubj(find-3, I-1)
advmod(find-3, quickly-2)
root(ROOT-0, find-3)
prt(find-3, out-4)
complm(designed-9, that-5)
nsubjpass(designed-9, it-6)
auxpass(designed-9, was-7)
neg(designed-9, n't-8)
ccomp(find-3, designed-9)
det(purpose-12, that-11)
prep_for(designed-9, purpose-12)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB also))
    (VP (VBD thought)
      (SBAR (IN that)
        (S
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (PRP you))
              (VP (VBD designed)
                (NP (NN something)))))
          (NP (PRP you))
          (VP (VBD had)
            (NP
              (NP (DT a) (NN purpose)
                (CC and)
                (NN function))
              (PP (IN in)
                (NP (NN mind))))))))
    (. .)))

nsubj(thought-3, I-1)
advmod(thought-3, also-2)
root(ROOT-0, thought-3)
complm(had-10, that-4)
advmod(designed-7, when-5)
nsubj(designed-7, you-6)
advcl(had-10, designed-7)
dobj(designed-7, something-8)
nsubj(had-10, you-9)
ccomp(thought-3, had-10)
det(purpose-12, a-11)
dobj(had-10, purpose-12)
dobj(had-10, function-14)
conj_and(purpose-12, function-14)
prep_in(purpose-12, mind-16)

(ROOT
  (FRAG
    (ADVP (RB So))
    (. .)))

root(ROOT-0, So-1)

(ROOT
  (SQ (VBZ Is)
    (NP (NN homosexuality))
    (ADJP (RB morally) (JJ wrong))
    (. ?)))

cop(wrong-4, Is-1)
nsubj(wrong-4, homosexuality-2)
advmod(wrong-4, morally-3)
root(ROOT-0, wrong-4)

(ROOT
  (S
    (INTJ (UH Well))
    (VP (VB check)
      (NP (DT the) (NNS results)))
    (. .)))

dep(check-2, Well-1)
root(ROOT-0, check-2)
det(results-4, the-3)
dobj(check-2, results-4)

(ROOT
  (S
    (NP (JJ Married) (NNS men))
    (VP (VBP live)
      (NP
        (ADJP
          (ADJP (JJR longer))
          (, ,)
          (ADJP (RBR healthier))
          (, ,)
          (ADJP (JJR happier))
          (CC and)
          (ADJP (JJ productive)))
        (NNS lives)))
    (. .)))

amod(men-2, Married-1)
nsubj(live-3, men-2)
root(ROOT-0, live-3)
amod(lives-11, longer-4)
conj_and(longer-4, healthier-6)
amod(lives-11, healthier-6)
conj_and(longer-4, happier-8)
amod(lives-11, happier-8)
conj_and(longer-4, productive-10)
amod(lives-11, productive-10)
dobj(live-3, lives-11)

(ROOT
  (SINV
    (S
      (NP (JJ Homosexual) (NNS men))
      (VP (VBP live)
        (NP
          (QP (NN half) (IN as) (JJ long)))))
    (, ,)
    (VP (VBP have)
      (NP
        (NP (JJ high) (NNS rates))
        (PP (IN of)
          (NP (NN drug)))))
    (NP
      (NP (NN use))
      (, ,)
      (NP
        (NP (JJ infectious) (NN disease))
        (CC and)
        (NP (NN suicide))))
    (. .)))

amod(men-2, Homosexual-1)
nsubj(live-3, men-2)
ccomp(have-8, live-3)
dobj(live-3, half-4)
quantmod(half-4, as-5)
quantmod(half-4, long-6)
root(ROOT-0, have-8)
amod(rates-10, high-9)
dobj(have-8, rates-10)
prep_of(rates-10, drug-12)
nsubj(have-8, use-13)
amod(disease-16, infectious-15)
appos(use-13, disease-16)
appos(use-13, suicide-18)
conj_and(disease-16, suicide-18)

(ROOT
  (S (CC But)
    (VP (VBP do) (RB n't)
      (VP (VB take)
        (NP (PRP$ my) (NN word))
        (PP (IN for)
          (NP (PRP it)))))
    (. .)))

cc(take-4, But-1)
aux(take-4, do-2)
neg(take-4, n't-3)
root(ROOT-0, take-4)
poss(word-6, my-5)
dobj(take-4, word-6)
prep_for(take-4, it-8)

(ROOT
  (S
    (VP (VB Check)
      (S
        (NP (DT the) (NNS results))
        (NP (PRP yourself)))
      (SBAR (IN so)
        (S
          (NP (PRP you))
          (VP (MD 'll)
            (VP (VB know)
              (SBAR
                (S
                  (NP (PRP I))
                  (VP (VBP 'm) (RB not)
                    (ADVP (RB just))
                    (VP (VBG making)
                      (NP (DT this))
                      (PRT (RP up)))))))))))
    (. .)))

root(ROOT-0, Check-1)
det(results-3, the-2)
nsubj(yourself-4, results-3)
xcomp(Check-1, yourself-4)
mark(know-8, so-5)
nsubj(know-8, you-6)
aux(know-8, 'll-7)
advcl(Check-1, know-8)
nsubj(making-13, I-9)
aux(making-13, 'm-10)
neg(making-13, not-11)
advmod(making-13, just-12)
ccomp(know-8, making-13)
dobj(making-13, this-14)
prt(making-13, up-15)

(ROOT
  (S
    (NP (NNP Final))
    (VP (VBD thought)
      (PP (IN for)
        (NP (PDT all) (DT those)))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (MD will)
            (VP (VB object)
              (SBAR (IN that)
                (S
                  (NP (PRP it))
                  (VP (VBZ is) (RB not)
                    (ADJP (JJ plain)
                      (SBAR
                        (S
                          (NP (PRP we))
                          (VP (VBD were)
                            (VP (VBN designed))))))))))))))
    (. .)))

nsubj(thought-2, Final-1)
root(ROOT-0, thought-2)
predet(those-5, all-4)
prep_for(thought-2, those-5)
nsubj(object-8, who-6)
aux(object-8, will-7)
ccomp(thought-2, object-8)
complm(plain-13, that-9)
nsubj(plain-13, it-10)
cop(plain-13, is-11)
neg(plain-13, not-12)
ccomp(object-8, plain-13)
nsubjpass(designed-16, we-14)
auxpass(designed-16, were-15)
dep(plain-13, designed-16)

(ROOT
  (S
    (VP (VB Consider)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP (NNP Richard) (NNP Dawkins))
          (VP (VBZ deals)
            (PP (IN with)
              (NP
                (NP (DT the) (NN reality))
                (PP (IN of)
                  (NP
                    (NP (NN design))
                    (PP (IN in)
                      (NP (NN biology)))))))))))
    (. .)))

root(ROOT-0, Consider-1)
advmod(deals-5, how-2)
nn(Dawkins-4, Richard-3)
nsubj(deals-5, Dawkins-4)
ccomp(Consider-1, deals-5)
det(reality-8, the-7)
prep_with(deals-5, reality-8)
prep_of(reality-8, design-10)
prep_in(design-10, biology-12)

(ROOT
  (S
    (NP (PRP He))
    (VP
      (VP (VBZ sees)
        (NP (PRP it)))
      (CC and)
      (VP (VBZ recognizes)
        (NP (PRP it)))
      (PRN (CC but)
        (SBAR (IN because)
          (S
            (PP (IN of)
              (NP (DT the) (NNS implications)))
            (NP (PRP he))
            (VP (VBZ has)
              (S
                (VP (TO to)
                  (VP (VB say)
                    (SBAR (IN that)
                      (S
                        (NP (PRP it))
                        (`` ``)
                        (VP (VBZ gives)
                          (NP
                            (NP (DT the) (NN appearance))
                            (PP (IN of)
                              (S
                                (VP (VBG having)
                                  (VP (VBN been)
                                    (VP (VBN designed)
                                      (PP (IN for)
                                        (NP (DT a) (NN purpose))))))))))
                        ('' ''))))))))))
      (SBAR
        (SBAR
          (S
            (NP (DT The) (NNP Blind) (NNP Watchmaker))
            (ADVP (RB Maybe))
            (NP (PRP I))
            (VP (VBP 'm)
              (NP (DT an) (NN idiot)))))
        (CC but)
        (SBAR
          (WHNP (WDT that))
          (S
            (ADVP (RB sure))
            (VP (VBZ sounds)
              (PP (IN like)
                (NP
                  (NP (DT a) (NN denial))
                  (PP (IN of)
                    (NP (DT the) (JJ obvious))))))))))
    (. .)))

nsubj(sees-2, He-1)
nsubj(recognizes-5, He-1)
root(ROOT-0, sees-2)
dobj(sees-2, it-3)
conj_and(sees-2, recognizes-5)
dobj(recognizes-5, it-6)
dep(has-13, but-7)
mark(has-13, because-8)
det(implications-11, the-10)
prep_of(has-13, implications-11)
nsubj(has-13, he-12)
xsubj(say-15, he-12)
parataxis(sees-2, has-13)
parataxis(recognizes-5, has-13)
aux(say-15, to-14)
xcomp(has-13, say-15)
complm(gives-19, that-16)
nsubj(gives-19, it-17)
ccomp(say-15, gives-19)
det(appearance-21, the-20)
dobj(gives-19, appearance-21)
aux(designed-25, having-23)
auxpass(designed-25, been-24)
prepc_of(appearance-21, designed-25)
det(purpose-28, a-27)
prep_for(designed-25, purpose-28)
det(Watchmaker-32, The-30)
nn(Watchmaker-32, Blind-31)
nsubj(idiot-37, Watchmaker-32)
advmod(idiot-37, Maybe-33)
nsubj(idiot-37, I-34)
cop(idiot-37, 'm-35)
det(idiot-37, an-36)
dep(sees-2, idiot-37)
nsubj(sounds-41, that-39)
advmod(sounds-41, sure-40)
dep(sees-2, sounds-41)
conj_but(idiot-37, sounds-41)
det(denial-44, a-43)
prep_like(sounds-41, denial-44)
det(obvious-47, the-46)
prep_of(denial-44, obvious-47)

(ROOT
  (S
    (PP (IN For)
      (NP
        (NP (NN example))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (NNP GM))
            (VP (VBZ designs)
              (NP (DT a) (NN car)))))))
    (NP (PRP they))
    (VP (VB design)
      (S
        (NP (PRP it))
        (VP (TO to)
          (VP (VB be)
            (VP (VBN driven)
              (PP
                (PP (IN on)
                  (NP (NNS roads)))
                (, ,) (RB not)
                (PP (IN across)
                  (NP (NNS lakes)))))))))
    (. .)))

tmod(designs-5, example-2)
prep_for(design-9, example-2)
advmod(designs-5, when-3)
nsubj(designs-5, GM-4)
dep(example-2, designs-5)
det(car-7, a-6)
dobj(designs-5, car-7)
nsubj(design-9, they-8)
root(ROOT-0, design-9)
nsubjpass(driven-13, it-10)
aux(driven-13, to-11)
auxpass(driven-13, be-12)
xcomp(design-9, driven-13)
prep_on(driven-13, roads-15)
neg(driven-13, not-17)
prep_across(driven-13, lakes-19)

(ROOT
  (SBARQ
    (WHNP (WP What) (RB else))
    (SQ (VBZ does)
      (NP (PRP it))
      (VP (VB mean)
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP you))
            (VP (VBP say)
              (SBAR
                (S
                  (NP (NN something))
                  (VP (VBZ gives)
                    (NP
                      (NP (DT the) (NN appearance))
                      (PP (IN of)))))))))))
    (. .)))

dobj(mean-5, What-1)
advmod(What-1, else-2)
aux(mean-5, does-3)
nsubj(mean-5, it-4)
root(ROOT-0, mean-5)
advmod(say-8, when-6)
nsubj(say-8, you-7)
advcl(mean-5, say-8)
nsubj(gives-10, something-9)
ccomp(say-8, gives-10)
det(appearance-12, the-11)
dobj(gives-10, appearance-12)
prep(appearance-12, of-13)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP mean)
        (SBAR
          (S
            (NP (PRP it))
            (ADVP (RB sure))
            (VP (VBZ looks)
              (NP (DT that) (NN way)))))))
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ 's) (RB not)))
    (. .)))

nsubj(mean-2, You-1)
root(ROOT-0, mean-2)
nsubj(looks-5, it-3)
advmod(looks-5, sure-4)
ccomp(mean-2, looks-5)
det(way-7, that-6)
dobj(looks-5, way-7)
nsubj('s-10, it-9)
conj_but(mean-2, 's-10)
neg('s-10, not-11)

(ROOT
  (SBARQ (CC And)
    (WHADVP (WRB why) (RB not))
    (SQ
      (NP (NNP Mr.))
      (VP (VBZ Dawkins)))
    (. ?)))

cc(Dawkins-5, And-1)
advmod(not-3, why-2)
advmod(Dawkins-5, not-3)
nsubj(Dawkins-5, Mr.-4)
root(ROOT-0, Dawkins-5)

(ROOT
  (FRAG
    (SBAR (IN because)
      (S
        (NP (PRP it))
        (VP (MD would)
          (VP (VB prove)
            (S
              (NP (PRP you))
              (ADJP (JJ wrong)))))))
    (. ?)))

mark(prove-4, because-1)
nsubj(prove-4, it-2)
aux(prove-4, would-3)
root(ROOT-0, prove-4)
nsubj(wrong-6, you-5)
xcomp(prove-4, wrong-6)

(ROOT
  (S
    (VP (VB Oh)
      (SBAR
        (WHADVP (WRB how)
          (ADJP (JJ prone)))
        (S
          (NP (PRP we))
          (VP (VBP are)
            (PP (TO to)
              (NP
                (NP (NN self) (NN deception))
                (CC and)
                (NP (NN self) (NN justification))))))))
    (. .)))

root(ROOT-0, Oh-1)
advmod(are-5, how-2)
dep(how-2, prone-3)
nsubj(are-5, we-4)
ccomp(Oh-1, are-5)
nn(deception-8, self-7)
prep_to(are-5, deception-8)
nn(justification-11, self-10)
prep_to(are-5, justification-11)
conj_and(deception-8, justification-11)

(ROOT
  (S (CC So)
    (PP (RB much) (IN for)
      (S
        (VP (VBG following)
          (SBAR
            (S
              (NP (DT the) (NN evidence))
              (VP (VBD were)
                (ADVP (RB ever))))))))
    (NP (PRP it))
    (VP (VBZ leads))
    (. .)))

cc(leads-10, So-1)
advmod(leads-10, much-2)
prepc_for(leads-10, following-4)
det(evidence-6, the-5)
nsubj(were-7, evidence-6)
ccomp(following-4, were-7)
advmod(were-7, ever-8)
nsubj(leads-10, it-9)
root(ROOT-0, leads-10)

(ROOT
  (S (CC And)
    (S
      (NP (PRP I))
      (VP (VBD thought)
        (SBAR
          (S
            (NP (DT the) (NN designer))
            (VP (VBD determined)
              (NP (DT the) (NN purpose)
                (CC and)
                (NN function)))))))
    (, ,) (RB not)
    (S
      (NP (DT the) (NN thing))
      (VP (VBD made)))
    (. .)))

cc(thought-3, And-1)
nsubj(thought-3, I-2)
root(ROOT-0, thought-3)
det(designer-5, the-4)
nsubj(determined-6, designer-5)
ccomp(thought-3, determined-6)
det(purpose-8, the-7)
dobj(determined-6, purpose-8)
dobj(determined-6, function-10)
conj_and(purpose-8, function-10)
neg(thought-3, not-12)
det(thing-14, the-13)
nsubj(made-15, thing-14)
ccomp(thought-3, made-15)

(ROOT
  (S
    (ADVP (RB Now))
    (NP (PRP you))
    (VP (MD could)
      (VP (VB attempt)
        (S
          (VP (TO to)
            (VP (VB drive)
              (NP (PRP$ your) (NN car))
              (PP (IN across)
                (NP (DT the) (NN lake)))
              (SBAR (IN because)
                (S
                  (NP (PRP you))
                  (VP (VBP think)
                    (SBAR
                      (S
                        (NP (PRP it))
                        (VP (VBZ 's)
                          (NP (DT a) (NN boat)))))))))))))
    (. .)))

advmod(attempt-4, Now-1)
nsubj(attempt-4, you-2)
xsubj(drive-6, you-2)
aux(attempt-4, could-3)
root(ROOT-0, attempt-4)
aux(drive-6, to-5)
xcomp(attempt-4, drive-6)
poss(car-8, your-7)
dobj(drive-6, car-8)
det(lake-11, the-10)
prep_across(drive-6, lake-11)
mark(think-14, because-12)
nsubj(think-14, you-13)
advcl(drive-6, think-14)
nsubj(boat-18, it-15)
cop(boat-18, 's-16)
det(boat-18, a-17)
ccomp(think-14, boat-18)

(ROOT
  (S (CC But)
    (NP (DT the) (NNS results))
    (VP (MD will)
      (ADVP (RB quickly))
      (VP (VB tell)
        (NP (PRP you))
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBD was) (RB not)
              (VP (VBN designed)
                (PP (IN for)
                  (NP (DT that) (NN purpose)))))))))
    (. .)))

cc(tell-6, But-1)
det(results-3, the-2)
nsubj(tell-6, results-3)
aux(tell-6, will-4)
advmod(tell-6, quickly-5)
root(ROOT-0, tell-6)
dobj(tell-6, you-7)
complm(designed-12, that-8)
nsubjpass(designed-12, it-9)
auxpass(designed-12, was-10)
neg(designed-12, not-11)
ccomp(tell-6, designed-12)
det(purpose-15, that-14)
prep_for(designed-12, purpose-15)

(ROOT
  (S
    (S
      (ADVP (RB Now))
      (ADVP (RB maybe))
      (NP (PRP I))
      (VP (VBP 'm)
        (VP (VBG being)
          (ADJP (RB very) (JJ naive))
          (ADVP (RB again)))))
    (CC but)
    (S
      (NP (PRP I))
      (VP (VBP think)
        (SBAR (IN that)
          (S
            (NP (JJ human) (NNS beings))
            (VP (VBP are)
              (NP
                (NP
                  (ADJP (RB very) (JJ complex))
                  (NNS things))
                (, ,)
                (ADJP
                  (ADJP (RB vastly) (RBR more) (JJ complex))
                  (SBAR (IN than)
                    (S
                      (NP (PRP we))
                      (VP (VBP know)))))))))))
    (. .)))

advmod(naive-7, Now-1)
advmod(naive-7, maybe-2)
nsubj(naive-7, I-3)
aux(naive-7, 'm-4)
cop(naive-7, being-5)
advmod(naive-7, very-6)
root(ROOT-0, naive-7)
advmod(naive-7, again-8)
nsubj(think-11, I-10)
conj_but(naive-7, think-11)
complm(things-18, that-12)
amod(beings-14, human-13)
nsubj(things-18, beings-14)
cop(things-18, are-15)
advmod(complex-17, very-16)
amod(things-18, complex-17)
ccomp(think-11, things-18)
advmod(complex-22, vastly-20)
advmod(complex-22, more-21)
amod(things-18, complex-22)
mark(know-25, than-23)
nsubj(know-25, we-24)
dep(complex-22, know-25)

(ROOT
  (S (IN So)
    (NP (PRP it))
    (VP (MD would)
      (VP (VB seem)
        (PP (TO to)
          (NP (PRP me)))
        (PP (IN from)
          (NP (DT an) (NN engineering) (NN perspective)))
        (SBAR (IN that)
          (S
            (SBAR (RB just)
              (S
                (S
                  (VP (TO to)
                    (VP (VB design)
                      (CC and)
                      (VB make)
                      (NP (DT a) (JJ human) (NN function)))))
                (VP (MD would)
                  (VP (VB require)
                    (NP
                      (NP (DT an) (NN intelligence))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (VBZ is)
                            (PP (IN beyond)
                              (NP (NN anything)))))))))))
            (NP (PRP we))
            (VP (MD can)
              (VP (VB conceive)))))))
    (. .)))

dep(seem-4, So-1)
nsubj(seem-4, it-2)
aux(seem-4, would-3)
root(ROOT-0, seem-4)
prep_to(seem-4, me-6)
det(perspective-10, an-8)
nn(perspective-10, engineering-9)
prep_from(seem-4, perspective-10)
complm(conceive-30, that-11)
advmod(require-21, just-12)
aux(design-14, to-13)
csubj(require-21, design-14)
conj_and(design-14, make-16)
csubj(require-21, make-16)
det(function-19, a-17)
amod(function-19, human-18)
dobj(design-14, function-19)
aux(require-21, would-20)
dep(conceive-30, require-21)
det(intelligence-23, an-22)
dobj(require-21, intelligence-23)
nsubj(is-25, intelligence-23)
rcmod(intelligence-23, is-25)
prep_beyond(is-25, anything-27)
nsubj(conceive-30, we-28)
aux(conceive-30, can-29)
ccomp(seem-4, conceive-30)

(ROOT
  (S
    (VP
      (ADVP (RB Just))
      (VB think)
      (PP (IN for)
        (NP (DT a) (NN minute)))
      (SBAR
        (WHNP (WP what))
        (S
          (NP (PRP you))
          (VP (MD would)
            (VP (VB have)
              (S
                (VP (TO to)
                  (VP (VB know)
                    (PP (IN about)
                      (NP (NN chemistry)))))))))))
    (. .)))

advmod(think-2, Just-1)
root(ROOT-0, think-2)
det(minute-5, a-4)
prep_for(think-2, minute-5)
dobj(have-9, what-6)
nsubj(have-9, you-7)
xsubj(know-11, you-7)
aux(have-9, would-8)
ccomp(think-2, have-9)
aux(know-11, to-10)
xcomp(have-9, know-11)
prep_about(know-11, chemistry-13)

