(ROOT
  (S
    (S
      (S
        (NP (PRP I))
        (VP (VBP do) (RB not)
          (VP (VB mean)
            (S
              (VP (TO to)
                (VP (VB be)
                  (VP (VBN unkind))))))))
      (, ,)
      (CC but)
      (S
        (NP (NN homosexuality))
        (VP (VBZ is) (RB not)
          (NP (DT a) (NN survival) (NN characteristic)))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (NP (DT an) (JJ evolutionary) (JJ dead) (NN end)))
    (. .)))

nsubj(mean-4, I-1)
xsubj(unkind-7, I-1)
aux(mean-4, do-2)
neg(mean-4, not-3)
ccomp(end-22, mean-4)
aux(unkind-7, to-5)
auxpass(unkind-7, be-6)
xcomp(mean-4, unkind-7)
nsubj(characteristic-15, homosexuality-10)
cop(characteristic-15, is-11)
neg(characteristic-15, not-12)
det(characteristic-15, a-13)
nn(characteristic-15, survival-14)
conj_but(mean-4, characteristic-15)
ccomp(end-22, characteristic-15)
nsubj(end-22, it-17)
cop(end-22, 's-18)
det(end-22, an-19)
amod(end-22, evolutionary-20)
amod(end-22, dead-21)
root(ROOT-0, end-22)

(ROOT
  (S
    (ADVP (RB Actually))
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP (NN evidence))
        (PP (TO to)
          (NP (DT the) (NN contrary)))))
    (. .)))

advmod(is-3, Actually-1)
expl(is-3, there-2)
root(ROOT-0, is-3)
nsubj(is-3, evidence-4)
det(contrary-7, the-6)
prep_to(evidence-4, contrary-7)

(ROOT
  (S
    (NP
      (NP (JJ Male) (NNS penguins))
      (VP (VBG raising)
        (NP (DT a) (NN chick))))
    (ADVP (RB together))
    (VP (VBP are)
      (NP
        (NP (DT a) (JJ good) (NN example))
        (PP (IN of)
          (SBAR
            (WHADVP (WRB how))
            (S
              (NP (JJ homosexual) (NNS parings))
              (VP (MD can)
                (VP (VB promote)
                  (NP
                    (NP (DT the) (NN survival))
                    (PP (IN of)
                      (NP (DT the) (NN species)))))))))))
    (. .)))

amod(penguins-2, Male-1)
nsubj(example-10, penguins-2)
partmod(penguins-2, raising-3)
det(chick-5, a-4)
dobj(raising-3, chick-5)
advmod(example-10, together-6)
cop(example-10, are-7)
det(example-10, a-8)
amod(example-10, good-9)
root(ROOT-0, example-10)
advmod(promote-16, how-12)
amod(parings-14, homosexual-13)
nsubj(promote-16, parings-14)
aux(promote-16, can-15)
prepc_of(example-10, promote-16)
det(survival-18, the-17)
dobj(promote-16, survival-18)
det(species-21, the-20)
prep_of(survival-18, species-21)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ lends)
      (ADJP (JJ credence)
        (PP (TO to)
          (NP (DT the) (NN idea))))
      (SBAR (IN that)
        (S
          (NP (NNS homosexuals))
          (VP (VBP help)
            (SBAR (IN with)
              (S
                (NP (NN population) (NN survival))
                (VP (VBP buy)
                  (S
                    (VP (VBG providing)
                      (NP
                        (NP (JJ additional) (NNS caretakers))
                        (PP (IN for)
                          (NP (DT the) (JJ young) (NN while)))
                        (S (RB not)
                          (VP (VBG contributing)
                            (NP
                              (NP (JJ young))
                              (PP (IN of)
                                (NP (PRP$ their) (JJ own))))))))))))))))
    (. .)))

nsubj(lends-2, This-1)
root(ROOT-0, lends-2)
acomp(lends-2, credence-3)
det(idea-6, the-5)
prep_to(credence-3, idea-6)
complm(help-9, that-7)
nsubj(help-9, homosexuals-8)
ccomp(lends-2, help-9)
mark(buy-13, with-10)
nn(survival-12, population-11)
nsubj(buy-13, survival-12)
advcl(help-9, buy-13)
xcomp(buy-13, providing-14)
amod(caretakers-16, additional-15)
dobj(providing-14, caretakers-16)
det(while-20, the-18)
amod(while-20, young-19)
prep_for(caretakers-16, while-20)
neg(contributing-22, not-21)
dep(caretakers-16, contributing-22)
dobj(contributing-22, young-23)
poss(own-26, their-25)
prep_of(young-23, own-26)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can)
      (VP (VB argue)
        (SBAR
          (SBAR (IN that)
            (S
              (NP
                (NP (JJ other) (NNS alternatives))
                (PP (TO to)
                  (NP (DT the) (JJ traditional) (NN family) (NN unit))))
              (VP (VBP are)
                (ADVP (RB equally))
                (NP
                  (NP (NN contra) (NN survival))
                  (, ,)
                  (NP
                    (NP (RB perhaps) (RB even))
                    (PP (IN with)
                      (NP (DT some) (JJ small) (NN merit))))))))
          (, ,)
          (CC but)
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ does) (RB n't)
                (VP (VB change)
                  (NP (DT the) (NN fact))
                  (SBAR (IN that)
                    (S
                      (NP (DT the) (JJ traditional) (NN family) (NN unit))
                      (VP (VBZ provides)
                        (NP (DT the) (JJS best) (JJ possible) (NNS benefits))
                        (PP (TO to)
                          (NP (NNS children)))))))))))))
    (. .)))

nsubj(argue-3, You-1)
aux(argue-3, can-2)
root(ROOT-0, argue-3)
complm(survival-15, that-4)
amod(alternatives-6, other-5)
nsubj(survival-15, alternatives-6)
det(unit-11, the-8)
amod(unit-11, traditional-9)
nn(unit-11, family-10)
prep_to(alternatives-6, unit-11)
cop(survival-15, are-12)
advmod(survival-15, equally-13)
nn(survival-15, contra-14)
ccomp(argue-3, survival-15)
advmod(even-18, perhaps-17)
appos(survival-15, even-18)
det(merit-22, some-20)
amod(merit-22, small-21)
prep_with(even-18, merit-22)
nsubj(change-28, that-25)
aux(change-28, does-26)
neg(change-28, n't-27)
ccomp(argue-3, change-28)
conj_but(survival-15, change-28)
det(fact-30, the-29)
dobj(change-28, fact-30)
complm(provides-36, that-31)
det(unit-35, the-32)
amod(unit-35, traditional-33)
nn(unit-35, family-34)
nsubj(provides-36, unit-35)
ccomp(change-28, provides-36)
det(benefits-40, the-37)
amod(benefits-40, best-38)
amod(benefits-40, possible-39)
dobj(provides-36, benefits-40)
prep_to(provides-36, children-42)

(ROOT
  (S
    (NP (DT That) (NN argument))
    (VP (VBZ has)
      (VP (VBN been)
        (VP (VBN made)
          (ADVP (RB before)
            (CC and)
            (RB as))
          (SBAR (IN before)
            (S
              (NP (PRP I))
              (VP (VBP have)
                (S
                  (VP (TO to)
                    (VP (VB ask)
                      (NP
                        (NP (WP what) (NN evidence))
                        (SBAR
                          (S
                            (NP (PRP you))
                            (VP (VBP base)
                              (NP (DT that) (NN assumption))
                              (PRT (RP on)))))))))))))))
    (. ?)))

det(argument-2, That-1)
nsubjpass(made-5, argument-2)
aux(made-5, has-3)
auxpass(made-5, been-4)
root(ROOT-0, made-5)
advmod(made-5, before-6)
advmod(made-5, as-8)
conj_and(before-6, as-8)
mark(have-11, before-9)
nsubj(have-11, I-10)
xsubj(ask-13, I-10)
advcl(made-5, have-11)
aux(ask-13, to-12)
xcomp(have-11, ask-13)
dep(evidence-15, what-14)
dobj(ask-13, evidence-15)
nsubj(base-17, you-16)
rcmod(evidence-15, base-17)
det(assumption-19, that-18)
dobj(base-17, assumption-19)
prt(base-17, on-20)

(ROOT
  (S
    (S
      (ADVP (RB Furthermore))
      (NP
        (NP (NNS children))
        (VP (VBN adopted)
          (PP (IN by)
            (NP (NNS homosexuals)))))
      (VP (VBP are)
        (ADVP (RB already))
        (PP (IN without)
          (NP (DT a) (JJ traditional) (NN family) (NN unit)))))
    (, ,)
    (CC and)
    (IN so)
    (S
      (NP
        (NP (DT all))
        (SBAR
          (WHNP (WDT that))
          (S
            (ADVP (RB really))
            (VP (VBZ needs)
              (S
                (VP (TO to)
                  (VP (VB be)
                    (VP (VBN shown)))))))))
      (VP (VBZ is)
        (SBAR (IN that)
          (S
            (S
              (VP (VBG being)
                (VP (VBN raised)
                  (PP (IN by)
                    (NP (DT a) (JJ homosexual) (NN couple))))))
            (VP (VBZ is)
              (ADVP (RBR better))
              (VP
                (ADVP (RB then))
                (VBG being)
                (VP (VBN left)
                  (PP (IN in)
                    (NP (JJ foster) (NN care))))))))))
    (. .)))

advmod(are-6, Furthermore-1)
nsubj(are-6, children-2)
partmod(children-2, adopted-3)
agent(adopted-3, homosexuals-5)
root(ROOT-0, are-6)
advmod(are-6, already-7)
det(unit-12, a-9)
amod(unit-12, traditional-10)
nn(unit-12, family-11)
prep_without(are-6, unit-12)
conj_and(are-6, so-15)
nsubj(needs-19, all-16)
nsubj(is-23, all-16)
advmod(needs-19, really-18)
rcmod(all-16, needs-19)
aux(shown-22, to-20)
auxpass(shown-22, be-21)
xcomp(needs-19, shown-22)
ccomp(are-6, is-23)
complm(left-35, that-24)
auxpass(raised-26, being-25)
csubjpass(left-35, raised-26)
det(couple-30, a-28)
amod(couple-30, homosexual-29)
agent(raised-26, couple-30)
aux(left-35, is-31)
advmod(left-35, better-32)
advmod(left-35, then-33)
auxpass(left-35, being-34)
ccomp(is-23, left-35)
amod(care-38, foster-37)
prep_in(left-35, care-38)

(ROOT
  (S
    (S
      (NP
        (NP (DT The) (JJ big) (NN difference))
        (PP (IN between)
          (NP
            (NP (DT a) (JJ pet) (NN kitten))
            (CC and)
            (NP (DT a) (JJ human) (NN child)))))
      (VP (VBZ is)
        (PP (IN with)
          (NP (DT the) (NN kitten)))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are) (RB not)
      (ADJP (JJ responsible)
        (PP (IN for)
          (S
            (VP (VBG teaching)
              (S
                (NP (PRP it))
                (NP
                  (NP (NN everything))
                  (SBAR
                    (S
                      (NP (PRP it))
                      (VP (MD will)
                        (VP (VB need)
                          (S
                            (VP (TO to)
                              (VP (VB know)
                                (S
                                  (VP (TO to)
                                    (VP (VB survive)
                                      (PP (IN for)
                                        (NP (DT the) (CD 50) (NN plus) (NNS years)))))))))))))
                  (SBAR
                    (S
                      (NP (PRP it))
                      (VP (MD will)
                        (VP (VB live)
                          (PP (IN after)
                            (S
                              (VP (VBG leaving)
                                (NP (PRP$ your) (NN care))))))))))))))))
    (. .)))

det(difference-3, The-1)
amod(difference-3, big-2)
nsubj(is-12, difference-3)
det(kitten-7, a-5)
amod(kitten-7, pet-6)
prep_between(difference-3, kitten-7)
det(child-11, a-9)
amod(child-11, human-10)
prep_between(difference-3, child-11)
conj_and(kitten-7, child-11)
ccomp(responsible-20, is-12)
det(kitten-15, the-14)
prep_with(is-12, kitten-15)
nsubj(responsible-20, you-17)
cop(responsible-20, are-18)
neg(responsible-20, not-19)
root(ROOT-0, responsible-20)
prepc_for(responsible-20, teaching-22)
nsubj(everything-24, it-23)
xcomp(teaching-22, everything-24)
dobj(need-27, everything-24)
dobj(live-39, everything-24)
nsubj(need-27, it-25)
xsubj(know-29, it-25)
aux(need-27, will-26)
rcmod(everything-24, need-27)
aux(know-29, to-28)
xcomp(need-27, know-29)
aux(survive-31, to-30)
xcomp(know-29, survive-31)
det(years-36, the-33)
num(years-36, 50-34)
nn(years-36, plus-35)
prep_for(survive-31, years-36)
nsubj(live-39, it-37)
aux(live-39, will-38)
rcmod(everything-24, live-39)
prepc_after(live-39, leaving-41)
poss(care-43, your-42)
dobj(leaving-41, care-43)

(ROOT
  (S (IN So)
    (NP (NNS couples))
    (VP (VBP need)
      (S
        (VP (TO to)
          (VP (VB be)
            (ADJP (JJ careful))
            (SBAR
              (WHADVP (WRB when))
              (S
                (VP (VBG considering)
                  (S
                    (VP (VBG having)
                      (NP (NNS children)))))))))))
    (. ?)))

dep(need-3, So-1)
nsubj(need-3, couples-2)
xsubj(careful-6, couples-2)
root(ROOT-0, need-3)
aux(careful-6, to-4)
cop(careful-6, be-5)
xcomp(need-3, careful-6)
advmod(considering-8, when-7)
advcl(careful-6, considering-8)
xcomp(considering-8, having-9)
dobj(having-9, children-10)

(ROOT
  (S
    (NP
      (NP (DT No) (NN part))
      (PP (IN of)
        (NP (DT this) (JJ entire) (NN rant))))
    (VP (VBZ applies)
      (PP (RB exclusively) (TO to)
        (NP
          (NP (NNS homosexuals))
          (PRN (-LRB- -LRB-)
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (VBZ is)
                  (S
                    (VP (TO to)
                      (VP (VB say)
                        (SBAR
                          (S
                            (NP (PRP it))
                            (VP (VBZ is)
                              (NP
                                (NP (DT a) (NN statement))
                                (SBAR
                                  (WHNP (WDT that))
                                  (S
                                    (VP (MD could)
                                      (VP (VB be)
                                        (VP (VBN made)
                                          (PP (TO to)
                                            (NP
                                              (NP (DT any) (NN couple))
                                              (ADVP (RB regardless)
                                                (PP (IN of)
                                                  (NP (DT the) (NNS couples) (NN gender)))))))))))))))))))))
            (-RRB- -RRB-)))))
    (. .)))

det(part-2, No-1)
nsubj(applies-7, part-2)
det(rant-6, this-4)
amod(rant-6, entire-5)
prep_of(part-2, rant-6)
root(ROOT-0, applies-7)
advmod(applies-7, exclusively-8)
prep_to(applies-7, homosexuals-10)
nsubj(is-13, which-12)
dep(homosexuals-10, is-13)
aux(say-15, to-14)
xcomp(is-13, say-15)
nsubj(statement-19, it-16)
cop(statement-19, is-17)
det(statement-19, a-18)
ccomp(say-15, statement-19)
nsubjpass(made-23, statement-19)
aux(made-23, could-21)
auxpass(made-23, be-22)
rcmod(statement-19, made-23)
det(couple-26, any-25)
prep_to(made-23, couple-26)
det(gender-31, the-29)
nn(gender-31, couples-30)
prep_regardless_of(couple-26, gender-31)

(ROOT
  (S
    (NP
      (NP (DT The) (NN moment))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP say)
            (SBAR
              (S
                (NP (PRP you))
                (VP (MD should)
                  (VP (VB be)
                    (VP (VBN allowed)
                      (S
                        (VP (TO to)
                          (VP (VB impose)
                            (NP (PRP$ your) (NN will))
                            (PP (IN on)
                              (NP (DT another)))))))))))))))
    (, ,)
    (NP (PRP you))
    (VP (MD will)
      (VP (VB fnd)
        (NP (PRP me))
        (PP (IN in)
          (NP (JJ adament) (NN opposition)))
        (PP (TO to)
          (NP (PRP$ your) (NN position)))))
    (. .)))

det(moment-2, The-1)
nsubj(fnd-18, moment-2)
nsubj(say-4, you-3)
rcmod(moment-2, say-4)
nsubjpass(allowed-8, you-5)
aux(allowed-8, should-6)
auxpass(allowed-8, be-7)
ccomp(say-4, allowed-8)
aux(impose-10, to-9)
xcomp(allowed-8, impose-10)
poss(will-12, your-11)
dobj(impose-10, will-12)
prep_on(impose-10, another-14)
nsubj(fnd-18, you-16)
aux(fnd-18, will-17)
root(ROOT-0, fnd-18)
dobj(fnd-18, me-19)
amod(opposition-22, adament-21)
prep_in(fnd-18, opposition-22)
poss(position-25, your-24)
prep_to(fnd-18, position-25)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (VBZ is)
      (NP
        (NP (DT this) (JJ imposing) (NN anyone))
        (SBAR
          (S
            (NP (PRP s))
            (VP (MD will)
              (PP (IN on)
                (NP (PRP you))))))))
    (. ?)))

advmod(is-2, How-1)
root(ROOT-0, is-2)
det(anyone-5, this-3)
amod(anyone-5, imposing-4)
nsubj(is-2, anyone-5)
dobj(will-7, anyone-5)
nsubj(will-7, s-6)
rcmod(anyone-5, will-7)
prep_on(will-7, you-9)

(ROOT
  (S
    (VP
      (VP (VB Do)
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (VBP like)
              (ADVP
                (ADVP (RB as) (RB long))
                (SBAR (IN as)
                  (S
                    (NP (PRP you))
                    (VP (VBP do)
                      (S
                        (NP (PRP me))
                        (NP
                          (NP (DT no) (NN harm))
                          (PP (IN in)
                            (NP (DT the) (NN process)))))))))))))
      (, ,)
      (CC and)
      (VP (VB leave)
        (NP (NNS children))
        (ADVP (RB alone))))
    (. .)))

root(ROOT-0, Do-1)
dobj(like-4, what-2)
nsubj(like-4, you-3)
ccomp(Do-1, like-4)
advmod(long-6, as-5)
advmod(like-4, long-6)
mark(do-9, as-7)
nsubj(do-9, you-8)
ccomp(long-6, do-9)
nsubj(harm-12, me-10)
det(harm-12, no-11)
xcomp(do-9, harm-12)
det(process-15, the-14)
prep_in(harm-12, process-15)
conj_and(Do-1, leave-18)
dobj(leave-18, children-19)
advmod(leave-18, alone-20)

(ROOT
  (S (IN So)
    (NP (NNS children))
    (VP (MD should) (RB not)
      (VP (VB be)
        (VP (VBN placed)
          (PP (IN in)
            (NP
              (ADJP (RB potentially) (JJ loving))
              (NNS homes))))))
    (. ?)))

dep(placed-6, So-1)
nsubjpass(placed-6, children-2)
aux(placed-6, should-3)
neg(placed-6, not-4)
auxpass(placed-6, be-5)
root(ROOT-0, placed-6)
advmod(loving-9, potentially-8)
amod(homes-10, loving-9)
prep_in(placed-6, homes-10)

