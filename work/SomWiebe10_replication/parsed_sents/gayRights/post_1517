(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB mean)
        (PP (IN by)
          (NP (NNP statistically)))))
    (. ?)))

dobj(mean-4, What-1)
aux(mean-4, do-2)
nsubj(mean-4, you-3)
root(ROOT-0, mean-4)
prep_by(mean-4, statistically-6)

(ROOT
  (SQ
    (VP (VB Are)
      (S
        (NP (PRP you))
        (VP (VBG saying)
          (SBAR
            (S
              (NP (EX there))
              (VP (VBZ 's)
                (NP (JJ statistical) (NN evidence))))))))
    (. ?)))

root(ROOT-0, Are-1)
nsubj(saying-3, you-2)
dep(Are-1, saying-3)
expl('s-5, there-4)
ccomp(saying-3, 's-5)
amod(evidence-7, statistical-6)
nsubj('s-5, evidence-7)

(ROOT
  (SQ (VBD Did)
    (NP (PRP you))
    (VP (VB misconstrue)
      (NP (PRP$ my) (NN argument)))
    (. ?)))

aux(misconstrue-3, Did-1)
nsubj(misconstrue-3, you-2)
root(ROOT-0, misconstrue-3)
poss(argument-5, my-4)
dobj(misconstrue-3, argument-5)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBD said)
        (SBAR (IN if)
          (S
            (NP (PRP you))
            (VP (VBP 're)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB get)
                      (ADJP (JJ pregnant))
                      (PP (IN by)
                        (NP (NN accident))))))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP 're)
      (ADJP (RBR more) (JJ likely)
        (S
          (VP (TO to)
            (VP (VB raise)
              (NP
                (NP (DT a) (NN child))
                (SBAR
                  (S
                    (NP (PRP you))
                    (VP (VBP do) (RB not)
                      (VP (VB want)))))))))))
    (. .)))

nsubj(said-2, I-1)
ccomp(likely-16, said-2)
mark(able-6, if-3)
nsubj(able-6, you-4)
cop(able-6, 're-5)
advcl(said-2, able-6)
aux(pregnant-9, to-7)
dep(pregnant-9, get-8)
xcomp(able-6, pregnant-9)
prep_by(pregnant-9, accident-11)
nsubj(likely-16, you-13)
cop(likely-16, 're-14)
advmod(likely-16, more-15)
root(ROOT-0, likely-16)
aux(raise-18, to-17)
xcomp(likely-16, raise-18)
det(child-20, a-19)
dobj(raise-18, child-20)
dobj(want-24, child-20)
nsubj(want-24, you-21)
aux(want-24, do-22)
neg(want-24, not-23)
rcmod(child-20, want-24)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP adopt))))
    (, ,)
    (NP (PRP you))
    (VP (VBP 're)
      (ADJP (RBR more) (JJ likely)
        (S
          (VP (TO to)
            (VP
              (ADVP (RB actually))
              (VB want)
              (NP (DT the) (NN child)))))))
    (. .)))

mark(adopt-3, If-1)
nsubj(adopt-3, you-2)
advcl(likely-8, adopt-3)
nsubj(likely-8, you-5)
cop(likely-8, 're-6)
advmod(likely-8, more-7)
root(ROOT-0, likely-8)
aux(want-11, to-9)
advmod(want-11, actually-10)
xcomp(likely-8, want-11)
det(child-13, the-12)
dobj(want-11, child-13)

(ROOT
  (SBARQ
    (WHNP
      (WHADJP (WRB How) (JJ many))
      (JJ adopted) (NNS children))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB know)
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBD resented)
              (S
                (VP (VBG being)
                  (VP (VBN adopted)))))))))
    (. ?)))

advmod(many-2, How-1)
amod(children-4, many-2)
amod(children-4, adopted-3)
dobj(know-7, children-4)
aux(know-7, do-5)
nsubj(know-7, you-6)
root(ROOT-0, know-7)
nsubj(resented-9, who-8)
ccomp(know-7, resented-9)
auxpass(adopted-11, being-10)
xcomp(resented-9, adopted-11)

(ROOT
  (S
    (PP (IN For)
      (NP (PRP me)))
    (, ,)
    (VP (VB zero))
    (. .)))

prep_for(zero-4, me-2)
root(ROOT-0, zero-4)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP$ your) (JJ whole) (NN argument))
          (VP (VBZ is)
            (PP (IN on)
              (NP
                (ADJP (RB very) (JJ shaky))
                (NN ground)))))))
    (. .)))

nsubj(think-2, I-1)
root(ROOT-0, think-2)
poss(argument-5, your-3)
amod(argument-5, whole-4)
nsubj(is-6, argument-5)
ccomp(think-2, is-6)
advmod(shaky-9, very-8)
amod(ground-10, shaky-9)
prep_on(is-6, ground-10)

