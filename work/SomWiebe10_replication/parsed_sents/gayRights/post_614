(ROOT
  (S
    (NP
      (NP (DT The) (NN law))
      (PP (IN of)
        (NP (DT the) (JJ old) (NN testament))))
    (VP (VBZ is) (RB not)
      (ADJP (JJ valid))
      (ADVP (RB anymore)))
    (. .)))

det(law-2, The-1)
nsubj(valid-9, law-2)
det(testament-6, the-4)
amod(testament-6, old-5)
prep_of(law-2, testament-6)
cop(valid-9, is-7)
neg(valid-9, not-8)
root(ROOT-0, valid-9)
advmod(valid-9, anymore-10)

(ROOT
  (S
    (NP (DT No) (JJR longer))
    (VP (VBZ is)
      (S
        (NP (PRP it))
        (VP (TO to)
          (VP (VB be)
            (NP
              (NP (NN part))
              (PP (IN of)
                (NP (NN society)))
              (S
                (VP (TO to)
                  (VP
                    (VP (VB kill)
                      (NP (NNS homosexuals)))
                    (, ,)
                    (VP (VB kill)
                      (NP (NNS adulterers)))
                    (, ,)
                    (VP (VB kill)
                      (NP
                        (NP (NNS children))
                        (PP (IN for)
                          (NP (VBG dishonoring) (NNS parents)))))))))))))
    (. .)))

det(longer-2, No-1)
nsubj(is-3, longer-2)
root(ROOT-0, is-3)
nsubj(part-7, it-4)
aux(part-7, to-5)
cop(part-7, be-6)
xcomp(is-3, part-7)
prep_of(part-7, society-9)
aux(kill-11, to-10)
infmod(part-7, kill-11)
dobj(kill-11, homosexuals-12)
dep(kill-11, kill-14)
dobj(kill-14, adulterers-15)
dep(kill-11, kill-17)
dobj(kill-17, children-18)
amod(parents-21, dishonoring-20)
prep_for(children-18, parents-21)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP have)
      (VP (VBN found)
        (SBAR (IN that)
          (S
            (NP (NNP Libery))
            (VP
              (ADVP (RBS best))
              (VBZ reflects)
              (NP
                (NP (DT the) (NN life))
                (PP (VBN given)
                  (PP (TO to)
                    (NP (PRP us)))))
              (, ,)
              (S
                (VP (TO to)
                  (VP (VB live)
                    (PP (IN in)
                      (NP (DT that)))))))))))
    (. .)))

nsubj(found-3, We-1)
aux(found-3, have-2)
root(ROOT-0, found-3)
complm(reflects-7, that-4)
nsubj(reflects-7, Libery-5)
xsubj(live-15, Libery-5)
advmod(reflects-7, best-6)
ccomp(found-3, reflects-7)
det(life-9, the-8)
dobj(reflects-7, life-9)
prep(life-9, given-10)
pcomp(given-10, to-11)
prep_to(given-10, us-12)
aux(live-15, to-14)
xcomp(reflects-7, live-15)
prep_in(live-15, that-17)

(ROOT
  (S
    (NP (NNP Judgement))
    (VP (VBZ is)
      (PP (IN for)
        (S
          (VP (VBG observing)
            (NP (NN life))
            (S
              (VP (TO to)
                (VP (VB make)
                  (NP (NNS decisions))
                  (PP (IN on)
                    (NP (NN survival) (, ,) (NN pleasure) (, ,) (NN happiness))))))))))
    (. .)))

nsubj(is-2, Judgement-1)
root(ROOT-0, is-2)
prepc_for(is-2, observing-4)
dobj(observing-4, life-5)
aux(make-7, to-6)
xcomp(observing-4, make-7)
dobj(make-7, decisions-8)
nn(happiness-14, survival-10)
dep(happiness-14, pleasure-12)
prep_on(make-7, happiness-14)

(ROOT
  (S
    (S
      (NP (DT Each))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB make)
              (NP (DT these) (NNS decisions))
              (PP (IN upon)
                (NP
                  (NP (DT the) (NN reflection))
                  (PP (IN of)
                    (NP (PRP$ his) (JJ own) (NN concience))))))))))
    (, ,)
    (CC and)
    (S
      (VP (VBG living)
        (ADJP (JJ true)
          (PP (TO to)
            (NP (DT that))))))
    (. .)))

nsubj(is-2, Each-1)
xsubj(make-4, Each-1)
nsubj(living-16, Each-1)
root(ROOT-0, is-2)
aux(make-4, to-3)
xcomp(is-2, make-4)
det(decisions-6, these-5)
dobj(make-4, decisions-6)
det(reflection-9, the-8)
prep_upon(make-4, reflection-9)
poss(concience-13, his-11)
amod(concience-13, own-12)
prep_of(reflection-9, concience-13)
conj_and(is-2, living-16)
acomp(living-16, true-17)
prep_to(true-17, that-19)

(ROOT
  (S
    (VP (VB Thank)
      (NP (PRP you))
      (PP (IN for)
        (NP (PRP$ your) (NNS thoughts))))
    (. .)))

root(ROOT-0, Thank-1)
dobj(Thank-1, you-2)
poss(thoughts-5, your-4)
prep_for(Thank-1, thoughts-5)

