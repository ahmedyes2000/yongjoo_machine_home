(ROOT
  (S
    (NP (PRP You))
    (VP (MD ca) (RB n't)
      (VP (VB define)
        (NP (NN anything))
        (PP (IN by)
          (S
            (VP (VBG saying) (, ,) (`` ``)
              (S
                (NP (PRP It))
                (VP (VBZ 's)
                  (SBAR
                    (WHNP (WDT whatever))
                    (S
                      (NP (NNP God\/Zeus\/Odin) (NNP \/) (NNP Charlie))
                      (VP (VBZ says)
                        (SBAR
                          (S
                            (NP (PRP it))
                            (VP (VBZ is))))))))))))))
    (. .) ('' '')))

nsubj(define-4, You-1)
aux(define-4, ca-2)
neg(define-4, n't-3)
root(ROOT-0, define-4)
dobj(define-4, anything-5)
prepc_by(define-4, saying-7)
nsubj('s-11, It-10)
ccomp(saying-7, 's-11)
dep(says-16, whatever-12)
dobj(is-18, whatever-12)
nn(Charlie-15, God\/Zeus\/Odin-13)
nn(Charlie-15, \/-14)
nsubj(says-16, Charlie-15)
ccomp('s-11, says-16)
nsubj(is-18, it-17)
ccomp(says-16, is-18)

(ROOT
  (S
    (ADVP (RB Well))
    (, ,)
    (SBAR (RB not) (IN if)
      (S
        (NP (PRP you))
        (VP (VBP expect)
          (S
            (VP (TO to)
              (VP (VB be)
                (VP (VBN taken)
                  (ADVP (RB seriously)))))))))
    (, ,)
    (VP (VBZ anyway))
    (. .)))

advmod(anyway-12, Well-1)
dep(expect-6, not-3)
dep(expect-6, if-4)
nsubj(expect-6, you-5)
xsubj(taken-9, you-5)
dep(anyway-12, expect-6)
aux(taken-9, to-7)
auxpass(taken-9, be-8)
xcomp(expect-6, taken-9)
advmod(taken-9, seriously-10)
root(ROOT-0, anyway-12)

(ROOT
  (SBARQ
    (WHADVP (WRB When))
    (SQ (VBZ is)
      (NP
        (NP (DT an) (NN act))
        (NP
          (NP (DT a) (`` ``) (NN sin) ('' ''))
          (, ,)
          (CC and)
          (NP (NNP why)))))
    (. ?)))

advmod(is-2, When-1)
root(ROOT-0, is-2)
det(act-4, an-3)
nsubj(is-2, act-4)
det(sin-7, a-5)
dep(act-4, sin-7)
dep(act-4, why-11)
conj_and(sin-7, why-11)

(ROOT
  (SQ (NNP Does)
    (NP (NN someone))
    (VP (VB have)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP (VBN harmed))))))
    (. ?)))

dep(have-3, Does-1)
nsubj(have-3, someone-2)
xsubj(harmed-6, someone-2)
root(ROOT-0, have-3)
aux(harmed-6, to-4)
auxpass(harmed-6, be-5)
xcomp(have-3, harmed-6)

(ROOT
  (SQ (VBZ Is)
    (NP (PRP it))
    (NP
      (NP (RB enough))
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ offends)
            (NP (NN someone))))))
    (. ?)))

cop(enough-3, Is-1)
nsubj(enough-3, it-2)
root(ROOT-0, enough-3)
complm(offends-6, that-4)
nsubj(offends-6, it-5)
dep(enough-3, offends-6)
dobj(offends-6, someone-7)

(ROOT
  (SQ (MD Can)
    (NP (PRP you))
    (VP (VB do)
      (ADVP (RBR better))
      (PP (IN than)
        (NP (DT this))))
    (. ?)))

aux(do-3, Can-1)
nsubj(do-3, you-2)
root(ROOT-0, do-3)
advmod(do-3, better-4)
prep_than(do-3, this-6)

(ROOT
  (S
    (NP (NNP Sin))
    (VP (VBZ lies)
      (ADVP (RB only))
      (PP (IN in)
        (S
          (VP (VBG hurting)
            (NP (JJ other) (NNS people))
            (ADVP (RB unnecessarily))))))
    (. .)))

nsubj(lies-2, Sin-1)
root(ROOT-0, lies-2)
advmod(lies-2, only-3)
prepc_in(lies-2, hurting-5)
amod(people-7, other-6)
dobj(hurting-5, people-7)
advmod(hurting-5, unnecessarily-8)

(ROOT
  (S
    (NP (DT All) (JJ other) (`` ``) (NNS sins) ('' ''))
    (VP (VBP are)
      (VP (VBN invented)
        (NP (NN nonsense))))
    (. .)))

det(sins-4, All-1)
amod(sins-4, other-2)
nsubjpass(invented-7, sins-4)
auxpass(invented-7, are-6)
root(ROOT-0, invented-7)
dobj(invented-7, nonsense-8)

(ROOT
  (S (-LRB- -LRB-)
    (NP (NNP Hurting) (NNP yourself))
    (VP (VBZ is) (RB not)
      (ADJP (JJ sinful))
      (ADVP (RB just))
      (ADJP (JJ stupid)))
    (-RRB- -RRB-) (. .)))

nn(yourself-3, Hurting-2)
nsubj(sinful-6, yourself-3)
cop(sinful-6, is-4)
neg(sinful-6, not-5)
root(ROOT-0, sinful-6)
advmod(sinful-6, just-7)
acomp(sinful-6, stupid-8)

(ROOT
  (NP (NNP Robert) (NNP A.) (NNP Heinlein)))

nn(Heinlein-3, Robert-1)
nn(Heinlein-3, A.-2)
root(ROOT-0, Heinlein-3)

