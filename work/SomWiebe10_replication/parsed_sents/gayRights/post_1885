(ROOT
  (FRAG
    (NP (CD 1))
    (. .)))

root(ROOT-0, 1-1)

(ROOT
  (S
    (ADVP (DT No) (JJ first)
      (PP (IN of)
        (NP (DT all))))
    (NP (PRP it))
    (VP (VBZ 's) (RB not))
    (. .)))

dep(first-2, No-1)
advmod('s-6, first-2)
prep_of(first-2, all-4)
nsubj('s-6, it-5)
root(ROOT-0, 's-6)
neg('s-6, not-7)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (MD can)
      (NP (PRP you))
      (ADVP (RB possibly))
      (VP (VB think)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (ADJP (JJ fair)
                (S
                  (VP (TO to)
                    (VP (VB deem)
                      (NP
                        (NP (CD one) (NN type))
                        (PP (IN of)
                          (NP
                            (NP (NN union) (NNS unworthy))
                            (PP (IN of)
                              (S
                                (VP (VBG being)
                                  (VP (VBN called)
                                    (S
                                      (ADJP (NN marriage)))))))))))))))))))
    (. .)))

advmod(think-5, How-1)
aux(think-5, can-2)
nsubj(think-5, you-3)
advmod(think-5, possibly-4)
root(ROOT-0, think-5)
nsubj(fair-8, it-6)
cop(fair-8, is-7)
ccomp(think-5, fair-8)
aux(deem-10, to-9)
xcomp(fair-8, deem-10)
num(type-12, one-11)
dobj(deem-10, type-12)
nn(unworthy-15, union-14)
prep_of(type-12, unworthy-15)
auxpass(called-18, being-17)
prepc_of(unworthy-15, called-18)
dep(called-18, marriage-19)

(ROOT
  (SQ (MD Would)
    (NP (DT this))
    (VP (VB have)
      (VP (VBN been)
        (NP
          (NP (DT an) (JJ acceptable) (NN alternative))
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (JJ interracial) (NN marriage))
              (VP (VBD was)
                (ADJP (JJ illegal))))))))
    (. ?)))

aux(alternative-7, Would-1)
nsubj(alternative-7, this-2)
aux(alternative-7, have-3)
cop(alternative-7, been-4)
det(alternative-7, an-5)
amod(alternative-7, acceptable-6)
root(ROOT-0, alternative-7)
advmod(illegal-12, when-8)
amod(marriage-10, interracial-9)
nsubj(illegal-12, marriage-10)
cop(illegal-12, was-11)
dep(alternative-7, illegal-12)

(ROOT
  (S
    (S
      (INTJ (UH Oh))
      (NP (PRP it))
      (VP (VBZ 's)
        (ADJP (JJ okay))))
    (NP (PRP you))
    (VP (MD ca) (RB n't)
      (VP (VB get)
        (ADJP (JJ married)
          (PP (TO to)
            (NP
              (NP (NN someone))
              (PP (IN of)
                (NP (DT a) (JJ different) (NN race))))))
        (SBAR (IN because)
          (S
            (NP (PRP you))
            (VP (MD can)
              (ADVP (RB just))
              (VP (VB get)
                (NP (DT a) (JJ civil) (NN union))))))))
    (. ?)))

dep(okay-4, Oh-1)
nsubj(okay-4, it-2)
cop(okay-4, 's-3)
dep(married-9, okay-4)
nsubj(married-9, you-5)
aux(married-9, ca-6)
neg(married-9, n't-7)
dep(married-9, get-8)
root(ROOT-0, married-9)
prep_to(married-9, someone-11)
det(race-15, a-13)
amod(race-15, different-14)
prep_of(someone-11, race-15)
mark(get-20, because-16)
nsubj(get-20, you-17)
aux(get-20, can-18)
advmod(get-20, just-19)
advcl(married-9, get-20)
det(union-23, a-21)
amod(union-23, civil-22)
dobj(get-20, union-23)

(ROOT
  (FRAG
    (NP (CD 2))
    (. .)))

root(ROOT-0, 2-1)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (NP (DT a)
        (ADJP (RB really) (JJ dumb))
        (NN statement)))
    (. .)))

nsubj(statement-6, This-1)
cop(statement-6, is-2)
det(statement-6, a-3)
advmod(dumb-5, really-4)
amod(statement-6, dumb-5)
root(ROOT-0, statement-6)

(ROOT
  (S
    (NP (JJ Yeah)
      (UCP
        (ADJP (JJ sure))
        (CC and)
        (ADVP
          (NP (CD 100) (NNS years))
          (RB ago)))
      (NNS women))
    (VP (MD could)
      (VP (VB say)
        (SBAR
          (S
            (NP (PRP they))
            (VP (MD can)
              (VP (VB vote)
                (PP (IN without)
                  (NP (DT any) (NN problem)))))))))
    (. .)))

amod(women-7, Yeah-1)
amod(women-7, sure-2)
num(years-5, 100-4)
npadvmod(ago-6, years-5)
advmod(sure-2, ago-6)
conj_and(sure-2, ago-6)
amod(women-7, ago-6)
nsubj(say-9, women-7)
aux(say-9, could-8)
root(ROOT-0, say-9)
nsubj(vote-12, they-10)
aux(vote-12, can-11)
ccomp(say-9, vote-12)
det(problem-15, any-14)
prep_without(vote-12, problem-15)

(ROOT
  (S
    (PP (IN Except)
      (NP (DT that)))
    (NP (PRP it))
    (VP (VBZ 's) (RB not)
      (ADJP (JJ true)))
    (. .)))

prep_except(true-6, that-2)
nsubj(true-6, it-3)
cop(true-6, 's-4)
neg(true-6, not-5)
root(ROOT-0, true-6)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB really))
    (VP (VBP do) (RB n't)
      (VP (VB understand)
        (SBAR
          (WHADVP (WRB why))
          (S
            (NP (NNS people))
            (ADVP (RB even))
            (VP (VBP care)
              (ADJP (JJ enough)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (VP (VBN opposed)
                        (PP (TO to)
                          (NP (JJ gay) (NN marriage)))))))))))))
    (. .)))

nsubj(understand-5, I-1)
advmod(understand-5, really-2)
aux(understand-5, do-3)
neg(understand-5, n't-4)
root(ROOT-0, understand-5)
advmod(care-9, why-6)
nsubj(care-9, people-7)
advmod(care-9, even-8)
advcl(understand-5, care-9)
acomp(care-9, enough-10)
aux(opposed-13, to-11)
auxpass(opposed-13, be-12)
xcomp(enough-10, opposed-13)
amod(marriage-16, gay-15)
prep_to(opposed-13, marriage-16)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ does) (RB n't)
      (VP (VB hurt)
        (NP
          (NP (NN anybody))
          (, ,)
          (SBAR
            (WHNP (WP what))
            (S
              (VP (VBZ is)
                (NP (DT the) (JJ big) (NN deal))))))))
    (. ?)))

nsubj(hurt-4, It-1)
aux(hurt-4, does-2)
neg(hurt-4, n't-3)
root(ROOT-0, hurt-4)
dobj(hurt-4, anybody-5)
nsubj(deal-11, anybody-5)
cop(deal-11, is-8)
det(deal-11, the-9)
amod(deal-11, big-10)
rcmod(anybody-5, deal-11)

(ROOT
  (S
    (NP (JJ Civil) (NNS unions))
    (VP (VBP do) (RB not)
      (VP (VB grant)
        (NP
          (NP (PDT all) (DT the) (NNS rights))
          (PP (IN of)
            (NP (NN marriage))))))
    (. .)))

amod(unions-2, Civil-1)
nsubj(grant-5, unions-2)
aux(grant-5, do-3)
neg(grant-5, not-4)
root(ROOT-0, grant-5)
predet(rights-8, all-6)
det(rights-8, the-7)
dobj(grant-5, rights-8)
prep_of(rights-8, marriage-10)

(ROOT
  (S
    (NP
      (QP (RB Only) (CD 9))
      (NNS states))
    (VP (VBP offer)
      (NP (JJ civil) (NNS unions))
      (PP (TO to)
        (NP
          (NP (JJ same-sex) (NNS couples))
          (PP (IN with)
            (NP
              (NP
                (QP (RB almost) (DT all))
                (DT the) (NNS rights))
              (PP (IN of)
                (NP (NNS marriages))))))))
    (. .)))

quantmod(9-2, Only-1)
num(states-3, 9-2)
nsubj(offer-4, states-3)
root(ROOT-0, offer-4)
amod(unions-6, civil-5)
dobj(offer-4, unions-6)
amod(couples-9, same-sex-8)
prep_to(offer-4, couples-9)
quantmod(all-12, almost-11)
num(rights-14, all-12)
det(rights-14, the-13)
prep_with(couples-9, rights-14)
prep_of(rights-14, marriages-16)

(ROOT
  (S
    (NP (CD Six) (JJ other) (NNS states))
    (VP (VBP offer)
      (NP (JJ civil) (NNS unions))
      (PP (TO to)
        (NP
          (NP (JJ same-sex) (NNS couples))
          (PP (IN with)
            (NP
              (NP (DT some))
              (PP (IN of)
                (NP (DT the) (NNS rights))))))))
    (. .)))

num(states-3, Six-1)
amod(states-3, other-2)
nsubj(offer-4, states-3)
root(ROOT-0, offer-4)
amod(unions-6, civil-5)
dobj(offer-4, unions-6)
amod(couples-9, same-sex-8)
prep_to(offer-4, couples-9)
prep_with(couples-9, some-11)
det(rights-14, the-13)
prep_of(some-11, rights-14)

(ROOT
  (S
    (S
      (ADVP (RB Therefore))
      (NP (DT no) (JJ civil) (NN union))
      (VP (VBZ has)
        (NP
          (NP (DT the) (JJ same) (NNS rights))
          (PP (IN as)
            (NP (NNS marriages))))))
    (, ,)
    (CC and)
    (S
      (NP (JJS most) (NNS states))
      (VP (VBP do) (RB n't)
        (ADVP (RB even))
        (VP (VB have)
          (NP (JJ civil) (NNS unions)))))
    (. .)))

advmod(has-5, Therefore-1)
det(union-4, no-2)
amod(union-4, civil-3)
nsubj(has-5, union-4)
root(ROOT-0, has-5)
det(rights-8, the-6)
amod(rights-8, same-7)
dobj(has-5, rights-8)
prep_as(rights-8, marriages-10)
amod(states-14, most-13)
nsubj(have-18, states-14)
aux(have-18, do-15)
neg(have-18, n't-16)
advmod(have-18, even-17)
conj_and(has-5, have-18)
amod(unions-20, civil-19)
dobj(have-18, unions-20)

(ROOT
  (S
    (S
      (ADVP (RB Also))
      (NP (DT the) (JJ federal) (NN government))
      (VP (VBZ does) (RB not)
        (VP (VB recognize)
          (NP (JJ civil) (NNS unions)))))
    (CC and)
    (S
      (PP (JJ due) (TO to)
        (NP
          (NP (DT the) (NN Defense))
          (PP (IN of)
            (NP (NNP Marriage) (NNP Act)))))
      (, ,)
      (NP
        (NP (JJ same-sex) (NNS couples))
        (PP (IN in)
          (NP
            (NP (NNS marriages))
            (, ,)
            (NP (JJ civil) (NNS unions))
            (, ,)
            (CC or)
            (NP (JJ domestic) (NNS partnerships)))))
      (VP (VBP do) (RB not)
        (VP (VB have)
          (NP (`` ``)
            (NP (CD 1,138) (NNS rights))
            (, ,)
            (NP (NNS benefits))
            (CC and)
            (NP (NNS privileges)))
          (SBAR (IN that)
            (S
              (NP (DT a) (JJ married) (NN couple))
              (VP (VBZ has)
                (VP
                  (PP (IN under)
                    (NP (JJ federal) (NN law))))))))))
    (. .)))

advmod(recognize-7, Also-1)
det(government-4, the-2)
amod(government-4, federal-3)
nsubj(recognize-7, government-4)
aux(recognize-7, does-5)
neg(recognize-7, not-6)
root(ROOT-0, recognize-7)
amod(unions-9, civil-8)
dobj(recognize-7, unions-9)
det(Defense-14, the-13)
prep_due_to(have-32, Defense-14)
nn(Act-17, Marriage-16)
prep_of(Defense-14, Act-17)
amod(couples-20, same-sex-19)
nsubj(have-32, couples-20)
prep_in(couples-20, marriages-22)
amod(unions-25, civil-24)
prep_in(couples-20, unions-25)
conj_or(marriages-22, unions-25)
amod(partnerships-29, domestic-28)
prep_in(couples-20, partnerships-29)
conj_or(marriages-22, partnerships-29)
aux(have-32, do-30)
neg(have-32, not-31)
conj_and(recognize-7, have-32)
num(rights-35, 1,138-34)
dobj(have-32, rights-35)
dobj(have-32, benefits-37)
conj_and(rights-35, benefits-37)
dobj(have-32, privileges-39)
conj_and(rights-35, privileges-39)
complm(under-45, that-40)
det(couple-43, a-41)
amod(couple-43, married-42)
nsubj(under-45, couple-43)
aux(under-45, has-44)
ccomp(have-32, under-45)
amod(law-47, federal-46)
pobj(under-45, law-47)

(ROOT
  (S ('' '')
    (S
      (ADVP (RB So))
      (VP (VBP thank))
      (NP
        (NP (PRP you))
        (PP (IN for)
          (NP
            (NP (DT the) (VBG talking) (NN point))
            (PP (IN from)
              (NP (NNP NOM)))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP you))
      (VP (VBP 're)
        (ADJP (RB totally) (JJ incorrect))))
    (. .)))

advmod(thank-3, So-2)
root(ROOT-0, thank-3)
dep(thank-3, you-4)
det(point-8, the-6)
amod(point-8, talking-7)
prep_for(you-4, point-8)
prep_from(point-8, NOM-10)
nsubj(incorrect-16, you-13)
cop(incorrect-16, 're-14)
advmod(incorrect-16, totally-15)
conj_but(thank-3, incorrect-16)

(ROOT
  (S
    (NP (JJ Civil) (NNS unions))
    (VP (VBP are) (RB not)
      (ADVP
        (NP (DT the) (JJ same))
        (RB as))
      (VP (VBG being)
        (VP (VBN married))))
    (. .)))

amod(unions-2, Civil-1)
nsubjpass(married-9, unions-2)
aux(married-9, are-3)
neg(married-9, not-4)
det(same-6, the-5)
npadvmod(as-7, same-6)
advmod(married-9, as-7)
auxpass(married-9, being-8)
root(ROOT-0, married-9)

(ROOT
  (S (CC But)
    (SBAR (RB even) (IN if)
      (S
        (NP (PRP they))
        (VP (VBD were))))
    (, ,)
    (NP (DT this))
    (VP (MD would) (RB not)
      (VP (VB be)
        (ADJP (JJ acceptable))))
    (. .)))

cc(acceptable-11, But-1)
advmod(were-5, even-2)
dep(were-5, if-3)
nsubj(were-5, they-4)
dep(acceptable-11, were-5)
nsubj(acceptable-11, this-7)
aux(acceptable-11, would-8)
neg(acceptable-11, not-9)
cop(acceptable-11, be-10)
root(ROOT-0, acceptable-11)

