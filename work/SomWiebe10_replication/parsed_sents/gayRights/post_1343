(ROOT
  (S
    (S
      (NP (PRP$ My) (NN father))
      (VP (VBD walked)
        (PRT (RP out))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP I))
            (VP (VBD was)
              (NP (CD three)))))))
    (CC and)
    (S
      (NP (PRP$ my) (NN brother))
      (VP (VBD was)
        (NP (CD six))))
    (. .)))

poss(father-2, My-1)
nsubj(walked-3, father-2)
root(ROOT-0, walked-3)
prt(walked-3, out-4)
advmod(three-8, when-5)
nsubj(three-8, I-6)
cop(three-8, was-7)
advcl(walked-3, three-8)
poss(brother-11, my-10)
nsubj(six-13, brother-11)
cop(six-13, was-12)
conj_and(walked-3, six-13)

(ROOT
  (SQ (VBZ Has)
    (NP
      (NP (PRP$ our) (NN lack))
      (PP (IN of)
        (NP (DT a) (JJ masculine) (NN finger))))
    (VP (VBN crippled)
      (S
        (NP (PRP us))
        (ADVP (RB horribly))))
    (. ?)))

aux(crippled-8, Has-1)
poss(lack-3, our-2)
nsubj(crippled-8, lack-3)
det(finger-7, a-5)
amod(finger-7, masculine-6)
prep_of(lack-3, finger-7)
root(ROOT-0, crippled-8)
dep(crippled-8, us-9)
advmod(us-9, horribly-10)

(ROOT
  (S
    (ADJP (VB No.))
    (. .)))

root(ROOT-0, No.-1)

(ROOT
  (S
    (NP (DT This))
    (VP (MD should) (RB n't)
      (ADVP (RB even))
      (VP (VB be)
        (NP (DT a) (NN question))))
    (. .)))

nsubj(question-7, This-1)
aux(question-7, should-2)
neg(question-7, n't-3)
advmod(question-7, even-4)
cop(question-7, be-5)
det(question-7, a-6)
root(ROOT-0, question-7)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (CD two) (JJ loving) (NNS people))
        (VP (VBP are)
          (ADJP (JJ prepared)
            (S
              (VP (TO to)
                (VP (VB take)
                  (NP (DT a) (NN child))
                  (PP
                    (PP (IN into)
                      (NP (PRP$ their) (NN home)))
                    (, ,) (RB out)
                    (PP (IN of)
                      (NP
                        (NP (DT a) (JJ corrupt) (NN system))
                        (SBAR
                          (WHNP (WDT that))
                          (S
                            (ADVP (RB simply))
                            (VP (VBZ does) (RB n't)
                              (VP (VB work)))))))))))))))
    (, ,)
    (WHADVP (WRB why))
    (SQ (MD would)
      (NP (DT that))
      (VP (RB not) (VB be)
        (VP (VBN allowed))))
    (. ?)))

mark(prepared-6, If-1)
num(people-4, two-2)
amod(people-4, loving-3)
nsubj(prepared-6, people-4)
cop(prepared-6, are-5)
advcl(allowed-31, prepared-6)
aux(take-8, to-7)
xcomp(prepared-6, take-8)
det(child-10, a-9)
dobj(take-8, child-10)
poss(home-13, their-12)
prep_into(take-8, home-13)
det(system-19, a-17)
amod(system-19, corrupt-18)
prep_out_of(take-8, system-19)
nsubj(work-24, system-19)
advmod(work-24, simply-21)
aux(work-24, does-22)
neg(work-24, n't-23)
rcmod(system-19, work-24)
advmod(allowed-31, why-26)
aux(allowed-31, would-27)
nsubjpass(allowed-31, that-28)
neg(allowed-31, not-29)
auxpass(allowed-31, be-30)
root(ROOT-0, allowed-31)

