(ROOT
  (S
    (S
      (NP (PRP$ Your) (JJ first) (NN argument))
      (VP (VBZ compares)
        (NP
          (NP (CD two) (NNS things))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBP are) (RB not)
                (ADJP (VBN related))))))))
    (: ;)
    (S
      (NP (DT this))
      (VP (VBZ is)
        (NP
          (NP (DT a) (NN fallacy))
          (PP (IN of)
            (NP (JJ faulty) (NN analogy))))))
    (. .)))

poss(argument-3, Your-1)
amod(argument-3, first-2)
nsubj(compares-4, argument-3)
root(ROOT-0, compares-4)
num(things-6, two-5)
dobj(compares-4, things-6)
nsubjpass(related-10, things-6)
auxpass(related-10, are-8)
neg(related-10, not-9)
rcmod(things-6, related-10)
nsubj(fallacy-15, this-12)
cop(fallacy-15, is-13)
det(fallacy-15, a-14)
parataxis(compares-4, fallacy-15)
amod(analogy-18, faulty-17)
prep_of(fallacy-15, analogy-18)

(ROOT
  (S
    (NP (DT The) (NN ability)
      (S
        (VP (TO to)
          (VP (VB fabricate)
            (NP (DT an) (NN aircraft))))))
    (VP (VBZ does) (RB not)
      (VP (VB evidence)
        (NP (DT an) (NN ability)
          (S
            (VP (TO to)
              (VP (VB raise)
                (CC and)
                (VB love)
                (NP (DT a) (NN child))))))))
    (. .)))

det(ability-2, The-1)
nsubj(evidence-9, ability-2)
aux(fabricate-4, to-3)
infmod(ability-2, fabricate-4)
det(aircraft-6, an-5)
dobj(fabricate-4, aircraft-6)
aux(evidence-9, does-7)
neg(evidence-9, not-8)
root(ROOT-0, evidence-9)
det(ability-11, an-10)
dobj(evidence-9, ability-11)
aux(raise-13, to-12)
infmod(ability-11, raise-13)
infmod(ability-11, love-15)
conj_and(raise-13, love-15)
det(child-17, a-16)
dobj(raise-13, child-17)

(ROOT
  (S
    (S
      (NP (NNP B.) (PRP You))
      (VP (VBD affirmed)
        (SBAR
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP
                (NP (NN something))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ is)
                      (ADJP (RB existentially) (JJ negative)
                        (PP (IN about)
                          (S
                            (VP (VBG being)
                              (ADJP (JJ gay)))))))))))))))
    (: ;)
    (S
      (NP (PRP they))
      (VP (MD can) (RB not)
        (VP (VB conceive)
          (NP (NNS children)))))
    (. .)))

nsubj(affirmed-3, B.-1)
dep(B.-1, You-2)
root(ROOT-0, affirmed-3)
expl(is-5, there-4)
ccomp(affirmed-3, is-5)
nsubj(is-5, something-6)
nsubj(negative-10, something-6)
cop(negative-10, is-8)
advmod(negative-10, existentially-9)
rcmod(something-6, negative-10)
cop(gay-13, being-12)
prepc_about(negative-10, gay-13)
nsubj(conceive-18, they-15)
aux(conceive-18, can-16)
neg(conceive-18, not-17)
parataxis(affirmed-3, conceive-18)
dobj(conceive-18, children-19)

(ROOT
  (S
    (NP
      (NP (PRP$ Your) (NN whole))
      (PP (IN of)
        (NP (PRP$ your) (NN argument))))
    (VP
      (VP (VBZ begins)
        (PP (IN with)
          (NP (NN irrationality))))
      (CC and)
      (VP (VBZ ends)
        (PP (IN with)
          (NP (NN irrationality)))))
    (. .)))

poss(whole-2, Your-1)
nsubj(begins-6, whole-2)
nsubj(ends-10, whole-2)
poss(argument-5, your-4)
prep_of(whole-2, argument-5)
root(ROOT-0, begins-6)
prep_with(begins-6, irrationality-8)
conj_and(begins-6, ends-10)
prep_with(ends-10, irrationality-12)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP expect)
      (SBAR (IN that)
        (S
          (NP (PRP$ your) (JJ future) (NN reply))
          (VP (MD will)
            (ADVP (RB also))
            (VP (VB be)
              (ADJP (RB equally) (JJ irrational)))))))
    (. .)))

nsubj(expect-2, I-1)
root(ROOT-0, expect-2)
complm(irrational-11, that-3)
poss(reply-6, your-4)
amod(reply-6, future-5)
nsubj(irrational-11, reply-6)
aux(irrational-11, will-7)
advmod(irrational-11, also-8)
cop(irrational-11, be-9)
advmod(irrational-11, equally-10)
ccomp(expect-2, irrational-11)

(ROOT
  (S
    (NP (DT The) (NN argument))
    (VP (VBZ does) (RB not)
      (VP (VB deductively)
        (NP (NN evidence))
        (SBAR
          (WHADVP (WRB why))
          (S
            (NP
              (NP (DT any) (NN person))
              (, ,)
              (NP
                (NP (JJ gay))
                (CC or)
                (NP (RB not) (JJ gay)))
              (, ,))
            (VP (MD can)
              (VP (VB raise)
                (CC and)
                (VB love)
                (NP (DT a) (NN child))))))))
    (. .)))

det(argument-2, The-1)
nsubj(deductively-5, argument-2)
aux(deductively-5, does-3)
neg(deductively-5, not-4)
root(ROOT-0, deductively-5)
dobj(deductively-5, evidence-6)
advmod(raise-17, why-7)
det(person-9, any-8)
nsubj(raise-17, person-9)
nsubj(love-19, person-9)
appos(person-9, gay-11)
neg(gay-14, not-13)
appos(person-9, gay-14)
conj_or(gay-11, gay-14)
aux(raise-17, can-16)
advcl(deductively-5, raise-17)
advcl(deductively-5, love-19)
conj_and(raise-17, love-19)
det(child-21, a-20)
dobj(raise-17, child-21)

(ROOT
  (S
    (ADVP (RB Moreover))
    (, ,)
    (NP (PRP you))
    (VP (VBP have)
      (VP (VBN asserted)
        (SBAR (IN that)
          (S
            (NP (NNS homosexuals))
            (VP (VBP are) (RB not)
              (ADJP (JJ able)
                (S
                  (VP (TO to)
                    (VP (VB conceive)
                      (NP (NNS children)))))))))))
    (. .)))

advmod(asserted-5, Moreover-1)
nsubj(asserted-5, you-3)
aux(asserted-5, have-4)
root(ROOT-0, asserted-5)
complm(able-10, that-6)
nsubj(able-10, homosexuals-7)
cop(able-10, are-8)
neg(able-10, not-9)
ccomp(asserted-5, able-10)
aux(conceive-12, to-11)
xcomp(able-10, conceive-12)
dobj(conceive-12, children-13)

(ROOT
  (S
    (ADVP (RB Therefore))
    (, ,)
    (NP (PRP we))
    (VP (MD can)
      (VP (VB deduce)
        (PP (IN from)
          (NP (PRP$ your) (NN claim)))
        (SBAR (IN that)
          (S
            (NP (NNS homosexuals))
            (VP (VBP are)
              (ADVP (RB biologically))
              (VP (VBN deprived)
                (PP (IN of)
                  (NP
                    (NP (DT the) (JJ necessary) (NNS organs))
                    (PP (IN for)
                      (NP
                        (NP (DT the) (NN conception))
                        (PP (IN of)
                          (NP (DT a) (NN child)))))))))))))
    (. .)))

advmod(deduce-5, Therefore-1)
nsubj(deduce-5, we-3)
aux(deduce-5, can-4)
root(ROOT-0, deduce-5)
poss(claim-8, your-7)
prep_from(deduce-5, claim-8)
complm(deprived-13, that-9)
nsubjpass(deprived-13, homosexuals-10)
auxpass(deprived-13, are-11)
advmod(deprived-13, biologically-12)
ccomp(deduce-5, deprived-13)
det(organs-17, the-15)
amod(organs-17, necessary-16)
prep_of(deprived-13, organs-17)
det(conception-20, the-19)
prep_for(organs-17, conception-20)
det(child-23, a-22)
prep_of(conception-20, child-23)

(ROOT
  (S
    (ADVP (RB Lastly))
    (, ,)
    (NP (DT the) (NN argument))
    (VP (VBZ is)
      (ADJP (JJ ineffective)
        (PP (IN in)
          (S
            (VP (VBG proving)
              (NP (DT any) (NN thing) (NN syllogistically)))))))
    (. .)))

advmod(ineffective-6, Lastly-1)
det(argument-4, the-3)
nsubj(ineffective-6, argument-4)
cop(ineffective-6, is-5)
root(ROOT-0, ineffective-6)
prepc_in(ineffective-6, proving-8)
det(syllogistically-11, any-9)
nn(syllogistically-11, thing-10)
dobj(proving-8, syllogistically-11)

(ROOT
  (S (CC And)
    (ADVP (RB as)
      (PP (IN for)
        (NP
          (NP (DT the) (NN remainder))
          (PP (IN of)
            (NP
              (NP (PRP$ your) (NNS claims))
              (CC and)
              (NP (JJ rhetorical) (NNS questions)))))))
    (NP (PRP they))
    (VP (VBD don)
      (SBAR
        (S
          (NP (NN t))
          (VP (VBP deserve)
            (NP (NN refutation))))))
    (. .)))

cc(don-13, And-1)
det(remainder-5, the-4)
prep_as_for(don-13, remainder-5)
poss(claims-8, your-7)
prep_of(remainder-5, claims-8)
amod(questions-11, rhetorical-10)
prep_of(remainder-5, questions-11)
conj_and(claims-8, questions-11)
nsubj(don-13, they-12)
root(ROOT-0, don-13)
nsubj(deserve-15, t-14)
ccomp(don-13, deserve-15)
dobj(deserve-15, refutation-16)

(ROOT
  (S
    (NP
      (NP (DT The) (NN entirety))
      (PP (IN of)
        (NP (DT the) (NN argument))))
    (VP (VBZ fails)
      (S
        (VP (TO to)
          (VP (VB prove)
            (NP
              (NP (CD one) (NN thing))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ has)
                    (VP (VBN been)
                      (VP
                        (ADVP (RB validly))
                        (VBN deduced)
                        (PP (IN by)
                          (NP (DT the) (NN author)))))))))))))
    (. .)))

det(entirety-2, The-1)
nsubj(fails-6, entirety-2)
xsubj(prove-8, entirety-2)
det(argument-5, the-4)
prep_of(entirety-2, argument-5)
root(ROOT-0, fails-6)
aux(prove-8, to-7)
xcomp(fails-6, prove-8)
num(thing-10, one-9)
dobj(prove-8, thing-10)
nsubjpass(deduced-15, thing-10)
aux(deduced-15, has-12)
auxpass(deduced-15, been-13)
advmod(deduced-15, validly-14)
rcmod(thing-10, deduced-15)
det(author-18, the-17)
agent(deduced-15, author-18)

(ROOT
  (NP
    (NP (PRP$ Your) (JJ final) (NN statement))
    (, ,)
    (NP
      (NP (DT The) (NN assumption))
      (SBAR (IN that)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP
              (NP (NN something))
              (ADJP (RB existentially) (JJ negative)
                (PP (IN about)
                  (S
                    (VP (VBG being)
                      (ADJP (JJ gay)))))))))))
    (. .)))

poss(statement-3, Your-1)
amod(statement-3, final-2)
root(ROOT-0, statement-3)
det(assumption-6, The-5)
appos(statement-3, assumption-6)
complm(is-9, that-7)
expl(is-9, there-8)
dep(assumption-6, is-9)
nsubj(is-9, something-10)
advmod(negative-12, existentially-11)
amod(something-10, negative-12)
cop(gay-15, being-14)
prepc_about(negative-12, gay-15)

(ROOT
  (S
    (NP (NNP A.) (PRP It))
    (VP (VBZ is)
      (NP (DT a) (NN sentence) (NN fragment)))
    (. .)))

nsubj(fragment-6, A.-1)
dep(A.-1, It-2)
cop(fragment-6, is-3)
det(fragment-6, a-4)
nn(fragment-6, sentence-5)
root(ROOT-0, fragment-6)

(ROOT
  (S
    (S
      (NP (DT The) (NN subject))
      (VP (VBZ is)
        (VP (VBN identified))))
    (CC but)
    (S
      (NP (EX there))
      (VP (VBZ is)
        (ADJP (RB no) (JJ predicate))))
    (. .)))

det(subject-2, The-1)
nsubjpass(identified-4, subject-2)
nsubj(is-7, subject-2)
auxpass(identified-4, is-3)
root(ROOT-0, identified-4)
expl(is-7, there-6)
conj_but(identified-4, is-7)
advmod(predicate-9, no-8)
acomp(is-7, predicate-9)

