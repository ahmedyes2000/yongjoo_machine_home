(ROOT
  (S
    (NP (PRP I))
    (VP (MD must)
      (VP (VB be)
        (ADJP (JJ fair)
          (SBAR
            (S
              (NP (PRP I))
              (VP (VBP do) (RB n't)
                (VP (VB like)
                  (NP
                    (NP (DT the) (NN use))
                    (PP (IN of)
                      (NP (NNS anecdotes))))
                  (PP (IN in)
                    (NP
                      (NP (NNS arguments))
                      (PP (VBG regarding)
                        (NP (NN legislation))))))))))))
    (. .)))

nsubj(fair-4, I-1)
aux(fair-4, must-2)
cop(fair-4, be-3)
root(ROOT-0, fair-4)
nsubj(like-8, I-5)
aux(like-8, do-6)
neg(like-8, n't-7)
dep(fair-4, like-8)
det(use-10, the-9)
dobj(like-8, use-10)
prep_of(use-10, anecdotes-12)
prep_in(like-8, arguments-14)
prep_regarding(arguments-14, legislation-16)

(ROOT
  (S
    (ADVP (IN At) (RBS most))
    (NP (PRP they))
    (VP (MD should)
      (VP (VB serve)
        (PP (IN as)
          (NP (NN exclamation) (NNS points)))
        (PP (IN at)
          (NP
            (NP (DT the) (NN end))
            (PP (IN of)
              (NP (JJ statistical) (NN analysis)))))))
    (. .)))

advmod(serve-5, At-1)
advmod(At-1, most-2)
nsubj(serve-5, they-3)
aux(serve-5, should-4)
root(ROOT-0, serve-5)
nn(points-8, exclamation-7)
prep_as(serve-5, points-8)
det(end-11, the-10)
prep_at(serve-5, end-11)
amod(analysis-14, statistical-13)
prep_of(end-11, analysis-14)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBP rely)
          (PP (IN on)
            (NP (NNS anecdotes))))))
    (, ,)
    (NP (DT this) (NN argument))
    (VP (MD can)
      (VP (VB go)
        (PRT (RP on))
        (ADVP (RB indefinitely))))
    (. .)))

mark(rely-3, If-1)
nsubj(rely-3, we-2)
advcl(go-10, rely-3)
prep_on(rely-3, anecdotes-5)
det(argument-8, this-7)
nsubj(go-10, argument-8)
aux(go-10, can-9)
root(ROOT-0, go-10)
prt(go-10, on-11)
advmod(go-10, indefinitely-12)

(ROOT
  (S
    (NP
      (NP (DT An) (JJR easier) (NN way))
      (SBAR
        (S
          (VP (TO to)
            (VP (VB look)
              (PP (IN at)
                (NP (DT this))))))))
    (, ,)
    (S
      (NP (PRP I))
      (VP (VBP think)
        (SBAR
          (S
            (VP (MD would)
              (VP (VB be)
                (NP (DT this))))))))
    (: :)
    (S
      (SBAR (IN If)
        (S
          (NP
            (NP (JJ immediate) (NN access))
            (PP (TO to)
              (NP (NNS guns))))
          (VP (VBD did) (RB n't)
            (VP (VB save)
              (NP (NNS lives))))))
      (, ,)
      (NP (PRP we))
      (VP (MD would) (RB n't)
        (VP (VB arm)
          (NP (PRP$ our) (NN police)))))
    (. .)))

det(way-3, An-1)
amod(way-3, easier-2)
dep(think-10, way-3)
aux(look-5, to-4)
infmod(way-3, look-5)
prep_at(look-5, this-7)
nsubj(think-10, I-9)
root(ROOT-0, think-10)
aux(this-13, would-11)
cop(this-13, be-12)
ccomp(think-10, this-13)
mark(save-22, If-15)
amod(access-17, immediate-16)
nsubj(save-22, access-17)
prep_to(access-17, guns-19)
aux(save-22, did-20)
neg(save-22, n't-21)
advcl(arm-28, save-22)
dobj(save-22, lives-23)
nsubj(arm-28, we-25)
aux(arm-28, would-26)
neg(arm-28, n't-27)
parataxis(think-10, arm-28)
poss(police-30, our-29)
dobj(arm-28, police-30)

(ROOT
  (S
    (NP
      (NP (NNP Sure))
      (SBAR
        (S
          (NP (DT the) (NN counter-argument))
          (VP (MD may)
            (VP (VB be) (`` ``)
              (PP (CC but)
                (NP (NN police))))))))
    (VP (VBP are)
      (VP (VBN trained) ('' '')))
    (. .)))

dobj(be-5, Sure-1)
nsubjpass(trained-10, Sure-1)
det(counter-argument-3, the-2)
nsubj(be-5, counter-argument-3)
aux(be-5, may-4)
rcmod(Sure-1, be-5)
prep(be-5, but-7)
dep(but-7, police-8)
auxpass(trained-10, are-9)
root(ROOT-0, trained-10)

(ROOT
  (S
    (VP (VB Do) (RB not)
      (VP (VB underestimate)
        (NP
          (NP (DT the) (NN vigilance))
          (PP (IN of)
            (NP (JJ everyday) (NNPS Citizens))))
        (S
          (VP (TO to)
            (VP (VB stay)
              (ADJP (JJ sharp)
                (CC and)
                (JJ proficient))
              (PP (IN in)
                (NP (JJ firearms) (NN handling))))))))
    (. .)))

aux(underestimate-3, Do-1)
neg(underestimate-3, not-2)
root(ROOT-0, underestimate-3)
det(vigilance-5, the-4)
dobj(underestimate-3, vigilance-5)
amod(Citizens-8, everyday-7)
prep_of(vigilance-5, Citizens-8)
aux(sharp-11, to-9)
cop(sharp-11, stay-10)
xcomp(underestimate-3, sharp-11)
xcomp(underestimate-3, proficient-13)
conj_and(sharp-11, proficient-13)
amod(handling-16, firearms-15)
prep_in(sharp-11, handling-16)

(ROOT
  (S
    (NP (JJ Many) (NNS states))
    (VP (VBP require)
      (S
        (NP
          (NP (JJ lengthy) (NNS classes)
            (CC and)
            (NNS courses))
          (PP (IN of)
            (NP (NN fire))))
        (VP (TO to)
          (VP (VB prove)
            (NP (DT the) (JJ shooters) (NN ability))
            (S
              (VP
                (VP (TO to)
                  (ADVP (RB not) (RB only))
                  (VP (VB understand)
                    (NP (DT the) (NN law))))
                (, ,)
                (CC but)
                (VP (TO to)
                  (VP (VB prove)
                    (NP (NN competence))))))))))
    (. .)))

amod(states-2, Many-1)
nsubj(require-3, states-2)
root(ROOT-0, require-3)
amod(classes-5, lengthy-4)
nsubj(prove-11, classes-5)
conj_and(classes-5, courses-7)
nsubj(prove-11, courses-7)
prep_of(classes-5, fire-9)
aux(prove-11, to-10)
xcomp(require-3, prove-11)
det(ability-14, the-12)
amod(ability-14, shooters-13)
dobj(prove-11, ability-14)
aux(understand-18, to-15)
dep(only-17, not-16)
advmod(understand-18, only-17)
dep(prove-11, understand-18)
det(law-20, the-19)
dobj(understand-18, law-20)
aux(prove-24, to-23)
dep(prove-11, prove-24)
conj_but(understand-18, prove-24)
dobj(prove-24, competence-25)

