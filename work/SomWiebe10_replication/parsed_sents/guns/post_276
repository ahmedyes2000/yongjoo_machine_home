(ROOT
  (SQ (VBD Was)
    (NP (EX there))
    (NP (DT another) (NN point))
    (SBAR (IN that)
      (S
        (NP (PRP you))
        (VP (VBD wanted)
          (S
            (VP (TO to)
              (VP (VB make)))))))
    (. ?)))

root(ROOT-0, Was-1)
expl(Was-1, there-2)
det(point-4, another-3)
nsubj(Was-1, point-4)
complm(wanted-7, that-5)
nsubj(wanted-7, you-6)
xsubj(make-9, you-6)
dep(Was-1, wanted-7)
aux(make-9, to-8)
xcomp(wanted-7, make-9)

(ROOT
  (S
    (ADVP (RB Yes))
    (NP (CD 8400) (NNS deaths))
    (VP (VBP anually)
      (PP (IN by)
        (NP
          (NP (NNS guns))
          (PP (IN in)
            (NP (NNP US)
              (CC but)
              (NNP 46500)))))
      (PP (IN by)
        (NP (NN auto))))
    (. .)))

advmod(anually-4, Yes-1)
num(deaths-3, 8400-2)
nsubj(anually-4, deaths-3)
root(ROOT-0, anually-4)
prep_by(anually-4, guns-6)
prep_in(guns-6, US-8)
prep_in(guns-6, 46500-10)
conj_but(US-8, 46500-10)
prep_by(anually-4, auto-12)

(ROOT
  (S (IN So)
    (NP (WDT what))
    (, ,)
    (NP (PRP I))
    (ADVP (RB already))
    (VP (VBD stated)
      (SBAR (IN that)
        (S
          (VP (VBZ is)
            (NP (DT an) (JJ acceptable) (NN number))))))
    (. .)))

dep(stated-6, So-1)
nsubj(stated-6, what-2)
nsubj(stated-6, I-4)
advmod(stated-6, already-5)
root(ROOT-0, stated-6)
complm(number-11, that-7)
cop(number-11, is-8)
det(number-11, an-9)
amod(number-11, acceptable-10)
ccomp(stated-6, number-11)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB also))
    (VP (VBP have)
      (NP
        (NP (DT a) (JJR higher) (NN murder) (NN rate))
        (PP (IN per)
          (NP (NN capita) (NN total))))
      (PP (IN with)
        (CC or)
        (IN without)
        (NP (NNS guns))))
    (. .)))

nsubj(have-3, We-1)
nsubj(have-3', We-1)
advmod(have-3, also-2)
root(ROOT-0, have-3)
conj_or(have-3, have-3')
det(rate-7, a-4)
amod(rate-7, higher-5)
nn(rate-7, murder-6)
dobj(have-3, rate-7)
nn(total-10, capita-9)
prep_per(rate-7, total-10)
prep_with(have-3, guns-14)
prep_without(have-3', guns-14)

(ROOT
  (NP
    (NP (DT All))
    (NP
      (NP (DT the) (JJR more) (NN reason))
      (PP (TO to)
        (NP (JJ own) (CD one))))
    (. .)))

root(ROOT-0, All-1)
det(reason-4, the-2)
amod(reason-4, more-3)
dep(All-1, reason-4)
amod(one-7, own-6)
prep_to(reason-4, one-7)

(ROOT
  (S (CC And)
    (NP
      (NP (DT the) (NN freedom))
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBD was)
            (VP (VBG speaking)
              (PP (IN of)))))))
    (VP (VBD was)
      (NP (PRP$ my) (NN freedom)
        (S
          (VP (TO to)
            (VP (VB own)
              (NP
                (NP (DT a) (NN gun))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (NP
                      (NP (PRP you))
                      (NP (JJ other) (NNS nations)))
                    (VP (VBP have)
                      (VP (VBN lost)))))))))))
    (. .)))

cc(freedom-10, And-1)
det(freedom-3, the-2)
prep_of(speaking-6, freedom-3)
nsubj(freedom-10, freedom-3)
nsubj(speaking-6, I-4)
aux(speaking-6, was-5)
rcmod(freedom-3, speaking-6)
cop(freedom-10, was-8)
poss(freedom-10, my-9)
root(ROOT-0, freedom-10)
aux(own-12, to-11)
infmod(freedom-10, own-12)
det(gun-14, a-13)
dobj(own-12, gun-14)
dobj(lost-21, gun-14)
rel(lost-21, which-16)
nsubj(lost-21, you-17)
amod(nations-19, other-18)
dep(you-17, nations-19)
aux(lost-21, have-20)
rcmod(gun-14, lost-21)

(ROOT
  (S
    (NP (WDT Which))
    (VP (VBZ seems)
      (S
        (VP (TO to)
          (VP (VB have)
            (VP (VBN done)
              (S
                (NP (PRP you))
                (ADJP (RB no) (JJ good))
                (NP (EX there))
                (PP (IN in)
                  (NP (NNP Australia)))))))))
    (. .)))

nsubj(seems-2, Which-1)
xsubj(done-5, Which-1)
root(ROOT-0, seems-2)
aux(done-5, to-3)
aux(done-5, have-4)
xcomp(seems-2, done-5)
nsubj(good-8, you-6)
advmod(good-8, no-7)
xcomp(done-5, good-8)
expl(good-8, there-9)
dep(good-8, in-10)
pobj(in-10, Australia-11)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP guess)
      (SBAR (IN since)
        (S
          (NP (NN self-defence))
          (VP (VBZ is) (RB not)
            (VP (VBN accepted)
              (PP (IN as)
                (NP (DT a) (NN reason)))
              (PP (IN for)
                (S
                  (VP (VBG issuing)
                    (NP (DT a) (NN licence)
                      (S
                        (VP (TO to)
                          (VP (VB own)
                            (NP
                              (NP (DT a) (NN gun))
                              (SBAR
                                (S
                                  (NP (EX there))
                                  (VP (VBZ http:\/\/www.nationmaster.com\/graph\/cri_tot_cri_vic-crime-total-victims)
                                    (SBAR
                                      (S
                                        (NP (PRP You))
                                        (VP (VBP are)
                                          (NP
                                            (NP (# #) (CD 1))
                                            (PP (RB just) (IN above)
                                              (NP (DT the) (NNP UK)
                                                (CC and)
                                                (NNP Canada)))))))))))))))))))))))
    (. .)))

nsubj(guess-2, I-1)
root(ROOT-0, guess-2)
mark(accepted-7, since-3)
nsubjpass(accepted-7, self-defence-4)
auxpass(accepted-7, is-5)
neg(accepted-7, not-6)
advcl(guess-2, accepted-7)
det(reason-10, a-9)
prep_as(accepted-7, reason-10)
prepc_for(accepted-7, issuing-12)
det(licence-14, a-13)
dobj(issuing-12, licence-14)
aux(own-16, to-15)
infmod(licence-14, own-16)
det(gun-18, a-17)
dobj(own-16, gun-18)
expl(http:\/\/www.nationmaster.com\/graph\/cri_tot_cri_vic-crime-total-victims-20, there-19)
rcmod(gun-18, http:\/\/www.nationmaster.com\/graph\/cri_tot_cri_vic-crime-total-victims-20)
nsubj(1-24, You-21)
cop(1-24, are-22)
dep(1-24, #-23)
ccomp(http:\/\/www.nationmaster.com\/graph\/cri_tot_cri_vic-crime-total-victims-20, 1-24)
advmod(1-24, just-25)
det(UK-28, the-27)
prep_above(1-24, UK-28)
prep_above(1-24, Canada-30)
conj_and(UK-28, Canada-30)

