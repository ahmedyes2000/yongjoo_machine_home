(ROOT
  (FRAG
    (ADJP (JJ FINALLY))
    (. .)))

root(ROOT-0, FINALLY-1)

(ROOT
  (S
    (NP
      (NP (NN Someone))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBD pointed)
            (PRT (RP out))
            (NP
              (NP (DT that) (JJ violent) (NNS crimes))
              (PP (IN in)
                (NP (NNP Europe))))))))
    (VP (VBP ARE)
      (NP (NN HIGHER)))
    (. .)))

nsubj(pointed-3, Someone-1)
nsubj(HIGHER-11, Someone-1)
rcmod(Someone-1, pointed-3)
prt(pointed-3, out-4)
det(crimes-7, that-5)
amod(crimes-7, violent-6)
dobj(pointed-3, crimes-7)
prep_in(crimes-7, Europe-9)
cop(HIGHER-11, ARE-10)
root(ROOT-0, HIGHER-11)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBP do)
      (NP (PRP we))
      (VP (RB not)
        (VP (VB look)
          (PP (IN across)
            (NP (DT the) (NN pond))))
        (CC and)
        (VP (VB realize)
          (SBAR
            (WHADJP (WRB how) (JJ much))
            (S
              (NP (PRP it))
              (VP (VBZ sucks)))))))
    (. ?)))

advmod(look-5, Why-1)
aux(look-5, do-2)
nsubj(look-5, we-3)
nsubj(realize-10, we-3)
neg(look-5, not-4)
root(ROOT-0, look-5)
det(pond-8, the-7)
prep_across(look-5, pond-8)
conj_and(look-5, realize-10)
advmod(much-12, how-11)
dep(sucks-14, much-12)
nsubj(sucks-14, it-13)
ccomp(realize-10, sucks-14)

(ROOT
  (NP
    (NP (NNP High))
    (NP
      (NP (NN crime))
      (, ,)
      (CC and)
      (NP (JJ high) (NN unemployment)))
    (. .)))

root(ROOT-0, High-1)
dep(High-1, crime-2)
amod(unemployment-6, high-5)
dep(High-1, unemployment-6)
conj_and(crime-2, unemployment-6)

(ROOT
  (S
    (NP (NNP Good))
    (VP (VBD lord))
    (. .)))

nsubj(lord-2, Good-1)
root(ROOT-0, lord-2)

(ROOT
  (S
    (VP (VB Stop)
      (S
        (VP (VBG listening)
          (PP (TO to)
            (NP (NN propaganda))))))
    (. .)))

root(ROOT-0, Stop-1)
xcomp(Stop-1, listening-2)
prep_to(listening-2, propaganda-4)

(ROOT
  (S
    (PP (IN In)
      (NP (NN fact)))
    (NP (NNP BBC))
    (ADVP (RB recently))
    (VP (VBD did)
      (NP (DT a) (NN report))
      (PP (IN on)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP (NN crime))
            (VP (VBZ has)
              (VP (VBN gotten)
                (S
                  (ADJP (RBR worse)))))))))
    (. .)))

prep_in(did-5, fact-2)
nsubj(did-5, BBC-3)
advmod(did-5, recently-4)
root(ROOT-0, did-5)
det(report-7, a-6)
dobj(did-5, report-7)
advmod(gotten-12, how-9)
nsubj(gotten-12, crime-10)
aux(gotten-12, has-11)
prepc_on(did-5, gotten-12)
dep(gotten-12, worse-13)

(ROOT
  (S
    (VP (VB Get)
      (S
        (NP (NN y') (NNS alls))
        (VP (VB head)
          (PRT (RP out))
          (PP (IN of)
            (NP (DT the) (NN sand))))))
    (. .)))

root(ROOT-0, Get-1)
nn(alls-3, y'-2)
nsubj(head-4, alls-3)
ccomp(Get-1, head-4)
det(sand-8, the-7)
prep_out_of(head-4, sand-8)

(ROOT
  (S
    (NP (NNP Europe))
    (VP (VBZ 's)
      (VP (VBG moving)
        (PRT (RP away))
        (PP (IN from)
          (NP (NN government) (NN intervention)))))
    (. .)))

nsubj(moving-3, Europe-1)
aux(moving-3, 's-2)
root(ROOT-0, moving-3)
nn(intervention-7, government-6)
prep_away_from(moving-3, intervention-7)

(ROOT
  (S
    (VP (VBD Were)
      (VP (VBG moving)
        (PP (IN toward)
          (NP (PRP it)))))
    (. .)))

aux(moving-2, Were-1)
root(ROOT-0, moving-2)
prep_toward(moving-2, it-4)

(ROOT
  (S
    (NP (NNP Europe))
    (VP (VBZ 's)
      (VP (VBG starting)
        (S
          (VP (TO to)
            (VP (VB realize)
              (SBAR (IN that)
                (S
                  (NP (NN gun) (NN control))
                  (VP (VBZ fails)))))))))
    (. .)))

nsubj(starting-3, Europe-1)
xsubj(realize-5, Europe-1)
aux(starting-3, 's-2)
root(ROOT-0, starting-3)
aux(realize-5, to-4)
xcomp(starting-3, realize-5)
complm(fails-9, that-6)
nn(control-8, gun-7)
nsubj(fails-9, control-8)
ccomp(realize-5, fails-9)

(ROOT
  (S
    (VP (VBD Were)
      (VP (VBG moving)
        (PP (IN towards)
          (NP (PRP it)))))
    (. .)))

aux(moving-2, Were-1)
root(ROOT-0, moving-2)
prep_towards(moving-2, it-4)

