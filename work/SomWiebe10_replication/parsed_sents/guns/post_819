(ROOT
  (S
    (VP (VB Yo))
    (. .)))

root(ROOT-0, Yo-1)

(ROOT
  (S
    (NP (NNP Law) (NN abiding) (NNS citizens))
    (VP (MD should)
      (VP (VB be)
        (VP (VBN allowed)
          (S
            (VP (TO to)
              (VP (VB have)
                (NP
                  (NP (NNS guns))
                  (, ,)
                  (NP
                    (ADJP (RB not) (VBN convicted))
                    (NNS criminals)))))))))
    (. .)))

nn(citizens-3, Law-1)
nn(citizens-3, abiding-2)
nsubjpass(allowed-6, citizens-3)
aux(allowed-6, should-4)
auxpass(allowed-6, be-5)
root(ROOT-0, allowed-6)
aux(have-8, to-7)
xcomp(allowed-6, have-8)
dobj(have-8, guns-9)
neg(convicted-12, not-11)
amod(criminals-13, convicted-12)
appos(guns-9, criminals-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (NN someone))
        (VP (VBZ plans)
          (S
            (VP (TO to)
              (VP (VB buy)
                (NP (DT a) (NN gun))))))))
    (, ,)
    (NP (DT the) (NN shop) (NN owner))
    (VP (MD should)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB do)
              (NP (DT a) (NN background) (NN check))
              (PP (IN on)
                (NP (DT the) (NN customer))))))))
    (. .)))

mark(plans-3, If-1)
nsubj(plans-3, someone-2)
xsubj(buy-5, someone-2)
advcl(have-13, plans-3)
aux(buy-5, to-4)
xcomp(plans-3, buy-5)
det(gun-7, a-6)
dobj(buy-5, gun-7)
det(owner-11, the-9)
nn(owner-11, shop-10)
nsubj(have-13, owner-11)
xsubj(do-15, owner-11)
aux(have-13, should-12)
root(ROOT-0, have-13)
aux(do-15, to-14)
xcomp(have-13, do-15)
det(check-18, a-16)
nn(check-18, background-17)
dobj(do-15, check-18)
det(customer-21, the-20)
prep_on(do-15, customer-21)

(ROOT
  (S
    (NP (DT That) (NN way))
    (, ,)
    (NP (NN law) (NN abiding) (NNS citizens))
    (VP (MD can)
      (VP (VB be)
        (NP
          (NP (DT the) (NNS ones))
          (PP (IN with)
            (NP (NNS guns))))
        (, ,)
        (SBAR (IN that)
          (S
            (NP (PRP they))
            (VP (MD 'll)
              (ADVP (RB only))
              (VP (VB use)
                (PP (IN for)
                  (NP
                    (NP (NN protection))
                    (PP (IN against)
                      (NP (NNS intruders)))))))))))
    (. .)))

det(way-2, That-1)
nsubj(ones-10, way-2)
nn(citizens-6, law-4)
nn(citizens-6, abiding-5)
nsubj(ones-10, citizens-6)
aux(ones-10, can-7)
cop(ones-10, be-8)
det(ones-10, the-9)
root(ROOT-0, ones-10)
prep_with(ones-10, guns-12)
complm(use-18, that-14)
nsubj(use-18, they-15)
aux(use-18, 'll-16)
advmod(use-18, only-17)
ccomp(ones-10, use-18)
prep_for(use-18, protection-20)
prep_against(protection-20, intruders-22)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP mean) (, ,)
      (S
        (VP (VB come)
          (PRT (RP on)))))
    (. .)))

nsubj(mean-2, I-1)
root(ROOT-0, mean-2)
ccomp(mean-2, come-4)
prt(come-4, on-5)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP think)
          (SBAR (IN that)
            (S
              (NP (NN gun) (NN control))
              (VP (MD will)
                (VP (VB help)
                  (NP (DT this) (NN country)))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (ADVP (RB sorely))
      (VP (VBN mistaken)))
    (. .)))

mark(think-3, If-1)
nsubj(think-3, you-2)
advcl(mistaken-15, think-3)
complm(help-8, that-4)
nn(control-6, gun-5)
nsubj(help-8, control-6)
aux(help-8, will-7)
ccomp(think-3, help-8)
det(country-10, this-9)
dobj(help-8, country-10)
nsubjpass(mistaken-15, you-12)
auxpass(mistaken-15, are-13)
advmod(mistaken-15, sorely-14)
root(ROOT-0, mistaken-15)

(ROOT
  (S
    (NP (NNS Criminals))
    (VP (VBP are) (RB n't)
      (ADJP (JJ stupid)))
    (. .)))

nsubj(stupid-4, Criminals-1)
cop(stupid-4, are-2)
neg(stupid-4, n't-3)
root(ROOT-0, stupid-4)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD 'll)
      (VP (VB keep)
        (NP (PRP$ their) (NNS guns))
        (SBAR (IN while)
          (S
            (NP (DT the) (JJ law-abiding) (NNS citizens) (NN while) (NN fork))
            (`` ``)
            (VP (VBP em)
              (PRT (RP over))
              (PP (TO to)
                (NP (DT the) (NN government))))))))
    (. .)))

nsubj(keep-3, They-1)
aux(keep-3, 'll-2)
root(ROOT-0, keep-3)
poss(guns-5, their-4)
dobj(keep-3, guns-5)
mark(em-13, while-6)
det(fork-11, the-7)
amod(fork-11, law-abiding-8)
nn(fork-11, citizens-9)
nn(fork-11, while-10)
nsubj(em-13, fork-11)
advcl(keep-3, em-13)
prt(em-13, over-14)
det(government-17, the-16)
prep_to(em-13, government-17)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP see)
            (SBAR
              (WHADVP (WRB where))
              (S
                (NP (PRP I))
                (VP (VBP 'm)
                  (VP (VBG going)
                    (PP (IN with)
                      (NP (DT this)))))))))))
    (. .)))

nsubj(think-2, I-1)
root(ROOT-0, think-2)
nsubj(see-4, you-3)
ccomp(think-2, see-4)
advmod(going-8, where-5)
nsubj(going-8, I-6)
aux(going-8, 'm-7)
advcl(see-4, going-8)
prep_with(going-8, this-10)

(ROOT
  (S
    (NP
      (NP (DT Every) (NN citizen) (NN law))
      (VP (VBG abiding)
        (NP (NN citizen))))
    (VP (VBZ has)
      (NP (DT the) (NN right)
        (S
          (VP (TO to)
            (VP (VB bear)
              (NP (NNS arms)))))))
    (. .)))

det(law-3, Every-1)
nn(law-3, citizen-2)
nsubj(has-6, law-3)
partmod(law-3, abiding-4)
dobj(abiding-4, citizen-5)
root(ROOT-0, has-6)
det(right-8, the-7)
dobj(has-6, right-8)
aux(bear-10, to-9)
infmod(right-8, bear-10)
dobj(bear-10, arms-11)

