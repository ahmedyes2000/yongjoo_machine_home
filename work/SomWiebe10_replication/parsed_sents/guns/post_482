(ROOT
  (S
    (NP (DT The) (NN question))
    (ADVP (PRP itself))
    (VP (VBZ is)
      (VP (VBN biased)))
    (. .)))

det(question-2, The-1)
nsubjpass(biased-5, question-2)
advmod(biased-5, itself-3)
auxpass(biased-5, is-4)
root(ROOT-0, biased-5)

(ROOT
  (S
    (NP (DT The) (JJ proper) (NN question))
    (VP (VBZ is)
      (SBAR (IN whether)
        (S
          (NP (NN law) (NN abiding) (NNS citizens))
          (VP (MD should)
            (VP (VB be)
              (VP (VBN forced)
                (S
                  (VP (TO to)
                    (VP (VB disarm)
                      (SBAR
                        (WHADVP (WRB whenever))
                        (S
                          (NP (PRP they))
                          (VP (VBP are)
                            (VP (VBG going)
                              (PP (IN into)
                                (NP (NNP National) (NNP Park) (NNP Service) (JJ controlled) (NN property))))))))))))))))
    (. .)))

det(question-3, The-1)
amod(question-3, proper-2)
nsubj(is-4, question-3)
root(ROOT-0, is-4)
complm(forced-11, whether-5)
nn(citizens-8, law-6)
nn(citizens-8, abiding-7)
nsubjpass(forced-11, citizens-8)
aux(forced-11, should-9)
auxpass(forced-11, be-10)
ccomp(is-4, forced-11)
aux(disarm-13, to-12)
xcomp(forced-11, disarm-13)
advmod(going-17, whenever-14)
nsubj(going-17, they-15)
aux(going-17, are-16)
advcl(disarm-13, going-17)
nn(property-23, National-19)
nn(property-23, Park-20)
nn(property-23, Service-21)
amod(property-23, controlled-22)
prep_into(going-17, property-23)

(ROOT
  (S
    (S
      (VP (VBG Or) ('' '')))
    (VP (MD Should)
      (ADVP
        (ADVP
          (NP (DT the) (NN ban))
          (PP (IN on)
            (NP (JJ lawful) (NNS firearms))))
        (PP (IN in)
          (NP (NNP National) (NNP Parks))))
      (VP (VB be)
        (VP (VBN repealed))))
    (. ?)))

csubjpass(repealed-13, Or-1)
aux(repealed-13, Should-3)
det(ban-5, the-4)
advmod(repealed-13, ban-5)
amod(firearms-8, lawful-7)
prep_on(ban-5, firearms-8)
nn(Parks-11, National-10)
prep_in(ban-5, Parks-11)
auxpass(repealed-13, be-12)
root(ROOT-0, repealed-13)

(ROOT
  (S ('' '')
    (PP
      (NP (NNP Asking))
      (IN whether)
      (NP
        (NP (NNS guns))
        (SBAR
          (S
            (VP (MD should)
              (VP (VB be)
                (VP (VBN allowed)
                  (PP (IN in)
                    (NP (NNP National) (NNP Parks))))))))))
    (VP (VBZ puts)
      (NP
        (NP (DT the) (NN burden))
        (PP (IN of)
          (NP (NN proof))))
      (PP (IN on)
        (NP
          (NP (NNS gunowners))
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (PRP it))
              (ADVP (RB rightly))
              (VP (VBZ belongs)
                (PP (IN on)
                  (NP
                    (NP (DT those))
                    (SBAR
                      (WHNP (WP who))
                      (S
                        (VP (VBP wish)
                          (S
                            (VP (TO to)
                              (VP (VB continue)
                                (S
                                  (VP (VBG forcing)
                                    (S
                                      (NP (PRP us))
                                      (VP (TO to)
                                        (VP (VB disarm))))))))))))))))))))
    (. .)))

dep(puts-11, Asking-2)
prep_whether(puts-11, guns-4)
aux(allowed-7, should-5)
auxpass(allowed-7, be-6)
rcmod(guns-4, allowed-7)
nn(Parks-10, National-9)
prep_in(allowed-7, Parks-10)
root(ROOT-0, puts-11)
det(burden-13, the-12)
dobj(puts-11, burden-13)
prep_of(burden-13, proof-15)
prep_on(puts-11, gunowners-17)
advmod(belongs-21, when-18)
nsubj(belongs-21, it-19)
advmod(belongs-21, rightly-20)
dep(gunowners-17, belongs-21)
prep_on(belongs-21, those-23)
nsubj(wish-25, those-23)
rcmod(those-23, wish-25)
aux(continue-27, to-26)
xcomp(wish-25, continue-27)
xcomp(continue-27, forcing-28)
nsubj(disarm-31, us-29)
aux(disarm-31, to-30)
xcomp(forcing-28, disarm-31)

(ROOT
  (S
    (NP (NNS Criminals))
    (VP (VBP are)
      (VP (VBG going)
        (S
          (VP (TO to)
            (VP
              (VP (VB ignore)
                (NP (DT the) (NN policy)))
              (CC and)
              (VP (VB continue)
                (S
                  (VP (TO to)
                    (VP (VB do)
                      (SBAR
                        (WHNP (WP what))
                        (S
                          (NP (NNS criminals))
                          (VP (VBP do)))))))))))))
    (. .)))

nsubj(going-3, Criminals-1)
xsubj(ignore-5, Criminals-1)
aux(going-3, are-2)
root(ROOT-0, going-3)
aux(ignore-5, to-4)
xcomp(going-3, ignore-5)
det(policy-7, the-6)
dobj(ignore-5, policy-7)
xcomp(going-3, continue-9)
conj_and(ignore-5, continue-9)
aux(do-11, to-10)
xcomp(continue-9, do-11)
dobj(do-14, what-12)
nsubj(do-14, criminals-13)
ccomp(do-11, do-14)

(ROOT
  (S
    (NP (RB Only) (JJ law-abiding) (NNS citizens))
    (VP (VBP try)
      (S
        (VP (TO to)
          (VP (VB obey)
            (NP (DT this) (JJ silly) (NN ban))))))
    (. .)))

advmod(citizens-3, Only-1)
amod(citizens-3, law-abiding-2)
nsubj(try-4, citizens-3)
xsubj(obey-6, citizens-3)
root(ROOT-0, try-4)
aux(obey-6, to-5)
xcomp(try-4, obey-6)
det(ban-9, this-7)
amod(ban-9, silly-8)
dobj(obey-6, ban-9)

(ROOT
  (S
    (NP (DT The) (NN ban))
    (VP
      (VP (VBZ is)
        (ADJP (RB patently) (JJ unconstitutional)))
      (CC and)
      (VP (VBZ is)
        (ADVP (RB actually))
        (PP (IN in)
          (NP (NN conflict)))
        (PP (IN with)
          (NP (JJ federal) (NN law)))))
    (. .)))

det(ban-2, The-1)
nsubj(unconstitutional-5, ban-2)
nsubj(is-7, ban-2)
cop(unconstitutional-5, is-3)
advmod(unconstitutional-5, patently-4)
root(ROOT-0, unconstitutional-5)
conj_and(unconstitutional-5, is-7)
advmod(is-7, actually-8)
prep_in(is-7, conflict-10)
amod(law-13, federal-12)
prep_with(is-7, law-13)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (NP
        (NP (NN way) (JJ past) (NN time))
        (PP (IN for)
          (NP (DT the) (NN ban)
            (S
              (VP (TO to)
                (VP (VB go)
                  (PRT (RP away)))))))))
    (. .)))

nsubj(time-5, It-1)
cop(time-5, 's-2)
nn(time-5, way-3)
amod(time-5, past-4)
root(ROOT-0, time-5)
det(ban-8, the-7)
prep_for(time-5, ban-8)
aux(go-10, to-9)
infmod(ban-8, go-10)
prt(go-10, away-11)

(ROOT
  (S
    (NP (NNS Guns))
    (VP
      (VP (VBP are) (RB not)
        (VP (VBN banned)
          (PP (IN in)
            (NP (NNP National) (NNS Forests)))))
      (CC and)
      (VP
        (ADVP (RB there))
        (VBZ is) (RB n't)
        (NP
          (NP (DT a) (NN problem))
          (PP (IN with)
            (NP (NNS people)))
          (S
            (ADVP (RB legally))
            (VP (VBG carrying)
              (S
                (S
                  (NP (NNS guns))
                  (VP (VBG causing)
                    (NP (NNS problems))
                    (PP (IN on)
                      (NP (DT those) (NNS lands)))))
                (CC so)
                (SBARQ
                  (WHADVP (WRB why))
                  (SQ (VBZ is)
                    (NP (PRP it))
                    (VP (VBN assumed)
                      (SBAR (IN that)
                        (S
                          (NP (NNS people))
                          (VP (MD will)
                            (VP (VB be)
                              (ADJP (RBR less) (JJ responsible)
                                (PP (IN in)
                                  (NP (NNP National) (NNP Parks))))))))))
                  (. ?))))))))))

nsubjpass(banned-4, Guns-1)
auxpass(banned-4, are-2)
neg(banned-4, not-3)
root(ROOT-0, banned-4)
nn(Forests-7, National-6)
prep_in(banned-4, Forests-7)
advmod(problem-13, there-9)
cop(problem-13, is-10)
neg(problem-13, n't-11)
det(problem-13, a-12)
conj_and(banned-4, problem-13)
prep_with(problem-13, people-15)
advmod(carrying-17, legally-16)
dep(problem-13, carrying-17)
nsubj(causing-19, guns-18)
dep(carrying-17, causing-19)
dobj(causing-19, problems-20)
det(lands-23, those-22)
prep_on(causing-19, lands-23)
advmod(assumed-28, why-25)
auxpass(assumed-28, is-26)
nsubjpass(assumed-28, it-27)
dep(carrying-17, assumed-28)
conj_so(causing-19, assumed-28)
complm(responsible-34, that-29)
nsubj(responsible-34, people-30)
aux(responsible-34, will-31)
cop(responsible-34, be-32)
advmod(responsible-34, less-33)
ccomp(assumed-28, responsible-34)
nn(Parks-37, National-36)
prep_in(responsible-34, Parks-37)

