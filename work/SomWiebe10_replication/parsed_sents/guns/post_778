(ROOT
  (S
    (NP (PRP I))
    (VP (VBP say)
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBP 'm)
            (VP (VBG moving)
              (ADVP (RB back) (NN home))
              (PP (TO to)
                (NP (NNP Utah))))))))
    (. .)))

nsubj(say-2, I-1)
root(ROOT-0, say-2)
nsubj(moving-5, I-3)
aux(moving-5, 'm-4)
ccomp(say-2, moving-5)
advmod(moving-5, back-6)
dep(back-6, home-7)
prep_to(moving-5, Utah-9)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ
      (VP (VBZ does)
        (SBAR
          (S
            (S (RB not)
              (VP (VBG allowing)
                (NP (PRP them))
                (PP (IN on)
                  (NP (NN campus)))))
            (VP (VBP say)
              (PP (TO to)
                (NP (DT the) (NN gun) (NNS owners))))))))
    (. ?)))

nsubj(does-2, What-1)
root(ROOT-0, does-2)
neg(allowing-4, not-3)
csubj(say-8, allowing-4)
dobj(allowing-4, them-5)
prep_on(allowing-4, campus-7)
ccomp(does-2, say-8)
det(owners-12, the-10)
nn(owners-12, gun-11)
prep_to(say-8, owners-12)

(ROOT
  (S
    (NP (DT A) (JJ crazy) (NN person))
    (VP (MD wo) (RB n't)
      (VP (VB be)
        (VP (VBN stopped)
          (PP (IN from)
            (NP
              (NP (DT a) (NN shooting))
              (ADJP (JJ okay) (JJ fine)))))))
    (. .)))

det(person-3, A-1)
amod(person-3, crazy-2)
nsubjpass(stopped-7, person-3)
aux(stopped-7, wo-4)
neg(stopped-7, n't-5)
auxpass(stopped-7, be-6)
root(ROOT-0, stopped-7)
det(shooting-10, a-9)
prep_from(stopped-7, shooting-10)
amod(fine-12, okay-11)
amod(shooting-10, fine-12)

(ROOT
  (S
    (NP
      (NP (NN Someone))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBZ is)
            (SBAR (IN after)
              (S
                (NP (NN someone))
                (VP (VBZ is) (RB not)
                  (VP (VBG going)
                    (PP (TO to)
                      (NP (NN barge)))
                    (PP (IN into)
                      (NP
                        (NP (CD one))
                        (PP (IN of)
                          (NP (PRP$ his) (NNS classes)
                            (S
                              (VP (TO to)
                                (VP (VB take)
                                  (S
                                    (NP (PRP them))
                                    (ADJP (RB out))
                                    (SBAR (IN if)
                                      (S
                                        (NP (PRP they))
                                        (VP (VBP know)
                                          (NP
                                            (NP (DT some) (JJ other) (NNS students))
                                            (PP (IN in)
                                              (NP (DT the) (NN room)))))))))))))))))))))))
    (VP (MD could)
      (VP (VB take)
        (NP (PRP them))
        (PRT (RP down))
        (ADVP (RB first))))
    (. .)))

nsubj(is-3, Someone-1)
nsubj(take-30, Someone-1)
rcmod(Someone-1, is-3)
mark(going-8, after-4)
nsubj(going-8, someone-5)
aux(going-8, is-6)
neg(going-8, not-7)
advcl(is-3, going-8)
prep_to(going-8, barge-10)
prep_into(going-8, one-12)
poss(classes-15, his-14)
prep_of(one-12, classes-15)
aux(take-17, to-16)
infmod(classes-15, take-17)
nsubj(know-22, them-18)
dep(know-22, out-19)
mark(know-22, if-20)
nsubj(know-22, they-21)
xcomp(take-17, know-22)
det(students-25, some-23)
amod(students-25, other-24)
dobj(know-22, students-25)
det(room-28, the-27)
prep_in(students-25, room-28)
aux(take-30, could-29)
root(ROOT-0, take-30)
dobj(take-30, them-31)
prt(take-30, down-32)
advmod(take-30, first-33)

(ROOT
  (S
    (NP
      (NP (NNS People))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBP take)
            (NP
              (NP (NNS guns))
              (PP (IN against)
                (NP (DT those))))
            (PP (IN without)
              (NP (PRP them)))))))
    (VP (VBP are)
      (VP (VBG cowards)
        (PP (IN by)
          (NP (NN nature)))))
    (. .)))

nsubj(take-3, People-1)
nsubj(cowards-10, People-1)
rcmod(People-1, take-3)
dobj(take-3, guns-4)
prep_against(guns-4, those-6)
prep_without(take-3, them-8)
aux(cowards-10, are-9)
root(ROOT-0, cowards-10)
prep_by(cowards-10, nature-12)

(ROOT
  (S
    (S
      (VP (VBN Confronted)
        (PP (IN with)
          (NP
            (ADJP (JJ equal)
              (CC or)
              (JJR greater))
            (NN force)))))
    (VP (VBZ makes)
      (SBAR
        (S
          (NP (PRP them))
          (VP (VBP show)
            (NP (PRP$ their) (JJ true) (NN yellow))))))
    (. .)))

csubj(makes-7, Confronted-1)
amod(force-6, equal-3)
conj_or(equal-3, greater-5)
amod(force-6, greater-5)
prep_with(Confronted-1, force-6)
root(ROOT-0, makes-7)
nsubj(show-9, them-8)
ccomp(makes-7, show-9)
poss(yellow-12, their-10)
amod(yellow-12, true-11)
dobj(show-9, yellow-12)

(ROOT
  (S (`` ``)
    (SBAR (IN Although)
      (S
        (NP (PRP you))
        (VP (VBP 're)
          (ADJP (JJ old) (RB enough)
            (PP (IN for)
              (NP (DT the) (NN government)
                (S
                  (VP (TO to)
                    (VP (VB allow)
                      (S
                        (NP (PRP you))
                        (VP (TO to)
                          (VP (VB have)
                            (NP (NNS guns))))))))))))))
    (NP (PRP you))
    (VP (MD ca) (RB n't)
      (VP (VB have)
        (NP (PRP them))
        (SBAR
          (ADVP (RB here))
          (IN because)
          (S
            (NP (EX there))
            (VP (VBZ 's)
              (NP (NNS people)))))))
    (. .)))

mark(old-5, Although-2)
nsubj(old-5, you-3)
cop(old-5, 're-4)
dep(have-19, old-5)
advmod(old-5, enough-6)
det(government-9, the-8)
prep_for(old-5, government-9)
aux(allow-11, to-10)
infmod(government-9, allow-11)
nsubj(have-14, you-12)
aux(have-14, to-13)
xcomp(allow-11, have-14)
dobj(have-14, guns-15)
nsubj(have-19, you-16)
aux(have-19, ca-17)
neg(have-19, n't-18)
root(ROOT-0, have-19)
dobj(have-19, them-20)
advmod('s-24, here-21)
dep('s-24, because-22)
expl('s-24, there-23)
dep(have-19, 's-24)
nsubj('s-24, people-25)

(ROOT
  (NP ('' '')
    (CC And)
    (NP
      (NP (NN out))
      (PP (IN in)
        (NP
          (NP (DT the) (NN street))
          (SBAR
            (S
              (NP (EX there))
              (VP (VBP are) (RB n't)))))))
    (. ?)))

cc(out-3, And-2)
root(ROOT-0, out-3)
det(street-6, the-5)
prep_in(out-3, street-6)
expl(are-8, there-7)
rcmod(street-6, are-8)
neg(are-8, n't-9)

(ROOT
  (S
    (NP
      (NP (NNS People))
      (PP (IN in)
        (NP (NNP Utah))))
    (VP (VBP are) (RB not)
      (ADJP (RB that) (JJ different))
      (PP (IN from)
        (NP
          (NP (DT the) (NN rest))
          (PP (IN of)
            (NP (DT the) (NN country))))))
    (. .)))

nsubj(different-7, People-1)
prep_in(People-1, Utah-3)
cop(different-7, are-4)
neg(different-7, not-5)
advmod(different-7, that-6)
root(ROOT-0, different-7)
det(rest-10, the-9)
prep_from(different-7, rest-10)
det(country-13, the-12)
prep_of(rest-10, country-13)

(ROOT
  (S
    (NP (DT Those)
      (ADJP (JJ committed) (RB enough)
        (S
          (VP (TO to)
            (VP
              (VP (VB complete)
                (NP (DT the) (NN course)))
              (CC and)
              (VP (VB pass)
                (NP
                  (NP (PDT all) (DT the) (NNS checks))
                  (VP (VBN required)
                    (S
                      (VP (TO to)
                        (VP (VB get)
                          (NP (DT a) (JJ concealed) (NN carry))))))))))))
      (NN permit))
    (VP (MD should)
      (VP (VB be)
        (VP (VBN allowed)
          (S
            (VP (TO to)
              (VP (VB carry)
                (NP (PRP it))
                (FRAG
                  (WHADVP (WRB wherever)))))))))
    (. .)))

det(permit-19, Those-1)
amod(permit-19, committed-2)
advmod(committed-2, enough-3)
aux(complete-5, to-4)
xcomp(committed-2, complete-5)
det(course-7, the-6)
dobj(complete-5, course-7)
xcomp(committed-2, pass-9)
conj_and(complete-5, pass-9)
predet(checks-12, all-10)
det(checks-12, the-11)
dobj(pass-9, checks-12)
xsubj(get-15, checks-12)
partmod(checks-12, required-13)
aux(get-15, to-14)
xcomp(required-13, get-15)
det(carry-18, a-16)
amod(carry-18, concealed-17)
dobj(get-15, carry-18)
nsubjpass(allowed-22, permit-19)
aux(allowed-22, should-20)
auxpass(allowed-22, be-21)
root(ROOT-0, allowed-22)
aux(carry-24, to-23)
xcomp(allowed-22, carry-24)
dobj(carry-24, it-25)
dep(carry-24, wherever-26)

(ROOT
  (S
    (NP (EX There))
    (VP (MD should)
      (VP (VB be)
        (NP (DT no) (JJ double) (NN standard))))
    (. .)))

expl(standard-6, There-1)
aux(standard-6, should-2)
cop(standard-6, be-3)
det(standard-6, no-4)
amod(standard-6, double-5)
root(ROOT-0, standard-6)

(ROOT
  (S ('' '')
    (PP (RB Just) (IN because)
      (S
        (VP (VBG allowing)
          (NP (NNS students))
          (S
            (VP (TO to)
              (VP (VB carry)
                (NP (JJ concealed) (NNS weapons) (NNS works))
                (PP (IN in)
                  (NP (NNP Utah)))))))))
    (VP (VBZ does) (RB n't)
      (VP (VB mean)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ 's)
              (VP (VBG going)
                (S
                  (VP (TO to)
                    (VP (VB work)
                      (PP (IN in)
                        (NP (DT every) (JJ other) (NN state))))))))))))
    (. .)))

advmod(mean-15, Just-2)
prepc_because(mean-15, allowing-4)
dobj(allowing-4, students-5)
aux(carry-7, to-6)
xcomp(allowing-4, carry-7)
amod(works-10, concealed-8)
nn(works-10, weapons-9)
dobj(carry-7, works-10)
prep_in(carry-7, Utah-12)
aux(mean-15, does-13)
neg(mean-15, n't-14)
root(ROOT-0, mean-15)
nsubj(going-18, it-16)
xsubj(work-20, it-16)
aux(going-18, 's-17)
ccomp(mean-15, going-18)
aux(work-20, to-19)
xcomp(going-18, work-20)
det(state-24, every-22)
amod(state-24, other-23)
prep_in(work-20, state-24)

(ROOT
  (NP (NNP '') (NNP Sorry) (. .)))


(ROOT
  (S
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBZ does)))))
    (. .)))

nsubj(think-2, I-1)
root(ROOT-0, think-2)
nsubj(does-4, it-3)
ccomp(think-2, does-4)

