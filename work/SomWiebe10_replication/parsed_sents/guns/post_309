(ROOT
  (S
    (INTJ (RB Sure))
    (, ,)
    (NP (PRP I))
    (VP (VBP guess)
      (SBAR
        (WHNP (WP what))
        (S
          (NP (PRP you))
          (VP (VBP are)
            (VP (VBG saying)
              (VP (VBZ is)
                (ADJP (JJ possible))))))))
    (. .)))

dep(guess-4, Sure-1)
nsubj(guess-4, I-3)
root(ROOT-0, guess-4)
dobj(saying-8, what-5)
nsubj(saying-8, you-6)
aux(saying-8, are-7)
ccomp(guess-4, saying-8)
cop(possible-10, is-9)
dep(saying-8, possible-10)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (S
          (NP (PRP I))
          (VP (VBP have)
            (NP (DT a) (NN gun))))
        (CC and)
        (S
          (NP (PRP I))
          (VP (VBP stick)
            (NP (PRP it))
            (PP (IN in)
              (NP
                (NP (DT the) (NN perp) (POS 's))
                (NN face)))))))
    (, ,)
    (NP (PRP he))
    (VP (MD may)
      (VP
        (VP (VB think)
          (SBAR
            (S
              (NP (PRP he))
              (VP (VBZ is)
                (VP (VBG being)
                  (VP (VBN threatened)))))))
        (CC and)
        (VP (VB react)
          (ADVP (RB violently)))))
    (. .)))

mark(have-3, If-1)
nsubj(have-3, I-2)
advcl(think-18, have-3)
det(gun-5, a-4)
dobj(have-3, gun-5)
nsubj(stick-8, I-7)
conj_and(have-3, stick-8)
advcl(think-18, stick-8)
dobj(stick-8, it-9)
det(perp-12, the-11)
poss(face-14, perp-12)
prep_in(stick-8, face-14)
nsubj(think-18, he-16)
nsubj(react-24, he-16)
aux(think-18, may-17)
root(ROOT-0, think-18)
nsubjpass(threatened-22, he-19)
aux(threatened-22, is-20)
auxpass(threatened-22, being-21)
ccomp(think-18, threatened-22)
conj_and(think-18, react-24)
advmod(react-24, violently-25)

(ROOT
  (S (CC But)
    (NP (DT that))
    (VP (MD would)
      (VP (VB be)
        (NP
          (NP (DT the) (JJ last) (JJ violent) (NN reaction))
          (SBAR
            (S
              (NP (PRP he))
              (VP (MD would)
                (ADVP (RB ever))
                (VP (VB make))))))))
    (. .)))

cc(reaction-8, But-1)
nsubj(reaction-8, that-2)
aux(reaction-8, would-3)
cop(reaction-8, be-4)
det(reaction-8, the-5)
amod(reaction-8, last-6)
amod(reaction-8, violent-7)
root(ROOT-0, reaction-8)
dobj(make-12, reaction-8)
nsubj(make-12, he-9)
aux(make-12, would-10)
advmod(make-12, ever-11)
rcmod(reaction-8, make-12)

(ROOT
  (FRAG
    (WHNP (WDT What))
    (. ?)))

root(ROOT-0, What-1)

(ROOT
  (SINV (VBP Am)
    (NP (PRP I))
    (VP
      (VP (VBN supposed)
        (PP (TO to)
          (NP
            (QP (RB just) (CD cower))))
        (PP (IN in)
          (NP (DT a) (NN corner))))
      (CC and)
      (VP (VBD let)
        (SBAR
          (S
            (NP (DT the) (NN perp))
            (VP (VBP do)
              (FRAG
                (SBAR
                  (WHNP (WDT whatever))
                  (S
                    (NP (PRP he))
                    (VP (VBZ wants)
                      (S
                        (VP (TO to)
                          (VP (VB do)
                            (PP (TO to)
                              (NP
                                (NP (PRP me))
                                (CC and)
                                (NP (PRP$ my) (NN family))))))))))
                (. ?)))))))))

aux(supposed-3, Am-1)
nsubj(supposed-3, I-2)
nsubj(let-11, I-2)
root(ROOT-0, supposed-3)
quantmod(cower-6, just-5)
prep_to(supposed-3, cower-6)
det(corner-9, a-8)
prep_in(supposed-3, corner-9)
conj_and(supposed-3, let-11)
det(perp-13, the-12)
nsubj(do-14, perp-13)
ccomp(let-11, do-14)
dep(wants-17, whatever-15)
nsubj(wants-17, he-16)
xsubj(do-19, he-16)
dep(do-14, wants-17)
aux(do-19, to-18)
xcomp(wants-17, do-19)
prep_to(do-19, me-21)
poss(family-24, my-23)
prep_to(do-19, family-24)
conj_and(me-21, family-24)

(ROOT
  (VP (VB Hell)
    (INTJ (UH NO) (. !))))

root(ROOT-0, Hell-1)
dep(Hell-1, NO-2)

