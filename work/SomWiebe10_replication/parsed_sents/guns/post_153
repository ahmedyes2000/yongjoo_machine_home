(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN militia) (NN clause))
        (VP (VBZ is)
          (ADJP (JJ antiquated))
          (, ,)
          (SBAR (IN than)
            (S
              (NP
                (NP (DT an) (JJ individual) (NN right))
                (PP (TO to)
                  (NP (NNS arms))))
              (VP (VBZ is)
                (NP
                  (NP (DT all))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (VBZ is)
                        (VP (VBN left))))))))))))
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP (RB entirely) (JJ possible))
      (SBAR (IN that)
        (S
          (NP (DT the) (NN militia) (NN clause))
          (VP (MD can)
            (VP (VB have)
              (NP (DT no) (JJ modern) (NN relevance)))))))
    (. .)))

mark(antiquated-6, If-1)
det(clause-4, the-2)
nn(clause-4, militia-3)
nsubj(antiquated-6, clause-4)
cop(antiquated-6, is-5)
advcl(possible-22, antiquated-6)
mark(all-15, than-8)
det(right-11, an-9)
amod(right-11, individual-10)
nsubj(all-15, right-11)
prep_to(right-11, arms-13)
cop(all-15, is-14)
advcl(antiquated-6, all-15)
nsubjpass(left-18, all-15)
auxpass(left-18, is-17)
rcmod(all-15, left-18)
nsubj(possible-22, It-19)
cop(possible-22, is-20)
advmod(possible-22, entirely-21)
root(ROOT-0, possible-22)
complm(have-28, that-23)
det(clause-26, the-24)
nn(clause-26, militia-25)
nsubj(have-28, clause-26)
aux(have-28, can-27)
ccomp(possible-22, have-28)
det(relevance-31, no-29)
amod(relevance-31, modern-30)
dobj(have-28, relevance-31)

(ROOT
  (S
    (NP
      (NP (CD One))
      (PP (IN of)
        (NP
          (NP (DT the) (NNS justifications))
          (PP (IN for)
            (NP (DT this) (NN argument))))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (VP (VBN considered)
              (S
                (ADJP (JJ unreasonable)))
              (PP (IN for)
                (NP (NNS citizens)))
              (VP (TO to)
                (VP (VB hold)
                  (NP
                    (NP (NNS tanks)
                      (CC and)
                      (NNS bazookas))
                    (, ,)
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (VP (VBP are)
                          (NP
                            (NP (DT the) (JJ only) (NNS arms))
                            (SBAR
                              (WHNP (WDT that))
                              (S
                                (VP (MD would)
                                  (VP (VB enable)
                                    (NP (DT a) (NN militia)
                                      (S
                                        (VP (TO to)
                                          (VP
                                            (ADVP (RB legitimately))
                                            (VB check)
                                            (NP
                                              (NP (DT the) (NN power))
                                              (PP (IN of)
                                                (NP
                                                  (NP (DT the) (NNP United) (NNPS States) (NN government))
                                                  (CC and)
                                                  (NP (PRP$ its) (NN military)))))))))))))))))))))))))
    (. .)))

nsubj(is-8, One-1)
det(justifications-4, the-3)
prep_of(One-1, justifications-4)
det(argument-7, this-6)
prep_for(justifications-4, argument-7)
root(ROOT-0, is-8)
complm(considered-12, that-9)
nsubjpass(considered-12, it-10)
auxpass(considered-12, is-11)
ccomp(is-8, considered-12)
acomp(considered-12, unreasonable-13)
prep_for(considered-12, citizens-15)
aux(hold-17, to-16)
dep(considered-12, hold-17)
dobj(hold-17, tanks-18)
nsubj(arms-26, tanks-18)
dobj(hold-17, bazookas-20)
conj_and(tanks-18, bazookas-20)
nsubj(arms-26, bazookas-20)
cop(arms-26, are-23)
det(arms-26, the-24)
amod(arms-26, only-25)
rcmod(tanks-18, arms-26)
nsubj(enable-29, arms-26)
aux(enable-29, would-28)
rcmod(arms-26, enable-29)
det(militia-31, a-30)
dobj(enable-29, militia-31)
aux(check-34, to-32)
advmod(check-34, legitimately-33)
infmod(militia-31, check-34)
det(power-36, the-35)
dobj(check-34, power-36)
det(government-41, the-38)
nn(government-41, United-39)
nn(government-41, States-40)
prep_of(power-36, government-41)
poss(military-44, its-43)
prep_of(power-36, military-44)
conj_and(government-41, military-44)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is) (, ,)
      (ADVP (RB therefore))
      (, ,)
      (ADJP (JJ unreasonable)
        (PP
          (PP (IN for)
            (NP (DT a) (NN militia)))
          (, ,)
          (PP (IN in)
            (NP (DT the) (JJ modern) (NN day)))
          (, ,)))
      (S
        (VP (TO to)
          (VP (VB become) (`` ``)
            (NP (RB well) (JJ regulated))
            ('' '')
            (PP (JJ such))
            (SBAR (IN that)
              (S
                (NP (PRP it))
                (VP (MD could)
                  (VP (VB achieve)
                    (S
                      (NP (DT the) (NN purpose))
                      (VP
                        (ADVP (RB initially))
                        (VBN set)
                        (PRT (RP forth))
                        (PP (IN by)
                          (NP (DT the) (NNS founders)))))))))))))
    (. .)))

nsubj(unreasonable-6, It-1)
xsubj(regulated-20, It-1)
cop(unreasonable-6, is-2)
advmod(unreasonable-6, therefore-4)
root(ROOT-0, unreasonable-6)
det(militia-9, a-8)
prep_for(unreasonable-6, militia-9)
det(day-14, the-12)
amod(day-14, modern-13)
prep_in(unreasonable-6, day-14)
aux(regulated-20, to-16)
cop(regulated-20, become-17)
advmod(regulated-20, well-19)
xcomp(unreasonable-6, regulated-20)
prep(regulated-20, such-22)
complm(achieve-26, that-23)
nsubj(achieve-26, it-24)
aux(achieve-26, could-25)
ccomp(regulated-20, achieve-26)
det(purpose-28, the-27)
nsubj(set-30, purpose-28)
advmod(set-30, initially-29)
ccomp(achieve-26, set-30)
prt(set-30, forth-31)
det(founders-34, the-33)
prep_by(set-30, founders-34)

(ROOT
  (S
    (NP
      (NP (DT This) (NN line))
      (PP (IN of)
        (NP (NN logic))))
    (VP
      (VP
        (ADVP (RB effectively))
        (VBZ invalidates)
        (NP (DT the) (NN militia) (NN clause)))
      (, ,)
      (CC and)
      (VP (VBZ leaves)
        (NP (DT the) (JJ second) (NN clause)
          (S
            (VP (TO to)
              (VP (VB stand)
                (ADVP (RB alone))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ secures)
                      (S
                        (NP
                          (NP (DT the) (`` ``) (NN right))
                          (PP (IN of)
                            (NP (DT the) (NNS people))))
                        (VP (TO to)
                          (VP (VB keep)
                            (CC and)
                            (VB bear)
                            (NP (NNS arms) ('' ''))))))))))))))
    (. .)))

det(line-2, This-1)
nsubj(invalidates-6, line-2)
nsubj(leaves-12, line-2)
prep_of(line-2, logic-4)
advmod(invalidates-6, effectively-5)
root(ROOT-0, invalidates-6)
det(clause-9, the-7)
nn(clause-9, militia-8)
dobj(invalidates-6, clause-9)
conj_and(invalidates-6, leaves-12)
det(clause-15, the-13)
amod(clause-15, second-14)
dobj(leaves-12, clause-15)
aux(stand-17, to-16)
infmod(clause-15, stand-17)
advmod(stand-17, alone-18)
nsubj(secures-21, which-20)
ccomp(stand-17, secures-21)
det(right-24, the-22)
nsubj(keep-29, right-24)
nsubj(bear-31, right-24)
det(people-27, the-26)
prep_of(right-24, people-27)
aux(keep-29, to-28)
xcomp(secures-21, keep-29)
xcomp(secures-21, bear-31)
conj_and(keep-29, bear-31)
dobj(keep-29, arms-32)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT this) (JJ second) (NN clause))
        (VP (VBZ is)
          (ADJP (JJ invalidated)))))
    (, ,)
    (ADVP (RB then))
    (NP (EX there))
    (VP (VBZ is)
      (NP
        (NP (NN nothing) (NN left))
        (PP (IN of)
          (NP (DT the) (NNP Second) (NNP Amendment)))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (MD would)
              (VP (VB have)
                (NP
                  (NP (DT any) (NN validity))
                  (PP (IN in)
                    (NP (DT the) (JJ modern) (NN day))))))))))
    (. .)))

mark(invalidated-6, If-1)
det(clause-4, this-2)
amod(clause-4, second-3)
nsubj(invalidated-6, clause-4)
cop(invalidated-6, is-5)
advcl(is-10, invalidated-6)
advmod(is-10, then-8)
expl(is-10, there-9)
root(ROOT-0, is-10)
nn(left-12, nothing-11)
nsubj(is-10, left-12)
nsubj(have-19, left-12)
det(Amendment-16, the-14)
nn(Amendment-16, Second-15)
prep_of(left-12, Amendment-16)
aux(have-19, would-18)
rcmod(left-12, have-19)
det(validity-21, any-20)
dobj(have-19, validity-21)
det(day-25, the-23)
amod(day-25, modern-24)
prep_in(validity-21, day-25)

(ROOT
  (S
    (PP (IN As)
      (NP (JJ such)))
    (, ,)
    (S
      (NP (DT the) (JJ second) (NN clause))
      (VP (MD should) (RB not)
        (VP (VB be)
          (ADJP (JJ invalidated)))))
    (, ,)
    (CC and)
    (S
      (NP
        (NP (DT the) (JJ individual) (NN right))
        (PP (IN of)
          (NP (DT the) (NNS people)))
        (S
          (VP (TO to)
            (VP (VB keep)
              (CC and)
              (VB bear)
              (NP (NNS arms))))))
      (VP (MD should)
        (VP (VB be)
          (VP (VBN upheld)))))
    (. .)))

prep_such_as(invalidated-10, such-2)
det(clause-6, the-4)
amod(clause-6, second-5)
nsubj(invalidated-10, clause-6)
aux(invalidated-10, should-7)
neg(invalidated-10, not-8)
cop(invalidated-10, be-9)
root(ROOT-0, invalidated-10)
det(right-15, the-13)
amod(right-15, individual-14)
nsubjpass(upheld-26, right-15)
det(people-18, the-17)
prep_of(right-15, people-18)
aux(keep-20, to-19)
infmod(right-15, keep-20)
infmod(right-15, bear-22)
conj_and(keep-20, bear-22)
dobj(keep-20, arms-23)
aux(upheld-26, should-24)
auxpass(upheld-26, be-25)
conj_and(invalidated-10, upheld-26)

