(ROOT
  (S (`` ``)
    (S
      (NP (DT The) (NN british))
      (VP (VBP are) (RB n't)
        (VP (VBG going)
          (S
            (VP (TO to)
              (VP (VB invade)))))))
    (, ,) (IN so)
    (S
      (NP (PRP we))
      (VP (VBP do) (RB n't)
        (VP (VB need)
          (S
            (VP (TO to)
              (VP (VB protect)
                (NP (PRP ourselves) ('' ''))))))))
    (. .)))

det(british-3, The-2)
nsubj(going-6, british-3)
xsubj(invade-8, british-3)
aux(going-6, are-4)
neg(going-6, n't-5)
root(ROOT-0, going-6)
aux(invade-8, to-7)
xcomp(going-6, invade-8)
dep(going-6, so-10)
nsubj(need-14, we-11)
xsubj(protect-16, we-11)
aux(need-14, do-12)
neg(need-14, n't-13)
ccomp(going-6, need-14)
aux(protect-16, to-15)
xcomp(need-14, protect-16)
dobj(protect-16, ourselves-17)

(ROOT
  (SBARQ (RB So)
    (SBAR
      (WHADVP (WRB when))
      (S
        (NP (DT an) (NN american))
        (VP (VBZ enters)
          (SBAR
            (S
              (NP (PRP you))
              (VP (VBP 're)
                (ADVP (RB home))
                (PP (IN with)
                  (NP (NN intent)))
                (S
                  (VP (TO to)
                    (VP (VB kill))))))))))
    (, ,)
    (SQ (VBP are)
      (NP (PRP you))
      (VP (VBG going)
        (S
          (VP (TO to)
            (VP (VB defend)
              (NP (PRP yourself))
              (PP (IN with)
                (NP (DT a) (NN fork))))))))
    (. ?)))

advmod(going-16, So-1)
advmod(enters-5, when-2)
det(american-4, an-3)
nsubj(enters-5, american-4)
dep(going-16, enters-5)
nsubj('re-7, you-6)
xsubj(kill-12, you-6)
ccomp(enters-5, 're-7)
advmod('re-7, home-8)
prep_with('re-7, intent-10)
aux(kill-12, to-11)
xcomp('re-7, kill-12)
aux(going-16, are-14)
nsubj(going-16, you-15)
xsubj(defend-18, you-15)
root(ROOT-0, going-16)
aux(defend-18, to-17)
xcomp(going-16, defend-18)
dobj(defend-18, yourself-19)
det(fork-22, a-21)
prep_with(defend-18, fork-22)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do)
      (VP (VB agree)
        (SBAR (IN that)
          (S
            (NP (JJS most) (NN burglary))
            (VP (VBZ 's)
              (SBAR (IN that)
                (S
                  (NP (NNP occur))
                  (VP (VBP do) (RB not)
                    (VP (VB involve)
                      (NP
                        (NP
                          (NP (DT a) (NN murder))
                          (CC or)
                          (NP (JJ serious) (NN injury)))
                        (, ,)
                        (CONJP (CC but)
                          (RB not))
                        (NP
                          (NP (DT all) (NN home))
                          (SBAR
                            (S
                              (NP (NNP invasion) (POS 's))
                              (VP (VBP are)
                                (PP (IN with)
                                  (NP (DT the) (NN intent)
                                    (S
                                      (VP (TO to)
                                        (VP (VB remove)
                                          (NP (PRP$ your) (NN property)))))))))))))))))))))
    (. .)))

nsubj(agree-3, I-1)
aux(agree-3, do-2)
root(ROOT-0, agree-3)
complm('s-7, that-4)
amod(burglary-6, most-5)
nsubj('s-7, burglary-6)
ccomp(agree-3, 's-7)
complm(involve-12, that-8)
nsubj(involve-12, occur-9)
aux(involve-12, do-10)
neg(involve-12, not-11)
ccomp('s-7, involve-12)
det(murder-14, a-13)
dobj(involve-12, murder-14)
amod(injury-17, serious-16)
dobj(involve-12, injury-17)
conj_or(murder-14, injury-17)
det(home-22, all-21)
dobj(involve-12, home-22)
conj_negcc(murder-14, home-22)
nsubj(are-25, invasion-23)
possessive(invasion-23, 's-24)
rcmod(home-22, are-25)
det(intent-28, the-27)
prep_with(are-25, intent-28)
aux(remove-30, to-29)
infmod(intent-28, remove-30)
poss(property-32, your-31)
dobj(remove-30, property-32)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP
          (NP (PRP I))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBP 're)
                (PP (IN in)
                  (NP (DT the) (NN position)))))))
        (VP (TO to)
          (VP
            (VP (VB put)
              (NP (PRP$ my) (NN life))
              (PP (IN on)
                (NP (DT the) (NN line))))
            (, ,)
            (CC or)
            (VP (VB lose)
              (NP (DT a) (NN television)))))))
    (, ,)
    (NP (PRP I))
    (VP (MD would) (RB rather)
      (VP (VB lose)
        (NP (DT the) (NN television))))
    (. .)))

mark(put-9, If-1)
nsubj(put-9, I-2)
nsubj(lose-17, I-2)
nsubj('re-4, we-3)
rcmod(I-2, 're-4)
det(position-7, the-6)
prep_in('re-4, position-7)
aux(put-9, to-8)
advcl(lose-24, put-9)
poss(life-11, my-10)
dobj(put-9, life-11)
det(line-14, the-13)
prep_on(put-9, line-14)
conj_or(put-9, lose-17)
advcl(lose-24, lose-17)
det(television-19, a-18)
dobj(lose-17, television-19)
nsubj(lose-24, I-21)
aux(lose-24, would-22)
advmod(lose-24, rather-23)
root(ROOT-0, lose-24)
det(television-26, the-25)
dobj(lose-24, television-26)

(ROOT
  (S
    (NP (DT The) (NN question))
    (VP (VBZ is)
      (SBAR (IN whether)
        (S
          (NP (DT this) (NN person))
          (VP (VBZ is)
            (ADVP (RB here))
            (S
              (VP (TO to)
                (VP
                  (VP (VB steal)
                    (NP (PRP$ my) (NN property)))
                  (CC or)
                  (VP (VB harm)
                    (NP
                      (NP (PRP me))
                      (CC or)
                      (NP (PRP$ my) (NN family)))))))))))
    (. .)))

det(question-2, The-1)
nsubj(is-3, question-2)
root(ROOT-0, is-3)
complm(is-7, whether-4)
det(person-6, this-5)
nsubj(is-7, person-6)
xsubj(steal-10, person-6)
ccomp(is-3, is-7)
advmod(is-7, here-8)
aux(steal-10, to-9)
xcomp(is-7, steal-10)
poss(property-12, my-11)
dobj(steal-10, property-12)
xcomp(is-7, harm-14)
conj_or(steal-10, harm-14)
dobj(harm-14, me-15)
poss(family-18, my-17)
dobj(harm-14, family-18)
conj_or(me-15, family-18)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD would) (RB rather)
      (VP (VB have)
        (S
          (NP (DT the) (NNS means))
          (VP (TO to)
            (VP (VB protect)
              (NP
                (NP (PRP myself))
                (CC and)
                (NP (PRP$ my) (NN family))))))))
    (. .)))

nsubj(have-4, I-1)
aux(have-4, would-2)
advmod(have-4, rather-3)
root(ROOT-0, have-4)
det(means-6, the-5)
nsubj(protect-8, means-6)
aux(protect-8, to-7)
ccomp(have-4, protect-8)
xcomp(have-4, protect-8)
dobj(protect-8, myself-9)
poss(family-12, my-11)
dobj(protect-8, family-12)
conj_and(myself-9, family-12)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBD lived)
          (PP (IN in)
            (NP (DT a) (JJ perfect) (NN world)))
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (PRP we))
              (VP (VBD did) (RB n't)
                (VP (VB have)
                  (NP
                    (NP (NN Poverty))
                    (, ,)
                    (NP (NNS Drugs))
                    (CC and)
                    (NP (NNP Poor) (NNP Education))))))))))
    (, ,)
    (ADVP (RB then) (RB maybe))
    (NP (PRP I))
    (VP (MD could)
      (VP (VB see)
        (NP (JJ youre) (NN point))))
    (. .)))

mark(lived-3, If-1)
nsubj(lived-3, we-2)
advcl(see-24, lived-3)
det(world-7, a-5)
amod(world-7, perfect-6)
prep_in(lived-3, world-7)
advmod(have-12, where-8)
nsubj(have-12, we-9)
aux(have-12, did-10)
neg(have-12, n't-11)
advcl(lived-3, have-12)
dobj(have-12, Poverty-13)
dobj(have-12, Drugs-15)
conj_and(Poverty-13, Drugs-15)
nn(Education-18, Poor-17)
dobj(have-12, Education-18)
conj_and(Poverty-13, Education-18)
advmod(maybe-21, then-20)
advmod(see-24, maybe-21)
nsubj(see-24, I-22)
aux(see-24, could-23)
root(ROOT-0, see-24)
amod(point-26, youre-25)
dobj(see-24, point-26)

(ROOT
  (S
    (NP
      (NP (DT The) (NN fact))
      (PP (IN of)
        (NP (DT the) (NN matter))))
    (VP (VBZ is)
      (SBAR
        (S
          (NP (PRP we))
          (VP (VBP do) (RB n't)))))
    (. .)))

det(fact-2, The-1)
nsubj(is-6, fact-2)
det(matter-5, the-4)
prep_of(fact-2, matter-5)
root(ROOT-0, is-6)
nsubj(do-8, we-7)
ccomp(is-6, do-8)
neg(do-8, n't-9)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (NNP America))
        (VP (VBZ gets)
          (PP (TO to)
            (NP (DT the) (NN point)))
          (SBAR
            (WHADVP (WRB where))
            (S
              (NP (PRP I))
              (VP (MD can)
                (VP (VB go)
                  (S
                    (VP (TO to)
                      (VP
                        (VP (VB sleep)
                          (PP (IN at)
                            (NP (NN night))))
                        (, ,)
                        (CC or)
                        (ADVP (RB even))
                        (VP
                          (VP (VB go)
                            (PP (IN about)
                              (NP (PRP$ my) (JJ daily) (NN business))))
                          (CC and)
                          (RB not)
                          (VP (VB worry)))))))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP I))
    (VP (MD 'll)
      (VP (VB consider)
        (S
          (VP (VBG getting)
            (ADJP (JJ rid))
            (PP (IN of)
              (NP (PRP$ my) (NN gun)))))))
    (. .)))

advmod(gets-3, When-1)
nsubj(gets-3, America-2)
advcl(consider-30, gets-3)
det(point-6, the-5)
prep_to(gets-3, point-6)
advmod(go-10, where-7)
nsubj(go-10, I-8)
xsubj(sleep-12, I-8)
aux(go-10, can-9)
advcl(gets-3, go-10)
aux(sleep-12, to-11)
xcomp(go-10, sleep-12)
prep_at(sleep-12, night-14)
xcomp(go-10, even-17)
advmod(sleep-12, even-17)
conj_or(sleep-12, even-17)
xcomp(go-10, go-18)
conj_or(sleep-12, go-18)
poss(business-22, my-20)
amod(business-22, daily-21)
prep_about(go-18, business-22)
conj_or(sleep-12, not-24)
conj_and(go-18, not-24)
neg(go-18, not-24)
dep(go-18, worry-25)
advmod(consider-30, then-27)
nsubj(consider-30, I-28)
aux(consider-30, 'll-29)
root(ROOT-0, consider-30)
dep(rid-32, getting-31)
xcomp(consider-30, rid-32)
poss(gun-35, my-34)
prep_of(rid-32, gun-35)

(ROOT
  (S
    (PP (IN Until)
      (NP (RB then)))
    (, ,)
    (S
      (NP (PRP we))
      (VP (VBP live)
        (PP (IN in)
          (NP (DT a) (JJ dangerous) (NN world)))
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (NNS people))
            (VP (VBP live)
              (PP (IN outside)
                (NP (DT the) (NN law))))))))
    (CC and)
    (S
      (NP (PRP I))
      (VP (VBP feel)
        (SBAR
          (S
            (NP (JJ safe) (NNS knowing))
            (VP (VBZ theres)
              (NP
                (NP (DT an) (NN amendment))
                (VP (VBG granting)
                  (NP (PRP me))
                  (NP (DT the) (NN right)
                    (S
                      (VP (TO to)
                        (VP (VB defend)
                          (NP (PRP myself)))))))))))))
    (. .)))

prep(live-5, Until-1)
pobj(Until-1, then-2)
nsubj(live-5, we-4)
root(ROOT-0, live-5)
det(world-9, a-7)
amod(world-9, dangerous-8)
prep_in(live-5, world-9)
advmod(live-12, where-10)
nsubj(live-12, people-11)
advcl(live-5, live-12)
det(law-15, the-14)
prep_outside(live-12, law-15)
nsubj(feel-18, I-17)
conj_and(live-5, feel-18)
amod(knowing-20, safe-19)
nsubj(theres-21, knowing-20)
ccomp(feel-18, theres-21)
det(amendment-23, an-22)
dobj(theres-21, amendment-23)
partmod(amendment-23, granting-24)
iobj(granting-24, me-25)
det(right-27, the-26)
dobj(granting-24, right-27)
aux(defend-29, to-28)
infmod(right-27, defend-29)
dobj(defend-29, myself-30)

