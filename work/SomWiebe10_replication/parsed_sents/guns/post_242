(ROOT
  (S
    (ADVP (RB Well))
    (NP (PRP it))
    (VP (VBZ depends)
      (SBAR
        (WHADVP (WRB how))
        (S
          (NP (NN redneck))
          (VP (VBP thrillbilly)
            (SBAR
              (S
                (NP (PRP you))
                (VP (VBP are))))))))
    (. ...)))

advmod(depends-3, Well-1)
nsubj(depends-3, it-2)
root(ROOT-0, depends-3)
advmod(thrillbilly-6, how-4)
nsubj(thrillbilly-6, redneck-5)
ccomp(depends-3, thrillbilly-6)
nsubj(are-8, you-7)
ccomp(thrillbilly-6, are-8)

(ROOT
  (S
    (NP (JJS Most) (NNS robbers))
    (VP (VBP are)
      (ADVP (RB there))
      (S
        (VP (TO to)
          (VP
            (VP (VB steal)
              (NP (NN stuff)))
            (CC and)
            (VP (VB get)
              (PRT (RP away))
              (PP (IN with)
                (NP (PRP it))))))))
    (. .)))

amod(robbers-2, Most-1)
nsubj(are-3, robbers-2)
xsubj(steal-6, robbers-2)
root(ROOT-0, are-3)
advmod(are-3, there-4)
aux(steal-6, to-5)
xcomp(are-3, steal-6)
dobj(steal-6, stuff-7)
xcomp(are-3, get-9)
conj_and(steal-6, get-9)
prt(get-9, away-10)
prep_with(get-9, it-12)

(ROOT
  (FRAG (CC And)
    (SBAR (IN if)
      (S
        (NP (PRP it))
        (VP (VBD was)))
      (. .))
    (. .)))

dep(was-4, And-1)
mark(was-4, if-2)
nsubj(was-4, it-3)
root(ROOT-0, was-4)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (PRP$ your) (JJ sole) (NN goal))
        (VP (VBZ is)
          (S
            (VP (TO to)
              (VP (VB kill)
                (NP (NN someone)
                  (CC or)
                  (NNS ones))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP 're)
      (ADVP (RB really))
      (VP (VBG effing)
        (ADJP (JJ stupid)
          (S
            (VP (TO to)
              (VP (VB have)
                (VP (VBN gone)
                  (PP (IN about)
                    (NP
                      (NP (PRP it))
                      (NP (DT this) (NN way)))))))))))
    (. .)))

mark(is-5, if-1)
poss(goal-4, your-2)
amod(goal-4, sole-3)
nsubj(is-5, goal-4)
xsubj(kill-7, goal-4)
advcl(effing-15, is-5)
aux(kill-7, to-6)
xcomp(is-5, kill-7)
dobj(kill-7, someone-8)
dobj(kill-7, ones-10)
conj_or(someone-8, ones-10)
nsubj(effing-15, you-12)
aux(effing-15, 're-13)
advmod(effing-15, really-14)
root(ROOT-0, effing-15)
acomp(effing-15, stupid-16)
aux(gone-19, to-17)
aux(gone-19, have-18)
xcomp(stupid-16, gone-19)
prep_about(gone-19, it-21)
det(way-23, this-22)
dep(it-21, way-23)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBD wanted)
          (S
            (VP (TO to)
              (VP (VB kill)
                (NP (DT the) (NNS people))))))))
    (, ,)
    (ADVP (RB just))
    (VP (VB walk)
      (PRT (RP in))
      (PP (IN during)
        (NP (NN dinner)
          (CC and)
          (NN shoot))))
    (. .)))

mark(wanted-3, If-1)
nsubj(wanted-3, you-2)
xsubj(kill-5, you-2)
advcl(walk-10, wanted-3)
aux(kill-5, to-4)
xcomp(wanted-3, kill-5)
det(people-7, the-6)
dobj(kill-5, people-7)
advmod(walk-10, just-9)
root(ROOT-0, walk-10)
prt(walk-10, in-11)
prep_during(walk-10, dinner-13)
prep_during(walk-10, shoot-15)
conj_and(dinner-13, shoot-15)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP 're)
      (ADJP
        (ADJP (RBR more) (JJ likely)
          (S
            (VP (TO to)
              (VP (VB get)
                (PRT (RP away))
                (PP (IN with)
                  (NP (PRP it)))))))
        (PP (IN than)
          (S
            (VP
              (VP (VBG tripping)
                (NP (NNS alarms)))
              (CC and)
              (VP (VBG shooting)
                (NP (NNS dogs))))))))
    (. .)))

nsubj(likely-4, You-1)
cop(likely-4, 're-2)
advmod(likely-4, more-3)
root(ROOT-0, likely-4)
aux(get-6, to-5)
xcomp(likely-4, get-6)
prt(get-6, away-7)
prep_with(get-6, it-9)
prepc_than(likely-4, tripping-11)
dobj(tripping-11, alarms-12)
prepc_than(likely-4, shooting-14)
conj_and(tripping-11, shooting-14)
dobj(shooting-14, dogs-15)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (ADVP (RB really))
        (VP (VBP want)
          (S
            (VP (TO to)
              (VP (VB shoot)
                (NP (NN someone))))))))
    (: ...)
    (S
      (NP
        (NP (DT the) (NN fact))
        (SBAR (IN that)
          (S
            (NP (DT the) (JJ other) (NN person))
            (VP (VBZ has)
              (NP (DT a) (NN gun))))))
      (VP (MD wo) (RB n't)
        (VP (VB make)
          (NP
            (NP (DT that) (NN person))
            (ADJP (DT any) (JJR safer)))
          (, ,)
          (SBAR (IN if)
            (S
              (NP (DT that))
              (VP (VBZ 's)
                (NP (PRP$ your) (NN intent))))))))
    (. .)))

mark(want-4, If-1)
nsubj(want-4, you-2)
xsubj(shoot-6, you-2)
advmod(want-4, really-3)
advcl(make-20, want-4)
aux(shoot-6, to-5)
xcomp(want-4, shoot-6)
dobj(shoot-6, someone-7)
det(fact-10, the-9)
nsubj(make-20, fact-10)
complm(has-15, that-11)
det(person-14, the-12)
amod(person-14, other-13)
nsubj(has-15, person-14)
dep(fact-10, has-15)
det(gun-17, a-16)
dobj(has-15, gun-17)
aux(make-20, wo-18)
neg(make-20, n't-19)
root(ROOT-0, make-20)
det(person-22, that-21)
dobj(make-20, person-22)
dep(safer-24, any-23)
amod(person-22, safer-24)
mark(intent-30, if-26)
nsubj(intent-30, that-27)
cop(intent-30, 's-28)
poss(intent-30, your-29)
advcl(make-20, intent-30)

(ROOT
  (S
    (NP (PRP It))
    (ADVP (RB just))
    (VP (VBZ means)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBZ 's)
            (NP
              (NP (CD one) (JJR more) (NN thing))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (MD 'll)
                    (VP (VB be)
                      (VP (VBN left)
                        (PP (IN for)
                          (NP (DT the) (NN family)))
                        (S
                          (VP (TO to)
                            (VP (VB decide)
                              (SBAR
                                (WHNP (WP what))
                                (S
                                  (VP (TO to)
                                    (VP (VB do)
                                      (PP (IN with)
                                        (SBAR (IN after)
                                          (S
                                            (NP (DT the) (NN person))
                                            (VP (VBZ is)
                                              (ADJP (JJ dead)))))))))))))))))))))))
    (. .)))

nsubj(means-3, It-1)
advmod(means-3, just-2)
root(ROOT-0, means-3)
nsubj(thing-8, it-4)
cop(thing-8, 's-5)
num(thing-8, one-6)
amod(thing-8, more-7)
ccomp(means-3, thing-8)
nsubjpass(left-12, thing-8)
aux(left-12, 'll-10)
auxpass(left-12, be-11)
rcmod(thing-8, left-12)
det(family-15, the-14)
prep_for(left-12, family-15)
aux(decide-17, to-16)
xcomp(left-12, decide-17)
nsubj(do-20, what-18)
aux(do-20, to-19)
ccomp(decide-17, do-20)
xcomp(decide-17, do-20)
mark(dead-26, after-22)
det(person-24, the-23)
nsubj(dead-26, person-24)
cop(dead-26, is-25)
prepc_with(do-20, dead-26)

(ROOT
  (S
    (S
      (VP (VBG Having)
        (NP (DT a) (NN gun))))
    (VP (VBZ does) (RB n't)
      (VP (VB make)
        (S
          (NP (PRP you))
          (ADJP (JJR safer)))))
    (. .)))

csubj(make-6, Having-1)
det(gun-3, a-2)
dobj(Having-1, gun-3)
aux(make-6, does-4)
neg(make-6, n't-5)
root(ROOT-0, make-6)
nsubj(safer-8, you-7)
xcomp(make-6, safer-8)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP they))
        (VP (VBP get))))
    (VP (VBD caught)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBZ does)
            (S
              (NP (PRP them))
              (ADJP (RB no) (JJ good)))))))
    (. .)))

mark(get-3, If-1)
nsubj(get-3, they-2)
csubj(caught-4, get-3)
root(ROOT-0, caught-4)
nsubj(does-6, it-5)
ccomp(caught-4, does-6)
nsubj(good-9, them-7)
advmod(good-9, no-8)
xcomp(does-6, good-9)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (S
          (NP (PRP you))
          (VP (VBP 're)
            (NP (DT a) (NN robber))))
        (CC and)
        (S
          (NP (DT an) (NN alarm))
          (VP (VBZ is)
            (VP (VBG going)
              (PRT (RP off)))))))
    (, ,)
    (NP (NNP AND) (PRP you))
    (VP (VBD shot)
      (SBAR
        (S
          (NP (DT a) (NN dog))
          (ADVP (RB now))
          (VP (VBZ is)
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (PRP you))
                (VP (VBP run))))))))
    (. .)))

mark(robber-5, If-1)
nsubj(robber-5, you-2)
cop(robber-5, 're-3)
det(robber-5, a-4)
advcl(shot-15, robber-5)
det(alarm-8, an-7)
nsubj(going-10, alarm-8)
aux(going-10, is-9)
conj_and(robber-5, going-10)
advcl(shot-15, going-10)
prt(going-10, off-11)
nsubj(shot-15, AND-13)
dep(AND-13, you-14)
root(ROOT-0, shot-15)
det(dog-17, a-16)
nsubj(is-19, dog-17)
advmod(is-19, now-18)
ccomp(shot-15, is-19)
advmod(run-22, when-20)
nsubj(run-22, you-21)
advcl(is-19, run-22)

(ROOT
  (S
    (NP (NNS Neighbors))
    (VP (VBP hear)
      (NP
        (NP (NNS things))
        (PP (IN like)
          (NP (NN gun) (NNS shots)))))
    (. .)))

nsubj(hear-2, Neighbors-1)
root(ROOT-0, hear-2)
dobj(hear-2, things-3)
nn(shots-6, gun-5)
prep_like(things-3, shots-6)

(ROOT
  (S
    (NP
      (NP (DT The) (NN second))
      (SBAR
        (S
          (NP (DT the) (NN alarm))
          (VP (VBD was)
            (VP (VBN tripped)
              (NP (DT an) (NN alert)))))))
    (VP (VBD was)
      (VP (VBN sent)
        (PRT (RP out))))
    (. .)))

det(second-2, The-1)
nsubjpass(sent-10, second-2)
det(alarm-4, the-3)
nsubjpass(tripped-6, alarm-4)
auxpass(tripped-6, was-5)
rcmod(second-2, tripped-6)
det(alert-8, an-7)
dobj(tripped-6, alert-8)
auxpass(sent-10, was-9)
root(ROOT-0, sent-10)
prt(sent-10, out-11)

(ROOT
  (S
    (S
      (NP (DT The) (NN police))
      (VP (VBP are)
        (ADVP (RBS most) (RB likely))
        (VP
          (ADVP (RB already))
          (VBN dispatched)
          (PP (TO to)
            (NP (DT the) (NN location))))))
    (: ...)
    (S
      (SBAR (IN if)
        (S
          (NP (PRP they))
          (VP (VBP 're)
            (NP
              (NP
                (ADJP (IN worth) (NN anything))
                (JJ other))
              (PP (IN than)
                (NP
                  (NP (DT the) (NN pain))
                  (PP (IN in)
                    (NP (DT the) (NN ass)))))))))
      (NP (PRP they))
      (VP (VBP are)
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (PRP I))
            (VP
              (VP (VBP live))
              (CC and)
              (VP (MD can)
                (VP (VB drag)
                  (NP (PRP themselves))
                  (PP (RB away) (IN from)
                    (S
                      (VP (VBG stopping)
                        (NP
                          (NP (NNS people))
                          (SBAR
                            (WHNP (WP who))
                            (S
                              (VP (VBP are)
                                (VP (VBG walking)
                                  (PP (IN because)))))))))))))))))
    (. ...)))

det(police-2, The-1)
nsubjpass(dispatched-7, police-2)
auxpass(dispatched-7, are-3)
advmod(likely-5, most-4)
advmod(dispatched-7, likely-5)
advmod(dispatched-7, already-6)
root(ROOT-0, dispatched-7)
det(location-10, the-9)
prep_to(dispatched-7, location-10)
mark(anything-16, if-12)
nsubj(anything-16, they-13)
cop(anything-16, 're-14)
dep(anything-16, worth-15)
advcl(are-25, anything-16)
amod(anything-16, other-17)
det(pain-20, the-19)
prep_than(anything-16, pain-20)
det(ass-23, the-22)
prep_in(pain-20, ass-23)
nsubj(are-25, they-24)
parataxis(dispatched-7, are-25)
advmod(live-28, where-26)
nsubj(live-28, I-27)
nsubj(drag-31, I-27)
advcl(are-25, live-28)
aux(drag-31, can-30)
advcl(are-25, drag-31)
conj_and(live-28, drag-31)
dobj(drag-31, themselves-32)
prepc_away_from(drag-31, stopping-35)
dobj(stopping-35, people-36)
nsubj(walking-39, people-36)
aux(walking-39, are-38)
rcmod(people-36, walking-39)
prep(walking-39, because-40)

(ROOT
  (INTJ (UH .)))


(ROOT
  (S
    (NP (PRP they))
    (VP (VBP 're)
      (VP (VBG walking)))
    (: ...)))

nsubj(walking-3, they-1)
aux(walking-3, 're-2)
root(ROOT-0, walking-3)

(ROOT
  (SBARQ
    (PP (IN At)
      (NP (DT this) (NN point)))
    (, ,)
    (WHNP (WP what))
    (SQ (VBZ is)
      (NP
        (NP (DT the) (NN point))
        (PP (IN of)
          (S
            (VP (VBG stealing)
              (NP (NN anything)))))))
    (. ?)))

det(point-3, this-2)
prep_at(is-6, point-3)
attr(is-6, what-5)
root(ROOT-0, is-6)
det(point-8, the-7)
nsubj(is-6, point-8)
prepc_of(point-8, stealing-10)
dobj(stealing-10, anything-11)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP 're)
        (ADVP (RB already))
        (VP (VBG going)
          (S
            (VP (TO to)
              (VP (VB be)
                (VP (VBN seen))))))))
    (: ...)
    (CC and)
    (S
      (SBAR
        (ADJP (RBS most) (JJ likely))
        (IN if)
        (S
          (NP (PRP you))
          (VP (VBP stay)
            (S
              (VP (TO to)
                (VP (VB search)
                  (NP (DT the) (NN house)
                    (S
                      (VP (TO to)
                        (VP (VB kill)
                          (NP (NN someone))))))))))))
      (, ,)
      (NP (PRP you))
      (VP (MD 'll)
        (VP (VB be)
          (VP
            (VP (VBN caught)
              (PP (IN in)
                (NP (DT the) (NN act))))
            (CC and)
            (ADVP (RB possibly))
            (VP (VBN killed) (, ,)
              (ADVP (RB too)))))))
    (. .)))

nsubj(going-4, You-1)
xsubj(seen-7, You-1)
aux(going-4, 're-2)
advmod(going-4, already-3)
root(ROOT-0, going-4)
aux(seen-7, to-5)
auxpass(seen-7, be-6)
xcomp(going-4, seen-7)
advmod(likely-11, most-10)
dep(stay-14, likely-11)
dep(stay-14, if-12)
nsubj(stay-14, you-13)
xsubj(search-16, you-13)
advcl(caught-26, stay-14)
aux(search-16, to-15)
xcomp(stay-14, search-16)
det(house-18, the-17)
dobj(search-16, house-18)
aux(kill-20, to-19)
infmod(house-18, kill-20)
dobj(kill-20, someone-21)
nsubjpass(caught-26, you-23)
nsubjpass(killed-32, you-23)
aux(caught-26, 'll-24)
auxpass(caught-26, be-25)
conj_and(going-4, caught-26)
det(act-29, the-28)
prep_in(caught-26, act-29)
conj_and(going-4, possibly-31)
advmod(caught-26, possibly-31)
conj_and(caught-26, possibly-31)
conj_and(going-4, killed-32)
conj_and(caught-26, killed-32)
advmod(killed-32, too-34)

(ROOT
  (S
    (NP
      (NP (DT The) (NNS people))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBP are)
            (PP (IN in)
              (NP (DT the) (NN house)))))))
    (VP (VBP are)
      (ADVP (RB already))
      (ADJP (JJ aware)
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP 're)
              (ADVP (RB there))
              (SBAR (IN so)
                (S
                  (NP (PRP they))
                  (VP
                    (VP (VBP 're)
                      (ADVP (RB now))
                      (VP
                        (ADVP (RB either))
                        (VBG hiding)))
                    (CC or)
                    (VP (VBP have)
                      (NP
                        (NP (DT the) (NNS doors))
                        (VP (VBN locked))
                        (: ...)
                        (SBAR
                          (WHNP (WDT which))
                          (S
                            (VP (VBZ means)
                              (SBAR
                                (S
                                  (NP (PRP it))
                                  (VP (MD will)
                                    (VP (VB take)
                                      (S
                                        (NP (PRP you))
                                        (ADJP (JJR longer)
                                          (CC and)
                                          (JJR more)
                                          (SBAR
                                            (S
                                              (NP (NNS bullets))
                                              (VP (TO to)
                                                (VP (VB get)
                                                  (PP (TO to)
                                                    (NP (PRP them)))
                                                  (S
                                                    (VP (TO to)
                                                      (VP (VB shoot)
                                                        (NP (PRP them)))))))))))))))))))))))
              (: ...)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (VBZ is) (RB not)
                    (SBAR
                      (WHADVP (WRB why))
                      (S
                        (NP (PRP you))
                        (VP (VBP 're)
                          (ADVP (RB there))
                          (ADVP (RB anyway)))))))))))))
    (. .)))

det(people-2, The-1)
nsubj(are-4, people-2)
nsubj(aware-10, people-2)
rcmod(people-2, are-4)
det(house-7, the-6)
prep_in(are-4, house-7)
cop(aware-10, are-8)
advmod(aware-10, already-9)
root(ROOT-0, aware-10)
nsubj('re-12, you-11)
dep(aware-10, 're-12)
advmod('re-12, there-13)
mark(hiding-19, so-14)
nsubj(hiding-19, they-15)
nsubj(have-21, they-15)
aux(hiding-19, 're-16)
advmod(hiding-19, now-17)
advmod(hiding-19, either-18)
advcl('re-12, hiding-19)
advcl('re-12, have-21)
conj_or(hiding-19, have-21)
det(doors-23, the-22)
dobj(have-21, doors-23)
partmod(doors-23, locked-24)
nsubj(means-27, which-26)
rcmod(doors-23, means-27)
nsubj(take-30, it-28)
aux(take-30, will-29)
ccomp(means-27, take-30)
nsubj(longer-32, you-31)
nsubj(more-34, you-31)
xcomp(take-30, longer-32)
xcomp(take-30, more-34)
conj_and(longer-32, more-34)
nsubj(get-37, bullets-35)
xsubj(shoot-41, bullets-35)
aux(get-37, to-36)
dep(longer-32, get-37)
prep_to(get-37, them-39)
aux(shoot-41, to-40)
xcomp(get-37, shoot-41)
dobj(shoot-41, them-42)
nsubj(is-45, which-44)
ccomp('re-12, is-45)
parataxis('re-12, is-45)
neg(is-45, not-46)
advmod('re-49, why-47)
nsubj('re-49, you-48)
advcl(is-45, 're-49)
advmod('re-49, there-50)
advmod('re-49, anyway-51)

