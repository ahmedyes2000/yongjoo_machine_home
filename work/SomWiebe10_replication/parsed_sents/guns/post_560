(ROOT
  (S
    (NP
      (NP (DT The) (NN right))
      (PP (IN of)
        (NP (NN self))))
    (VP (VBZ means)
      (SBAR (IN that)
        (S
          (NP (PRP$ your) (NN body))
          (VP (VBZ is)
            (NP (NNS Yours))))))
    (. .)))

det(right-2, The-1)
nsubj(means-5, right-2)
prep_of(right-2, self-4)
root(ROOT-0, means-5)
complm(Yours-10, that-6)
poss(body-8, your-7)
nsubj(Yours-10, body-8)
cop(Yours-10, is-9)
ccomp(means-5, Yours-10)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBP need) (RB n't)
      (VP (VB be)
        (VP (VBN specified)
          (SBAR (IN because)
            (S
              (NP (PRP it))
              (ADVP (RB simply))
              (VP (VBZ Is)))))))
    (. .)))

nsubj(need-2, It-1)
root(ROOT-0, need-2)
neg(need-2, n't-3)
auxpass(specified-5, be-4)
dep(need-2, specified-5)
mark(Is-9, because-6)
nsubj(Is-9, it-7)
advmod(Is-9, simply-8)
advcl(specified-5, Is-9)

(ROOT
  (S
    (S
      (SBAR (RB Just) (IN because)
        (S
          (NP (PRP$ your) (NNS arms))
          (VP (VBP belong)
            (PP (TO to)
              (NP (PRP you))))))
      (VP (VBZ does) (RB n't)
        (VP (VB mean)
          (SBAR
            (S
              (NP (PRP you))
              (VP (MD can)
                (VP (VB do)
                  (PP (IN with)
                    (NP (PRP them)))
                  (SBAR
                    (WHNP (WDT whatever))
                    (S
                      (NP (PRP you))
                      (VP (VBP wish)))))))))))
    (: ...)
    (S
      (NP (PRP it))
      (VP (VBZ means)
        (SBAR
          (S
            (NP (PRP you))
            (VP (MD can) (RB not)
              (VP (VB use)
                (S
                  (NP (PRP them))
                  (VP (TO to)
                    (VP (VB infringe)
                      (PP (IN upon)
                        (NP
                          (NP (DT the) (NNS freedoms))
                          (PP (IN of)
                            (NP (DT another))))))))))))))
    (. .)))

advmod(belong-5, Just-1)
dep(belong-5, because-2)
poss(arms-4, your-3)
nsubj(belong-5, arms-4)
advcl(mean-10, belong-5)
csubj(mean-10, belong-5)
prep_to(belong-5, you-7)
aux(mean-10, does-8)
neg(mean-10, n't-9)
root(ROOT-0, mean-10)
nsubj(do-13, you-11)
aux(do-13, can-12)
ccomp(mean-10, do-13)
prep_with(do-13, them-15)
dobj(wish-18, whatever-16)
nsubj(wish-18, you-17)
ccomp(do-13, wish-18)
nsubj(means-21, it-20)
parataxis(mean-10, means-21)
nsubj(use-25, you-22)
aux(use-25, can-23)
neg(use-25, not-24)
ccomp(means-21, use-25)
nsubj(infringe-28, them-26)
aux(infringe-28, to-27)
xcomp(use-25, infringe-28)
det(freedoms-31, the-30)
prep_upon(infringe-28, freedoms-31)
prep_of(freedoms-31, another-33)

(ROOT
  (S
    (ADVP (RB Apparently))
    (, ,)
    (NP (DT this) (NN nation))
    (VP (VBZ has)
      (NP (DT a) (JJ slow) (NN acquisition) (NN rate)))
    (. .)))

advmod(has-5, Apparently-1)
det(nation-4, this-3)
nsubj(has-5, nation-4)
root(ROOT-0, has-5)
det(rate-9, a-6)
amod(rate-9, slow-7)
nn(rate-9, acquisition-8)
dobj(has-5, rate-9)

(ROOT
  (FRAG (CC Or)
    (ADVP (RB just))
    (NP (JJ sheer) (NN obstinance) (. .))))

dep(obstinance-4, Or-1)
dep(obstinance-4, just-2)
amod(obstinance-4, sheer-3)
root(ROOT-0, obstinance-4)

(ROOT
  (S
    (NP (DT That) (NN responsibility))
    (VP (VBZ is)
      (ADJP (JJ yours)))
    (. .)))

det(responsibility-2, That-1)
nsubj(yours-4, responsibility-2)
cop(yours-4, is-3)
root(ROOT-0, yours-4)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP know)
      (SBAR (IN that)
        (S
          (NP (RB not) (DT all) (NNS people))
          (VP (VBP are)
            (ADJP (JJ responsible) (RB enough)
              (S
                (VP (TO to)
                  (VP (VB keep)
                    (NP (PRP$ their) (NNS hands))
                    (PP (TO to)
                      (NP (PRP themselves)))))))))))
    (. .)))

nsubj(know-2, We-1)
root(ROOT-0, know-2)
complm(responsible-8, that-3)
neg(people-6, not-4)
det(people-6, all-5)
nsubj(responsible-8, people-6)
cop(responsible-8, are-7)
ccomp(know-2, responsible-8)
advmod(responsible-8, enough-9)
aux(keep-11, to-10)
xcomp(responsible-8, keep-11)
poss(hands-13, their-12)
dobj(keep-11, hands-13)
prep_to(keep-11, themselves-15)

(ROOT
  (S
    (NP (DT The) (NN abortion) (NN issue))
    (VP (VBZ is)
      (ADJP (DT all) (JJ junky)
        (CC and)
        (JJ cloudy))
      (SBAR (IN because)
        (S
          (NP (PRP it))
          (VP (VBZ deals)
            (PP (IN with)
              (NP
                (NP (DT the) (JJ bodily) (NNS rights))
                (CC and)
                (NP
                  (NP (NN right))
                  (PP (IN of)
                    (NP (NN self))))))
            (SBAR (IN while)
              (S
                (NP (DT another) (NN person))
                (VP (VBZ is)
                  (ADVP (RB INSIDE))
                  (NP (PRP you)))))))))
    (. .)))

det(issue-3, The-1)
nn(issue-3, abortion-2)
nsubj(junky-6, issue-3)
nsubj(cloudy-8, issue-3)
cop(junky-6, is-4)
dep(junky-6, all-5)
root(ROOT-0, junky-6)
conj_and(junky-6, cloudy-8)
mark(deals-11, because-9)
nsubj(deals-11, it-10)
advcl(junky-6, deals-11)
det(rights-15, the-13)
amod(rights-15, bodily-14)
prep_with(deals-11, rights-15)
prep_with(deals-11, right-17)
conj_and(rights-15, right-17)
prep_of(right-17, self-19)
mark(you-25, while-20)
det(person-22, another-21)
nsubj(you-25, person-22)
cop(you-25, is-23)
advmod(you-25, INSIDE-24)
advcl(deals-11, you-25)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBG being)
        (NP (DT a) (NN woman))))
    (: ...)
    (S
      (NP (DT that))
      (VP (VBZ is)))
    (. .)))

nsubj(woman-4, You-1)
cop(woman-4, being-2)
det(woman-4, a-3)
root(ROOT-0, woman-4)
nsubj(is-7, that-6)
parataxis(woman-4, is-7)

(ROOT
  (S
    (NP (DT The) (JJS greatest) (NN responsibility))
    (VP (VBZ is)
      (PP (IN toward)
        (NP
          (NP (DT the) (NN protection))
          (PP (IN of)
            (NP (DT the) (NN self))))
        (, ,)
        (ADVP (RB apparently))))
    (. .)))

det(responsibility-3, The-1)
amod(responsibility-3, greatest-2)
nsubj(is-4, responsibility-3)
root(ROOT-0, is-4)
det(protection-7, the-6)
prep_toward(is-4, protection-7)
det(self-10, the-9)
prep_of(protection-7, self-10)
advmod(is-4, apparently-12)

(ROOT
  (S
    (VP (VB Ugh))
    (. .)))

root(ROOT-0, Ugh-1)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP I))
        (VP (VBP keep)
          (S
            (VP (VBG going)
              (NP (DT this)))))))
    (VP (MD will)
      (ADVP (RB just))
      (VP (VB take)
        (NP (PRP me))
        (ADVP (RB forever))
        (SBAR (IN because)
          (S
            (NP (PRP I))
            (VP (MD 'll)
              (ADVP (RB just))
              (VP (VB want)
                (S
                  (VP (TO to)
                    (VP (VB board)
                      (NP
                        (NP (DT this) (JJ beautiful) (JJ little) (NN train))
                        (PP (IN of)
                          (NP (NN thought)))))))))))))
    (. .)))

mark(keep-3, If-1)
nsubj(keep-3, I-2)
csubj(take-8, keep-3)
xcomp(keep-3, going-4)
dobj(going-4, this-5)
aux(take-8, will-6)
advmod(take-8, just-7)
root(ROOT-0, take-8)
dobj(take-8, me-9)
advmod(take-8, forever-10)
mark(want-15, because-11)
nsubj(want-15, I-12)
xsubj(board-17, I-12)
aux(want-15, 'll-13)
advmod(want-15, just-14)
advcl(take-8, want-15)
aux(board-17, to-16)
xcomp(want-15, board-17)
det(train-21, this-18)
amod(train-21, beautiful-19)
amod(train-21, little-20)
dobj(board-17, train-21)
prep_of(train-21, thought-23)

(ROOT
  (FRAG (CC But)
    (ADVP (RB No))
    (. !)))

dep(No-2, But-1)
root(ROOT-0, No-2)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD will) (RB not))
    (. !)))

nsubj(will-2, I-1)
root(ROOT-0, will-2)
neg(will-2, not-3)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is) (RB not)
      (ADJP (RB so) (JJ junky)))
    (. .)))

nsubj(junky-5, This-1)
cop(junky-5, is-2)
neg(junky-5, not-3)
advmod(junky-5, so-4)
root(ROOT-0, junky-5)

(ROOT
  (S
    (NP (NNP Responsibility))
    (VP (VBZ is)
      (VP (VBN acquired)))
    (. .)))

nsubjpass(acquired-3, Responsibility-1)
auxpass(acquired-3, is-2)
root(ROOT-0, acquired-3)

