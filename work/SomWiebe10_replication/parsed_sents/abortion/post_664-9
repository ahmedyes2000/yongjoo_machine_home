(ROOT
  (S
    (S
      (NP (NNP Let) (POS 's))
      (VP (VBP pass)
        (NP
          (NP (DT a) (NN bill))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ says)
                (SBAR (IN if)
                  (S
                    (NP (PRP I))
                    (VP (MD can)
                      (VP (VB prove)
                        (SBAR
                          (S
                            (NP (PRP I))
                            (VP (VBP 'm)
                              (ADJP (RBR more) (JJ viable)
                                (PP (TO to)
                                  (NP
                                    (NP (NN society))
                                    (PP (IN than)
                                      (NP (PRP$ my) (NN neighbor)))))))))))))))))))
    (, ,)
    (S
      (NP (PRP he))
      (VP (VBZ does) (RB n't)
        (VP (VB deserve)
          (S
            (VP (TO to)
              (VP (VB live)))))))
    (CC and)
    (S
      (NP (EX there))
      (VP (VBZ 's)
        (ADJP (NN nothing) (JJ wrong))
        (PP (IN with)
          (S
            (NP (PRP me))
            (VP (VBG killing)
              (NP (PRP him)))))))
    (. .)))

nsubj(pass-3, Let-1)
nsubj('s-30, Let-1)
possessive(Let-1, 's-2)
root(ROOT-0, pass-3)
det(bill-5, a-4)
dobj(pass-3, bill-5)
nsubj(says-7, bill-5)
rcmod(bill-5, says-7)
mark(prove-11, if-8)
nsubj(prove-11, I-9)
aux(prove-11, can-10)
advcl(says-7, prove-11)
nsubj(viable-15, I-12)
cop(viable-15, 'm-13)
advmod(viable-15, more-14)
ccomp(prove-11, viable-15)
prep_to(viable-15, society-17)
poss(neighbor-20, my-19)
prep_than(society-17, neighbor-20)
nsubj(deserve-25, he-22)
xsubj(live-27, he-22)
aux(deserve-25, does-23)
neg(deserve-25, n't-24)
conj_and(pass-3, deserve-25)
aux(live-27, to-26)
xcomp(deserve-25, live-27)
expl('s-30, there-29)
conj_and(pass-3, 's-30)
dep(wrong-32, nothing-31)
acomp('s-30, wrong-32)
nsubj(killing-35, me-34)
prepc_with('s-30, killing-35)
dobj(killing-35, him-36)

