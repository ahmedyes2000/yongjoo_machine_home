(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADJP (JJ true))
      (SBAR (IN that)
        (S
          (NP
            (NP (CD one) (POS 's))
            (NNS feelings))
          (VP (VBP do) (RB not)
            (VP (VB determine)
              (NP (NN truth)))))))
    (. .)))

nsubj(true-3, It-1)
cop(true-3, 's-2)
root(ROOT-0, true-3)
complm(determine-10, that-4)
poss(feelings-7, one-5)
nsubj(determine-10, feelings-7)
aux(determine-10, do-8)
neg(determine-10, not-9)
ccomp(true-3, determine-10)
dobj(determine-10, truth-11)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (ADJP (JJ many)
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBP commit)
              (NP (NN murder))
              (PP (IN without)
                (NP (DT a) (NN qualm))))))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
acomp(are-2, many-3)
nsubj(commit-5, who-4)
dep(many-3, commit-5)
dobj(commit-5, murder-6)
det(qualm-9, a-8)
prep_without(commit-5, qualm-9)

(ROOT
  (S
    (NP (DT A) (NN woman))
    (VP (VBZ grieves)
      (NP
        (NP (DT the) (NN loss))
        (PP (IN of)
          (NP (PRP$ her) (NN baby))))
      (SBAR (IN because)
        (S
          (NP (PRP she))
          (VP (VBZ knows)
            (NP
              (SBAR
                (WHNP (RB exactly) (WP what))
                (S
                  (NP (PRP it))
                  (VP (VBD was))))
              (: :)
              (NP (PRP$ her)
                (ADJP (RB very) (JJ own))
                (NN offspring)))))))
    (. .)))

det(woman-2, A-1)
nsubj(grieves-3, woman-2)
root(ROOT-0, grieves-3)
det(loss-5, the-4)
dobj(grieves-3, loss-5)
poss(baby-8, her-7)
prep_of(loss-5, baby-8)
mark(knows-11, because-9)
nsubj(knows-11, she-10)
advcl(grieves-3, knows-11)
advmod(what-13, exactly-12)
dobj(was-15, what-13)
rel(was-15, what-13)
nsubj(was-15, it-14)
dep(offspring-20, was-15)
poss(offspring-20, her-17)
advmod(own-19, very-18)
amod(offspring-20, own-19)
dobj(knows-11, offspring-20)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADJP (RB perfectly) (JJ logical))
      (S
        (VP (TO to)
          (VP (VB mourn)
            (NP
              (NP (DT the) (NN loss))
              (PP (IN of)
                (NP
                  (NP (CD one) (POS 's))
                  (JJ own) (NN child))))))))
    (. .)))

nsubj(logical-4, It-1)
xsubj(mourn-6, It-1)
cop(logical-4, 's-2)
advmod(logical-4, perfectly-3)
root(ROOT-0, logical-4)
aux(mourn-6, to-5)
xcomp(logical-4, mourn-6)
det(loss-8, the-7)
dobj(mourn-6, loss-8)
poss(child-13, one-10)
amod(child-13, own-12)
prep_of(loss-8, child-13)

(ROOT
  (S
    (NP (NN Everyone))
    (VP (VBZ has)
      (S
        (VP (TO to)
          (VP (VB base)
            (NP (PRP$ their) (NNS beliefs))
            (PP (IN on)
              (NP
                (NP (DT some) (NN sort))
                (PP (IN of)
                  (NP (NN paradigm)))))))))
    (. .)))

nsubj(has-2, Everyone-1)
xsubj(base-4, Everyone-1)
root(ROOT-0, has-2)
aux(base-4, to-3)
xcomp(has-2, base-4)
poss(beliefs-6, their-5)
dobj(base-4, beliefs-6)
det(sort-9, some-8)
prep_on(base-4, sort-9)
prep_of(sort-9, paradigm-11)

(ROOT
  (S
    (PP (IN As)
      (NP (DT a) (NNP Christian)))
    (NP (PRP I))
    (VP (VBP am)
      (VP (VBG basing)
        (NP (PRP$ my) (NN paradigm))
        (PP (IN on)
          (NP
            (NP (NN something))
            (PP (IN outside)
              (NP (PRP myself)))))))
    (. .)))

det(Christian-3, a-2)
prep_as(basing-6, Christian-3)
nsubj(basing-6, I-4)
aux(basing-6, am-5)
root(ROOT-0, basing-6)
poss(paradigm-8, my-7)
dobj(basing-6, paradigm-8)
prep_on(basing-6, something-10)
prep_outside(something-10, myself-12)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (VP (VBG basing)
        (NP (PRP it))
        (PP (IN on)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (NNP God))
              (VP (VBZ has)
                (VP (VBN revealed)
                  (PP (TO to)
                    (NP (NN mankind)))
                  (PP (IN through)
                    (NP (DT the) (NNP Bible))))))))))
    (. .)))

nsubj(basing-3, I-1)
aux(basing-3, 'm-2)
root(ROOT-0, basing-3)
dobj(basing-3, it-4)
dobj(revealed-9, what-6)
nsubj(revealed-9, God-7)
aux(revealed-9, has-8)
prepc_on(basing-3, revealed-9)
prep_to(revealed-9, mankind-11)
det(Bible-14, the-13)
prep_through(revealed-9, Bible-14)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP (VB base)
            (NP (PRP$ your) (NNS beliefs))
            (PP (IN on)
              (NP
                (NP (NNP God) (POS 's))
                (NN word)))))))
    (WHNP (WP what))
    (SQ
      (VP (VBP are)
        (NP (PRP you))
        (S
          (VP (VBG basing)
            (NP (PRP it))
            (PP (IN on))))))
    (. ?)))

mark(base-5, If-1)
nsubj(base-5, you-2)
aux(base-5, do-3)
neg(base-5, n't-4)
dep(you-14, base-5)
poss(beliefs-7, your-6)
dobj(base-5, beliefs-7)
poss(word-11, God-9)
prep_on(base-5, word-11)
nsubj(you-14, what-12)
cop(you-14, are-13)
root(ROOT-0, you-14)
xcomp(you-14, basing-15)
dobj(basing-15, it-16)
prep(basing-15, on-17)

(ROOT
  (NP
    (NP (PRP$ Your) (JJ own) (JJ limited))
    (VP (VBG understanding))
    (. ?)))

poss(limited-3, Your-1)
amod(limited-3, own-2)
root(ROOT-0, limited-3)
partmod(limited-3, understanding-4)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP are) (RB n't)
        (ADJP (JJ omniscient))
        (SBAR (IN so)
          (S
            (NP
              (NP (DT the) (JJS most))
              (SBAR
                (S
                  (NP (PRP you))
                  (VP (MD should)
                    (VP (VB do))))))
            (VP (VBZ is)
              (NP
                (NP
                  (QP (IN at) (JJS least) (CD err)))
                (PP (IN on)
                  (NP
                    (NP (DT the) (NN side))
                    (PP (IN of)
                      (NP (NN life)))))))))))
    (: :) (`` ``)
    (S
      (NP (PRP I))
      (VP (VBP 'm) (RB not)
        (ADJP (JJ sure)
          (SBAR
            (S
              (NP (PRP it))
              (VP (VBZ 's)
                (ADJP (JJ murder) (RB so)
                  (S
                    (VP (TO to)
                      (VP (VB be)
                        (PP (IN on)
                          (NP
                            (NP (DT the) (JJ safe) (NN side))
                            (SBAR
                              (S
                                (NP (PRP I))
                                (VP (MD 'll)
                                  (VP (VB choose)
                                    (NP (NN life))))))))))))))))))
    (. .)))

nsubj(omniscient-4, You-1)
cop(omniscient-4, are-2)
neg(omniscient-4, n't-3)
root(ROOT-0, omniscient-4)
mark(err-14, so-5)
det(most-7, the-6)
dobj(do-10, most-7)
nsubj(err-14, most-7)
nsubj(do-10, you-8)
aux(do-10, should-9)
rcmod(most-7, do-10)
cop(err-14, is-11)
quantmod(err-14, at-12)
mwe(at-12, least-13)
pobj(at-12, least-13)
advcl(omniscient-4, err-14)
det(side-17, the-16)
prep_on(err-14, side-17)
prep_of(side-17, life-19)
nsubj(sure-25, I-22)
cop(sure-25, 'm-23)
neg(sure-25, not-24)
ccomp(omniscient-4, sure-25)
nsubj(murder-28, it-26)
cop(murder-28, 's-27)
dep(sure-25, murder-28)
advmod(murder-28, so-29)
aux(be-31, to-30)
xcomp(murder-28, be-31)
det(side-35, the-33)
amod(side-35, safe-34)
prep_on(be-31, side-35)
nsubj(choose-38, I-36)
aux(choose-38, 'll-37)
rcmod(side-35, choose-38)
dobj(choose-38, life-39)

(ROOT
  (S ('' '')
    (PP (IN If)
      (S
        (NP (PRP you))
        (VP (MD can)
          (VP (VB devalue)
            (NP (NN life))
            (PP (IN at)
              (NP (CD one)))))))
    (VP (VBP level)
      (SBAR
        (S
          (NP (PRP you))
          (VP (MD can)
            (VP (VB devalue)
              (NP (PRP it))
              (PP (IN at)
                (NP (DT any) (NN level))))))))
    (. .)))

nsubj(devalue-5, you-3)
aux(devalue-5, can-4)
prepc_if(level-9, devalue-5)
dobj(devalue-5, life-6)
prep_at(devalue-5, one-8)
root(ROOT-0, level-9)
nsubj(devalue-12, you-10)
aux(devalue-12, can-11)
ccomp(level-9, devalue-12)
dobj(devalue-12, it-13)
det(level-16, any-15)
prep_at(devalue-12, level-16)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (NNP John) (NNP Donne))
        (VP (VBD said))))
    (, ,)
    (SBAR (IN if) (RB even)
      (S
        (NP (DT a) (NN simpleton))
        (VP (VBZ is)
          (VP (VBN killed)))))
    (NP (PRP I))
    (VP (VBP am)
      (NP (DT the) (JJR lesser)))
    (. .)))

mark(said-4, As-1)
nn(Donne-3, John-2)
nsubj(said-4, Donne-3)
advcl(lesser-15, said-4)
mark(killed-11, if-6)
advmod(killed-11, even-7)
det(simpleton-9, a-8)
nsubjpass(killed-11, simpleton-9)
auxpass(killed-11, is-10)
dep(lesser-15, killed-11)
nsubj(lesser-15, I-12)
cop(lesser-15, am-13)
det(lesser-15, the-14)
root(ROOT-0, lesser-15)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP make)
      (NP (DT the) (NN statement))
      (, ,) (`` ``)
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (DT a) (NN woman))
          (VP
            (VP (VBZ chooses)
              (SBAR (IN whether)
                (S
                  (VP (TO to)
                    (VP (VB have)
                      (NP
                        (NP (DT an) (NN abortion))
                        (SBAR
                          (S
                            (NP (PRP they))
                            (VP (MD may)
                              (VP (VB feel)
                                (ADJP (JJ horrible))
                                (PP (IN about)
                                  (NP (PRP it)))))))))))))
            (CC but)
            (VP (VBP know)
              (SBAR (IN that)
                (S
                  (NP (PRP it))
                  (VP (VBZ is)
                    (NP (DT the) (JJS best) (NN decision))))))))))
    (. .)))

nsubj(make-2, You-1)
root(ROOT-0, make-2)
det(statement-4, the-3)
dobj(make-2, statement-4)
advmod(chooses-10, When-7)
det(woman-9, a-8)
nsubj(chooses-10, woman-9)
nsubj(know-23, woman-9)
advcl(make-2, chooses-10)
complm(have-13, whether-11)
aux(have-13, to-12)
ccomp(chooses-10, have-13)
xcomp(chooses-10, have-13)
det(abortion-15, an-14)
dobj(have-13, abortion-15)
dobj(feel-18, abortion-15)
nsubj(feel-18, they-16)
aux(feel-18, may-17)
rcmod(abortion-15, feel-18)
acomp(feel-18, horrible-19)
prep_about(feel-18, it-21)
advcl(make-2, know-23)
conj_but(chooses-10, know-23)
complm(decision-29, that-24)
nsubj(decision-29, it-25)
cop(decision-29, is-26)
det(decision-29, the-27)
amod(decision-29, best-28)
ccomp(know-23, decision-29)

(ROOT
  (S
    (NP (PRP We))
    (VP
      (VP (VBP are)
        (NP
          (NP (PDT all) (DT a) (NN part))
          (PP (IN of)
            (NP (NN mankind)))))
      (CC and)
      (VP
        (ADVP (RB no)
          (NP (CD one)))
        (VBZ has)
        (NP (DT the) (NN right)
          (S
            (VP (TO to)
              (VP (VB take)
                (NP
                  (NP (DT another))
                  (POS 's) (NN life))
                (PP
                  (ADVP (RB not) (RB even))
                  (IN at)
                  (NP
                    (NP
                      (NP (PRP it) (POS 's))
                      (JJS simplest))
                    (CC and)
                    (NP
                      (ADJP (RBS most) (JJ helpless))
                      (NN state))))))))))
    (. .)))

nsubj(part-5, We-1)
nsubj(has-11, We-1)
cop(part-5, are-2)
predet(part-5, all-3)
det(part-5, a-4)
root(ROOT-0, part-5)
prep_of(part-5, mankind-7)
advmod(has-11, no-9)
pobj(no-9, one-10)
conj_and(part-5, has-11)
det(right-13, the-12)
dobj(has-11, right-13)
aux(take-15, to-14)
infmod(right-13, take-15)
nn(life-18, another-16)
possessive(life-18, 's-17)
dobj(take-15, life-18)
dep(even-20, not-19)
advmod(take-15, even-20)
prep_at(take-15, it-22)
possessive(it-22, 's-23)
amod(it-22, simplest-24)
advmod(helpless-27, most-26)
amod(state-28, helpless-27)
prep_at(take-15, state-28)
conj_and(it-22, state-28)

(ROOT
  (S
    (ADVP (RB Finally))
    (, ,)
    (NP
      (NP (PRP$ your) (NN statement))
      (SBAR (IN that)
        (S
          (NP
            (NP (DT those))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBP regret)
                  (NP (NN abortion))))))
          (VP (VBP are)
            (ADJP (JJ free)
              (S
                (VP (TO to)
                  (VP (VB feel)
                    (NP
                      (NP (DT that) (NN way))
                      (PP (CC but)
                        (NP (DT that))))))))))))
    (VP (MD should) (RB not)
      (VP (VB cause)
        (S
          (NP (PRP us))
          (VP (TO to)
            (VP (VB restrict)
              (NP
                (NP (DT the) (NN choice))
                (PP (IN of)
                  (NP (NNS others)))))))))
    (. .)))

advmod(cause-20, Finally-1)
poss(statement-4, your-3)
nsubj(cause-20, statement-4)
complm(free-11, that-5)
nsubj(regret-8, those-6)
nsubj(free-11, those-6)
rcmod(those-6, regret-8)
dobj(regret-8, abortion-9)
cop(free-11, are-10)
dep(statement-4, free-11)
aux(feel-13, to-12)
xcomp(free-11, feel-13)
det(way-15, that-14)
dobj(feel-13, way-15)
prep(way-15, but-16)
dep(but-16, that-17)
aux(cause-20, should-18)
neg(cause-20, not-19)
root(ROOT-0, cause-20)
nsubj(restrict-23, us-21)
aux(restrict-23, to-22)
xcomp(cause-20, restrict-23)
det(choice-25, the-24)
dobj(restrict-23, choice-25)
prep_of(choice-25, others-27)

(ROOT
  (S
    (INTJ (UH No))
    (, ,)
    (NP (PRP$ our) (NNS feelings))
    (VP (MD should) (RB not)
      (VP (VB restrict)
        (NP
          (NP (NNS others))
          ('' '')
          (SBAR
            (S
              (NP
                (NP (NNS choices)
                  (CC and)
                  (NNS behaviors))
                (ADJP (CC but)
                  (JJ right)
                  (CC and)
                  (JJ wrong)))
              (VP (MD should)))))))
    (. .)))

dep(restrict-7, No-1)
poss(feelings-4, our-3)
nsubj(restrict-7, feelings-4)
aux(restrict-7, should-5)
neg(restrict-7, not-6)
root(ROOT-0, restrict-7)
dobj(restrict-7, others-8)
dobj(should-17, others-8)
nsubj(should-17, choices-10)
conj_and(choices-10, behaviors-12)
nsubj(should-17, behaviors-12)
amod(choices-10, right-14)
amod(choices-10, wrong-16)
conj_and(right-14, wrong-16)
rcmod(others-8, should-17)

(ROOT
  (S
    (NP (NNS People))
    (VP (VBD knew)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBD was)
            (ADJP (JJ wrong)
              (S
                (VP (TO to)
                  (VP (VB keep)
                    (NP (NN slavery) (JJ legal))
                    (SBAR (IN so)
                      (S
                        (NP (PRP they))
                        (VP (VBD abolished)
                          (NP (PRP it)))))))))))))
    (. .)))

nsubj(knew-2, People-1)
root(ROOT-0, knew-2)
nsubj(wrong-5, it-3)
cop(wrong-5, was-4)
ccomp(knew-2, wrong-5)
aux(keep-7, to-6)
xcomp(wrong-5, keep-7)
dobj(keep-7, slavery-8)
amod(slavery-8, legal-9)
mark(abolished-12, so-10)
nsubj(abolished-12, they-11)
advcl(keep-7, abolished-12)
dobj(abolished-12, it-13)

(ROOT
  (S
    (NP (NNS People))
    (VP (VBD knew)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBD was)
            (ADJP (JJ wrong)
              (S
                (VP (TO to)
                  (VP (VB force)
                    (NP (JJ young) (NNS children))
                    (S
                      (VP (TO to)
                        (VP (VB work)
                          (PP (IN as)
                            (NP (NNS adults)))
                          (SBAR (IN so)
                            (S
                              (NP (NNS laws))
                              (VP (VBD were)
                                (VP (VBN implemented)
                                  (S
                                    (VP (TO to)
                                      (VP (VB prevent)
                                        (NP (PRP it))))))))))))))))))))
    (. .)))

nsubj(knew-2, People-1)
root(ROOT-0, knew-2)
nsubj(wrong-5, it-3)
cop(wrong-5, was-4)
ccomp(knew-2, wrong-5)
aux(force-7, to-6)
xcomp(wrong-5, force-7)
amod(children-9, young-8)
dobj(force-7, children-9)
aux(work-11, to-10)
xcomp(force-7, work-11)
prep_as(work-11, adults-13)
mark(implemented-17, so-14)
nsubjpass(implemented-17, laws-15)
xsubj(prevent-19, laws-15)
auxpass(implemented-17, were-16)
advcl(work-11, implemented-17)
aux(prevent-19, to-18)
xcomp(implemented-17, prevent-19)
dobj(prevent-19, it-20)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADJP (JJ wrong)
        (S
          (VP (TO to)
            (VP (VB discriminate)
              (PP (IN against)
                (NP
                  (NP (NNS people))
                  (VP (VBN based)
                    (PP (IN on)
                      (NP
                        (NP (DT the) (NN color))
                        (PP (IN of)
                          (NP (PRP$ their) (NN skin)
                            (CC or)
                            (NN gender)))))))))))))
    (. .)))

nsubj(wrong-3, It-1)
cop(wrong-3, 's-2)
root(ROOT-0, wrong-3)
aux(discriminate-5, to-4)
xcomp(wrong-3, discriminate-5)
prep_against(discriminate-5, people-7)
partmod(people-7, based-8)
det(color-11, the-10)
prep_on(based-8, color-11)
poss(skin-14, their-13)
prep_of(color-11, skin-14)
prep_of(color-11, gender-16)
conj_or(skin-14, gender-16)

(ROOT
  (S
    (S
      (SBAR (IN Because)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (ADVP
              (NP (PDT such) (DT a) (NN thing))
              (RB as))
            (ADJP (JJ right)
              (CC or)
              (JJ wrong)))))
      (NP (PRP we))
      (VP (VBP enforce)
        (NP
          (NP (NNS laws))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBP maintain)
                (ADJP (JJ right)
                  (CC and)
                  (JJ wrong))))))))
    (CC and)
    (S
      (NP (PRP we))
      (VP
        (NP
          (NP (NN change) (NNS laws))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBP do) (RB n't)))))
        (PRN (-LRB- -LRB-)
          (PP (JJ such) (IN as)
            (NP (NN slavery)
              (CC or)
              (NN segregation)))
          (-RRB- -RRB-))))
    (. .)))

mark(is-3, Because-1)
expl(is-3, there-2)
advcl(enforce-12, is-3)
predet(thing-6, such-4)
det(thing-6, a-5)
npadvmod(as-7, thing-6)
advmod(is-3, as-7)
acomp(is-3, right-8)
acomp(is-3, wrong-10)
conj_or(right-8, wrong-10)
nsubj(enforce-12, we-11)
root(ROOT-0, enforce-12)
dobj(enforce-12, laws-13)
nsubj(maintain-15, laws-13)
rcmod(laws-13, maintain-15)
acomp(maintain-15, right-16)
acomp(maintain-15, wrong-18)
conj_and(right-16, wrong-18)
nsubj(laws-22, we-20)
nn(laws-22, change-21)
conj_and(enforce-12, laws-22)
nsubj(do-24, laws-22)
rcmod(laws-22, do-24)
neg(do-24, n't-25)
prep_such_as(laws-22, slavery-29)
prep_such_as(laws-22, segregation-31)
conj_or(slavery-29, segregation-31)

(ROOT
  (S
    (SBAR (RB Just) (IN because)
      (S
        (NP (NN abortion))
        (VP (VBZ is)
          (ADJP (JJ legal)))))
    (VP (VBZ does) (RB n't)
      (VP (VB make)
        (S
          (NP (PRP it))
          (ADJP (RB right)))))
    (. .)))

advmod(legal-5, Just-1)
dep(legal-5, because-2)
nsubj(legal-5, abortion-3)
cop(legal-5, is-4)
advcl(make-8, legal-5)
csubj(make-8, legal-5)
aux(make-8, does-6)
neg(make-8, n't-7)
root(ROOT-0, make-8)
nsubj(right-10, it-9)
xcomp(make-8, right-10)

(ROOT
  (S
    (NP (CD One) (NN day))
    (NP (PRP I))
    (VP (VBP believe)
      (SBAR
        (S
          (NP (NNS people))
          (VP (MD will)
            (VP (VB look)
              (PRT (RP back))
              (PP (IN in)
                (NP
                  (NP (NN horror))
                  (PP (IN at)
                    (NP (DT the) (CD 40)))))
              (NP
                (NP
                  (QP (CD +) (CD million))
                  (JJ unborn) (NNS children))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBP have)
                      (VP (VBN been)
                        (VP (VBN murdered)
                          (PP (IN in)
                            (NP (PRP$ our) (NN country))))))))))))))
    (. .)))

num(day-2, One-1)
tmod(believe-4, day-2)
nsubj(believe-4, I-3)
root(ROOT-0, believe-4)
nsubj(look-7, people-5)
aux(look-7, will-6)
ccomp(believe-4, look-7)
prt(look-7, back-8)
prep_in(look-7, horror-10)
det(40-13, the-12)
prep_at(horror-10, 40-13)
number(million-15, +-14)
num(children-17, million-15)
amod(children-17, unborn-16)
dobj(look-7, children-17)
nsubjpass(murdered-21, children-17)
aux(murdered-21, have-19)
auxpass(murdered-21, been-20)
rcmod(children-17, murdered-21)
poss(country-24, our-23)
prep_in(murdered-21, country-24)

(ROOT
  (SBARQ
    (WHADVP (RB '') (WRB How))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB prove)
        (NP (DT that) (NN assertion))))
    (. ?)))

advmod(prove-5, How-2)
aux(prove-5, do-3)
nsubj(prove-5, you-4)
root(ROOT-0, prove-5)
det(assertion-7, that-6)
dobj(prove-5, assertion-7)

(ROOT
  (S
    (PP (IN On)
      (NP (DT the) (NN premise)))
    (NP (DT that) (NN abortion))
    (VP (VBZ is) (RB n't)
      (NP (NN murder)))
    (. ?)))

det(premise-3, the-2)
prep_on(murder-8, premise-3)
det(abortion-5, that-4)
nsubj(murder-8, abortion-5)
cop(murder-8, is-6)
neg(murder-8, n't-7)
root(ROOT-0, murder-8)

(ROOT
  (FRAG
    (WHNP (WDT What))
    (SBAR (IN if)
      (S
        (NP (PRP$ your) (NN premise))
        (VP (VBZ is)
          (ADJP (JJ wrong)))))
    (. ?)))

dep(wrong-6, What-1)
mark(wrong-6, if-2)
poss(premise-4, your-3)
nsubj(wrong-6, premise-4)
cop(wrong-6, is-5)
root(ROOT-0, wrong-6)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB also))
    (VP (VBP state)
      (SBAR
        (S
          (NP (PRP$ her) (NN grief))
          (VP (VBZ is)
            (ADJP (JJ illogical))
            (SBAR (IN because)
              (S
                (NP (EX there))
                (VP (VBD was)
                  (ADJP (RB no) (JJ conscious))
                  (S
                    (VP (VBG being)
                      (ADVP (RB there)))))))))))
    (. .)))

nsubj(state-3, You-1)
advmod(state-3, also-2)
root(ROOT-0, state-3)
poss(grief-5, her-4)
nsubj(illogical-7, grief-5)
cop(illogical-7, is-6)
ccomp(state-3, illogical-7)
mark(was-10, because-8)
expl(was-10, there-9)
advcl(illogical-7, was-10)
advmod(conscious-12, no-11)
acomp(was-10, conscious-12)
xcomp(was-10, being-13)
advmod(being-13, there-14)

(ROOT
  (SQ (VBZ Is)
    (NP (PRP it))
    (VP (VBN ok)
      (PP (TO to)
        (NP (NN murder) (NNS people)))
      (ADVP
        (ADVP (RB as) (RB long))
        (SBAR (IN as)
          (S
            (NP (PRP they))
            (VP (VBP 're)
              (ADJP (RB not) (JJ conscious))
              (PP (JJ such) (IN as)
                (SBAR
                  (WHADVP (WRB when))
                  (S
                    (NP (PRP they))
                    (VP (VBP 're)
                      (ADJP (RB asleep)))))))))))
    (. ?)))

auxpass(ok-3, Is-1)
nsubjpass(ok-3, it-2)
root(ROOT-0, ok-3)
nn(people-6, murder-5)
prep_to(ok-3, people-6)
advmod(long-8, as-7)
advmod(ok-3, long-8)
mark(conscious-13, as-9)
nsubj(conscious-13, they-10)
cop(conscious-13, 're-11)
neg(conscious-13, not-12)
ccomp(long-8, conscious-13)
advmod(asleep-19, when-16)
nsubj(asleep-19, they-17)
cop(asleep-19, 're-18)
prepc_such_as(conscious-13, asleep-19)

(ROOT
  (SBARQ
    (WHADVP
      (ADVP (RB Anyway))
      (WRB how))
    (SQ (VBP do)
      (NP (PRP you))
      (ADVP (RB scientifically))
      (VP (VB prove)
        (CC or)
        (VB define)
        (NP
          (NP (DT the) (NN consciousness))
          (PP (IN of)
            (NP (DT another))))))
    (. .)))

advmod(how-2, Anyway-1)
advmod(prove-6, how-2)
aux(prove-6, do-3)
nsubj(prove-6, you-4)
nsubj(define-8, you-4)
advmod(prove-6, scientifically-5)
root(ROOT-0, prove-6)
conj_or(prove-6, define-8)
det(consciousness-10, the-9)
dobj(prove-6, consciousness-10)
prep_of(consciousness-10, another-12)

(ROOT
  (S
    (ADVP (RB Maybe))
    (NP (PRP we))
    (VP (MD should)
      (VP (VB kill)
        (NP (NNS people))
        (PP (IN with)
          (NP (NNP Alzehimers)))))
    (. .)))

advmod(kill-4, Maybe-1)
nsubj(kill-4, we-2)
aux(kill-4, should-3)
root(ROOT-0, kill-4)
dobj(kill-4, people-5)
prep_with(kill-4, Alzehimers-7)

