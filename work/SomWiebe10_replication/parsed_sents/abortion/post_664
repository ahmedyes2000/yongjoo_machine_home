(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (VBP do)
      (NP (PRP you))
      (ADVP (RB scientifically))
      (VP (VB prove)
        (SBAR (IN that)
          (S
            (NP (NN life))
            (VP (VBZ begins)
              (PP (IN after)
                (NP (NN conception))))))))
    (. ?)))

advmod(prove-5, How-1)
aux(prove-5, do-2)
nsubj(prove-5, you-3)
advmod(prove-5, scientifically-4)
root(ROOT-0, prove-5)
complm(begins-8, that-6)
nsubj(begins-8, life-7)
ccomp(prove-5, begins-8)
prep_after(begins-8, conception-10)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP make)
      (NP (DT an) (NN assertion))
      (PP (IN without)
        (S
          (VP (VBG substantiating)
            (NP (PRP it))))))
    (. .)))

nsubj(make-2, You-1)
root(ROOT-0, make-2)
det(assertion-4, an-3)
dobj(make-2, assertion-4)
prepc_without(make-2, substantiating-6)
dobj(substantiating-6, it-7)

(ROOT
  (S
    (NP (PDT All) (PRP$ our) (NNS laws))
    (VP (VBP are)
      (VP (VBN based)
        (PP (IN on)
          (NP (JJ moral) (NNS axioms)))))
    (. .)))

predet(laws-3, All-1)
poss(laws-3, our-2)
nsubjpass(based-5, laws-3)
auxpass(based-5, are-4)
root(ROOT-0, based-5)
amod(axioms-8, moral-7)
prep_on(based-5, axioms-8)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VB take)
          (PRT (RP away))
          (NP (CD one)))))
    (, ,)
    (NP (EX there))
    (VP (VBZ 's)
      (NP (DT no) (NN reason)
        (S
          (VP (TO to)
            (VP (VB follow)
              (NP
                (NP (DT any))
                (PP (IN of)
                  (NP (PRP them)))))))))
    (. .)))

mark(take-3, If-1)
nsubj(take-3, you-2)
advcl('s-8, take-3)
prt(take-3, away-4)
dobj(take-3, one-5)
expl('s-8, there-7)
root(ROOT-0, 's-8)
det(reason-10, no-9)
nsubj('s-8, reason-10)
aux(follow-12, to-11)
infmod(reason-10, follow-12)
dobj(follow-12, any-13)
prep_of(any-13, them-15)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (POS 's))
        (VP (VB be)
          (ADJP (JJ honest)))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(honest-4, 's-2)
cop(honest-4, be-3)
ccomp(Let-1, honest-4)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP believe)
        (PP (IN in)
          (NP (NN evolution)))
        (ADVP (RB therefore))))
    (NP (PRP you))
    (VP (VBP believe)
      (SBAR
        (S
          (NP (NN might))
          (VP (VBZ makes)
            (ADJP (JJ right))))))
    (. .)))

nsubj(believe-2, You-1)
dep(believe-7, believe-2)
prep_in(believe-2, evolution-4)
advmod(believe-2, therefore-5)
nsubj(believe-7, you-6)
root(ROOT-0, believe-7)
nsubj(makes-9, might-8)
ccomp(believe-7, makes-9)
acomp(makes-9, right-10)

(ROOT
  (FRAG
    (X (DT The) (JJR weaker))
    (VP (VBP deserve)
      (S
        (VP (TO to)
          (VP (VB be)
            (VP (VBN destroyed)
              (PP (IN by)
                (NP (DT the) (JJR stronger))))))))
    (. .)))

det(weaker-2, The-1)
dep(deserve-3, weaker-2)
root(ROOT-0, deserve-3)
aux(destroyed-6, to-4)
auxpass(destroyed-6, be-5)
xcomp(deserve-3, destroyed-6)
det(stronger-9, the-8)
agent(destroyed-6, stronger-9)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ 's)
      (ADJP
        (ADJP (NN nothing) (JJR weaker))
        (PP (IN than)
          (NP (DT an) (JJ unborn) (NN child)))))
    (. .)))

expl('s-2, There-1)
root(ROOT-0, 's-2)
acomp('s-2, nothing-3)
dep(nothing-3, weaker-4)
det(child-8, an-6)
amod(child-8, unborn-7)
prep_than(nothing-3, child-8)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (NNP God))
        (VP
          (VP (VBD created)
            (NP (DT the) (NN world)))
          (CC and)
          (VP (VBD instilled)
            (NP (DT a) (JJ moral) (NNS compass))
            (PP (IN by)
              (SBAR
                (WHNP (WDT which))
                (S
                  (VP (TO to)
                    (VP (VB steer))))))))))
    (, ,)
    (NP (NN murder))
    (VP (VBZ is)
      (ADJP (JJ wrong)))
    (. .)))

advmod(wrong-20, However-1)
mark(created-5, if-3)
nsubj(created-5, God-4)
nsubj(instilled-9, God-4)
advcl(wrong-20, created-5)
det(world-7, the-6)
dobj(created-5, world-7)
conj_and(created-5, instilled-9)
advcl(wrong-20, instilled-9)
det(compass-12, a-10)
amod(compass-12, moral-11)
dobj(instilled-9, compass-12)
nsubj(steer-16, which-14)
aux(steer-16, to-15)
prepc_by(instilled-9, steer-16)
nsubj(wrong-20, murder-18)
cop(wrong-20, is-19)
root(ROOT-0, wrong-20)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP do) (RB n't)
          (VP (VB believe)
            (PP (IN in)
              (NP (NNP God)))
            (ADVP (RB then))))))
    (WHNP (WRB how))
    (SQ
      (VP (VBP do)
        (S
          (NP (PRP you))
          (ADJP (JJ suscribe)
            (PP (TO to)
              (NP (DT any) (NN law)))))))
    (. ?)))

mark(believe-5, If-1)
nsubj(believe-5, you-2)
aux(believe-5, do-3)
neg(believe-5, n't-4)
dep(do-10, believe-5)
prep_in(believe-5, God-7)
advmod(believe-5, then-8)
nsubj(do-10, how-9)
root(ROOT-0, do-10)
nsubj(suscribe-12, you-11)
xcomp(do-10, suscribe-12)
det(law-15, any-14)
prep_to(suscribe-12, law-15)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ
      (VP (VBZ makes)
        (S
          (NP
            (NP (NN murder))
            (PP (IN of)
              (NP (PRP$ your) (NN neighbor))))
          (ADJP (JJ wrong)))))
    (. ?)))

nsubj(makes-2, What-1)
root(ROOT-0, makes-2)
nsubj(wrong-7, murder-3)
poss(neighbor-6, your-5)
prep_of(murder-3, neighbor-6)
xcomp(makes-2, wrong-7)

(ROOT
  (S
    (S
      (NP (NNP Let) (POS 's))
      (VP (VBP pass)
        (NP
          (NP (DT a) (NN bill))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ says)
                (SBAR (IN if)
                  (S
                    (NP (PRP I))
                    (VP (MD can)
                      (VP (VB prove)
                        (SBAR
                          (S
                            (NP (PRP I))
                            (VP (VBP 'm)
                              (ADJP (RBR more) (JJ viable)
                                (PP (TO to)
                                  (NP
                                    (NP (NN society))
                                    (PP (IN than)
                                      (NP (PRP$ my) (NN neighbor)))))))))))))))))))
    (, ,)
    (S
      (NP (PRP he))
      (VP (VBZ does) (RB n't)
        (VP (VB deserve)
          (S
            (VP (TO to)
              (VP (VB live)))))))
    (CC and)
    (S
      (NP (EX there))
      (VP (VBZ 's)
        (ADJP (NN nothing) (JJ wrong))
        (PP (IN with)
          (S
            (NP (PRP me))
            (VP (VBG killing)
              (NP (PRP him)))))))
    (. .)))

nsubj(pass-3, Let-1)
nsubj('s-30, Let-1)
possessive(Let-1, 's-2)
root(ROOT-0, pass-3)
det(bill-5, a-4)
dobj(pass-3, bill-5)
nsubj(says-7, bill-5)
rcmod(bill-5, says-7)
mark(prove-11, if-8)
nsubj(prove-11, I-9)
aux(prove-11, can-10)
advcl(says-7, prove-11)
nsubj(viable-15, I-12)
cop(viable-15, 'm-13)
advmod(viable-15, more-14)
ccomp(prove-11, viable-15)
prep_to(viable-15, society-17)
poss(neighbor-20, my-19)
prep_than(society-17, neighbor-20)
nsubj(deserve-25, he-22)
xsubj(live-27, he-22)
aux(deserve-25, does-23)
neg(deserve-25, n't-24)
conj_and(pass-3, deserve-25)
aux(live-27, to-26)
xcomp(deserve-25, live-27)
expl('s-30, there-29)
conj_and(pass-3, 's-30)
dep(wrong-32, nothing-31)
acomp('s-30, wrong-32)
nsubj(killing-35, me-34)
prepc_with('s-30, killing-35)
dobj(killing-35, him-36)

