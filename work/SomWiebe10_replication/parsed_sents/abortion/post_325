(ROOT
  (S (IN so)
    (SBAR (IN if)
      (S
        (NP (NN someone))
        (VP (VBZ kidnaps)
          (NP (PRP you)))))
    (, ,)
    (S
      (S
        (VP (VBG chains)
          (NP (PRP you))
          (PP (IN in)
            (NP
              (NP (DT a) (NN cabin))
              (PP (IN in)
                (NP (DT the) (JJ arctic) (NNS wastes)))))))
      (, ,)
      (CC and)
      (S
        (NP (NN force))
        (VP (VBZ feeds)
          (NP (PRP you)))))
    (, ,) (RB all)
    (S
      (PP (IN at)
        (NP (PRP$ their) (JJ own) (NN expence)
          (CC and)
          (NN inconvenience)))
      (, ,)
      (NP (PRP they))
      (ADVP (RB then))
      (VP (VBP have)
        (NP (DT the) (NN right)
          (S
            (VP (TO to)
              (VP (`` ``) (VB terminate)
                (NP (DT the) (NN relationship))
                ('' '')))))))
    (. ?)))

dep(chains-7, so-1)
mark(kidnaps-4, if-2)
nsubj(kidnaps-4, someone-3)
dep(chains-7, kidnaps-4)
dobj(kidnaps-4, you-5)
root(ROOT-0, chains-7)
dobj(chains-7, you-8)
det(cabin-11, a-10)
prep_in(chains-7, cabin-11)
det(wastes-15, the-13)
amod(wastes-15, arctic-14)
prep_in(cabin-11, wastes-15)
nsubj(feeds-19, force-18)
conj_and(chains-7, feeds-19)
dobj(feeds-19, you-20)
advmod(chains-7, all-22)
poss(expence-26, their-24)
amod(expence-26, own-25)
prep_at(have-32, expence-26)
conj_and(expence-26, inconvenience-28)
prep_at(have-32, inconvenience-28)
nsubj(have-32, they-30)
advmod(have-32, then-31)
ccomp(chains-7, have-32)
det(right-34, the-33)
dobj(have-32, right-34)
aux(terminate-37, to-35)
infmod(right-34, terminate-37)
det(relationship-39, the-38)
dobj(terminate-37, relationship-39)

(ROOT
  (S
    (S
      (VP (TO to)
        (VP
          (ADVP (RBR better))
          (VB equate)
          (NP (DT the) (NN analogy)))))
    (, ,)
    (NP (PRP they))
    (VP (MD 'll)
      (VP (VB hire)
        (NP (NN someone))
        (S
          (VP (TO to)
            (VP (VB cut)
              (NP (PRP you))
              (PRT (RP up))
              (PP (IN with)
                (NP (DT a) (NN chainsaw))))))
        (, ,)
        (S (RB then)
          (VP (VB throw)
            (NP (DT the) (NNS pieces))
            (PP (IN out)
              (NP (DT the) (NN door)))))))
    (. .)))

aux(equate-3, to-1)
advmod(equate-3, better-2)
purpcl(hire-9, equate-3)
det(analogy-5, the-4)
dobj(equate-3, analogy-5)
nsubj(hire-9, they-7)
aux(hire-9, 'll-8)
root(ROOT-0, hire-9)
dobj(hire-9, someone-10)
aux(cut-12, to-11)
xcomp(hire-9, cut-12)
dobj(cut-12, you-13)
prt(cut-12, up-14)
det(chainsaw-17, a-16)
prep_with(cut-12, chainsaw-17)
advmod(throw-20, then-19)
dep(hire-9, throw-20)
det(pieces-22, the-21)
dobj(throw-20, pieces-22)
det(door-25, the-24)
prep_out(throw-20, door-25)

(ROOT
  (S (IN So) (, ,)
    (SBAR (IN while)
      (S
        (NP (PRP it))
        (VP (VBZ 's)
          (ADJP (JJ true))
          (SBAR (IN that)
            (S
              (NP (DT the) (JJR smaller) (NN human))
              (VP (VBZ affects)
                (NP (DT the) (JJR bigger) (NN one))))))))
    (, ,)
    (NP (DT the) (NN question))
    (VP (VBZ becomes)
      (SBAR (IN whether)
        (S
          (NP (DT the) (NN child))
          (VP (VBZ is)
            (VP (VBG infringing)
              (PP (IN upon)
                (NP
                  (NP (NNS rights))
                  (PP (IN of)
                    (NP
                      (NP (DT the) (NN mother))
                      (SBAR
                        (WHNP (WDT that))
                        (S
                          (VP (VBP warrant)
                            (NP
                              (NP
                                (NP (DT the) (NN mother) (POS 's))
                                (NN infringement))
                              (PP (IN upon)
                                (NP
                                  (NP (DT the) (NN child) (POS 's))
                                  (NN right))))
                            (PP (TO to)
                              (NP (NN life)))))))))))))))
    (. .)))

dep(becomes-18, So-1)
mark(true-6, while-3)
nsubj(true-6, it-4)
cop(true-6, 's-5)
advcl(becomes-18, true-6)
complm(affects-11, that-7)
det(human-10, the-8)
amod(human-10, smaller-9)
nsubj(affects-11, human-10)
ccomp(true-6, affects-11)
det(one-14, the-12)
amod(one-14, bigger-13)
dobj(affects-11, one-14)
det(question-17, the-16)
nsubj(becomes-18, question-17)
root(ROOT-0, becomes-18)
complm(infringing-23, whether-19)
det(child-21, the-20)
nsubj(infringing-23, child-21)
aux(infringing-23, is-22)
ccomp(becomes-18, infringing-23)
prep_upon(infringing-23, rights-25)
det(mother-28, the-27)
prep_of(rights-25, mother-28)
nsubj(warrant-30, mother-28)
rcmod(mother-28, warrant-30)
det(mother-32, the-31)
poss(infringement-34, mother-32)
dobj(warrant-30, infringement-34)
det(child-37, the-36)
poss(right-39, child-37)
prep_upon(infringement-34, right-39)
prep_to(warrant-30, life-41)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP believe)
          (SBAR (IN that)
            (S
              (NP (NN convenience))
              (VP (VBZ is)
                (NP
                  (NP (DT a) (JJ just) (NN criterion))
                  (PP (IN for)
                    (S
                      (VP (VBG taking)
                        (NP
                          (NP (NN someone) (POS 's))
                          (NN life))))))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP you))
    (VP (MD must)
      (ADVP (RB consistently))
      (VP (VB support)
        (NP
          (NP (DT a) (JJ serial) (NN killer) (POS 's))
          (`` ``) (NN right))
        (S
          (VP (TO to)
            (VP (VB choose) ('' '')
              (PP (IN as)
                (ADVP (RB well))))))))
    (. .)))

mark(believe-3, If-1)
nsubj(believe-3, you-2)
advcl(support-20, believe-3)
complm(criterion-9, that-4)
nsubj(criterion-9, convenience-5)
cop(criterion-9, is-6)
det(criterion-9, a-7)
amod(criterion-9, just-8)
ccomp(believe-3, criterion-9)
prepc_for(criterion-9, taking-11)
poss(life-14, someone-12)
dobj(taking-11, life-14)
advmod(support-20, then-16)
nsubj(support-20, you-17)
aux(support-20, must-18)
advmod(support-20, consistently-19)
root(ROOT-0, support-20)
det(killer-23, a-21)
amod(killer-23, serial-22)
poss(right-26, killer-23)
dobj(support-20, right-26)
aux(choose-28, to-27)
xcomp(support-20, choose-28)
prep(choose-28, as-30)
pcomp(as-30, well-31)

