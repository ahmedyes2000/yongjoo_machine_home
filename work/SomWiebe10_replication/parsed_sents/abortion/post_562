(ROOT
  (S (`` ``)
    (NP (DT the) (NN body))
    (VP (VBZ is)
      (ADJP
        (ADVP (RB no) (RBR longer))
        (JJ able)
        (S
          (VP (TO to)
            (VP (VB continue)
              (NP (JJ essential) (NNS functions))
              (ADVP (RB independently)))))))
    (. .)))

det(body-3, the-2)
nsubj(able-7, body-3)
cop(able-7, is-4)
advmod(longer-6, no-5)
advmod(able-7, longer-6)
root(ROOT-0, able-7)
aux(continue-9, to-8)
xcomp(able-7, continue-9)
amod(functions-11, essential-10)
dobj(continue-9, functions-11)
advmod(continue-9, independently-12)

(ROOT
  (S ('' '')
    (NP (PRP We))
    (VP (MD ca) (RB n't)
      (VP (VB apply)
        (NP (DT this) (NN definition))
        (SBAR (IN because)
          (S
            (NP
              (NP (DT some))
              (PP (IN of)
                (NP (DT these) (JJ essential) (NNS functions))))
            (VP (MD can) (RB not)
              (VP (VB be)
                (VP (VBN continued)
                  (SBAR (IN because)
                    (S
                      (NP (PRP they))
                      (VP (VBP are)
                        (ADVP (RB still))
                        (PP (IN in)
                          (NP (NN development)))))))))))))
    (. .)))

nsubj(apply-5, We-2)
aux(apply-5, ca-3)
neg(apply-5, n't-4)
root(ROOT-0, apply-5)
det(definition-7, this-6)
dobj(apply-5, definition-7)
mark(continued-17, because-8)
nsubjpass(continued-17, some-9)
det(functions-13, these-11)
amod(functions-13, essential-12)
prep_of(some-9, functions-13)
aux(continued-17, can-14)
neg(continued-17, not-15)
auxpass(continued-17, be-16)
advcl(apply-5, continued-17)
mark(are-20, because-18)
nsubj(are-20, they-19)
advcl(continued-17, are-20)
advmod(are-20, still-21)
prep_in(are-20, development-23)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD ca) (RB n't)
      (VP (VB say) (`` ``)
        (ADJP
          (ADVP (RB no) (RBR longer))
          (JJ able)
          (PP (TO to)))
        ('' '')))
    (SBAR (IN if)
      (S
        (NP (PRP it))
        (VP (VBZ has) (RB n't)
          (ADVP (RB even))
          (VP (VBN started)
            (ADVP (RB yet))))))
    (. .)))

nsubj(say-4, You-1)
aux(say-4, ca-2)
neg(say-4, n't-3)
root(ROOT-0, say-4)
advmod(longer-7, no-6)
advmod(able-8, longer-7)
acomp(say-4, able-8)
prep(able-8, to-9)
mark(started-16, if-11)
nsubj(started-16, it-12)
aux(started-16, has-13)
neg(started-16, n't-14)
advmod(started-16, even-15)
dep(say-4, started-16)
advmod(started-16, yet-17)

(ROOT
  (NP (JJ Simple) (NN logic) (. .)))

amod(logic-2, Simple-1)
root(ROOT-0, logic-2)

(ROOT
  (S
    (NP
      (NP (DT A) (NN Zygote))
      (PP (IN from)
        (NP
          (NP (DT the) (NN moment))
          (PP (IN of)
            (NP (NN conception))))))
    (VP (VBZ is)
      (PP (IN in)
        (NP
          (NP (DT a) (JJ constant) (NN developpement))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ goes)
                (PP (IN beyond)
                  (NP
                    (NP (DT the) (NN moment))
                    (SBAR
                      (S
                        (NP (PRP he))
                        (VP (VBZ 's)
                          (ADVP (RB out))
                          (PP (IN of)
                            (NP (DT the) (NN womb))))))))))))))
    (. .)))

det(Zygote-2, A-1)
nsubj(is-8, Zygote-2)
det(moment-5, the-4)
prep_from(Zygote-2, moment-5)
prep_of(moment-5, conception-7)
root(ROOT-0, is-8)
det(developpement-12, a-10)
amod(developpement-12, constant-11)
prep_in(is-8, developpement-12)
nsubj(goes-14, developpement-12)
rcmod(developpement-12, goes-14)
det(moment-17, the-16)
prep_beyond(goes-14, moment-17)
nsubj('s-19, he-18)
rcmod(moment-17, 's-19)
det(womb-23, the-22)
prep_out_of('s-19, womb-23)

(ROOT
  (S (CC And)
    (NP (DT no) (NN dependency))
    (VP (MD can)
      (VP (VB justify)
        (NP
          (NP (DT the) (NN killing))
          (PP (IN of)
            (NP (DT a) (NN human) (VBG being))))))
    (. .)))

cc(justify-5, And-1)
det(dependency-3, no-2)
nsubj(justify-5, dependency-3)
aux(justify-5, can-4)
root(ROOT-0, justify-5)
det(killing-7, the-6)
dobj(justify-5, killing-7)
det(human-10, a-9)
prep_of(killing-7, human-10)
amod(human-10, being-11)

(ROOT
  (S
    (S
      (NP (DT The) (JJR greater) (NN good))
      (ADVP (RB always))
      (VP (VBZ is)
        (NP (NN life))))
    (, ,)
    (NP (EX there))
    (VP (VBP are)
      (ADJP
        (ADVP (DT no) (JJR greater))
        (JJ good)
        (PP (IN than)
          (NP
            (NP (DT the) (NN life))
            (PP (IN of)
              (NP (DT a) (NN human) (VBG being)))))))
    (. .)))

det(good-3, The-1)
amod(good-3, greater-2)
nsubj(life-6, good-3)
advmod(life-6, always-4)
cop(life-6, is-5)
ccomp(are-9, life-6)
expl(are-9, there-8)
root(ROOT-0, are-9)
dep(greater-11, no-10)
advmod(good-12, greater-11)
acomp(are-9, good-12)
det(life-15, the-14)
prep_than(good-12, life-15)
det(human-18, a-17)
prep_of(life-15, human-18)
amod(human-18, being-19)

(ROOT
  (S
    (SBAR
      (ADVP (RB Furthermore))
      (IN if)
      (S
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP you))
            (VP (VBD said))))
        (VP (VBD was)
          (ADJP (JJ true))
          (ADVP (RB then)))))
    (NP
      (NP (DT the) (NN life))
      (PP (IN of)
        (NP (DT a) (JJ human) (NNS beings))))
    (VP (VBZ depends)
      (ADVP (RB solely))
      (PP (IN on)
        (NP
          (NP (DT the) (JJ artificial) (NN technology))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ is)
                (ADJP (JJ able)
                  (S
                    (VP (TO to)
                      (VP (VB make)
                        (S
                          (NP (PRP him))
                          (VP (VB survive)
                            (PRT (RP out))
                            (PP (IN of)
                              (NP (DT the) (NN womb)))))))))))))))
    (. .)))

advmod(true-7, Furthermore-1)
dep(true-7, if-2)
dobj(said-5, what-3)
nsubj(said-5, you-4)
csubj(true-7, said-5)
cop(true-7, was-6)
advcl(depends-15, true-7)
advmod(true-7, then-8)
det(life-10, the-9)
nsubj(depends-15, life-10)
det(beings-14, a-12)
amod(beings-14, human-13)
prep_of(life-10, beings-14)
root(ROOT-0, depends-15)
advmod(depends-15, solely-16)
det(technology-20, the-18)
amod(technology-20, artificial-19)
prep_on(depends-15, technology-20)
nsubj(able-23, technology-20)
cop(able-23, is-22)
rcmod(technology-20, able-23)
aux(make-25, to-24)
xcomp(able-23, make-25)
nsubj(survive-27, him-26)
ccomp(make-25, survive-27)
det(womb-31, the-30)
prep_out_of(survive-27, womb-31)

(ROOT
  (S
    (VP (VB Welcome)
      (PP (TO to)
        (NP (DT the) (NNP Matrix) (NNP Neo))))
    (. .)))

root(ROOT-0, Welcome-1)
det(Neo-5, the-3)
nn(Neo-5, Matrix-4)
prep_to(Welcome-1, Neo-5)

