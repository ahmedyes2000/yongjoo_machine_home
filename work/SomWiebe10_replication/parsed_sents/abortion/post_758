(ROOT
  (S
    (S
      (VP (VBP Do) (RB n't)
        (VP (VB get)
          (S
            (NP (PRP me))
            (ADJP (JJ wrong))))))
    (NP (PRP you))
    (VP (MD can)
      (VP
        (VP (VB live)
          (SBAR
            (WHADVP (RB however))
            (S
              (NP (PRP you))
              (VP (VBP want)))))
        (, ,)
        (ADVP (RB just))
        (VP (VB be)
          (ADJP (JJ willing)
            (PP (TO to)))
          (PP (IN except)
            (NP (DT the) (NN consequence))))))
    (. .)))

aux(get-3, Do-1)
neg(get-3, n't-2)
dep(live-8, get-3)
nsubj(wrong-5, me-4)
xcomp(get-3, wrong-5)
nsubj(live-8, you-6)
aux(live-8, can-7)
root(ROOT-0, live-8)
advmod(want-11, however-9)
nsubj(want-11, you-10)
dep(live-8, want-11)
advmod(live-8, just-13)
cop(willing-15, be-14)
dep(live-8, willing-15)
prep(willing-15, to-16)
det(consequence-19, the-18)
prep_except(willing-15, consequence-19)

(ROOT
  (S
    (VP
      (VP
        (PRN (-LRB- -LRB-)
          (S
            (VP (VB read)
              (NP
                (NP (NNP Joe) (POS 's))
                (NN post))))
          (-RRB- -RRB-))
        (VB Take)
        (NP (NN care))
        (PP (IN of)
          (NP (DT that) (NN kid))))
      (, ,)
      (CC or)
      (VP
        (ADVP (IN at) (JJS least))
        (VB put)
        (NP (PRP them))
        (PRT (RP up))
        (PP (IN for)
          (NP (NN adoption)))))
    (. .)))

parataxis(Take-7, read-2)
poss(post-5, Joe-3)
dobj(read-2, post-5)
root(ROOT-0, Take-7)
dobj(Take-7, care-8)
det(kid-11, that-10)
prep_of(Take-7, kid-11)
advmod(put-16, at-14)
pobj(at-14, least-15)
conj_or(Take-7, put-16)
dobj(put-16, them-17)
prt(put-16, up-18)
prep_for(put-16, adoption-20)

(ROOT
  (S
    (SBAR (IN Because)
      (S
        (NP
          (NP (DT the) (JJS best) (NN way))
          (PP (IN for)
            (NP (DT a) (NN kid))))
        (VP (TO to)
          (VP (VB be)
            (VP (VBN raised))))))
    (VP (VBZ is)
      (PP (IN with)
        (NP
          (NP (DT a) (NN mother))
          (CC and)
          (NP (DT a) (NN father)))))
    (. .)))

mark(raised-10, Because-1)
det(way-4, the-2)
amod(way-4, best-3)
nsubjpass(raised-10, way-4)
det(kid-7, a-6)
prep_for(way-4, kid-7)
aux(raised-10, to-8)
auxpass(raised-10, be-9)
csubj(is-11, raised-10)
root(ROOT-0, is-11)
det(mother-14, a-13)
prep_with(is-11, mother-14)
det(father-17, a-16)
prep_with(is-11, father-17)
conj_and(mother-14, father-17)

(ROOT
  (S
    (NP
      (NP (NN Its) (RB not))
      (ADJP (PRP$ his)
        (CC or)
        (PRP$ her)))
    (VP (VBP fault)
      (SBAR (IN that)
        (S
          (NP (PRP$ their) (NNS parents))
          (VP (VBD wanted)
            (S
              (VP (TO to)
                (VP (VB live)
                  (NP (DT a) (JJ certain) (NN way)))))))))
    (. .)))

nsubj(fault-6, Its-1)
neg(Its-1, not-2)
amod(Its-1, his-3)
amod(Its-1, her-5)
conj_or(his-3, her-5)
poss(his-3, her-5)
root(ROOT-0, fault-6)
complm(wanted-10, that-7)
poss(parents-9, their-8)
nsubj(wanted-10, parents-9)
xsubj(live-12, parents-9)
ccomp(fault-6, wanted-10)
aux(live-12, to-11)
xcomp(wanted-10, live-12)
det(way-15, a-13)
amod(way-15, certain-14)
dobj(live-12, way-15)

(ROOT
  (S
    (NP (DT The) (NN baby))
    (VP (VBZ has)
      (NP
        (NP (DT the)
          (ADJP (JJ right)
            (PP (TO to)
              (NP (NN life))))
          (NN liberty))
        (CC and)
        (NP
          (NP (DT the) (NN pursuit))
          (PP (IN of)
            (NP (NN happiness))))))
    (. .)))

det(baby-2, The-1)
nsubj(has-3, baby-2)
root(ROOT-0, has-3)
det(liberty-8, the-4)
amod(liberty-8, right-5)
prep_to(right-5, life-7)
dobj(has-3, liberty-8)
det(pursuit-11, the-10)
dobj(has-3, pursuit-11)
conj_and(liberty-8, pursuit-11)
prep_of(pursuit-11, happiness-13)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB care)
        (SBAR
          (WHADVP (WRB how))
          (S
            (NP
              (ADJP (JJ small)
                (CC or)
                (JJ undeveloped))
              (DT the) (NN thing))
            (VP (VBZ is))))))
    (. .)))

nsubj(care-4, I-1)
aux(care-4, do-2)
neg(care-4, n't-3)
root(ROOT-0, care-4)
advmod(is-11, how-5)
amod(thing-10, small-6)
conj_or(small-6, undeveloped-8)
amod(thing-10, undeveloped-8)
det(thing-10, the-9)
nsubj(is-11, thing-10)
ccomp(care-4, is-11)

(ROOT
  (S
    (PP (IN About)
      (NP
        (NP (DT the) (NN rape) (NN case))
        (: ;)
        (NP
          (NP (RB no))
          (PP (IN of)
            (NP (NN course))))))
    (NP (PRP I))
    (VP (MD would) (RB not)
      (VP (VB want)
        (S
          (VP (TO to)
            (VP (VB carry)
              (NP (DT a) (NN rape) (NN child)))))))
    (. .)))

det(case-4, the-2)
nn(case-4, rape-3)
prep_about(want-12, case-4)
dep(case-4, no-6)
prep_of(no-6, course-8)
nsubj(want-12, I-9)
xsubj(carry-14, I-9)
aux(want-12, would-10)
neg(want-12, not-11)
root(ROOT-0, want-12)
aux(carry-14, to-13)
xcomp(want-12, carry-14)
det(child-17, a-15)
nn(child-17, rape-16)
dobj(carry-14, child-17)

(ROOT
  (S (CC But)
    (NP (PRP I))
    (VP (MD would) (RB n't)
      (VP (VB kill)
        (NP (DT the) (NN thing))))
    (. .)))

cc(kill-5, But-1)
nsubj(kill-5, I-2)
aux(kill-5, would-3)
neg(kill-5, n't-4)
root(ROOT-0, kill-5)
det(thing-7, the-6)
dobj(kill-5, thing-7)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB usually))
    (VP (VBP try)
      (S
        (VP (TO to)
          (VP (VB do)
            (NP (DT the) (JJ right) (NN thing))))))
    (. .)))

nsubj(try-3, I-1)
xsubj(do-5, I-1)
advmod(try-3, usually-2)
root(ROOT-0, try-3)
aux(do-5, to-4)
xcomp(try-3, do-5)
det(thing-8, the-6)
amod(thing-8, right-7)
dobj(do-5, thing-8)

(ROOT
  (S
    (NP (WDT Which))
    (VP (VBZ is)
      (ADVP (RB sometimes))
      (SBAR
        (WHNP (WP what))
        (S
          (NP (PRP I))
          (VP (VBP do) (RB n't)
            (ADVP (RB necessarily))
            (VP (VB want)
              (PP (IN for)
                (NP (PRP myself))))))))
    (. .)))

nsubj(is-2, Which-1)
root(ROOT-0, is-2)
advmod(is-2, sometimes-3)
dobj(want-9, what-4)
nsubj(want-9, I-5)
aux(want-9, do-6)
neg(want-9, n't-7)
advmod(want-9, necessarily-8)
ccomp(is-2, want-9)
prep_for(want-9, myself-11)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (NP (DT the) (NN lifestyle))
      (SBAR (IN that)
        (S
          (NP (PRP I))
          (VP (VBP choose)
            (S
              (VP (TO to)
                (VP (VB live))))))))
    (. .)))

nsubj(lifestyle-4, That-1)
cop(lifestyle-4, 's-2)
det(lifestyle-4, the-3)
root(ROOT-0, lifestyle-4)
complm(choose-7, that-5)
nsubj(choose-7, I-6)
xsubj(live-9, I-6)
ccomp(lifestyle-4, choose-7)
aux(live-9, to-8)
xcomp(choose-7, live-9)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (VBD were)
          (NP (PRP me))
          (ADVP (RB personally)))))
    (NP (PRP I))
    (VP (MD would)
      (VP (VB put)
        (NP (DT the) (NN baby))
        (PRT (RP up))
        (PP (IN for)
          (NP (NN adoption)))))
    (. .)))

mark(me-4, If-1)
nsubj(me-4, it-2)
cop(me-4, were-3)
advcl(put-8, me-4)
advmod(me-4, personally-5)
nsubj(put-8, I-6)
aux(put-8, would-7)
root(ROOT-0, put-8)
det(baby-10, the-9)
dobj(put-8, baby-10)
prt(put-8, up-11)
prep_for(put-8, adoption-13)

