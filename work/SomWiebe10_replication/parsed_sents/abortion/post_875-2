(ROOT
  (S
    (PP (IN of)
      (NP (NN course)))
    (NP (FW i))
    (VP (VBP 'm) (RB not)
      (VP (VBG saying)
        (SBAR
          (S
            (S
              (NP (PRP$ my) (NN reasoning))
              (VP (MD would)
                (VP (VB require)
                  (SBAR (IN that)
                    (S
                      (NP (DT every) (NN baby))
                      (VP (VB be)
                        (VP (VBN killed))))))))
            (, ,)
            (S
              (NP (FW i))
              (VP (VBP believe)
                (SBAR
                  (S
                    (NP (DT the) (NN woman))
                    (VP (VBZ has)
                      (NP
                        (NP (DT the) (JJ final) (NN choice))
                        (SBAR (IN so)
                          (S
                            (NP (FW i))
                            (VP (MD could) (RB n't)
                              (VP (VB decide)
                                (SBAR (IN if)
                                  (S
                                    (NP (DT the) (NN baby))
                                    (VP (VBZ is)
                                      (VP (VBN aborted)))))))))))))))
            (CC or)
            (RB not)
            (S
              (NP (FW i))
              (VP (MD could)
                (ADVP (RB just))
                (VP (VB suggest))))))))
    (. .)))

prep_of(saying-6, course-2)
nsubj(saying-6, i-3)
aux(saying-6, 'm-4)
neg(saying-6, not-5)
root(ROOT-0, saying-6)
poss(reasoning-8, my-7)
nsubj(require-10, reasoning-8)
aux(require-10, would-9)
dep(saying-6, require-10)
complm(killed-15, that-11)
det(baby-13, every-12)
nsubjpass(killed-15, baby-13)
auxpass(killed-15, be-14)
ccomp(require-10, killed-15)
nsubj(believe-18, i-17)
dep(saying-6, believe-18)
conj_or(require-10, believe-18)
det(woman-20, the-19)
nsubj(has-21, woman-20)
ccomp(believe-18, has-21)
det(choice-24, the-22)
amod(choice-24, final-23)
dobj(has-21, choice-24)
dobj(decide-29, choice-24)
mark(decide-29, so-25)
nsubj(decide-29, i-26)
aux(decide-29, could-27)
neg(decide-29, n't-28)
dep(choice-24, decide-29)
mark(aborted-34, if-30)
det(baby-32, the-31)
nsubjpass(aborted-34, baby-32)
auxpass(aborted-34, is-33)
advcl(decide-29, aborted-34)
dep(saying-6, not-36)
conj_or(require-10, not-36)
neg(require-10, not-36)
nsubj(suggest-40, i-37)
aux(suggest-40, could-38)
advmod(suggest-40, just-39)
dep(require-10, suggest-40)

