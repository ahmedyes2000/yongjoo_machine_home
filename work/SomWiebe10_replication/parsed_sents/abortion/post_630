(ROOT
  (NP
    (NP (DT A) (JJ little) (NN bit))
    (PP (IN of)
      (NP
        (NP (DT this))
        (CC and)
        (NP
          (NP (DT a) (JJ little) (NN bit))
          (PP (IN of)
            (NP (DT that))))))
    (: ...)))

det(bit-3, A-1)
amod(bit-3, little-2)
root(ROOT-0, bit-3)
prep_of(bit-3, this-5)
det(bit-9, a-7)
amod(bit-9, little-8)
prep_of(bit-3, bit-9)
conj_and(this-5, bit-9)
prep_of(bit-9, that-11)

(ROOT
  (NP
    (NP
      (NP (DT a) (NN dash))
      (PP (IN of)
        (NP
          (NP (NN socialism))
          (, ,)
          (NP
            (NP (DT a) (JJ healthy) (NN handful))
            (PP (IN of)
              (NP (NN capitalism))))
          (, ,)
          (CC and)
          (PP
            (ADVP
              (NP (DT the) (NN passing))
              (IN on))
            (IN of)
            (NP
              (NP (NNS taxes))
              (ADVP (RB back)
                (PP (TO to)
                  (NP (DT the) (NNS states))))))
          (, ,)
          (VP (VBG sprinkling))
          (PP (IN of)
            (NP (JJ other) (NNS things))))))
    (: ...)))

det(dash-2, a-1)
root(ROOT-0, dash-2)
prep_of(dash-2, socialism-4)
det(handful-8, a-6)
amod(handful-8, healthy-7)
appos(socialism-4, handful-8)
prep_of(handful-8, capitalism-10)
det(passing-14, the-13)
npadvmod(on-15, passing-14)
advmod(of-24, on-15)
prep_of(of-24, taxes-17)
advmod(taxes-17, back-18)
det(states-21, the-20)
prep_to(back-18, states-21)
partmod(of-24, sprinkling-23)
prep_of(dash-2, of-24)
conj_and(socialism-4, of-24)
amod(things-26, other-25)
pobj(of-24, things-26)

(ROOT
  (S
    (SBAR (IN Because)
      (S
        (NP (PRP I))
        (VP (VBP 'm)
          (ADJP (JJ evil)))))
    (VP (VBP like)
      (NP (DT that)))
    (. .)))

mark(evil-4, Because-1)
nsubj(evil-4, I-2)
cop(evil-4, 'm-3)
csubj(like-5, evil-4)
root(ROOT-0, like-5)
dobj(like-5, that-6)

(ROOT
  (FRAG (CC But)
    (NP
      (NP (JJR more))
      (SBAR
        (S
          (VP (TO to)
            (VP (VB expose)
              (SBAR
                (WHADVP (WRB how))
                (S
                  (NP (NNS people))
                  (ADVP (RB really))
                  (VP (VBP feel)
                    (PP (IN about)
                      (NP (NNS things)))
                    (PP (IN without)
                      (S
                        (VP (VBG having)
                          (S
                            (VP (TO to)
                              (VP (VB dig)
                                (ADJP (RB very) (JJ much))))))))))))))))
    (. .)))

dep(more-2, But-1)
root(ROOT-0, more-2)
aux(expose-4, to-3)
infmod(more-2, expose-4)
advmod(feel-8, how-5)
nsubj(feel-8, people-6)
advmod(feel-8, really-7)
ccomp(expose-4, feel-8)
prep_about(feel-8, things-10)
prepc_without(feel-8, having-12)
aux(dig-14, to-13)
xcomp(having-12, dig-14)
advmod(much-16, very-15)
acomp(dig-14, much-16)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP share)
      (NP
        (NP (JJR more))
        (PP (IN of)
          (NP
            (NP (DT the) (JJ true) (NNS values))
            (PP (IN of)
              (NP
                (NP (NN conservatism))
                (PRN (-LRB- -LRB-)
                  (NP (JJ old-school))
                  (-RRB- -RRB-)))))))
      (SBAR (IN than)
        (S
          (NP (PRP I))
          (VP (VBP do)
            (NP (NN socialism))))))
    (. .)))

nsubj(share-2, I-1)
root(ROOT-0, share-2)
dobj(share-2, more-3)
det(values-7, the-5)
amod(values-7, true-6)
prep_of(more-3, values-7)
prep_of(values-7, conservatism-9)
dep(conservatism-9, old-school-11)
mark(do-15, than-13)
nsubj(do-15, I-14)
advcl(share-2, do-15)
dobj(do-15, socialism-16)

(ROOT
  (S
    (SBAR (IN Although)
      (S
        (NP (NN socialism))
        (VP (VBZ has)
          (NP (JJ nice) (NNS aspects))
          (PP (TO to)
            (NP (PRP it))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (PP (IN like)
        (S
          (VP (VBG saying)
            (SBAR (IN that)
              (S
                (NP (NNP Kant))
                (, ,)
                (PP (IN as)
                  (NP (DT a) (NN philosopher)))
                (, ,)
                (VP (VBD was)
                  (ADJP (RB completely) (JJ right))
                  (PP (IN about)
                    (NP (NN everything))))))))))
    (. .)))

mark(has-3, Although-1)
nsubj(has-3, socialism-2)
advcl('s-10, has-3)
amod(aspects-5, nice-4)
dobj(has-3, aspects-5)
prep_to(has-3, it-7)
nsubj('s-10, it-9)
root(ROOT-0, 's-10)
prepc_like('s-10, saying-12)
complm(right-22, that-13)
nsubj(right-22, Kant-14)
det(philosopher-18, a-17)
prep_as(right-22, philosopher-18)
cop(right-22, was-20)
advmod(right-22, completely-21)
ccomp(saying-12, right-22)
prep_about(right-22, everything-24)

(ROOT
  (NP
    (NP (NNP Um))
    (: ...)
    (NP (NN no.))))

root(ROOT-0, Um-1)
dep(Um-1, no.-3)

(ROOT
  (S (CC But)
    (S
      (VP (TO to)
        (VP (VB combine)
          (NP
            (NP (DT those) (NNS things))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBP do)
                  (NP (NN work))
                  (PP (IN with)
                    (SBAR
                      (WHNP (WP what))
                      (S
                        (VP (VBZ Does)
                          (NP (NN work))
                          (PP (IN in)
                            (NP (NN capitalism)))
                          (: ...)
                          (S
                            (VP (TO to)
                              (VP (VB find)
                                (NP
                                  (NP (NNP the) ('' '') (NNP Golden) (NNP Mean))
                                  ('' '')
                                  (CC and)
                                  (NP
                                    (NP (NN untie))
                                    (NP (DT the) (JJ Gordian) (NN knot))))))))))))))))))
    (: ...)
    (S
      (S
        (NP (PRP it))
        (VP (MD may) (RB not)
          (VP (VB be)
            (ADJP (JJ possible)))))
      (, ,)
      (CC but)
      (S
        (NP
          (NP (PRP$ our) (NN love))
          (PP (IN of)
            (NP (NNS labels))))
        (ADVP (RB certainly))
        (VP (VBZ is) (RB n't)
          (VP (VBG helping)))))
    (. .)))

cc(combine-3, But-1)
aux(combine-3, to-2)
root(ROOT-0, combine-3)
det(things-5, those-4)
dobj(combine-3, things-5)
nsubj(do-7, things-5)
rcmod(things-5, do-7)
dobj(do-7, work-8)
nsubj(Does-11, what-10)
prepc_with(do-7, Does-11)
dobj(Does-11, work-12)
prep_in(Does-11, capitalism-14)
aux(find-17, to-16)
parataxis(Does-11, find-17)
xcomp(Does-11, find-17)
nn(Mean-21, the-18)
nn(Mean-21, Golden-20)
dobj(find-17, Mean-21)
dobj(find-17, untie-24)
conj_and(Mean-21, untie-24)
det(knot-27, the-25)
amod(knot-27, Gordian-26)
dep(untie-24, knot-27)
nsubj(possible-33, it-29)
aux(possible-33, may-30)
neg(possible-33, not-31)
cop(possible-33, be-32)
parataxis(combine-3, possible-33)
poss(love-37, our-36)
nsubj(helping-43, love-37)
prep_of(love-37, labels-39)
advmod(helping-43, certainly-40)
aux(helping-43, is-41)
neg(helping-43, n't-42)
parataxis(combine-3, helping-43)
conj_but(possible-33, helping-43)

(ROOT
  (SQ (VBZ Is) (RB n't)
    (NP (DT that))
    (NP
      (NP (WP what))
      (SBAR
        (S
          (NP (PRP we))
          (VP (VBP 're)
            (VP (VBN supposed)
              (S
                (VP (TO to)
                  (VP (VB be)
                    (VP (VBG striving)
                      (PP (IN for)))))))))))
    (. ?)))

cop(what-4, Is-1)
neg(what-4, n't-2)
nsubj(what-4, that-3)
root(ROOT-0, what-4)
prep_for(striving-10, what-4)
nsubjpass(supposed-7, we-5)
xsubj(striving-10, we-5)
auxpass(supposed-7, 're-6)
rcmod(what-4, supposed-7)
aux(striving-10, to-8)
aux(striving-10, be-9)
xcomp(supposed-7, striving-10)

(ROOT
  (NP
    (NP (DT A) (JJR more) (JJ perfect) (NN union))
    (PP (IN of)
      (NP (PRP$ our) (NNS states)))
    (. ?)))

det(union-4, A-1)
amod(union-4, more-2)
amod(union-4, perfect-3)
root(ROOT-0, union-4)
poss(states-7, our-6)
prep_of(union-4, states-7)

(ROOT
  (S (RB Not)
    (S
      (VP (VBG getting)))
    (VP (VBD hung)
      (PRT (RP up))
      (PP (IN on)
        (S
          (VP (VBG naming)
            (NP (PRP ourselves))
            (PP (IN as)
              (NP
                (NP (CD one) (NN thing))
                (CC and)
                (NP (CD one) (NN thing) (RB only))))))))
    (. ?)))

neg(hung-3, Not-1)
csubj(hung-3, getting-2)
root(ROOT-0, hung-3)
prt(hung-3, up-4)
prepc_on(hung-3, naming-6)
dobj(naming-6, ourselves-7)
num(thing-10, one-9)
prep_as(naming-6, thing-10)
num(thing-13, one-12)
prep_as(naming-6, thing-13)
conj_and(thing-10, thing-13)
advmod(thing-13, only-14)

(ROOT
  (S
    (S
      (VP (VBG Choosing)
        (S
          (VP (TO to)
            (VP (VB mix)
              (NP (NNS disciplines)
                (CC and)
                (NNS principles)))))))
    (VP (MD will)
      (ADVP (RB eventually))
      (VP (VB lead)
        (PP (TO to)
          (NP
            (NP (DT a) (NN government) (NN system))
            (SBAR
              (WHPP (IN in)
                (WHNP (WDT which)))
              (S
                (NP
                  (NP (DT a) (NN classification))
                  (PP (IN of)
                    (NP (CD one))))
                (VP (VBZ is)
                  (ADJP (JJ useless))
                  (, ,)
                  (SBAR (IN since)
                    (S
                      (NP (PRP we))
                      (VP (VBP recognize)
                        (SBAR (IN that)
                          (S
                            (NP (DT no) (CD one) (NN classification))
                            (VP (MD will)
                              (VP (VB work)
                                (ADVP (RB alone))))))))))))))))
    (. .)))

csubj(lead-9, Choosing-1)
aux(mix-3, to-2)
xcomp(Choosing-1, mix-3)
dobj(mix-3, disciplines-4)
dobj(mix-3, principles-6)
conj_and(disciplines-4, principles-6)
aux(lead-9, will-7)
advmod(lead-9, eventually-8)
root(ROOT-0, lead-9)
det(system-13, a-11)
nn(system-13, government-12)
prep_to(lead-9, system-13)
rel(useless-21, which-15)
det(classification-17, a-16)
nsubj(useless-21, classification-17)
prep_of(classification-17, one-19)
cop(useless-21, is-20)
rcmod(system-13, useless-21)
mark(recognize-25, since-23)
nsubj(recognize-25, we-24)
advcl(useless-21, recognize-25)
complm(work-31, that-26)
det(classification-29, no-27)
num(classification-29, one-28)
nsubj(work-31, classification-29)
aux(work-31, will-30)
ccomp(recognize-25, work-31)
advmod(work-31, alone-32)

(ROOT
  (S
    (VP (TO To)
      (VP (VB work)
        (PP (IN toward)
          (NP
            (NP (DT the) (NN creation))
            (PP (IN of)
              (NP (DT a)
                (ADJP (RBR more) (JJ perfect))
                (NN union)))))))
    (. !)))

aux(work-2, To-1)
root(ROOT-0, work-2)
det(creation-5, the-4)
prep_toward(work-2, creation-5)
det(union-10, a-7)
advmod(perfect-9, more-8)
amod(union-10, perfect-9)
prep_of(creation-5, union-10)

(ROOT
  (FRAG
    (NP (NNP YES))
    (. !)))

root(ROOT-0, YES-1)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (PRP it))
          (VP (VBZ 's)
            (ADVP (RB probably))
            (ADJP
              (ADJP (JJS best))
              (SBAR (IN if)
                (S
                  (NP (PRP you))
                  (VP (VB discard)
                    (NP
                      (NP (DT these) (JJ nonsensical) (NNS labels))
                      (PP (IN of)
                        (NP (NNP Conservative)
                          (CC and)
                          (NNP Liberal))))))))))))
    (. .)))

nsubj('s-2, That-1)
root(ROOT-0, 's-2)
advmod(best-7, why-3)
nsubj(best-7, it-4)
cop(best-7, 's-5)
advmod(best-7, probably-6)
advcl('s-2, best-7)
mark(discard-10, if-8)
nsubj(discard-10, you-9)
ccomp(best-7, discard-10)
det(labels-13, these-11)
amod(labels-13, nonsensical-12)
dobj(discard-10, labels-13)
prep_of(labels-13, Conservative-15)
prep_of(labels-13, Liberal-17)
conj_and(Conservative-15, Liberal-17)

(ROOT
  (S
    (S
      (NP (JJS Most) (NNS people))
      (VP (VBP do) (RB n't)
        (ADVP (RB even))
        (VP (VB know)
          (SBAR
            (WHNP (WP what))
            (S
              (NP (DT those))
              (VP (VBP mean)
                (ADVP (RB anymore))))))))
    (, ,)
    (NP (PRP they))
    (VP (VBP 've)
      (VP (VBN become)
        (S
          (ADJP (RB so) (JJ distorted)))))
    (. .)))

amod(people-2, Most-1)
nsubj(know-6, people-2)
aux(know-6, do-3)
neg(know-6, n't-4)
advmod(know-6, even-5)
ccomp(become-14, know-6)
dobj(mean-9, what-7)
nsubj(mean-9, those-8)
ccomp(know-6, mean-9)
advmod(mean-9, anymore-10)
nsubj(become-14, they-12)
aux(become-14, 've-13)
root(ROOT-0, become-14)
advmod(distorted-16, so-15)
acomp(become-14, distorted-16)

(ROOT
  (S
    (SBAR (RB Ever)
      (S
        (VP (VBP notice)
          (NP (DT the) (NN hostility)))))
    (NP (PRP you))
    (ADVP (RB automatically))
    (VP (VBP transpose)
      (PP (IN onto)
        (S
          (VP (VBG so-called) ('' '')
            (NP (NNS Liberals))
            ('' '')))))
    (. ?)))

advmod(notice-2, Ever-1)
dep(transpose-7, notice-2)
det(hostility-4, the-3)
dobj(notice-2, hostility-4)
nsubj(transpose-7, you-5)
advmod(transpose-7, automatically-6)
root(ROOT-0, transpose-7)
prepc_onto(transpose-7, so-called-9)
dobj(so-called-9, Liberals-11)

(ROOT
  (S
    (S
      (NP (NNS People))
      (VP (VBP hate)
        (SBAR
          (S
            (NP (DT this))
            (VP (VBP name) ('' '')
              (NP (NNP SocialistBetty))
              ('' ''))))))
    (: ...)
    (S
      (VP (VB make)
        (NP
          (NP
            (ADJP (RB completely) (JJ irrelevant))
            (NNS comments))
          (PP (IN about)
            (NP (PRP it))))))
    (. .)))

nsubj(hate-2, People-1)
root(ROOT-0, hate-2)
nsubj(name-4, this-3)
ccomp(hate-2, name-4)
dobj(name-4, SocialistBetty-6)
parataxis(hate-2, make-9)
advmod(irrelevant-11, completely-10)
amod(comments-12, irrelevant-11)
dobj(make-9, comments-12)
prep_about(comments-12, it-14)

(ROOT
  (S (: ...)
    (NP (WDT which))
    (VP (VBZ is)
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (PRP I))
          (VP (VBD chose)
            (NP (PRP it))))))
    (. .)))

nsubj(is-3, which-2)
root(ROOT-0, is-3)
advmod(chose-6, why-4)
nsubj(chose-6, I-5)
advcl(is-3, chose-6)
dobj(chose-6, it-7)

