(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB now))
    (VP (VBP understand)
      (SBAR
        (WHNP (WP what))
        (S
          (NP
            (NP (RB exactly) (NNS proponents))
            (PP (IN of)
              (NP (NN abortion))))
          (VP (VBP mean)
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (PRP they))
                (VP (VBD put)
                  (PRT (RP forward))
                  (NP
                    (NP (DT this) (NN idea))
                    (PP (IN of) (`` ``)
                      (NP
                        (NP (PRP$ my) (NN body))
                        (, ,)
                        (NP (PRP$ my) (NN choice))))))))))))
    (. .)))

nsubj(understand-3, I-1)
advmod(understand-3, now-2)
root(ROOT-0, understand-3)
dep(mean-9, what-4)
advmod(proponents-6, exactly-5)
nsubj(mean-9, proponents-6)
prep_of(proponents-6, abortion-8)
ccomp(understand-3, mean-9)
advmod(put-12, when-10)
nsubj(put-12, they-11)
advcl(mean-9, put-12)
prt(put-12, forward-13)
det(idea-15, this-14)
dobj(put-12, idea-15)
poss(body-19, my-18)
prep_of(idea-15, body-19)
poss(choice-22, my-21)
appos(body-19, choice-22)

(ROOT
  (S ('' '')
    (NP (PRP It))
    (VP (VBD had)
      (VP
        (ADVP (RB never))
        (VBN made)
        (NP
          (NP (NN sense))
          (PP (TO to)
            (NP (PRP me))))
        (ADVP (RB before))
        (, ,)
        (SBAR
          (ADVP (RB probably))
          (IN because)
          (S
            (NP (PRP I))
            (VP (VBD was)
              (VP (VBG looking)
                (ADVP
                  (ADVP (RBR more)
                    (PP (IN at)
                      (NP (DT the) (NN fetus))))
                  (, ,)
                  (CC and)
                  (ADVP (RBR less)))
                (PP (IN at)
                  (NP (DT the) (NN womb)))))))))
    (. .)))

nsubj(made-5, It-2)
aux(made-5, had-3)
neg(made-5, never-4)
root(ROOT-0, made-5)
dobj(made-5, sense-6)
prep_to(sense-6, me-8)
advmod(made-5, before-9)
advmod(looking-15, probably-11)
dep(looking-15, because-12)
nsubj(looking-15, I-13)
aux(looking-15, was-14)
dep(made-5, looking-15)
advmod(looking-15, more-16)
det(fetus-19, the-18)
prep_at(more-16, fetus-19)
advmod(looking-15, less-22)
conj_and(more-16, less-22)
det(womb-25, the-24)
prep_at(looking-15, womb-25)

(ROOT
  (S
    (S
      (VP (VBG Doing)
        (NP (NN nothing))))
    (VP (MD would)
      (VP (VB allow)
        (NP (DT the) (NN child)
          (S
            (VP (TO to)
              (VP (VB live)))))))
    (. .)))

csubj(allow-4, Doing-1)
dobj(Doing-1, nothing-2)
aux(allow-4, would-3)
root(ROOT-0, allow-4)
det(child-6, the-5)
dobj(allow-4, child-6)
aux(live-8, to-7)
infmod(child-6, live-8)

(ROOT
  (S
    (S
      (VP (VBG Taking)
        (NP (NN action))
        (S
          (VP (TO to)
            (VP (VB ensure)
              (SBAR (IN that)
                (S
                  (NP (DT another) (NN human))
                  (VP (VBZ dies)))))))))
    (PRN (, ,)
      (SBAR (IN whether)
        (S
          (NP (PRP they))
          (VP (VBP are)
            (ADJP (JJ dependent)
              (PP (IN upon)
                (NP (PRP$ your) (NN body) (NNS parts))))))
        (CC or)
        (RB not))
      (, ,))
    (VP (VBZ is)
      (ADJP (RB generally) (JJ illegal)))
    (. .)))

csubj(illegal-23, Taking-1)
dobj(Taking-1, action-2)
aux(ensure-4, to-3)
xcomp(Taking-1, ensure-4)
complm(dies-8, that-5)
det(human-7, another-6)
nsubj(dies-8, human-7)
ccomp(ensure-4, dies-8)
dep(dependent-13, whether-10)
nsubj(dependent-13, they-11)
cop(dependent-13, are-12)
parataxis(illegal-23, dependent-13)
poss(parts-17, your-15)
nn(parts-17, body-16)
prep_upon(dependent-13, parts-17)
conj_or(dependent-13, not-19)
parataxis(illegal-23, not-19)
cop(illegal-23, is-21)
advmod(illegal-23, generally-22)
root(ROOT-0, illegal-23)

(ROOT
  (S
    (ADVP (RB Unfortunately))
    (, ,)
    (NP (EX there))
    (VP (VBP are) (RB n't)
      (NP
        (NP (JJ many) (JJ good) (NNS analogies))
        (PP (IN for)
          (NP
            (NP (DT the) (JJ unique) (NN relationship))
            (SBAR
              (S
                (NP (DT a) (NN fetus))
                (VP (VBZ has)
                  (VP
                    (PP (IN with)
                      (NP (PRP$ its) (NN mother)))))))))))
    (. .)))

advmod(are-4, Unfortunately-1)
expl(are-4, there-3)
root(ROOT-0, are-4)
neg(are-4, n't-5)
amod(analogies-8, many-6)
amod(analogies-8, good-7)
nsubj(are-4, analogies-8)
det(relationship-12, the-10)
amod(relationship-12, unique-11)
prep_for(analogies-8, relationship-12)
dobj(with-16, relationship-12)
det(fetus-14, a-13)
nsubj(with-16, fetus-14)
aux(with-16, has-15)
rcmod(relationship-12, with-16)
poss(mother-18, its-17)
pobj(with-16, mother-18)

(ROOT
  (S
    (NP (DT A) (NN possibility))
    (VP (MD could)
      (VP (VB be)
        (NP (JJ siamese) (NNS twins))))
    (. .)))

det(possibility-2, A-1)
nsubj(twins-6, possibility-2)
aux(twins-6, could-3)
cop(twins-6, be-4)
amod(twins-6, siamese-5)
root(ROOT-0, twins-6)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP 'm) (RB not)
        (ADJP (JJ sure))
        (SBAR
          (WHADVP (WRB how) (RB well))
          (S
            (NP (DT this) (NN analogy))
            (VP (MD will)
              (VP (VB work)
                (PRT (RP out))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP I))
      (VP (VBP 'm)
        (VP (VBG going)
          (S
            (VP (TO to)
              (VP
                (VP (VB go)
                  (PRT (RP out))
                  (PP (IN on)
                    (NP (DT a) (NN limb))))
                (CC and)
                (VP (VB say)
                  (SBAR (IN that)
                    (S
                      (S
                        (S
                          (VP
                            (ADVP (RB actively))
                            (VBG killing)
                            (CC and)
                            (VBG removing)
                            (NP (PRP$ your) (NN siamese))))
                        (VP (VBZ twin)
                          (SBAR (IN because)
                            (S
                              (NP (PRP she))
                              (VP (VBZ relies)
                                (PP (IN on)
                                  (NP (PRP$ your) (NN heart))))))))
                      (CC and)
                      (S
                        (NP (PRP she))
                        (VP (VBZ inconveniences)
                          (SBAR
                            (S
                              (NP (PRP you))
                              (VP (MD would)
                                (VP (VB be)
                                  (ADJP
                                    (ADJP (RBR more) (JJ equivalent)
                                      (PP (TO to)
                                        (NP (NN abortion))))
                                    (PP (IN than)
                                      (S
                                        (VP (VBG denying)
                                          (NP (DT a) (NN child)))))))))))))))
                (NP (PRP$ your) (NN kidney))))))))
    (. .)))

nsubj(sure-4, I-1)
cop(sure-4, 'm-2)
neg(sure-4, not-3)
root(ROOT-0, sure-4)
advmod(well-6, how-5)
advmod(work-10, well-6)
det(analogy-8, this-7)
nsubj(work-10, analogy-8)
aux(work-10, will-9)
ccomp(sure-4, work-10)
prt(work-10, out-11)
nsubj(going-16, I-14)
xsubj(go-18, I-14)
aux(going-16, 'm-15)
conj_but(sure-4, going-16)
aux(go-18, to-17)
xcomp(going-16, go-18)
prt(go-18, out-19)
det(limb-22, a-21)
prep_on(go-18, limb-22)
xcomp(going-16, say-24)
conj_and(go-18, say-24)
complm(twin-32, that-25)
advmod(killing-27, actively-26)
csubj(twin-32, killing-27)
conj_and(killing-27, removing-29)
csubj(twin-32, removing-29)
poss(siamese-31, your-30)
dobj(killing-27, siamese-31)
ccomp(say-24, twin-32)
mark(relies-35, because-33)
nsubj(relies-35, she-34)
advcl(twin-32, relies-35)
poss(heart-38, your-37)
prep_on(relies-35, heart-38)
nsubj(inconveniences-41, she-40)
ccomp(say-24, inconveniences-41)
conj_and(twin-32, inconveniences-41)
nsubj(equivalent-46, you-42)
aux(equivalent-46, would-43)
cop(equivalent-46, be-44)
advmod(equivalent-46, more-45)
ccomp(inconveniences-41, equivalent-46)
prep_to(equivalent-46, abortion-48)
prepc_than(equivalent-46, denying-50)
det(child-52, a-51)
dobj(denying-50, child-52)
poss(kidney-54, your-53)
dobj(go-18, kidney-54)

(ROOT
  (S
    (PP (IN Of)
      (NP (NN course)))
    (, ,)
    (NP (DT this) (NN example))
    (VP (VBZ does) (RB n't)
      (VP (VB take)
        (PP (IN into)
          (NP (NN account)))
        (SBAR (IN whether)
          (S
            (NP (DT a) (NN fetus))
            (VP (VBZ is)
              (NP
                (NP (DT a) (NN person))
                (, ,)
                (SBAR
                  (WHNP (WDT which))
                  (S
                    (VP (VBZ brings)
                      (NP (PRP us))
                      (ADVP (RB right) (RB back)
                        (PP (TO to)
                          (SBAR
                            (WHADVP (WRB where))
                            (S
                              (NP (PRP we))
                              (VP (VBD started)))))))))))))))
    (. .)))

prep_of(take-8, course-2)
det(example-5, this-4)
nsubj(take-8, example-5)
aux(take-8, does-6)
neg(take-8, n't-7)
root(ROOT-0, take-8)
prep_into(take-8, account-10)
complm(person-16, whether-11)
det(fetus-13, a-12)
nsubj(person-16, fetus-13)
cop(person-16, is-14)
det(person-16, a-15)
ccomp(take-8, person-16)
nsubj(brings-19, person-16)
rcmod(person-16, brings-19)
dobj(brings-19, us-20)
advmod(back-22, right-21)
advmod(brings-19, back-22)
advmod(started-26, where-24)
nsubj(started-26, we-25)
prepc_to(back-22, started-26)

(ROOT
  (S
    (SBAR (RB Now) (IN that)
      (S
        (S
          (NP (DT that) (NN clarification))
          (VP (VBZ has)
            (VP (VBN been)
              (VP (VBN made)))))
        (, ,)
        (CC and)
        (S
          (NP (DT the) (NN position))
          (VP (VBZ has)
            (VP (VBN been)
              (ADVP (RB truly))
              (VP (VBN explained)
                (ADVP (RB well))))))))
    (, ,)
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP it))
          (VP (MD will)
            (VP (VB be)
              (ADJP (RB much) (JJR easier))
              (S
                (VP (TO to)
                  (VP (VB come)
                    (PP (TO to)
                      (NP (DT an) (NN understanding)))))))))))
    (. .)))

advmod(made-7, Now-1)
dep(made-7, that-2)
det(clarification-4, that-3)
nsubjpass(made-7, clarification-4)
aux(made-7, has-5)
auxpass(made-7, been-6)
dep(think-19, made-7)
det(position-11, the-10)
nsubjpass(explained-15, position-11)
aux(explained-15, has-12)
auxpass(explained-15, been-13)
advmod(explained-15, truly-14)
conj_and(made-7, explained-15)
dep(think-19, explained-15)
advmod(explained-15, well-16)
nsubj(think-19, I-18)
root(ROOT-0, think-19)
nsubj(easier-24, it-20)
aux(easier-24, will-21)
cop(easier-24, be-22)
advmod(easier-24, much-23)
ccomp(think-19, easier-24)
aux(come-26, to-25)
xcomp(easier-24, come-26)
det(understanding-29, an-28)
prep_to(come-26, understanding-29)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (ADVP (RB certainly))
      (NP
        (NP (DT the) (JJS best) (NN argument))
        (PP (IN for)
          (NP (NN abortion))))
      (SBAR (IN that)
        (S
          (NP (PRP I))
          (VP (VBP have)
            (ADVP (RB ever))
            (VP (VBN heard))))))
    (. .)))

nsubj(argument-6, This-1)
cop(argument-6, is-2)
advmod(argument-6, certainly-3)
det(argument-6, the-4)
amod(argument-6, best-5)
root(ROOT-0, argument-6)
prep_for(argument-6, abortion-8)
complm(heard-13, that-9)
nsubj(heard-13, I-10)
aux(heard-13, have-11)
advmod(heard-13, ever-12)
ccomp(argument-6, heard-13)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP think)
        (SBAR
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP
                (NP (DT an) (NN issue))
                (VP
                  (VP (VBG separating)
                    (NP (NN abortion)))
                  (CC and)
                  (VP (VBG refusing)
                    (S
                      (VP (TO to)
                        (VP (VB give)
                          (PRT (RP up))
                          (NP (DT a) (NN kidney)))))))))))))
    (, ,)
    (CC and)
    (S
      (NP (DT that) (NN issue))
      (VP (VBZ is)
        (NP
          (NP (DT that))
          (PP (IN of)
            (NP
              (NP (NN activity))
              (PP (IN vs.)
                (NP (NN passivity))))))))
    (. .)))

nsubj(think-2, I-1)
root(ROOT-0, think-2)
expl(is-4, there-3)
ccomp(think-2, is-4)
det(issue-6, an-5)
nsubj(is-4, issue-6)
xsubj(give-12, issue-6)
dep(issue-6, separating-7)
dobj(separating-7, abortion-8)
dep(issue-6, refusing-10)
conj_and(separating-7, refusing-10)
aux(give-12, to-11)
xcomp(refusing-10, give-12)
prt(give-12, up-13)
det(kidney-15, a-14)
dobj(give-12, kidney-15)
det(issue-19, that-18)
nsubj(that-21, issue-19)
cop(that-21, is-20)
conj_and(think-2, that-21)
prep_of(that-21, activity-23)
prep_vs.(activity-23, passivity-25)

(ROOT
  (S
    (NP
      (NP (DT A) (NN child))
      (PP (IN in)
        (NP
          (NP (NN need))
          (PP (IN of)
            (NP (DT a) (NN kidney))))))
    (VP (MD will)
      (VP (VB die)
        (SBAR (IN unless)
          (S
            (NP (PRP you))
            (VP (VBP give)
              (NP (PRP it))
              (PP (TO to)
                (NP (PRP him))))))))
    (. .)))

det(child-2, A-1)
nsubj(die-9, child-2)
prep_in(child-2, need-4)
det(kidney-7, a-6)
prep_of(need-4, kidney-7)
aux(die-9, will-8)
root(ROOT-0, die-9)
mark(give-12, unless-10)
nsubj(give-12, you-11)
advcl(die-9, give-12)
dobj(give-12, it-13)
prep_to(give-12, him-15)

(ROOT
  (S
    (S
      (S
        (VP (VBG Refusing)
          (S
            (VP (TO to)
              (VP (VB do)
                (ADVP (RB so)))))))
      (VP (MD would)
        (VP (VB cause)
          (NP (DT the) (NN child)
            (S
              (VP (TO to)
                (VP (VB die))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (MD would) (RB not)
        (VP (VB be)
          (VP
            (ADVP (RB actively))
            (VBG killing)
            (NP (PRP him))))))
    (. .)))

csubj(cause-6, Refusing-1)
aux(do-3, to-2)
xcomp(Refusing-1, do-3)
advmod(do-3, so-4)
aux(cause-6, would-5)
root(ROOT-0, cause-6)
det(child-8, the-7)
dobj(cause-6, child-8)
aux(die-10, to-9)
infmod(child-8, die-10)
nsubj(killing-18, it-13)
aux(killing-18, would-14)
neg(killing-18, not-15)
aux(killing-18, be-16)
advmod(killing-18, actively-17)
conj_but(cause-6, killing-18)
dobj(killing-18, him-19)

(ROOT
  (S
    (S
      (S
        (VP (VBG Doing)
          (NP (NN nothing))))
      (VP (MD would)
        (VP (VB cause)
          (NP (DT the) (NN child)
            (S
              (VP (TO to)
                (VP (VB die))))))))
    (, ,)
    (CC but)
    (S
      (NP (NN action))
      (VP (MD would)
        (VP (VB save)
          (NP (PRP him)))))
    (. .)))

csubj(cause-4, Doing-1)
dobj(Doing-1, nothing-2)
aux(cause-4, would-3)
root(ROOT-0, cause-4)
det(child-6, the-5)
dobj(cause-4, child-6)
aux(die-8, to-7)
infmod(child-6, die-8)
nsubj(save-13, action-11)
aux(save-13, would-12)
conj_but(cause-4, save-13)
dobj(save-13, him-14)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP
        (ADJP
          (ADJP (RB very) (JJ difficult))
          (PRN (, ,)
            (SBAR (IN if)
              (FRAG (RB not)
                (ADJP (JJ impossible))))
            (, ,)))
        (PRN (-LRB- -LRB-)
          (SBAR (IN as)
            (S
              (NP (PRP it))
              (VP (MD should)
                (VP (VB be)))))
          (-RRB- -RRB-))
        (SBAR (IN for)
          (S
            (NP (DT the) (NN government))
            (VP (TO to)
              (VP (VB require)
                (NP (DT a) (NN person)
                  (S
                    (VP (TO to)
                      (VP (VB take)
                        (NP (NN action))
                        (S
                          (VP (TO to)
                            (VP (VB save)
                              (NP (DT a) (NN life)))))))))))))))
    (. .)))

nsubj(difficult-4, It-1)
cop(difficult-4, is-2)
advmod(difficult-4, very-3)
root(ROOT-0, difficult-4)
mark(not-7, if-6)
dep(difficult-4, not-7)
dep(not-7, impossible-8)
mark(be-14, as-11)
nsubj(be-14, it-12)
aux(be-14, should-13)
dep(difficult-4, be-14)
mark(require-20, for-16)
det(government-18, the-17)
nsubj(require-20, government-18)
aux(require-20, to-19)
dep(difficult-4, require-20)
det(person-22, a-21)
dobj(require-20, person-22)
aux(take-24, to-23)
infmod(person-22, take-24)
dobj(take-24, action-25)
aux(save-27, to-26)
xcomp(take-24, save-27)
det(life-29, a-28)
dobj(save-27, life-29)

(ROOT
  (S
    (NP
      (NP (DT An) (NN abortion))
      (, ,)
      (PP (IN on)
        (NP (DT the) (JJ other) (NN hand)))
      (, ,))
    (VP (VBZ is)
      (ADVP (RB actively))
      (VP (VBG killing)
        (NP (DT the) (NN child))))
    (. .)))

det(abortion-2, An-1)
nsubj(killing-11, abortion-2)
det(hand-7, the-5)
amod(hand-7, other-6)
prep_on(abortion-2, hand-7)
aux(killing-11, is-9)
advmod(killing-11, actively-10)
root(ROOT-0, killing-11)
det(child-13, the-12)
dobj(killing-11, child-13)

