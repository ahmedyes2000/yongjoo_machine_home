(ROOT
  (S
    (S
      (NP (PRP$ My) (NN definition))
      (VP (VBZ is)
        (UCP
          (NP
            (NP (RB essentially) (DT the) (JJ same))
            (PP (IN as)
              (NP (NN well))))
          (, ,)
          (CC but)
          (VP (VBN taken)
            (PP (IN from)
              (NP
                (NP
                  (NP (NNP Aristotle) (POS 's))
                  (NN definition))
                (PP (IN of)
                  (NP (NN potentiality)))))))
        (, ,) (`` ``)
        (VP (VBG Referring)
          (S
            (VP (TO to)
              (VP (VB potentiality)))))))
    (, ,)
    (NP (DT this))
    (VP (VBZ is)
      (SBAR
        (WHNP (WP what))
        (S
          (NP (DT a) (NN thing))
          (VP (VBZ is)
            (ADJP (JJ capable)
              (PP (IN of)
                (S
                  (VP
                    (VP (VBG doing))
                    (, ,)
                    (CC or)
                    (VP (VBG being)
                      (VP (VBN acted)
                        (PP (RB upon))))))))
            (, ,)
            (SBAR (IN if)
              (S
                (NP (PRP it))
                (VP (VBZ is) (RB not)
                  (VP (VBN prevented)
                    (PP (IN by)
                      (NP (NN something) (RB else)))))))))))
    (. .)))

poss(definition-2, My-1)
nsubj(Referring-20, definition-2)
xsubj(potentiality-22, definition-2)
cop(Referring-20, is-3)
advmod(same-6, essentially-4)
det(same-6, the-5)
attr(Referring-20, same-6)
xsubj(potentiality-22, same-6)
prep_as(same-6, well-8)
conj_but(same-6, taken-11)
partmod(same-6, taken-11)
attr(Referring-20, taken-11)
xsubj(potentiality-22, taken-11)
poss(definition-15, Aristotle-13)
prep_from(taken-11, definition-15)
prep_of(definition-15, potentiality-17)
ccomp(is-25, Referring-20)
aux(potentiality-22, to-21)
xcomp(Referring-20, potentiality-22)
nsubj(is-25, this-24)
root(ROOT-0, is-25)
dep(capable-30, what-26)
dobj(prevented-43, what-26)
det(thing-28, a-27)
nsubj(capable-30, thing-28)
cop(capable-30, is-29)
ccomp(is-25, capable-30)
prepc_of(capable-30, doing-32)
auxpass(acted-36, being-35)
prepc_of(capable-30, acted-36)
conj_or(doing-32, acted-36)
prep(acted-36, upon-37)
mark(prevented-43, if-39)
nsubjpass(prevented-43, it-40)
auxpass(prevented-43, is-41)
neg(prevented-43, not-42)
advcl(capable-30, prevented-43)
agent(prevented-43, something-45)
advmod(something-45, else-46)

