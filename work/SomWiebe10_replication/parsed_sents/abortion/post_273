(ROOT
  (S
    (NP (PRP One))
    (VP (MD could)
      (VP (VB look)
        (PP (IN at)
          (NP
            (NP (DT the) (NN womb))
            (PP (IN as)
              (NP (DT an) (JJ organic) (NN life) (NN support) (NN system)))))))
    (. .)))

nsubj(look-3, One-1)
aux(look-3, could-2)
root(ROOT-0, look-3)
det(womb-6, the-5)
prep_at(look-3, womb-6)
det(system-12, an-8)
amod(system-12, organic-9)
nn(system-12, life-10)
nn(system-12, support-11)
prep_as(womb-6, system-12)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (NN someone))
        (VP
          (VP (VBZ is)
            (ADJP (JJ alive)))
          (, ,)
          (CC but)
          (VP (VBZ needs)
            (NP (JJ mechanical) (NN aid))
            (PP (TO to)
              (NP (NN breath)))))))
    (, ,)
    (NP
      (NP (RB then))
      (VP (VBG taking)
        (NP (DT that))
        (PRT (RP away))))
    (VP (MD would)
      (VP (VB be)
        (NP (NN murder))))
    (. .)))

mark(alive-4, If-1)
nsubj(alive-4, someone-2)
nsubj(needs-7, someone-2)
cop(alive-4, is-3)
advcl(murder-19, alive-4)
conj_but(alive-4, needs-7)
advcl(murder-19, needs-7)
amod(aid-9, mechanical-8)
dobj(needs-7, aid-9)
prep_to(needs-7, breath-11)
nsubj(murder-19, then-13)
partmod(then-13, taking-14)
dobj(taking-14, that-15)
prt(taking-14, away-16)
aux(murder-19, would-17)
cop(murder-19, be-18)
root(ROOT-0, murder-19)

(ROOT
  (S
    (NP (PRP One))
    (VP (MD could)
      (VP (VB reason)
        (SBAR (IN that)
          (S
            (NP (DT the) (JJ same))
            (VP (MD would)
              (VP (VB be)
                (ADJP (JJ true))
                (SBAR (IN if)
                  (S
                    (NP (PRP it))
                    (VP (VBD were)
                      (NP (NN non-mechanical)))))))))))
    (. .)))

nsubj(reason-3, One-1)
aux(reason-3, could-2)
root(ROOT-0, reason-3)
complm(true-9, that-4)
det(same-6, the-5)
nsubj(true-9, same-6)
aux(true-9, would-7)
cop(true-9, be-8)
ccomp(reason-3, true-9)
mark(non-mechanical-13, if-10)
nsubj(non-mechanical-13, it-11)
cop(non-mechanical-13, were-12)
advcl(true-9, non-mechanical-13)

(ROOT
  (S
    (PP (IN On)
      (NP (DT the) (JJ other) (NN hand)))
    (, ,)
    (SBAR (IN if)
      (S
        (S
          (NP (NN someone))
          (VP (VBD needed)
            (NP (NN life) (NN support))))
        (, ,)
        (CC and)
        (S
          (NP (PRP they))
          (VP (VBD were)
            (PP (IN in)
              (NP
                (NP (DT the) (NN process))
                (PP (IN of)
                  (S
                    (VP
                      (VP (VBG trying)
                        (S
                          (VP (TO to)
                            (VP (VB get)
                              (NP (PRP it))
                              (PP (IN from)
                                (NP (PRP you)))
                              (PP (IN without)
                                (NP (PRP$ your) (NN consent)))))))
                      (, ,)
                      (ADVP (RB then))
                      (VP (VBG denying)))))))))))
    (NP (PRP it))
    (VP (MD would)
      (ADVP (RB probably))
      (RB not)
      (VP (VB be)
        (NP (NN murder))))
    (. .)))

det(hand-4, the-2)
amod(hand-4, other-3)
prep_on(murder-36, hand-4)
mark(needed-8, if-6)
nsubj(needed-8, someone-7)
dep(murder-36, needed-8)
nn(support-10, life-9)
dobj(needed-8, support-10)
nsubj(were-14, they-13)
conj_and(needed-8, were-14)
dep(murder-36, were-14)
det(process-17, the-16)
prep_in(were-14, process-17)
prepc_of(process-17, trying-19)
aux(get-21, to-20)
xcomp(trying-19, get-21)
dobj(get-21, it-22)
prep_from(get-21, you-24)
poss(consent-27, your-26)
prep_without(get-21, consent-27)
advmod(trying-19, then-29)
dep(trying-19, denying-30)
nsubj(murder-36, it-31)
aux(murder-36, would-32)
advmod(murder-36, probably-33)
neg(murder-36, not-34)
cop(murder-36, be-35)
root(ROOT-0, murder-36)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (PRP it))
          (VP (VBD did) (RB not)
            (VP (VB pose)
              (NP (DT a) (NN hardship)
                (S
                  (VP (TO to)
                    (VP (VB provide)
                      (NP (DT the) (NN aid))))))))))
      (, ,)
      (ADVP (RB then))
      (NP (PRP it))
      (VP (MD might)
        (VP (VB be)
          (VP (VBN depraved)
            (S
              (ADJP (JJ indeifference)
                (PP (TO to)
                  (NP (JJ human) (NN life)))))))))
    (, ,)
    (CC but)
    (S
      (SBAR (IN if)
        (S
          (NP (PRP it))
          (VP (VBD did)
            (VP (VB impose)
              (NP (DT a) (NN hardship))))))
      (NP (PRP it))
      (VP (MD might) (RB not)
        (ADVP (RB even))
        (VP (VB be)
          (NP (DT that)))))
    (. .)))

mark(pose-5, If-1)
nsubj(pose-5, it-2)
aux(pose-5, did-3)
neg(pose-5, not-4)
advcl(depraved-17, pose-5)
det(hardship-7, a-6)
dobj(pose-5, hardship-7)
aux(provide-9, to-8)
infmod(hardship-7, provide-9)
det(aid-11, the-10)
dobj(provide-9, aid-11)
advmod(depraved-17, then-13)
nsubjpass(depraved-17, it-14)
aux(depraved-17, might-15)
auxpass(depraved-17, be-16)
root(ROOT-0, depraved-17)
acomp(depraved-17, indeifference-18)
amod(life-21, human-20)
prep_to(indeifference-18, life-21)
mark(impose-27, if-24)
nsubj(impose-27, it-25)
aux(impose-27, did-26)
advcl(that-35, impose-27)
det(hardship-29, a-28)
dobj(impose-27, hardship-29)
nsubj(that-35, it-30)
aux(that-35, might-31)
neg(that-35, not-32)
advmod(that-35, even-33)
cop(that-35, be-34)
conj_but(depraved-17, that-35)

