(ROOT
  (S
    (S
      (NP (PRP$ Our) (NNS definitions))
      (VP (VBP are)
        (ADVP (RB essentially))
        (NP (DT the) (JJ same))))
    (, ,)
    (NP (PRP you))
    (ADVP (RB just))
    (VP (VBP misapply)
      (NP (DT the) (NN definition)))
    (. .)))

poss(definitions-2, Our-1)
nsubj(same-6, definitions-2)
cop(same-6, are-3)
advmod(same-6, essentially-4)
det(same-6, the-5)
ccomp(misapply-10, same-6)
nsubj(misapply-10, you-8)
advmod(misapply-10, just-9)
root(ROOT-0, misapply-10)
det(definition-12, the-11)
dobj(misapply-10, definition-12)

(ROOT
  (S ('' '')
    (S
      (NP
        (NP (DT The) (NN range))
        (PP (IN of)
          (NP
            (NP (NNS capabilities))
            (PP (IN that)
              (NP (NN someone)
                (CC or)
                (NN something))))))
      (VP (VBZ has)))
    (: ;)
    (S
      (NP (NNS powers)
        (CC or)
        (NNS resources))
      (ADVP (RB not) (RB yet))
      (VP
        (VP (VBD developed))
        (CC or)
        (VP (VBD made)
          (NP (NN use))
          (PP (IN of)))))
    (. .)))

det(range-3, The-2)
nsubj(has-10, range-3)
prep_of(range-3, capabilities-5)
prep_that(capabilities-5, someone-7)
prep_that(capabilities-5, something-9)
conj_or(someone-7, something-9)
root(ROOT-0, has-10)
nsubj(developed-17, powers-12)
nsubj(made-19, powers-12)
conj_or(powers-12, resources-14)
nsubj(developed-17, resources-14)
dep(yet-16, not-15)
advmod(developed-17, yet-16)
parataxis(has-10, developed-17)
parataxis(has-10, made-19)
conj_or(developed-17, made-19)
dobj(made-19, use-20)
prep(made-19, of-21)

(ROOT
  (S ('' '')
    (NP (DT This))
    (VP (VBZ makes)
      (NP (DT no) (JJ logical) (NN sense)))
    (. .)))

nsubj(makes-3, This-2)
root(ROOT-0, makes-3)
det(sense-6, no-4)
amod(sense-6, logical-5)
dobj(makes-3, sense-6)

(ROOT
  (S
    (NP (DT That) (NN person))
    (ADVP (RB however))
    (VP (VBZ exists)
      (PP (IN with)
        (NP (DT that) (NN possibility))))
    (. .)))

det(person-2, That-1)
nsubj(exists-4, person-2)
advmod(exists-4, however-3)
root(ROOT-0, exists-4)
det(possibility-7, that-6)
prep_with(exists-4, possibility-7)

(ROOT
  (S
    (ADVP (RB Indeed))
    (, ,)
    (NP (PRP you))
    (VP (MD could)
      (VP (VB argue)
        (SBAR (IN that)
          (S
            (NP (DT the) (NN wood))
            (VP (VBZ has)
              (NP (DT the) (NN potential)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (NP (DT a) (NN table)))))))))))
    (. .)))

advmod(argue-5, Indeed-1)
nsubj(argue-5, you-3)
aux(argue-5, could-4)
root(ROOT-0, argue-5)
complm(has-9, that-6)
det(wood-8, the-7)
nsubj(has-9, wood-8)
ccomp(argue-5, has-9)
det(potential-11, the-10)
dobj(has-9, potential-11)
aux(table-15, to-12)
cop(table-15, be-13)
det(table-15, a-14)
infmod(potential-11, table-15)

(ROOT
  (S
    (INTJ (UH Yes))
    (, ,)
    (NP (DT this))
    (VP (VBZ is)
      (ADJP (JJ correct))
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (JJ certain) (JJ linguistic) (NNS obscurities))
          (VP (VBP are)
            (VP (VBN overlooked))))))
    (. .)))

dep(correct-5, Yes-1)
nsubj(correct-5, this-3)
cop(correct-5, is-4)
root(ROOT-0, correct-5)
advmod(overlooked-11, when-6)
amod(obscurities-9, certain-7)
amod(obscurities-9, linguistic-8)
nsubjpass(overlooked-11, obscurities-9)
auxpass(overlooked-11, are-10)
advcl(correct-5, overlooked-11)

(ROOT
  (S
    (NP
      (NP (DT The) (NN can))
      (NP (DT the) (NN wood)))
    (ADVP (RB actually))
    (VP (VBP do))
    (. ?)))

det(can-2, The-1)
nsubj(do-6, can-2)
det(wood-4, the-3)
dep(can-2, wood-4)
advmod(do-6, actually-5)
root(ROOT-0, do-6)

(ROOT
  (NP (NN Nothing) (. .)))

root(ROOT-0, Nothing-1)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ is) (, ,)
      (SBAR (IN until)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (VP (VBN made)
              (PP (IN into)
                (NP (NN something))))))))
    (. .)))

nsubj(is-2, That-1)
root(ROOT-0, is-2)
mark(made-7, until-4)
nsubjpass(made-7, it-5)
auxpass(made-7, is-6)
advcl(is-2, made-7)
prep_into(made-7, something-9)

(ROOT
  (S (CC So)
    (SBAR
      (WHNP (WP what))
      (S
        (NP (PRP we))
        (VP (MD should)
          (VP (VB say)))))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN wood))
        (SBAR
          (S
            (VP (VBZ has)
              (NP (DT the) (NN potential)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (VP (VBN made)
                        (PP (IN into)
                          (NP (DT a) (NN table)))
                        (, ,)
                        (S (RB not)
                          (VP (TO to)
                            (VP (VB be)
                              (NP (DT a) (NN table)))))))))))))))
    (. .)))

cc(wood-8, So-1)
dobj(say-5, what-2)
nsubj(say-5, we-3)
aux(say-5, should-4)
csubj(wood-8, say-5)
cop(wood-8, is-6)
det(wood-8, the-7)
root(ROOT-0, wood-8)
rcmod(wood-8, has-9)
det(potential-11, the-10)
dobj(has-9, potential-11)
aux(made-14, to-12)
auxpass(made-14, be-13)
infmod(potential-11, made-14)
det(table-17, a-16)
prep_into(made-14, table-17)
neg(table-23, not-19)
aux(table-23, to-20)
cop(table-23, be-21)
det(table-23, a-22)
xcomp(made-14, table-23)

(ROOT
  (S
    (ADVP (RB Now))
    (PRN (, ,)
      (S
        (VP (VBG considering)
          (NP (PRP$ your) (JJ absurd) (NN example))))
      (, ,))
    (SBAR (IN If)
      (S
        (NP (PRP$ your))
        (VP (VBD appendix)
          (NP (NN cell))
          (FRAG
            (WHADVP (WRB where)))
          (PP (IN on)
            (NP
              (NP (DT the) (NN street))
              (ADVP (RB completely) (JJ alone)))))))
    (, ,)
    (NP (PRP it))
    (VP (MD would) (RB not)
      (VP (VB have)
        (NP (JJ human) (NNS rights))))
    (. .)))

advmod(have-22, Now-1)
parataxis(have-22, considering-3)
poss(example-6, your-4)
amod(example-6, absurd-5)
dobj(considering-3, example-6)
mark(appendix-10, If-8)
nsubj(appendix-10, your-9)
advcl(have-22, appendix-10)
dobj(appendix-10, cell-11)
dep(appendix-10, where-12)
det(street-15, the-14)
prep_on(appendix-10, street-15)
advmod(alone-17, completely-16)
advmod(street-15, alone-17)
nsubj(have-22, it-19)
aux(have-22, would-20)
neg(have-22, not-21)
root(ROOT-0, have-22)
amod(rights-24, human-23)
dobj(have-22, rights-24)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (NP
        (NP (DT no) (JJR longer) (NN part))
        (PP (IN of)
          (NP (PRP$ your) (NN entity)))))
    (. .)))

nsubj(part-5, It-1)
cop(part-5, is-2)
det(part-5, no-3)
amod(part-5, longer-4)
root(ROOT-0, part-5)
poss(entity-8, your-7)
prep_of(part-5, entity-8)

(ROOT
  (S ('' '')
    (S
      (SBAR (IN While)
        (S (, ,)
          (VP (VBP like)
            (NP (JJS most) (NN dictionary) (NNS definitions)))))
      (, ,)
      (NP (DT this))
      (VP (VBZ is)
        (UCP
          (ADJP (JJ vague))
          (CC and)
          (RB not)
          (ADJP (RB completely) (JJ accurate)
            (PP (IN in)
              (NP (DT a) (JJ philosophical) (NN sense)))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (ADVP (RB still))
      (ADJP (RB mostly) (JJ correct)))
    (. .)))

mark(like-4, While-2)
advcl(vague-11, like-4)
amod(definitions-7, most-5)
nn(definitions-7, dictionary-6)
dobj(like-4, definitions-7)
nsubj(vague-11, this-9)
cop(vague-11, is-10)
ccomp(correct-25, vague-11)
conj_and(vague-11, not-13)
neg(vague-11, not-13)
ccomp(correct-25, not-13)
advmod(accurate-15, completely-14)
dep(vague-11, accurate-15)
det(sense-19, a-17)
amod(sense-19, philosophical-18)
prep_in(accurate-15, sense-19)
nsubj(correct-25, it-21)
cop(correct-25, is-22)
advmod(correct-25, still-23)
advmod(correct-25, mostly-24)
root(ROOT-0, correct-25)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (NP (DT the) (JJ same) (NN idea))
      (SBAR (IN as) (, ,)
        (S
          (SBAR (IN if)
            (S
              (NP (PRP$ your) (NN hair))
              (VP (VBZ falls)
                (PRT (RP out))
                (PP (IN in)
                  (NP (PRP$ my) (NN house)
                    (CC or)
                    (NN car))))))
          (, ,)
          (NP (PRP I))
          (VP (MD can)
            (VP (VB dispose)
              (PP (IN of)
                (NP (PRP it))))))))
    (. .)))

nsubj(idea-5, This-1)
cop(idea-5, is-2)
det(idea-5, the-3)
amod(idea-5, same-4)
root(ROOT-0, idea-5)
mark(dispose-21, as-6)
mark(falls-11, if-8)
poss(hair-10, your-9)
nsubj(falls-11, hair-10)
advcl(dispose-21, falls-11)
prt(falls-11, out-12)
poss(house-15, my-14)
prep_in(falls-11, house-15)
prep_in(falls-11, car-17)
conj_or(house-15, car-17)
nsubj(dispose-21, I-19)
aux(dispose-21, can-20)
advcl(idea-5, dispose-21)
prep_of(dispose-21, it-23)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADVP (DT no) (RB longer)
        (SBAR
          (S (`` ``)
            (NP (PRP$ your))
            ('' '')
            (VP (VBZ hair))))))
    (. .)))

nsubj(is-2, It-1)
root(ROOT-0, is-2)
dep(longer-4, no-3)
advmod(is-2, longer-4)
nsubj(hair-8, your-6)
dep(longer-4, hair-8)

(ROOT
  (S
    (S
      (SBAR (IN As)
        (S
          (S
            (SBAR (RB long) (IN as)
              (S
                (NP (DT a) (NN thing))
                (VP
                  (VP (VBZ is)
                    (VP (VBN connected)
                      (PP (TO to)
                        (NP (PRP you)))))
                  (CC and)
                  (VP (VBZ is)
                    (PP (IN of)
                      (NP (PRP$ your) (JJ person-hood)))))))
            (NP (PRP it))
            (VP (VBZ is)
              (ADJP (RB completely) (JJ yours))))
          (CC and)
          (S
            (NP (PRP I))
            (VP (MD can) (RB not)
              (VP (VB touch)
                (NP (NN itA) (NN fetus)))))))
      (VP (VBZ is)
        (VP (VBN connected)
          (PP (TO to)
            (NP (DT the) (NN mother))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP
        (VP (VBZ is) (RB not)
          (PP (IN of)
            (NP (PRP$ her) (JJ person-hood))))
        (CC and)
        (VP (MD should)
          (ADVP (IN at) (JJS least))
          (VP (VB qualify)
            (PP (IN for)
              (NP (JJ certain) (JJ basic) (NNS rights)))))))
    (. .)))

mark(yours-18, As-1)
advmod(connected-7, long-2)
dep(connected-7, as-3)
det(thing-5, a-4)
nsubjpass(connected-7, thing-5)
nsubj(is-11, thing-5)
auxpass(connected-7, is-6)
advcl(yours-18, connected-7)
prep_to(connected-7, you-9)
conj_and(connected-7, is-11)
advcl(yours-18, is-11)
poss(person-hood-14, your-13)
prep_of(is-11, person-hood-14)
nsubj(yours-18, it-15)
cop(yours-18, is-16)
advmod(yours-18, completely-17)
csubjpass(connected-27, yours-18)
nsubj(touch-23, I-20)
aux(touch-23, can-21)
neg(touch-23, not-22)
conj_and(yours-18, touch-23)
csubjpass(connected-27, touch-23)
nn(fetus-25, itA-24)
dobj(touch-23, fetus-25)
auxpass(connected-27, is-26)
root(ROOT-0, connected-27)
det(mother-30, the-29)
prep_to(connected-27, mother-30)
nsubj(is-34, it-33)
nsubj(qualify-43, it-33)
conj_but(connected-27, is-34)
neg(is-34, not-35)
poss(person-hood-38, her-37)
prep_of(is-34, person-hood-38)
aux(qualify-43, should-40)
advmod(qualify-43, at-41)
pobj(at-41, least-42)
conj_but(connected-27, qualify-43)
conj_and(is-34, qualify-43)
amod(rights-47, certain-45)
amod(rights-47, basic-46)
prep_for(qualify-43, rights-47)

(ROOT
  (S
    (NP
      (NP (PRP$ Your) (NN example))
      (PP (IN of)
        (PP (IN in)
          (NP (NNP vitro)))))
    (VP (VBZ makes)
      (NP (DT no) (JJ logical) (NN sense)))
    (. .)))

poss(example-2, Your-1)
nsubj(makes-6, example-2)
prep(example-2, of-3)
pcomp(of-3, in-4)
prep_in(of-3, vitro-5)
root(ROOT-0, makes-6)
det(sense-9, no-7)
amod(sense-9, logical-8)
dobj(makes-6, sense-9)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB never))
    (VP (VBD said)
      (SBAR (IN that)
        (S
          (NP (DT a)
            (ADJP (RB scientifically) (VBN engineered))
            (NN human))
          (VP (MD would) (RB n't)
            (VP (VB be)
              (ADJP (JJ human)))))))
    (. .)))

nsubj(said-3, I-1)
neg(said-3, never-2)
root(ROOT-0, said-3)
complm(human-12, that-4)
det(human-8, a-5)
advmod(engineered-7, scientifically-6)
amod(human-8, engineered-7)
nsubj(human-12, human-8)
aux(human-12, would-9)
neg(human-12, n't-10)
cop(human-12, be-11)
ccomp(said-3, human-12)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBD said)))
    (, ,)
    (NP
      (NP (DT the) (NNS cells))
      (SBAR (IN that)
        (S
          (NP (PRP they))
          (VP (VBP make)
            (NP (PRP them))
            (PRT (RP out))
            (PP (IN of))))))
    (VP (VBP are) (RB not)
      (NP (JJ potential) (NNS humans))
      (, ,)
      (SBAR
        (WHADVP (WRB when))
        (S
          (NP (DT the) (NNS cells))
          (VP (VBP are)
            (VP (VBN considered)
              (ADVP (RB individually)))))))
    (. .)))

nsubj(said-2, I-1)
ccomp(humans-15, said-2)
det(cells-5, the-4)
nsubj(humans-15, cells-5)
complm(make-8, that-6)
nsubj(make-8, they-7)
dep(cells-5, make-8)
dobj(make-8, them-9)
prt(make-8, out-10)
prep(make-8, of-11)
cop(humans-15, are-12)
neg(humans-15, not-13)
amod(humans-15, potential-14)
root(ROOT-0, humans-15)
advmod(considered-21, when-17)
det(cells-19, the-18)
nsubjpass(considered-21, cells-19)
auxpass(considered-21, are-20)
advcl(humans-15, considered-21)
advmod(considered-21, individually-22)

(ROOT
  (S
    (SBAR (IN Once)
      (S
        (NP (PRP they))
        (VP (VBP have)
          (VP (VBN been)
            (VP (VBN engineered)
              (PP (IN into)
                (NP (DT a) (NN fetus))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP they))
    (VP (VBP are)
      (ADVP (RB definitely))
      (NP (JJ potential) (NNS humans)))
    (. .)))

mark(engineered-5, Once-1)
nsubjpass(engineered-5, they-2)
aux(engineered-5, have-3)
auxpass(engineered-5, been-4)
advcl(humans-15, engineered-5)
det(fetus-8, a-7)
prep_into(engineered-5, fetus-8)
advmod(humans-15, then-10)
nsubj(humans-15, they-11)
cop(humans-15, are-12)
advmod(humans-15, definitely-13)
amod(humans-15, potential-14)
root(ROOT-0, humans-15)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP are)
      (VP (VBG quoting)
        (NP (PRP me))
        (ADVP (RB out))
        (PP (IN of)
          (NP (NN context)))))
    (. .)))

nsubj(quoting-3, You-1)
aux(quoting-3, are-2)
root(ROOT-0, quoting-3)
dobj(quoting-3, me-4)
prep_out_of(quoting-3, context-7)

(ROOT
  (S
    (NP (PRP$ My) (NN argument))
    (VP (VBD was)
      (SBAR (IN that)
        (S
          (NP (DT a) (JJ single) (NN sperm))
          (VP (VBZ is) (RB not) (`` ``)
            (NP
              (NP (DT a) (JJ potential) (NN human))
              (SBAR (IN until)
                (S
                  (NP (PRP it))
                  (VP (VBZ unites)
                    (PP (IN with)
                      (NP (DT an) (NN egg)))))))))))
    (. .)))

poss(argument-2, My-1)
nsubj(was-3, argument-2)
root(ROOT-0, was-3)
complm(human-13, that-4)
det(sperm-7, a-5)
amod(sperm-7, single-6)
nsubj(human-13, sperm-7)
cop(human-13, is-8)
neg(human-13, not-9)
det(human-13, a-11)
amod(human-13, potential-12)
ccomp(was-3, human-13)
dobj(unites-16, human-13)
mark(unites-16, until-14)
nsubj(unites-16, it-15)
dep(human-13, unites-16)
det(egg-19, an-18)
prep_with(unites-16, egg-19)

(ROOT
  (S ('' '')
    (ADVP (RB No))
    (, ,)
    (NP (DT a) (JJ single) (NN sperm))
    (VP (MD will) (RB not)
      (VP (VB become)
        (NP
          (NP (DT a) (NN human))
          (PP (IN of)
            (NP (PRP$ its) (JJ own) (NN accord))))))
    (. .)))

advmod(human-11, No-2)
det(sperm-6, a-4)
amod(sperm-6, single-5)
nsubj(human-11, sperm-6)
aux(human-11, will-7)
neg(human-11, not-8)
cop(human-11, become-9)
det(human-11, a-10)
root(ROOT-0, human-11)
poss(accord-15, its-13)
amod(accord-15, own-14)
prep_of(human-11, accord-15)

(ROOT
  (S
    (S
      (NP (PRP$ My) (NN definition))
      (VP (VBZ is)
        (UCP
          (NP
            (NP (RB essentially) (DT the) (JJ same))
            (PP (IN as)
              (NP (NN well))))
          (, ,)
          (CC but)
          (VP (VBN taken)
            (PP (IN from)
              (NP
                (NP
                  (NP (NNP Aristotle) (POS 's))
                  (NN definition))
                (PP (IN of)
                  (NP (NN potentiality)))))))
        (, ,) (`` ``)
        (VP (VBG Referring)
          (S
            (VP (TO to)
              (VP (VB potentiality)))))))
    (, ,)
    (NP (DT this))
    (VP (VBZ is)
      (SBAR
        (WHNP (WP what))
        (S
          (NP (DT a) (NN thing))
          (VP (VBZ is)
            (ADJP (JJ capable)
              (PP (IN of)
                (S
                  (VP
                    (VP (VBG doing))
                    (, ,)
                    (CC or)
                    (VP (VBG being)
                      (VP (VBN acted)
                        (PP (RB upon))))))))
            (, ,)
            (SBAR (IN if)
              (S
                (NP (PRP it))
                (VP (VBZ is) (RB not)
                  (VP (VBN prevented)
                    (PP (IN by)
                      (NP (NN something) (RB else)))))))))))
    (. .)))

poss(definition-2, My-1)
nsubj(Referring-20, definition-2)
xsubj(potentiality-22, definition-2)
cop(Referring-20, is-3)
advmod(same-6, essentially-4)
det(same-6, the-5)
attr(Referring-20, same-6)
xsubj(potentiality-22, same-6)
prep_as(same-6, well-8)
conj_but(same-6, taken-11)
partmod(same-6, taken-11)
attr(Referring-20, taken-11)
xsubj(potentiality-22, taken-11)
poss(definition-15, Aristotle-13)
prep_from(taken-11, definition-15)
prep_of(definition-15, potentiality-17)
ccomp(is-25, Referring-20)
aux(potentiality-22, to-21)
xcomp(Referring-20, potentiality-22)
nsubj(is-25, this-24)
root(ROOT-0, is-25)
dep(capable-30, what-26)
dobj(prevented-43, what-26)
det(thing-28, a-27)
nsubj(capable-30, thing-28)
cop(capable-30, is-29)
ccomp(is-25, capable-30)
prepc_of(capable-30, doing-32)
auxpass(acted-36, being-35)
prepc_of(capable-30, acted-36)
conj_or(doing-32, acted-36)
prep(acted-36, upon-37)
mark(prevented-43, if-39)
nsubjpass(prevented-43, it-40)
auxpass(prevented-43, is-41)
neg(prevented-43, not-42)
advcl(capable-30, prevented-43)
agent(prevented-43, something-45)
advmod(something-45, else-46)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD would)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB be)
              (VP (VBN made)
                (PP (IN into)
                  (NP (DT a) (NN human)))))))))
    (. .)))

nsubj(have-3, It-1)
xsubj(made-6, It-1)
aux(have-3, would-2)
root(ROOT-0, have-3)
aux(made-6, to-4)
auxpass(made-6, be-5)
xcomp(have-3, made-6)
det(human-9, a-8)
prep_into(made-6, human-9)

(ROOT
  (S
    (S
      (PP (IN In)
        (NP (NN essence)))
      (, ,)
      (NP (PRP it))
      (VP (VBZ is)
        (NP (DT a) (JJ potential) (NN potentiality))))
    (, ,)
    (CC but)
    (S
      (NP (NN anything))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN broken)
            (PRT (RP down))
            (PP (IN into)
              (NP
                (NP (NNS degrees))
                (CC or)
                (NP (JJ potential) (NN potentiality))))))))
    (. .)))

prep_in(potentiality-8, essence-2)
nsubj(potentiality-8, it-4)
cop(potentiality-8, is-5)
det(potentiality-8, a-6)
amod(potentiality-8, potential-7)
root(ROOT-0, potentiality-8)
nsubjpass(broken-14, anything-11)
aux(broken-14, can-12)
auxpass(broken-14, be-13)
conj_but(potentiality-8, broken-14)
prt(broken-14, down-15)
prep_into(broken-14, degrees-17)
amod(potentiality-20, potential-19)
prep_into(broken-14, potentiality-20)
conj_or(degrees-17, potentiality-20)

(ROOT
  (S (IN So)
    (NP (DT that))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN concept))
        (SBAR
          (S
            (NP (PRP we))
            (VP (MD should)
              (VP (VB stay)
                (PRT (RP away))
                (PP (IN from))))))))
    (. .)))

dep(concept-5, So-1)
nsubj(concept-5, that-2)
cop(concept-5, is-3)
det(concept-5, a-4)
root(ROOT-0, concept-5)
prep_away_from(stay-8, concept-5)
nsubj(stay-8, we-6)
aux(stay-8, should-7)
rcmod(concept-5, stay-8)

(ROOT
  (S
    (ADVP (RB Anyhow))
    (, ,)
    (NP (PRP I))
    (VP (MD would)
      (VP (VB appreciate)
        (NP (PRP it))
        (SBAR (IN if)
          (S
            (NP (PRP you))
            (VP (MD would) (RB not)
              (VP
                (VP (VB take)
                  (NP (PRP$ my) (NNS statements))
                  (PRT (RP out))
                  (PP (IN of)
                    (NP (NN context))))
                (CC and)
                (VP (VB apply)
                  (NP (NNS meanings))
                  (PP (TO to)
                    (NP (PRP them)))
                  (SBAR (IN that)
                    (S
                      (NP (PRP I))
                      (ADVP (RB never))
                      (VP (VBD stated)))))))))))
    (. .)))

advmod(appreciate-5, Anyhow-1)
nsubj(appreciate-5, I-3)
aux(appreciate-5, would-4)
root(ROOT-0, appreciate-5)
dobj(appreciate-5, it-6)
mark(take-11, if-7)
nsubj(take-11, you-8)
nsubj(apply-18, you-8)
aux(take-11, would-9)
neg(take-11, not-10)
advcl(appreciate-5, take-11)
poss(statements-13, my-12)
dobj(take-11, statements-13)
prep_out_of(take-11, context-16)
advcl(appreciate-5, apply-18)
conj_and(take-11, apply-18)
dobj(apply-18, meanings-19)
prep_to(apply-18, them-21)
complm(stated-25, that-22)
nsubj(stated-25, I-23)
neg(stated-25, never-24)
ccomp(apply-18, stated-25)

(ROOT
  (S
    (S
      (S
        (VP (VBP Do) (RB n't)
          (VP (VB be)
            (VP (VBN mistaken)))))
      (, ,)
      (NP (PRP I))
      (ADVP (RB never))
      (ADVP (RB once))
      (VP
        (VP (VBD said))
        (CC or)
        (VP (VBD implied)
          (SBAR (IN that)
            (S
              (NP (PRP I))
              (VP (MD would)
                (VP (VB make)
                  (S
                    (NP (NN abortion))
                    (ADJP (JJ illegal))))))))))
    (, ,)
    (CC nor)
    (SQ (VBP do)
      (NP (PRP I))
      (VP (VB speculate)
        (NP
          (ADJP (IN as)
            (PP (TO to)
              (NP
                (NP
                  (NP (DT the) (NN application))
                  (PP (IN of)
                    (NP
                      (NP (DT these) (JJ certain) (JJ basic) (NNS rights))
                      (PP (IN of)
                        (NP (DT a) (NN fetus))))))
                (CC or)
                (SBAR (WP$ whose)
                  (S (, ,)
                    (S
                      (NP (NN mother))
                      (VP
                        (VP (VBZ 's))
                        (CC or)
                        (VP (VBN fetus) ('' ''))))
                    (, ,)
                    (NP (NNS rights))
                    (VP (VBP take)
                      (ADJP (JJ precedence)
                        (WHPP (IN in)
                          (WHNP (WP what))))))))))
          (NNS cases))))
    (. .)))

aux(mistaken-4, Do-1)
neg(mistaken-4, n't-2)
auxpass(mistaken-4, be-3)
ccomp(said-9, mistaken-4)
nsubj(said-9, I-6)
nsubj(implied-11, I-6)
neg(said-9, never-7)
advmod(said-9, once-8)
root(ROOT-0, said-9)
conj_or(said-9, implied-11)
complm(make-15, that-12)
nsubj(make-15, I-13)
aux(make-15, would-14)
ccomp(implied-11, make-15)
nsubj(illegal-17, abortion-16)
xcomp(make-15, illegal-17)
aux(speculate-22, do-20)
nsubj(speculate-22, I-21)
conj_nor(said-9, speculate-22)
det(application-26, the-25)
prep_as_to(cases-49, application-26)
det(rights-31, these-28)
amod(rights-31, certain-29)
amod(rights-31, basic-30)
prep_of(application-26, rights-31)
det(fetus-34, a-33)
prep_of(rights-31, fetus-34)
dep(take-45, whose-36)
nsubj('s-39, mother-38)
nsubj(fetus-41, mother-38)
ccomp(take-45, 's-39)
conj_or('s-39, fetus-41)
ccomp(take-45, fetus-41)
nsubj(take-45, rights-44)
conj_or(application-26, take-45)
prep_as_to(cases-49, take-45)
acomp(take-45, precedence-46)
prep_in(precedence-46, what-48)
dobj(speculate-22, cases-49)

(ROOT
  (S
    (NP
      (NP (DT All))
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBD said)
            (SBAR
              (S
                (VP (VBD was)
                  (NP (PRP you)))))))))
    (VP (VBD misapplied)
      (NP
        (NP (DT the) (NN concept))
        (PP (IN of)
          (NP (NN potentiality)))))
    (. .)))

nsubj(misapplied-6, All-1)
nsubj(said-3, I-2)
rcmod(All-1, said-3)
cop(you-5, was-4)
ccomp(said-3, you-5)
root(ROOT-0, misapplied-6)
det(concept-8, the-7)
dobj(misapplied-6, concept-8)
prep_of(concept-8, potentiality-10)

(ROOT
  (S ('' '')
    (NP (JJ Common) (NNS definitions))
    (VP (VBP are)
      (NP (DT a) (JJ slippery) (NN idea)))
    (. .)))

amod(definitions-3, Common-2)
nsubj(idea-7, definitions-3)
cop(idea-7, are-4)
det(idea-7, a-5)
amod(idea-7, slippery-6)
root(ROOT-0, idea-7)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP
      (NP
        (ADVP (RB presently))
        (DT the) (NN word))
      (ADJP
        (ADJP (`` ``) (JJ liberal) ('' ''))
        (PRN (-LRB- -LRB-)
          (PP (IN in)
            (NP (DT a) (JJ political) (NN context)))
          (-RRB- -RRB-))))
    (VP (VBZ is)
      (VP (VBN defined)
        (PP (IN as)
          (NP
            (NP (CD one))
            (SBAR
              (WHNP (WP who))
              (S
                (VP (VBZ seeks)
                  (NP
                    (NP (JJR greater) (NN government) (NN regulation))
                    (CC and)
                    (NP
                      (NP (DT an) (NN expansion))
                      (PP (IN of)
                        (NP (NN welfare) (NNS programs))))))))))))
    (. .)))

prep_for(defined-17, example-2)
advmod(word-6, presently-4)
det(word-6, the-5)
nsubjpass(defined-17, word-6)
amod(word-6, liberal-8)
dep(liberal-8, in-11)
det(context-14, a-12)
amod(context-14, political-13)
pobj(in-11, context-14)
auxpass(defined-17, is-16)
root(ROOT-0, defined-17)
prep_as(defined-17, one-19)
nsubj(seeks-21, one-19)
rcmod(one-19, seeks-21)
amod(regulation-24, greater-22)
nn(regulation-24, government-23)
dobj(seeks-21, regulation-24)
det(expansion-27, an-26)
dobj(seeks-21, expansion-27)
conj_and(regulation-24, expansion-27)
nn(programs-30, welfare-29)
prep_of(expansion-27, programs-30)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP
      (NP (DT the) (JJ original) (NN definition))
      (PP (IN of)
        (ADJP (`` ``) (JJ liberal) ('' ''))))
    (VP (VBD defined)
      (NP
        (NP (DT a) (NN person))
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBN believed)
              (PP (IN in)
                (NP
                  (NP
                    (ADJP (RB severely) (VBN limited))
                    (NN government))
                  (CC and)
                  (NP (JJ free-market) (NN capitalism)))))))))
    (. .)))

advmod(defined-10, However-1)
det(definition-5, the-3)
amod(definition-5, original-4)
nsubj(defined-10, definition-5)
prep_of(definition-5, liberal-8)
root(ROOT-0, defined-10)
det(person-12, a-11)
dobj(defined-10, person-12)
nsubj(believed-14, person-12)
rcmod(person-12, believed-14)
advmod(limited-17, severely-16)
amod(government-18, limited-17)
prep_in(believed-14, government-18)
amod(capitalism-21, free-market-20)
prep_in(believed-14, capitalism-21)
conj_and(government-18, capitalism-21)

(ROOT
  (S
    (PP (IN In)
      (NP (NN fact)))
    (, ,)
    (NP
      (NP (JJ many) (NNS founders))
      (PP (IN of)
        (NP (DT the) (NNP Libertarian) (NN movement))))
    (VP (VBD considered)
      (S
        (NP (PRP themselves))
        (`` ``)
        (NP (NNS liberals))))
    (. .)))

prep_in(considered-10, fact-2)
amod(founders-5, many-4)
nsubj(considered-10, founders-5)
det(movement-9, the-7)
nn(movement-9, Libertarian-8)
prep_of(founders-5, movement-9)
root(ROOT-0, considered-10)
dep(liberals-13, themselves-11)
dep(considered-10, liberals-13)

(ROOT
  (S ('' '')
    (PP (RB Even)
      (S
        (VP (VBG using)
          (NP
            (NP
              (NP (PRP$ your) (`` ``) (JJ exact) ('' '') (NN definition))
              (-LRB- -LRB-)
              (NP
                (NP (VBG assuming))
                (SBAR (IN that)
                  (S
                    (NP (PRP we))
                    (VP (VBP have)
                      (NP
                        (NP (DT an) (JJ exact) (NN definition))
                        (CC and)
                        (RB not)
                        (NP (RB just) (DT a) (JJ colloquial) (NN summary)))))))
              (, ,))
            (SBAR
              (S
                (NP (PRP you))
                (VP (VBP are)
                  (ADVP (RB still))
                  (ADJP (JJ confusing)))))))))
    (VP (VBP potentiality)
      (PP (IN with)
        (NP (NN possibility))))
    (. .)))

prep(potentiality-28, Even-2)
dep(Even-2, using-3)
poss(definition-8, your-4)
amod(definition-8, exact-6)
dobj(using-3, definition-8)
dep(definition-8, assuming-10)
complm(have-13, that-11)
nsubj(have-13, we-12)
dep(assuming-10, have-13)
det(definition-16, an-14)
amod(definition-16, exact-15)
dobj(have-13, definition-16)
dobj(have-13, not-18)
conj_and(definition-16, not-18)
neg(definition-16, not-18)
advmod(summary-22, just-19)
det(summary-22, a-20)
amod(summary-22, colloquial-21)
dep(definition-16, summary-22)
nsubj(confusing-27, you-24)
cop(confusing-27, are-25)
advmod(confusing-27, still-26)
rcmod(definition-8, confusing-27)
root(ROOT-0, potentiality-28)
prep_with(potentiality-28, possibility-30)

(ROOT
  (S
    (PP (IN In)
      (NP (NN effect)))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (VP (VBG interpreting)
        (NP (DT the) (NN definition))
        (SBAR (IN as)
          (S
            (SBAR (IN if)
              (S
                (NP (PRP you))
                (VP (MD could)
                  (VP (VB say)))))
            (, ,) (`` ``)
            (NP (DT a) (NN person))
            (VP (VBZ has)
              (NP (DT the) (NN potential)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (VP (VBN hit)
                        (PP (IN by)
                          (NP (DT a) (NN car)))))))))))))
    (. .)))

prep_in(interpreting-6, effect-2)
nsubj(interpreting-6, you-4)
aux(interpreting-6, are-5)
root(ROOT-0, interpreting-6)
det(definition-8, the-7)
dobj(interpreting-6, definition-8)
mark(has-18, as-9)
mark(say-13, if-10)
nsubj(say-13, you-11)
aux(say-13, could-12)
advcl(has-18, say-13)
det(person-17, a-16)
nsubj(has-18, person-17)
advcl(interpreting-6, has-18)
det(potential-20, the-19)
dobj(has-18, potential-20)
aux(hit-23, to-21)
auxpass(hit-23, be-22)
infmod(potential-20, hit-23)
det(car-26, a-25)
agent(hit-23, car-26)

