(ROOT
  (S
    (NP (PRP I))
    (VP (MD ca) (RB n't)
      (VP (VB believe)
        (SBAR
          (S
            (NP (PRP you))
            (VP (MD 'd) (RB rather)
              (VP (VB have)
                (S
                  (NP (PRP them))
                  (ADVP (RB NOT))
                  (VP (VB be)
                    (VP (VBN informed) (, ,)
                      (PP (IN on)
                        (NP (DT the) (NN logic))))))
                (SBAR (IN that) (IN if)
                  (S
                    (NP (PRP they))
                    (VP (VBP DO) (RB N'T)
                      (VP (VB know)
                        (SBAR
                          (WHADVP (WRB how))
                          (S
                            (VP (TO to)
                              (VP (VB have)
                                (NP (JJ responsible) (NN sex))
                                (SBAR (IN that)
                                  (S
                                    (NP (PRP they))
                                    (VP (MD 'll)
                                      (ADVP (RB simply))
                                      (VP (VB choose)
                                        (S (RB not)
                                          (VP (TO to)
                                            (VP (VB have)
                                              (NP (PRP it)))))))))))))))))))))))
    (. .)))

nsubj(believe-4, I-1)
aux(believe-4, ca-2)
neg(believe-4, n't-3)
root(ROOT-0, believe-4)
nsubj(have-8, you-5)
aux(have-8, 'd-6)
advmod(have-8, rather-7)
ccomp(believe-4, have-8)
nsubjpass(informed-12, them-9)
neg(informed-12, NOT-10)
auxpass(informed-12, be-11)
ccomp(have-8, informed-12)
det(logic-16, the-15)
prep_on(informed-12, logic-16)
complm(know-22, that-17)
dep(know-22, if-18)
nsubj(know-22, they-19)
aux(know-22, DO-20)
neg(know-22, N'T-21)
ccomp(have-8, know-22)
advmod(have-25, how-23)
aux(have-25, to-24)
ccomp(know-22, have-25)
xcomp(know-22, have-25)
amod(sex-27, responsible-26)
dobj(have-25, sex-27)
complm(choose-32, that-28)
nsubj(choose-32, they-29)
xsubj(have-35, they-29)
aux(choose-32, 'll-30)
advmod(choose-32, simply-31)
ccomp(have-25, choose-32)
neg(have-35, not-33)
aux(have-35, to-34)
xcomp(choose-32, have-35)
dobj(have-35, it-36)

