(ROOT
  (S
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (NP
          (NP (JJ someones) (NN choice))
          (PP (IN on)
            (SBAR
              (WHADVP (WRB how))
              (S
                (NP (PRP they))
                (VP (VBP live)
                  (NP (PRP$ their) (NN life)))))))))
    (CC and)
    (S
      (NP (PRP we))
      (VP (MD should) (RB not)
        (VP (VB be)
          (NP (DT the) (NNS ones)
            (S
              (VP (TO to)
                (VP (VB determine)
                  (PP (IN on)
                    (SBAR
                      (WHADVP (WRB how))
                      (S
                        (NP (PRP they))
                        (VP (MD should)
                          (VP (VB live)
                            (NP (PRP it))))))))))))))
    (. .)))

nsubj(choice-4, it-1)
cop(choice-4, is-2)
amod(choice-4, someones-3)
root(ROOT-0, choice-4)
advmod(live-8, how-6)
nsubj(live-8, they-7)
prepc_on(choice-4, live-8)
poss(life-10, their-9)
dobj(live-8, life-10)
nsubj(ones-17, we-12)
aux(ones-17, should-13)
neg(ones-17, not-14)
cop(ones-17, be-15)
det(ones-17, the-16)
conj_and(choice-4, ones-17)
aux(determine-19, to-18)
infmod(ones-17, determine-19)
advmod(live-24, how-21)
nsubj(live-24, they-22)
aux(live-24, should-23)
prepc_on(determine-19, live-24)
dobj(live-24, it-25)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (NN someone))
        (VP (VBZ wants)
          (S
            (VP (TO to)
              (VP (VB do)
                (NP
                  (NP (NN something))
                  (SBAR
                    (WHNP (WDT that))
                    (S
                      (VP (MD would)
                        (VP (VB be)
                          (VP (VBN disapproved)
                            (PP (IN by)
                              (NP (JJ many)))))))))))))))
    (, ,)
    (ADVP (RB well))
    (VP (VBZ thats)
      (NP (PRP$ their) (NN decision)))
    (. .)))

mark(wants-3, If-1)
nsubj(wants-3, someone-2)
xsubj(do-5, someone-2)
advcl(thats-15, wants-3)
aux(do-5, to-4)
xcomp(wants-3, do-5)
dobj(do-5, something-6)
nsubjpass(disapproved-10, something-6)
aux(disapproved-10, would-8)
auxpass(disapproved-10, be-9)
rcmod(something-6, disapproved-10)
agent(disapproved-10, many-12)
advmod(thats-15, well-14)
root(ROOT-0, thats-15)
poss(decision-17, their-16)
dobj(thats-15, decision-17)

