(ROOT
  (S (CC But)
    (ADVP (RB seriously))
    (PRN (, ,)
      (S
        (NP (PRP I))
        (VP (VBP 've)
          (VP (VBN seen)
            (NP (PRP$ your) (NNS posts)))))
      (, ,))
    (NP (RB nowhere))
    (VP (VBP do)
      (S
        (NP (PRP you))
        (VP (VB refute)
          (NP
            (NP (DT the) (NN HUMANITY))
            (PP (IN of)
              (NP (DT a) (NNP HUMAN) (NNS embryo\/fetus)))))))
    (. .)))

cc(do-11, But-1)
advmod(do-11, seriously-2)
nsubj(seen-6, I-4)
aux(seen-6, 've-5)
parataxis(do-11, seen-6)
poss(posts-8, your-7)
dobj(seen-6, posts-8)
nsubj(do-11, nowhere-10)
root(ROOT-0, do-11)
nsubj(refute-13, you-12)
ccomp(do-11, refute-13)
det(HUMANITY-15, the-14)
dobj(refute-13, HUMANITY-15)
det(embryo\/fetus-19, a-17)
nn(embryo\/fetus-19, HUMAN-18)
prep_of(HUMANITY-15, embryo\/fetus-19)

(ROOT
  (SQ (MD Can)
    (NP (PRP I))
    (VP (VB be)
      (ADJP
        (ADVP (RB any) (RBR more))
        (JJ blunt)))
    (. ?)))

aux(blunt-6, Can-1)
nsubj(blunt-6, I-2)
cop(blunt-6, be-3)
advmod(more-5, any-4)
advmod(blunt-6, more-5)
root(ROOT-0, blunt-6)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can) (RB not)
        (VP (VB prove)
          (NP
            (NP (DT the) (NN absence))
            (PP (IN of)
              (NP (DT the) (NN subject)))))))
    (, ,)
    (CC nor)
    (SQ (MD can)
      (NP (PRP you))
      (VP (VB deny)
        (NP
          (NP (DT the) (NN race))
          (PRN (-LRB- -LRB-)
            (NP (DT the) (JJ human) (NN race))
            (-RRB- -RRB-))
          (SBAR
            (WHPP (TO to)
              (WHNP (WDT which)))
            (S
              (NP (NN he\/she))
              (VP (VBZ belongs)))))))
    (. .)))

nsubj(prove-4, You-1)
aux(prove-4, can-2)
neg(prove-4, not-3)
root(ROOT-0, prove-4)
det(absence-6, the-5)
dobj(prove-4, absence-6)
det(subject-9, the-8)
prep_of(absence-6, subject-9)
aux(deny-14, can-12)
nsubj(deny-14, you-13)
conj_nor(prove-4, deny-14)
det(race-16, the-15)
dobj(deny-14, race-16)
det(race-20, the-18)
amod(race-20, human-19)
appos(race-16, race-20)
rel(belongs-25, which-23)
nsubj(belongs-25, he\/she-24)
rcmod(race-16, belongs-25)

(ROOT
  (S
    (SBAR
      (UCP
        (ADVP (RB Therefore))
        (, ,)
        (CC and)
        (PP (IN since)))
      (S
        (NP (PRP I))
        (VP (VBP have)
          (ADVP (RB here))
          (VP (VBN proven)
            (SBAR
              (SBAR (IN that)
                (S
                  (NP (DT an) (JJ unborn) (NN human))
                  (VP (VBZ is)
                    (ADVP (RB still))
                    (NP (DT a) (JJ human) (NN being)))))
              (: ;)
              (CC and)
              (SBAR (IN since)
                (S
                  (NP (PRP it))
                  (VP (VBZ is)
                    (ADVP (RB also))
                    (ADJP (JJ true))
                    (SBAR (IN that)
                      (S
                        (VP (VBD said)
                          (SBAR
                            (S
                              (NP (NNS humans))
                              (VP (VBP are)
                                (ADJP (JJ alive))))))))))))))))
    (, ,)
    (NP (PRP they))
    (VP (VBP are)
      (ADVP (RB therefore))
      (, ,)
      (PP (IN by)
        (NP
          (NP (NN definition))
          (, ,)
          (NP (NNS persons)))))
    (. .)))

dep(proven-8, Therefore-1)
conj_and(Therefore-1, since-4)
dep(proven-8, since-4)
nsubj(proven-8, I-5)
aux(proven-8, have-6)
advmod(proven-8, here-7)
dep(are-32, proven-8)
complm(being-17, that-9)
det(human-12, an-10)
amod(human-12, unborn-11)
nsubj(being-17, human-12)
cop(being-17, is-13)
advmod(being-17, still-14)
det(being-17, a-15)
amod(being-17, human-16)
ccomp(proven-8, being-17)
mark(true-24, since-20)
nsubj(true-24, it-21)
cop(true-24, is-22)
advmod(true-24, also-23)
ccomp(proven-8, true-24)
conj_and(being-17, true-24)
complm(said-26, that-25)
ccomp(true-24, said-26)
nsubj(alive-29, humans-27)
cop(alive-29, are-28)
ccomp(said-26, alive-29)
nsubj(are-32, they-31)
root(ROOT-0, are-32)
advmod(are-32, therefore-33)
prep_by(are-32, definition-36)
appos(definition-36, persons-38)

(ROOT
  (NP
    (NP (NN End))
    (PP (IN of)
      (NP (NN case)))
    (. .)))

root(ROOT-0, End-1)
prep_of(End-1, case-3)

