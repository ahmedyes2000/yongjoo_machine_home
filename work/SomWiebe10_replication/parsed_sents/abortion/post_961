(ROOT
  (S
    (NP (PRP I))
    (VP (MD would)
      (ADVP (RB just))
      (VP (VB like)
        (S
          (VP (TO to)
            (VP (VB add)
              (NP (CD one) (JJR more) (NN thing)))))))
    (. .)))

nsubj(like-4, I-1)
xsubj(add-6, I-1)
aux(like-4, would-2)
advmod(like-4, just-3)
root(ROOT-0, like-4)
aux(add-6, to-5)
xcomp(like-4, add-6)
num(thing-9, one-7)
amod(thing-9, more-8)
dobj(add-6, thing-9)

(ROOT
  (S
    (NP
      (NP (NN Everyone))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBZ is)
            (PP (IN for)
              (NP (NN abortion)))))))
    (VP (VBZ seems)
      (S
        (VP (TO to)
          (VP (VB insist)
            (SBAR
              (S
                (NP (DT this))
                (VP (MD should)
                  (ADVP (RB solely))
                  (VP (VB be)
                    (NP
                      (NP (DT the) (NN woman) (POS 's))
                      (NN decision))))))))))
    (. .)))

nsubj(is-3, Everyone-1)
nsubj(seems-6, Everyone-1)
xsubj(insist-8, Everyone-1)
rcmod(Everyone-1, is-3)
prep_for(is-3, abortion-5)
root(ROOT-0, seems-6)
aux(insist-8, to-7)
xcomp(seems-6, insist-8)
nsubj(decision-16, this-9)
aux(decision-16, should-10)
advmod(decision-16, solely-11)
cop(decision-16, be-12)
det(woman-14, the-13)
poss(decision-16, woman-14)
ccomp(insist-8, decision-16)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBZ is)
      (NP (DT that)))
    (. ?)))

advmod(is-2, Why-1)
root(ROOT-0, is-2)
nsubj(is-2, that-3)

(ROOT
  (FRAG
    (WHNP (WDT What))
    (PP (IN about)
      (NP (DT the) (NN father)))
    (. ?)))

root(ROOT-0, What-1)
dep(What-1, about-2)
det(father-4, the-3)
pobj(about-2, father-4)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (MD should)
      (NP (PRP he))
      (VP (VB have)
        (NP
          (NP (DT no) (NN say))
          (PP (IN in)
            (NP (DT a) (NN child))))
        (SBAR (IN that)
          (S
            (NP (PRP he))
            (VP (MD would)
              (VP (VB have)
                (S
                  (VP (TO to)
                    (VP (VB bear)
                      (NP (JJ legal) (NN responsibility))
                      (PP (TO to)
                        (SBAR (IN if)
                          (S
                            (NP (PRP it))
                            (VP (VBD were)
                              (VP (VBN born)))))))))))))))
    (. ?)))

advmod(have-4, Why-1)
aux(have-4, should-2)
nsubj(have-4, he-3)
root(ROOT-0, have-4)
det(say-6, no-5)
dobj(have-4, say-6)
det(child-9, a-8)
prep_in(say-6, child-9)
complm(have-13, that-10)
nsubj(have-13, he-11)
xsubj(bear-15, he-11)
aux(have-13, would-12)
ccomp(have-4, have-13)
aux(bear-15, to-14)
xcomp(have-13, bear-15)
amod(responsibility-17, legal-16)
dobj(bear-15, responsibility-17)
mark(born-22, if-19)
nsubjpass(born-22, it-20)
auxpass(born-22, were-21)
prepc_to(bear-15, born-22)

(ROOT
  (S
    (ADVP (RB Suppose))
    (, ,)
    (S
      (NP (DT a) (NN father))
      (VP (VBZ says)
        (SBAR
          (S
            (NP (PRP he))
            (VP (VBZ does) (RB not)
              (VP (VB want)
                (NP (DT the) (NN child))))))))
    (CC and)
    (S
      (NP (PRP she))
      (VP (VBZ has)
        (NP (PRP it))
        (ADVP (RB anyway))))
    (. .)))

advmod(says-5, Suppose-1)
det(father-4, a-3)
nsubj(says-5, father-4)
root(ROOT-0, says-5)
nsubj(want-9, he-6)
aux(want-9, does-7)
neg(want-9, not-8)
ccomp(says-5, want-9)
det(child-11, the-10)
dobj(want-9, child-11)
nsubj(has-14, she-13)
conj_and(says-5, has-14)
dobj(has-14, it-15)
advmod(has-14, anyway-16)

(ROOT
  (S
    (NP (PRP He))
    (VP (VBZ is)
      (ADVP (RB still))
      (ADJP (RB legally) (JJ liable)
        (PP (TO to)
          (NP (DT this) (NN child)))))
    (. .)))

nsubj(liable-5, He-1)
cop(liable-5, is-2)
advmod(liable-5, still-3)
advmod(liable-5, legally-4)
root(ROOT-0, liable-5)
det(child-8, this-7)
prep_to(liable-5, child-8)

(ROOT
  (S
    (INTJ (RB Now))
    (, ,)
    (VP (VB suppose)
      (NP (DT the) (NN opposite)))
    (. .)))

dep(suppose-3, Now-1)
root(ROOT-0, suppose-3)
det(opposite-5, the-4)
dobj(suppose-3, opposite-5)

(ROOT
  (S
    (NP (PRP He))
    (VP
      (VP (VBZ wants)
        (NP (DT the) (NN child)))
      (, ,)
      (VP (VBZ is)
        (ADJP (JJ willing)
          (S
            (VP (TO to)
              (VP (VB raise)
                (NP (DT this) (NN child))
                (PP (IN without)
                  (NP
                    (NP (DT any) (JJ financial) (NN support))
                    (PP (IN from)
                      (NP (DT the) (NN mother))))))))))
      (CC and)
      (VP (VBZ is)
        (ADJP (JJ willing)
          (S
            (VP (TO to)
              (VP (VB bear)
                (NP
                  (NP (DT all) (JJ financial) (NN burden))
                  (PP (IN of)
                    (NP (DT the) (NN mother))))
                (SBAR (IN while)
                  (S
                    (NP (PRP she))
                    (VP (VBZ is)
                      (ADJP (JJ unable)
                        (S
                          (VP (TO to)
                            (VP (VB work))))))))))))))
    (. .)))

nsubj(wants-2, He-1)
nsubj(willing-7, He-1)
nsubj(willing-21, He-1)
root(ROOT-0, wants-2)
det(child-4, the-3)
dobj(wants-2, child-4)
cop(willing-7, is-6)
conj_and(wants-2, willing-7)
aux(raise-9, to-8)
xcomp(willing-7, raise-9)
det(child-11, this-10)
dobj(raise-9, child-11)
det(support-15, any-13)
amod(support-15, financial-14)
prep_without(raise-9, support-15)
det(mother-18, the-17)
prep_from(support-15, mother-18)
cop(willing-21, is-20)
conj_and(wants-2, willing-21)
aux(bear-23, to-22)
xcomp(willing-21, bear-23)
det(burden-26, all-24)
amod(burden-26, financial-25)
dobj(bear-23, burden-26)
det(mother-29, the-28)
prep_of(burden-26, mother-29)
mark(unable-33, while-30)
nsubj(unable-33, she-31)
cop(unable-33, is-32)
advcl(bear-23, unable-33)
aux(work-35, to-34)
xcomp(unable-33, work-35)

(ROOT
  (S
    (NP (PRP He))
    (VP (MD should) (RB not)
      (VP (VB have)
        (NP (DT this) (NN right))))
    (. ?)))

nsubj(have-4, He-1)
aux(have-4, should-2)
neg(have-4, not-3)
root(ROOT-0, have-4)
det(right-6, this-5)
dobj(have-4, right-6)

