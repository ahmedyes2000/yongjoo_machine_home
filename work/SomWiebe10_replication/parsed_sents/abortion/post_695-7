(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP it))
        (VP (VBD were)
          (VP
            (ADVP (RB actually))
            (VBN cloned)))))
    (, ,)
    (NP (PRP it))
    (VP (MD would)
      (VP (VB become)
        (NP (DT a) (JJ separate) (NN entity))
        (SBAR
          (SBAR (IN because)
            (S
              (NP (PRP$ your) (NN mind))
              (VP (VBZ is) (RB not)
                (VP (VBN split)
                  (PP (IN between)
                    (NP (CD two) (NNS entities)))))))
          (, ,)
          (CC but)
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ is)
                (NP (DT an)
                  (ADJP (RB entirely) (JJ different))
                  (NN argument))))))))
    (. .)))

advmod(entity-14, Now-1)
mark(cloned-7, if-3)
nsubjpass(cloned-7, it-4)
auxpass(cloned-7, were-5)
advmod(cloned-7, actually-6)
advcl(entity-14, cloned-7)
nsubj(entity-14, it-9)
aux(entity-14, would-10)
cop(entity-14, become-11)
det(entity-14, a-12)
amod(entity-14, separate-13)
root(ROOT-0, entity-14)
mark(split-20, because-15)
poss(mind-17, your-16)
nsubjpass(split-20, mind-17)
auxpass(split-20, is-18)
neg(split-20, not-19)
dep(entity-14, split-20)
num(entities-23, two-22)
prep_between(split-20, entities-23)
nsubj(argument-31, that-26)
cop(argument-31, is-27)
det(argument-31, an-28)
advmod(different-30, entirely-29)
amod(argument-31, different-30)
dep(entity-14, argument-31)
conj_but(split-20, argument-31)

