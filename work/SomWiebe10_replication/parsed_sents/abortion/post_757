(ROOT
  (S
    (NP (RB Not) (NN everyone))
    (VP (VBZ wants)
      (S
        (VP (TO to)
          (VP (VB live)
            (NP (DT that) (NN way))))))
    (. .)))

neg(everyone-2, Not-1)
nsubj(wants-3, everyone-2)
xsubj(live-5, everyone-2)
root(ROOT-0, wants-3)
aux(live-5, to-4)
xcomp(wants-3, live-5)
det(way-7, that-6)
dobj(live-5, way-7)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP 'm) (RB not)
        (VP
          (VP (VBG saying)
            (NP
              (NP (DT a) (JJ lavish) (NN life))
              (PP (IN of)
                (NP (NN sin)))))
          (CC and)
          (VP (VBG making)
            (PRT (RP out))
            (PP (IN with)
              (NP (NN everyone)))))))
    (NP (PRP you))
    (VP (VBP meet)
      (SBAR
        (S
          (VP (VBZ is)
            (NP (DT a) (JJ good) (NN idea))))))
    (. .)))

nsubj(saying-4, I-1)
nsubj(making-11, I-1)
aux(saying-4, 'm-2)
neg(saying-4, not-3)
dep(meet-16, saying-4)
det(life-7, a-5)
amod(life-7, lavish-6)
dobj(saying-4, life-7)
prep_of(life-7, sin-9)
conj_and(saying-4, making-11)
dep(meet-16, making-11)
prt(making-11, out-12)
prep_with(making-11, everyone-14)
nsubj(meet-16, you-15)
root(ROOT-0, meet-16)
cop(idea-20, is-17)
det(idea-20, a-18)
amod(idea-20, good-19)
ccomp(meet-16, idea-20)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ 's)
        (NP (DT a) (JJ terrible) (NN idea))))
    (, ,)
    (CC but)
    (S
      (NP (DT some) (NNS people))
      (ADVP (RB just))
      (VP (VBP do) (RB n't)
        (VP (VB like)
          (NP
            (NP (DT the) (NN idea))
            (PP (IN of)
              (NP (NN abstinence))))
          (ADVP (RB either)))))
    (. .)))

nsubj(idea-5, It-1)
cop(idea-5, 's-2)
det(idea-5, a-3)
amod(idea-5, terrible-4)
root(ROOT-0, idea-5)
det(people-9, some-8)
nsubj(like-13, people-9)
advmod(like-13, just-10)
aux(like-13, do-11)
neg(like-13, n't-12)
conj_but(idea-5, like-13)
det(idea-15, the-14)
dobj(like-13, idea-15)
prep_of(idea-15, abstinence-17)
advmod(like-13, either-18)

(ROOT
  (SQ (CC And)
    (FRAG
      (WHNP (WP what))
      (SBAR (IN if)
        (S
          (S
            (NP (PRP you))
            (VP (VBP take)
              (NP
                (NP (DT all))
                (PP (IN of)
                  (NP
                    (NP (DT the) (NNS measures))
                    (PP (IN against)
                      (NP (NN pregnancy))))))))
          (CC and)
          (S
            (NP (PRP it))
            (ADVP (RB still))
            (VP (VBZ happens)
              (S
                (VP (TO to)
                  (VP (VB creep)
                    (PRT (RP up))
                    (NP (NNS anyways))))))))))
    (. ?)))

root(ROOT-0, And-1)
dep(take-5, what-2)
mark(take-5, if-3)
nsubj(take-5, you-4)
dep(And-1, take-5)
dobj(take-5, all-6)
det(measures-9, the-8)
prep_of(all-6, measures-9)
prep_against(measures-9, pregnancy-11)
nsubj(happens-15, it-13)
xsubj(creep-17, it-13)
advmod(happens-15, still-14)
dep(And-1, happens-15)
conj_and(take-5, happens-15)
aux(creep-17, to-16)
xcomp(happens-15, creep-17)
prt(creep-17, up-18)
dobj(creep-17, anyways-19)

(ROOT
  (S
    (VP (VB Do) (RB not)
      (VP (VB forget)
        (SBAR (IN that)
          (S
            (NP (EX there))
            (VP (VBP are)
              (NP
                (NP (NNS cases))
                (PP (IN of)
                  (NP (NN pregnancy))))
              (PP (IN through)
                (NP (NN rape))))))))
    (. .)))

aux(forget-3, Do-1)
neg(forget-3, not-2)
root(ROOT-0, forget-3)
complm(are-6, that-4)
expl(are-6, there-5)
ccomp(forget-3, are-6)
nsubj(are-6, cases-7)
prep_of(cases-7, pregnancy-9)
prep_through(are-6, rape-11)

(ROOT
  (SQ (MD Would)
    (NP (PRP you))
    (VP (VB want)
      (S
        (VP (TO to)
          (VP (VB carry)
            (NP (DT a) (NN rape) (NN child))))))
    (. ?)))

aux(want-3, Would-1)
nsubj(want-3, you-2)
xsubj(carry-5, you-2)
root(ROOT-0, want-3)
aux(carry-5, to-4)
xcomp(want-3, carry-5)
det(child-8, a-6)
nn(child-8, rape-7)
dobj(carry-5, child-8)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB n't)
      (VP (VB think)
        (SBAR
          (S
            (NP (PRP I))
            (VP (MD would))))))
    (. .)))

nsubj(think-4, I-1)
aux(think-4, do-2)
neg(think-4, n't-3)
root(ROOT-0, think-4)
nsubj(would-6, I-5)
ccomp(think-4, would-6)

