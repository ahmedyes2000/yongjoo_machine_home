(ROOT
  (NP
    (NP (JJ Many))
    (NP (JJ interesting) (NNS thoughts))
    (. .)))

root(ROOT-0, Many-1)
amod(thoughts-3, interesting-2)
dep(Many-1, thoughts-3)

(ROOT
  (SQ (VBP Do)
    (NP (PRP you))
    (VP (VB mean)
      (ADVP (RB really))
      (NP
        (NP (DT an) (NN atheist))
        (, ,)
        (CC or)
        (ADJP (RB pretty) (JJ sure))))
    (. .)))

aux(mean-3, Do-1)
nsubj(mean-3, you-2)
root(ROOT-0, mean-3)
advmod(mean-3, really-4)
det(atheist-6, an-5)
dobj(mean-3, atheist-6)
advmod(sure-10, pretty-9)
dobj(mean-3, sure-10)
conj_or(atheist-6, sure-10)

(ROOT
  (S
    (ADVP (RB As) (RB far)
      (SBAR (IN as)
        (S
          (NP (PRP I))
          (VP (VBP know)))))
    (, ,)
    (NP (DT the) (NN prion) (NN form))
    (ADVP (RB always))
    (VP (VBZ loses)
      (NP (DT this) (NN quality)))
    (. .)))

advmod(far-2, As-1)
advmod(loses-11, far-2)
mark(know-5, as-3)
nsubj(know-5, I-4)
ccomp(far-2, know-5)
det(form-9, the-7)
nn(form-9, prion-8)
nsubj(loses-11, form-9)
advmod(loses-11, always-10)
root(ROOT-0, loses-11)
det(quality-13, this-12)
dobj(loses-11, quality-13)

(ROOT
  (S
    (NP (RB Absolutely) (JJ certain) (NN atheism))
    (VP (VBZ seems)
      (PP (IN like)
        (NP (DT another) (JJ religious) (NN belief)))
      (PP (TO to)
        (NP (PRP me))))
    (. .)))

advmod(atheism-3, Absolutely-1)
amod(atheism-3, certain-2)
nsubj(seems-4, atheism-3)
root(ROOT-0, seems-4)
det(belief-8, another-6)
amod(belief-8, religious-7)
prep_like(seems-4, belief-8)
prep_to(seems-4, me-10)

(ROOT
  (S
    (NP
      (NP (DT The) (NN definition))
      (PP (IN of)
        (SBAR
          (WHNP (WP what))
          (S
            (VP (VBZ is)
              (ADJP (JJ alive)))))))
    (VP (VBZ is)
      (NP (NN fun)))
    (. .)))

det(definition-2, The-1)
nsubj(fun-8, definition-2)
nsubj(alive-6, what-4)
cop(alive-6, is-5)
prepc_of(definition-2, alive-6)
cop(fun-8, is-7)
root(ROOT-0, fun-8)

(ROOT
  (S
    (NP (PRP I))
    (VP
      (VP (VBD threw)
        (NP (PRP$ my) (NNS hands))
        (PP (IN up)
          (ADVP
            (NP (DT a) (NN while))
            (RB ago))))
      (CC and)
      (VP (VBP have)
        (ADVP (RB just))
        (VP (VBN decided)
          (SBAR (IN that)
            (S
              (NP
                (NP (NN anything))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP
                      (VP (VBZ has)
                        (S
                          (NP (PDT both) (DT the) (NN potential))
                          (VP (TO to)
                            (VP (VB use)
                              (NP (JJ environmental) (NN energy))
                              (S
                                (VP (TO to)
                                  (VP (VB combat)
                                    (ADVP (RB entropy)))))))))
                      (CC and)
                      (VP (VBZ has)
                        (VP (VBN evolved)))))))
              (VP (VBZ counts)
                (ADJP (RB as) (JJ alive))))))))
    (. .)))

nsubj(threw-2, I-1)
nsubj(decided-12, I-1)
root(ROOT-0, threw-2)
poss(hands-4, my-3)
dobj(threw-2, hands-4)
prep(threw-2, up-5)
det(while-7, a-6)
npadvmod(ago-8, while-7)
pcomp(up-5, ago-8)
aux(decided-12, have-10)
advmod(decided-12, just-11)
conj_and(threw-2, decided-12)
complm(counts-30, that-13)
nsubj(has-16, anything-14)
nsubj(evolved-29, anything-14)
nsubj(counts-30, anything-14)
rcmod(anything-14, has-16)
predet(potential-19, both-17)
det(potential-19, the-18)
nsubj(use-21, potential-19)
aux(use-21, to-20)
ccomp(has-16, use-21)
xcomp(has-16, use-21)
amod(energy-23, environmental-22)
dobj(use-21, energy-23)
aux(combat-25, to-24)
xcomp(use-21, combat-25)
advmod(combat-25, entropy-26)
aux(evolved-29, has-28)
rcmod(anything-14, evolved-29)
conj_and(has-16, evolved-29)
ccomp(decided-12, counts-30)
advmod(alive-32, as-31)
acomp(counts-30, alive-32)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP throw)
      (PRT (RP out))
      (NP
        (NP (DT the) (NN consideration))
        (PP (IN of)
          (NP
            (NP (DT the) (NN potential))
            (PP (IN for)
              (NP (JJ future) (NN reproduction)))))))
    (. .)))

nsubj(throw-2, I-1)
root(ROOT-0, throw-2)
prt(throw-2, out-3)
det(consideration-5, the-4)
dobj(throw-2, consideration-5)
det(potential-8, the-7)
prep_of(consideration-5, potential-8)
amod(reproduction-11, future-10)
prep_for(potential-8, reproduction-11)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (VBD evolved)
          (S
            (VP (TO to)
              (VP (VB get)
                (SBAR
                  (WHADVP (WRB where))
                  (S
                    (NP (PRP it))
                    (VP (VBZ is))))))))))
    (, ,)
    (NP (RB then) (WDT that))
    (VP (VBZ is)
      (ADJP (JJ good) (RB enough))
      (PP (IN for)
        (NP (PRP me))))
    (. .)))

mark(evolved-3, If-1)
nsubj(evolved-3, it-2)
xsubj(get-5, it-2)
advcl(good-13, evolved-3)
aux(get-5, to-4)
xcomp(evolved-3, get-5)
advmod(is-8, where-6)
nsubj(is-8, it-7)
advcl(get-5, is-8)
advmod(that-11, then-10)
nsubj(good-13, that-11)
cop(good-13, is-12)
root(ROOT-0, good-13)
advmod(good-13, enough-14)
prep_for(good-13, me-16)

(ROOT
  (S
    (NP (NNS Viruses))
    (VP (VBP encode)
      (NP
        (NP (NNS proteins))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VB combat)
              (ADVP (RB entropy)))))))
    (. .)))

nsubj(encode-2, Viruses-1)
root(ROOT-0, encode-2)
dobj(encode-2, proteins-3)
nsubj(combat-5, proteins-3)
rcmod(proteins-3, combat-5)
advmod(combat-5, entropy-6)

(ROOT
  (S (RB So)
    (VP (VB do)
      (NP (DT some) (NNS plasmids)))
    (. .)))

advmod(do-2, So-1)
root(ROOT-0, do-2)
det(plasmids-4, some-3)
dobj(do-2, plasmids-4)

(ROOT
  (S
    (NP (NNS Prions))
    (VP (VBP do) (RB not)
      (VP (VB \*)))
    (. .)))

nsubj(\*-4, Prions-1)
aux(\*-4, do-2)
neg(\*-4, not-3)
root(ROOT-0, \*-4)

(ROOT
  (S
    (NP
      (NP (JJ Lizard) (NNS tails))
      (CC and)
      (NP (NN sperm)))
    (VP (VBP are)
      (ADVP (DT both))
      (ADVP (RB definitely))
      (ADJP (JJ alive))
      (SBAR (IN until)
        (S
          (NP (PRP they))
          (VP
            (VP (VBN run)
              (PRT (RP out))
              (PP (IN of)
                (NP (NNP ATP))))
            (CC and)
            (VP (NN die))))))
    (. .)))

amod(tails-2, Lizard-1)
nsubj(alive-8, tails-2)
conj_and(tails-2, sperm-4)
nsubj(alive-8, sperm-4)
cop(alive-8, are-5)
advmod(alive-8, both-6)
advmod(alive-8, definitely-7)
root(ROOT-0, alive-8)
mark(run-11, until-9)
nsubj(run-11, they-10)
advcl(alive-8, run-11)
prep_out_of(run-11, ATP-14)
advcl(alive-8, die-16)
conj_and(run-11, die-16)

(ROOT
  (S
    (NP (NNP \*) (NNP Prions))
    (VP (VBP are)
      (ADVP (RB always))
      (ADJP (JJ tough)))
    (. .)))

nn(Prions-2, \*-1)
nsubj(tough-5, Prions-2)
cop(tough-5, are-3)
advmod(tough-5, always-4)
root(ROOT-0, tough-5)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (NP
        (NP (DT some) (NN yeast) (NNS prions))
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP
              (NP (DT the)
                (ADJP
                  (ADJP (JJ normal))
                  (PRN (-LRB- -LRB-)
                    (ADJP (JJ non-prion))
                    (-RRB- -RRB-)))
                (NN state))
              (PP (IN of)
                (NP (DT the) (NN protein))))
            (VP (VBZ is)
              (NP
                (NP (DT an) (NN enzyme))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (MD would)
                      (VP (VB qualify)
                        (ADJP (RB as) (JJ alive))))))))))))
    (. .)))

expl(are-2, There-1)
root(ROOT-0, are-2)
det(prions-5, some-3)
nn(prions-5, yeast-4)
nsubj(are-2, prions-5)
advmod(enzyme-18, where-6)
det(state-12, the-7)
amod(state-12, normal-8)
dep(normal-8, non-prion-10)
nsubj(enzyme-18, state-12)
det(protein-15, the-14)
prep_of(state-12, protein-15)
cop(enzyme-18, is-16)
det(enzyme-18, an-17)
rcmod(prions-5, enzyme-18)
nsubj(qualify-21, enzyme-18)
aux(qualify-21, would-20)
rcmod(enzyme-18, qualify-21)
advmod(alive-23, as-22)
acomp(qualify-21, alive-23)

