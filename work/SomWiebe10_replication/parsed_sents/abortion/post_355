(ROOT
  (S
    (NP (RB Here))
    (VP (VBZ 's)
      (NP (DT a) (NN question))
      (SBAR (IN that)
        (S
          (NP
            (NP (PRP$ my) (NN mom) (POS 's))
            (NN friend))
          (VP (VBZ brings)
            (PRT (RP up))
            (NP
              (NP (DT every) (NN time))
              (SBAR
                (S
                  (NP (JJ human) (NNS rights))
                  (VP (VBP are)
                    (VP (VBN brought)
                      (PRT (RP up)))))))))))
    (. .)))

nsubj(question-4, Here-1)
cop(question-4, 's-2)
det(question-4, a-3)
root(ROOT-0, question-4)
complm(brings-10, that-5)
poss(mom-7, my-6)
poss(friend-9, mom-7)
nsubj(brings-10, friend-9)
ccomp(question-4, brings-10)
prt(brings-10, up-11)
det(time-13, every-12)
dobj(brings-10, time-13)
amod(rights-15, human-14)
nsubjpass(brought-17, rights-15)
auxpass(brought-17, are-16)
rcmod(time-13, brought-17)
prt(brought-17, up-18)

(ROOT
  (SQ (VBZ Is)
    (NP (PRP it))
    (ADJP (JJ ethical)
      (PP (IN for)
        (NP (NN someone))))
    (S
      (VP
        (VP (TO to)
          (VP (VB demand)
            (NP
              (NP (NNS services))
              (PP (IN of)
                (NP (PRP you))))
            (PP (IN for)
              (ADJP (JJ free)))))
        (, ,)
        (CC or)
        (VP (TO to)
          (VP (VB coerce)
            (NP (PRP you))
            (PP (IN into)
              (NP (DT a) (NN contract)))
            (SBAR (IN that)
              (S
                (NP (PRP you))
                (VP (VBD did) (RB not)
                  (VP (VB consent)
                    (PP (TO to))))))))))
    (. ?)))

cop(ethical-3, Is-1)
nsubj(ethical-3, it-2)
root(ROOT-0, ethical-3)
prep_for(ethical-3, someone-5)
aux(demand-7, to-6)
dep(ethical-3, demand-7)
dobj(demand-7, services-8)
prep_of(services-8, you-10)
prep_for(demand-7, free-12)
aux(coerce-16, to-15)
dep(ethical-3, coerce-16)
conj_or(demand-7, coerce-16)
dobj(coerce-16, you-17)
det(contract-20, a-19)
prep_into(coerce-16, contract-20)
complm(consent-25, that-21)
nsubj(consent-25, you-22)
aux(consent-25, did-23)
neg(consent-25, not-24)
ccomp(coerce-16, consent-25)
prep(consent-25, to-26)

(ROOT
  (FRAG
    (PP (IN Of)
      (NP (NN course) (RB not)))
    (. !)))

root(ROOT-0, Of-1)
pobj(Of-1, course-2)
neg(course-2, not-3)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB never))
    (VP (VBD consented)
      (PP (TO to)
        (NP (DT the) (NN contract))))
    (. !)))

nsubj(consented-3, You-1)
neg(consented-3, never-2)
root(ROOT-0, consented-3)
det(contract-6, the-5)
prep_to(consented-3, contract-6)

(ROOT
  (S
    (VP (VB Imagine)
      (NP (DT the) (JJ following) (NN situation)))
    (. .)))

root(ROOT-0, Imagine-1)
det(situation-4, the-2)
amod(situation-4, following-3)
dobj(Imagine-1, situation-4)

(ROOT
  (S
    (NP (CD One) (NN day))
    (, ,)
    (NP (PRP you))
    (VP
      (VP (VBP wake)
        (PRT (RP up)))
      (CC and)
      (VP (VBP find)
        (NP
          (NP (DT a) (NN human))
          (VP (VBG being)
            (VP (VBN attached)
              (PP (TO to)
                (NP
                  (NP (PRP you))
                  (PP (IN via)
                    (NP (JJ life-support) (NN system))))))))))
    (. .)))

num(day-2, One-1)
tmod(wake-5, day-2)
nsubj(wake-5, you-4)
nsubj(find-8, you-4)
root(ROOT-0, wake-5)
prt(wake-5, up-6)
conj_and(wake-5, find-8)
det(human-10, a-9)
dobj(find-8, human-10)
auxpass(attached-12, being-11)
partmod(human-10, attached-12)
prep_to(attached-12, you-14)
amod(system-17, life-support-16)
prep_via(you-14, system-17)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VB remove)
          (NP (DT the) (JJ life-support) (NN system)))))
    (, ,)
    (NP (DT the) (JJ human) (NN being))
    (VP (MD will)
      (VP (VB die)))
    (. .)))

mark(remove-3, If-1)
nsubj(remove-3, you-2)
advcl(die-12, remove-3)
det(system-6, the-4)
amod(system-6, life-support-5)
dobj(remove-3, system-6)
det(being-10, the-8)
amod(being-10, human-9)
nsubj(die-12, being-10)
aux(die-12, will-11)
root(ROOT-0, die-12)

(ROOT
  (NP
    (NP (NNP Question))
    (: :)
    (SQ (VBZ Is)
      (NP (PRP it))
      (ADJP (JJ ethical)
        (PP (IN for)
          (NP (DT that) (JJ human) (NN being)))
        (PP (TO to)
          (S
            (VP (VBG inconvenience)
              (NP (PRP you))
              (PP (IN without)
                (S
                  (VP (VBG asking)
                    (PP (IN for)
                      (NP (DT a) (JJ social) (NN contract)))))))))
        (. ?)))))

root(ROOT-0, Question-1)
cop(ethical-5, Is-3)
nsubj(ethical-5, it-4)
dep(Question-1, ethical-5)
det(being-9, that-7)
amod(being-9, human-8)
prep_for(ethical-5, being-9)
prepc_to(ethical-5, inconvenience-11)
dobj(inconvenience-11, you-12)
prepc_without(inconvenience-11, asking-14)
det(contract-18, a-16)
amod(contract-18, social-17)
prep_for(asking-14, contract-18)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP you))
          (VP (MD might)
            (VP (VB know)
              (SBAR
                (WHADVP (WRB where))
                (S
                  (NP (PRP I))
                  (VP (VBP 'm)
                    (VP (VBG running)
                      (PP (IN with)
                        (NP (DT this))))))))))))
    (. .)))

nsubj(think-2, I-1)
root(ROOT-0, think-2)
nsubj(know-5, you-3)
aux(know-5, might-4)
ccomp(think-2, know-5)
advmod(running-9, where-6)
nsubj(running-9, I-7)
aux(running-9, 'm-8)
advcl(know-5, running-9)
prep_with(running-9, this-11)

(ROOT
  (S (CC And)
    (VP (VB notice)
      (SBAR (IN that)
        (S
          (NP (PRP I))
          (ADVP (RB never))
          (VP (VBD asked)
            (SBAR (IN whether)
              (CC or)
              (RB not)
              (S
                (NP (PRP it))
                (VP (VBZ is)
                  (NP (JJ moral) (NNS -)))))))))
    (. .)))

cc(notice-2, And-1)
root(ROOT-0, notice-2)
complm(asked-6, that-3)
nsubj(asked-6, I-4)
neg(asked-6, never-5)
ccomp(notice-2, asked-6)
complm(moral-12, whether-7)
ccomp(asked-6, not-9)
conj_or(moral-12, not-9)
nsubj(moral-12, it-10)
cop(moral-12, is-11)
ccomp(asked-6, moral-12)

(ROOT
  (S
    (NP
      (NP (NNP Morality))
      (CC and)
      (NP (NNS ethics)))
    (VP (VBP are)
      (ADVP
        (NP (CD two))
        (RB very))
      (NP (JJ different) (NNS things)))
    (. .)))

nsubj(things-8, Morality-1)
conj_and(Morality-1, ethics-3)
nsubj(things-8, ethics-3)
cop(things-8, are-4)
npadvmod(very-6, two-5)
advmod(things-8, very-6)
amod(things-8, different-7)
root(ROOT-0, things-8)

