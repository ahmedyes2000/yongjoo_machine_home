(ROOT
  (S
    (NP (NNP Mr))
    (VP (VBZ Hammond) (: :)
      (S
        (PP (IN With)
          (NP (JJ holometabolic) (NN life)))
        (-LRB- -LRB-)
        (NP (DT a) (NN word) (NN I))
        (ADVP (RB definitely))
        (VP (VBD did) (RB not)
          (VP (VB know)
            (ADVP
              (NP (DT an) (NN hour))
              (RB ago))))))
    (. !) (-RRB- -RRB-)))

nsubj(Hammond-2, Mr-1)
root(ROOT-0, Hammond-2)
amod(life-6, holometabolic-5)
prep_with(know-14, life-6)
det(I-10, a-8)
nn(I-10, word-9)
nsubj(know-14, I-10)
advmod(know-14, definitely-11)
aux(know-14, did-12)
neg(know-14, not-13)
ccomp(Hammond-2, know-14)
parataxis(Hammond-2, know-14)
det(hour-16, an-15)
npadvmod(ago-17, hour-16)
advmod(know-14, ago-17)

(ROOT
  (PRN (, ,)
    (S
      (NP (PRP I))
      (VP (VBP think)
        (SBAR (IN that)
          (S
            (S
              (NP (PRP$ your) (JJ gradual) (NN approach))
              (VP (MD would)
                (VP (VB have)
                  (NP
                    (ADJP (RB even) (JJR more))
                    (NN justification)))))
            (CC and)
            (ADVP (RB yet))
            (S
              (NP (PRP it))
              (VP (MD would)
                (ADVP (RB still))
                (VP (VB seem)
                  (PP (TO to)
                    (NP (PRP me)))
                  (SBAR (IN that)
                    (S
                      (NP (PRP it))
                      (VP (VBZ is)
                        (ADJP (RB merely) (RB continuously))
                        (S
                          (VP
                            (VP (VBG developing)
                              (PP (IN toward)
                                (NP (NN adulthood))))
                            (, ,) (RB not)
                            (VP
                              (ADVP (RB continuously))
                              (VBG developing)
                              (PP (IN toward)
                                (S
                                  (VP (VBG becoming)
                                    (NP
                                      (NP (DT a) (JJ full) (NN member))
                                      (PP (IN of)
                                        (NP (PRP$ its) (NNS species)))))))))))))))
              (. .))))))))

nsubj(think-3, I-2)
root(ROOT-0, think-3)
complm(have-9, that-4)
poss(approach-7, your-5)
amod(approach-7, gradual-6)
nsubj(have-9, approach-7)
aux(have-9, would-8)
ccomp(think-3, have-9)
advmod(more-11, even-10)
amod(justification-12, more-11)
dobj(have-9, justification-12)
ccomp(think-3, yet-14)
advmod(have-9, yet-14)
conj_and(have-9, yet-14)
nsubj(seem-18, it-15)
aux(seem-18, would-16)
advmod(seem-18, still-17)
ccomp(think-3, seem-18)
conj_and(have-9, seem-18)
prep_to(seem-18, me-20)
complm(continuously-25, that-21)
nsubj(continuously-25, it-22)
cop(continuously-25, is-23)
advmod(continuously-25, merely-24)
ccomp(seem-18, continuously-25)
ccomp(continuously-25, developing-26)
prep_toward(developing-26, adulthood-28)
neg(developing-26, not-30)
advmod(developing-32, continuously-31)
dep(developing-26, developing-32)
prepc_toward(developing-32, becoming-34)
det(member-37, a-35)
amod(member-37, full-36)
attr(becoming-34, member-37)
poss(species-40, its-39)
prep_of(member-37, species-40)

(ROOT
  (SQ
    (S
      (VP (VB Absent)
        (NP
          (NP (DT the) (NN problem))
          (PP (IN of)
            (NP
              (NP (DT a) (`` ``) (JJ rights\/no) (NN _) (NNS rights) ('' ''))
              (CC or)
              (NP (`` ``) (JJ worthless\/important) ('' '') (NN dichotomy)))))))
    (, ,) (MD would)
    (NP (PRP you))
    (ADVP (RB not))
    (VP
      (ADVP (RB also))
      (VB grant)
      (SBAR (IN that)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP
              (NP (DT no) (NN basis))
              (PP (IN for)
                (S
                  (VP (VBG trying)
                    (S
                      (VP (TO to)
                        (VP (VB distinguish)
                          (PRN (-LRB- -LRB-)
                            (PP (IN for)
                              (NP
                                (NP (DT any) (NN species))
                                (, ,)
                                (NP (NNP X))))
                            (-RRB- -RRB-)))))
                    (PP (IN between)
                      (S
                        (VP (VBG being)
                          (VP
                            (VP (`` ``) (VBN X)
                              (NP (NN life))
                              (PP (IN with)
                                (NP (DT the) (NN potential)
                                  (S
                                    (VP (TO to)
                                      (VP (VB be)
                                        (ADJP (RB fully) (JJ X))))))))
                            ('' '')
                            (CC and)
                            (VP
                              (ADVP (RB just))
                              (NP (`` ``) (DT a) (JJ live) (NN X) ('' '')))))))))))))))
    (. ?)))

dep(grant-21, Absent-1)
det(problem-3, the-2)
dobj(Absent-1, problem-3)
det(rights-9, a-5)
amod(rights-9, rights\/no-7)
nn(rights-9, _-8)
prep_of(problem-3, rights-9)
amod(dichotomy-15, worthless\/important-13)
prep_of(problem-3, dichotomy-15)
conj_or(rights-9, dichotomy-15)
aux(grant-21, would-17)
nsubj(grant-21, you-18)
advmod(grant-21, not-19)
advmod(grant-21, also-20)
root(ROOT-0, grant-21)
complm(is-24, that-22)
expl(is-24, there-23)
ccomp(grant-21, is-24)
det(basis-26, no-25)
nsubj(is-24, basis-26)
prepc_for(basis-26, trying-28)
aux(distinguish-30, to-29)
xcomp(trying-28, distinguish-30)
dep(distinguish-30, for-32)
det(species-34, any-33)
pobj(for-32, species-34)
appos(species-34, X-36)
auxpass(X-41, being-39)
prepc_between(trying-28, X-41)
dobj(X-41, life-42)
det(potential-45, the-44)
prep_with(X-41, potential-45)
aux(X-49, to-46)
cop(X-49, be-47)
advmod(X-49, fully-48)
infmod(potential-45, X-49)
advmod(X-56, just-52)
det(X-56, a-54)
amod(X-56, live-55)
prepc_between(trying-28, X-56)
conj_and(X-41, X-56)

