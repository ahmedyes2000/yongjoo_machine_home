(ROOT
  (S
    (S
      (NP (NNS Tropes))
      (VP (MD can)
        (VP (VB be)
          (ADJP (JJ true)))))
    (, ,)
    (CC but)
    (S
      (NP (DT a) (JJ purely) ('' '') (JJ pro-choice) (NNS trope))
      ('' '')
      (VP (VBZ is)
        (ADJP (JJ ideological))))
    (. .)))

nsubj(true-4, Tropes-1)
aux(true-4, can-2)
cop(true-4, be-3)
root(ROOT-0, true-4)
det(trope-11, a-7)
amod(trope-11, purely-8)
amod(trope-11, pro-choice-10)
nsubj(ideological-14, trope-11)
cop(ideological-14, is-13)
conj_but(true-4, ideological-14)

(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (NP (DT a) (JJ brief) (NN point))
    (RB then)
    (NP (PRP I))
    (VP (MD 'll)
      (VP (VB address)
        (NP (NNS objections))))
    (. .)))

advmod(address-9, First-1)
det(point-5, a-3)
amod(point-5, brief-4)
nsubj(address-9, point-5)
advmod(address-9, then-6)
nsubj(address-9, I-7)
aux(address-9, 'll-8)
root(ROOT-0, address-9)
dobj(address-9, objections-10)

(ROOT
  (FRAG
    (NP (RB First) (DT a) (NN question))
    (: :)
    (S
      (NP (PRP You))
      (VP (VBD used)
        (S
          (NP (DT the) (NN term))
          (`` ``)
          (ADJP (JJ miraculous))
          ('' ''))))
    (. .)))

advmod(question-3, First-1)
det(question-3, a-2)
root(ROOT-0, question-3)
nsubj(used-6, You-5)
dep(question-3, used-6)
det(term-8, the-7)
dep(miraculous-10, term-8)
dep(used-6, miraculous-10)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD wo) (RB n't)
      (VP (VB make)
        (NP (DT a) (JJ silly) (NN objection))
        (PP (IN about)
          (NP (PRP$ its) (JJ being) (NN non-scientific)))))
    (. .)))

nsubj(make-4, I-1)
aux(make-4, wo-2)
neg(make-4, n't-3)
root(ROOT-0, make-4)
det(objection-7, a-5)
amod(objection-7, silly-6)
dobj(make-4, objection-7)
poss(non-scientific-11, its-9)
amod(non-scientific-11, being-10)
prep_about(make-4, non-scientific-11)

(ROOT
  (SQ (MD Would)
    (NP (PRP you))
    (VP (VB permit)
      (S
        (NP (PRP me))
        (VP (TO to)
          (VP (VB use)
            (S
              (NP (DT the) (NN term))
              (`` ``)
              (ADJP (VBN created))
              ('' ''))
            (PP (IN in)
              (NP (DT a) (NN secular) (NN sense)))))))
    (. ?)))

aux(permit-3, Would-1)
nsubj(permit-3, you-2)
root(ROOT-0, permit-3)
nsubj(use-6, me-4)
aux(use-6, to-5)
xcomp(permit-3, use-6)
det(term-8, the-7)
dep(created-10, term-8)
dep(use-6, created-10)
det(sense-15, a-13)
nn(sense-15, secular-14)
prep_in(use-6, sense-15)

(ROOT
  (S
    (PP (IN As)
      (NP
        (NP (IN in))
        (, ,) ('' '')
        (PP (IN at)
          (NP (DT this) (NN point)))))
    (NP (DT a) (JJ new) (NN life))
    (VP (VBZ is)
      (VP (VBN created)))
    (. .)))

prep(created-12, As-1)
pobj(As-1, in-2)
det(point-7, this-6)
prep_at(in-2, point-7)
det(life-10, a-8)
amod(life-10, new-9)
nsubjpass(created-12, life-10)
auxpass(created-12, is-11)
root(ROOT-0, created-12)

(ROOT
  (S ('' '')
    (ADVP (RB Secondly))
    (, ,)
    (NP (PRP you))
    (VP (VBP contend)
      (SBAR (IN that)
        (S
          (NP (NN something))
          (VP (VBZ is) (RB n't)
            (ADJP (RB completely) (JJ human)
              (PP (IN until)
                (ADVP
                  (NP (DT some) (NN point))
                  (RB well))))
            (SBAR (IN after)
              (S
                (NP
                  (NP (DT the) (NN organism) (POS 's))
                  (NN life) (NN cycle))
                (VP (VBZ has)
                  (VP (VBN begun)))))))))
    (. .)))

advmod(contend-5, Secondly-2)
nsubj(contend-5, you-4)
root(ROOT-0, contend-5)
complm(human-11, that-6)
nsubj(human-11, something-7)
cop(human-11, is-8)
neg(human-11, n't-9)
advmod(human-11, completely-10)
ccomp(contend-5, human-11)
prep(human-11, until-12)
det(point-14, some-13)
npadvmod(well-15, point-14)
pcomp(until-12, well-15)
mark(begun-23, after-16)
det(organism-18, the-17)
poss(cycle-21, organism-18)
nn(cycle-21, life-20)
nsubj(begun-23, cycle-21)
aux(begun-23, has-22)
advcl(human-11, begun-23)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (MD can)
      (NP (PRP you))
      (VP (VB argue)
        (SBAR (IN that)
          (S
            (NP
              (NP
                (NP (DT a) (NN zygote))
                (CC or)
                (NP (DT an) (NN embryo)))
              (CC or)
              (NP
                (NP (DT a) (NN fetus))
                (PRN (-LRB- -LRB-)
                  (FRAG
                    (NP (NN human))
                    (CC or)
                    (RB not))
                  (-RRB- -RRB-))))
            (VP (VBZ is) (RB not)
              (NP
                (NP (DT a) (VBG living) (NN member))
                (PP (IN of)
                  (NP
                    (NP (PRP it) (POS 's))
                    (NNS species)))))))))
    (. ?)))

advmod(argue-4, How-1)
aux(argue-4, can-2)
nsubj(argue-4, you-3)
root(ROOT-0, argue-4)
complm(member-23, that-5)
det(zygote-7, a-6)
nsubj(member-23, zygote-7)
det(embryo-10, an-9)
conj_or(zygote-7, embryo-10)
nsubj(member-23, embryo-10)
det(fetus-13, a-12)
conj_or(zygote-7, fetus-13)
nsubj(member-23, fetus-13)
dep(fetus-13, human-15)
dep(human-15, or-16)
neg(human-15, not-17)
cop(member-23, is-19)
neg(member-23, not-20)
det(member-23, a-21)
amod(member-23, living-22)
ccomp(argue-4, member-23)
poss(species-27, it-25)
prep_of(member-23, species-27)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBD were)
          (VP (VBG talking)
            (PP (IN about)
              (NP (NNS gametes)))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP I))
    (VP (MD 'd)
      (VP (VB agree)))
    (. .)))

mark(talking-4, If-1)
nsubj(talking-4, we-2)
aux(talking-4, were-3)
advcl(agree-11, talking-4)
prep_about(talking-4, gametes-6)
advmod(agree-11, then-8)
nsubj(agree-11, I-9)
aux(agree-11, 'd-10)
root(ROOT-0, agree-11)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP require)
      (S
        (NP (JJ other) (NNS cells))
        (VP (TO to)
          (VP (VB make)
            (NP (DT a) (JJ complete) (NN human))))))
    (. .)))

nsubj(require-2, They-1)
root(ROOT-0, require-2)
amod(cells-4, other-3)
nsubj(make-6, cells-4)
aux(make-6, to-5)
xcomp(require-2, make-6)
det(human-9, a-7)
amod(human-9, complete-8)
dobj(make-6, human-9)

(ROOT
  (SQ
    (VP (VB Are)
      (S
        (NP (PRP you))
        (VP (VBG using)
          (ADJP (`` ``) (JJ complete) ('' '')
            (PP (IN in)
              (NP (DT another) (NN sense)))))))
    (. ?)))

root(ROOT-0, Are-1)
nsubj(using-3, you-2)
dep(Are-1, using-3)
acomp(using-3, complete-5)
det(sense-9, another-8)
prep_in(complete-5, sense-9)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP 're)
          (VP (VBG using)
            (S
              (NP (DT the) (NN term) (`` ``) (NN human) ('' ''))
              (ADJP (RB as) (JJ synonymous)
                (PP (IN with) (`` ``)
                  (NP (NN person))
                  ('' ''))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP you))
    (VP (VBP 're) (RB not)
      (VP (VBG making)
        (NP (DT a) (JJ scientific) (NN observation))))
    (. .)))

mark(using-4, If-1)
nsubj(using-4, you-2)
aux(using-4, 're-3)
advcl(making-21, using-4)
det(human-8, the-5)
nn(human-8, term-6)
nsubj(synonymous-11, human-8)
advmod(synonymous-11, as-10)
xcomp(using-4, synonymous-11)
prep_with(synonymous-11, person-14)
advmod(making-21, then-17)
nsubj(making-21, you-18)
aux(making-21, 're-19)
neg(making-21, not-20)
root(ROOT-0, making-21)
det(observation-24, a-22)
amod(observation-24, scientific-23)
dobj(making-21, observation-24)

(ROOT
  (S
    (NP (DT Every) (NNS species))
    (VP (VBZ has)
      (NP (DT a) (NN life) (NN cycle)))
    (. .)))

det(species-2, Every-1)
nsubj(has-3, species-2)
root(ROOT-0, has-3)
det(cycle-6, a-4)
nn(cycle-6, life-5)
dobj(has-3, cycle-6)

(ROOT
  (SQ
    (VP (VB Are)
      (S
        (NP (PRP you))
        (VP (VBG using)
          (S
            (NP (PRP it))
            (VP (TO to)
              (VP (VB mean)
                (UCP
                  (ADJP (`` ``) (JJ mature) ('' ''))
                  (CC or)
                  (ADVP (RB maybe))
                  (ADJP (`` ``) (JJ independent) ('' '')))))))))
    (. ?)))

root(ROOT-0, Are-1)
nsubj(using-3, you-2)
dep(Are-1, using-3)
nsubj(mean-6, it-4)
aux(mean-6, to-5)
xcomp(using-3, mean-6)
acomp(mean-6, mature-8)
acomp(mean-6, maybe-11)
advmod(mature-8, maybe-11)
conj_or(mature-8, maybe-11)
acomp(mean-6, independent-13)
conj_or(mature-8, independent-13)

(ROOT
  (S
    (SBAR (IN If)
      (FRAG
        (ADVP (RB so))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (VP (VBG employing)
        (NP (DT an)
          (ADJP (JJ arbitrary))
          (NN distinction))))
    (. .)))

mark(so-2, If-1)
advcl(employing-6, so-2)
nsubj(employing-6, you-4)
aux(employing-6, are-5)
root(ROOT-0, employing-6)
det(distinction-9, an-7)
amod(distinction-9, arbitrary-8)
dobj(employing-6, distinction-9)

(ROOT
  (S
    (NP (PRP One))
    (VP (MD could)
      (VP (VB say)
        (SBAR (IN that)
          (S
            (NP (DT an) (NN organism))
            (VP (VBZ is) (RB n't)
              (ADJP (`` ``) (JJ complete) ('' ''))
              (SBAR (IN until)
                (S
                  (NP (PRP it))
                  (VP (VBZ has)
                    (VP (VBN reached)
                      (NP
                        (NP (DT the) (JJ final) (NN stage))
                        (PP (IN of)
                          (NP (PRP$ its) (NN life) (NN cycle)))))))))))))
    (. .)))

nsubj(say-3, One-1)
aux(say-3, could-2)
root(ROOT-0, say-3)
complm(complete-10, that-4)
det(organism-6, an-5)
nsubj(complete-10, organism-6)
cop(complete-10, is-7)
neg(complete-10, n't-8)
ccomp(say-3, complete-10)
mark(reached-15, until-12)
nsubj(reached-15, it-13)
aux(reached-15, has-14)
advcl(complete-10, reached-15)
det(stage-18, the-16)
amod(stage-18, final-17)
dobj(reached-15, stage-18)
poss(cycle-22, its-20)
nn(cycle-22, life-21)
prep_of(stage-18, cycle-22)

(ROOT
  (S
    (S
      (ADVP (RB Then))
      (NP (DT a) (NN kitten))
      (VP (VBZ is) (RB n't)
        (ADJP (JJ complete))))
    (, ,)
    (CC but)
    (S
      (NP
        (NP (DT a) (NN cat))
        (ADJP (JJ capable)
          (PP (IN of)
            (NP (NN reproduction)))))
      (VP (VBZ is)))
    (. .)))

advmod(complete-6, Then-1)
det(kitten-3, a-2)
nsubj(complete-6, kitten-3)
cop(complete-6, is-4)
neg(complete-6, n't-5)
root(ROOT-0, complete-6)
det(cat-10, a-9)
nsubj(is-14, cat-10)
amod(cat-10, capable-11)
prep_of(capable-11, reproduction-13)
conj_but(complete-6, is-14)

(ROOT
  (S
    (PP (IN By)
      (NP (DT any) (JJ objective) (NN standard)))
    (, ,)
    (NP (DT a) (NN kitten))
    (VP (VBZ is)
      (VP (VBN considered)
        (NP (DT a)
          (ADJP
            (ADJP (JJ complete))
            (PRN (-LRB- -LRB-)
              (ADVP (IN albeit) (RB not))
              (ADJP (RB fully) (JJ mature))
              (-RRB- -RRB-)))
          (VBG living) (NN feline))))
    (. .)))

det(standard-4, any-2)
amod(standard-4, objective-3)
agent(considered-9, standard-4)
det(kitten-7, a-6)
nsubjpass(considered-9, kitten-7)
auxpass(considered-9, is-8)
root(ROOT-0, considered-9)
det(feline-19, a-10)
amod(feline-19, complete-11)
dep(mature-16, albeit-13)
dep(albeit-13, not-14)
advmod(mature-16, fully-15)
dep(complete-11, mature-16)
amod(feline-19, living-18)
dobj(considered-9, feline-19)

(ROOT
  (S
    (ADVP (RB Frankly))
    (, ,)
    (NP (PRP I))
    (VP (VBP am)
      (VP (VBN confused)
        (PP (IN by)
          (NP (DT this)))))
    (. .)))

advmod(confused-5, Frankly-1)
nsubjpass(confused-5, I-3)
auxpass(confused-5, am-4)
root(ROOT-0, confused-5)
agent(confused-5, this-7)

(ROOT
  (SQ (MD Can)
    (NP (PRP you))
    (VP (VB expand)
      (PP (IN on)
        (NP
          (NP (PRP it))
          (NP (DT a) (NN bit)))))
    (. ?)))

aux(expand-3, Can-1)
nsubj(expand-3, you-2)
root(ROOT-0, expand-3)
prep_on(expand-3, it-5)
det(bit-7, a-6)
dep(it-5, bit-7)

(ROOT
  (FRAG
    (NP (RB Quite) (JJ right))
    (. !)))

advmod(right-2, Quite-1)
root(ROOT-0, right-2)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP know)
      (PP (IN of)
        (NP (CD two) (NNS cases)))
      (SBAR
        (WHADVP (WRB where))
        (S
          (NP (EX there))
          (VP (VBP are)
            (NP
              (NP (JJ scientific) (NNS disputes))
              (PP (IN about)
                (SBAR
                  (WHADVP (WRB when))
                  (S
                    (NP (NN something))
                    (VP (VBZ qualifies)
                      (PP (IN as)
                        (S
                          (VP (VBG being)
                            (ADJP (JJ alive))))))))))))))
    (. .)))

nsubj(know-2, I-1)
root(ROOT-0, know-2)
num(cases-5, two-4)
prep_of(know-2, cases-5)
advmod(are-8, where-6)
expl(are-8, there-7)
advcl(know-2, are-8)
amod(disputes-10, scientific-9)
nsubj(are-8, disputes-10)
advmod(qualifies-14, when-12)
nsubj(qualifies-14, something-13)
prepc_about(disputes-10, qualifies-14)
cop(alive-17, being-16)
prepc_as(qualifies-14, alive-17)

(ROOT
  (S
    (NP (DT The) (JJ first))
    (PRN (-LRB- -LRB-)
      (NP
        (NP (NNS things))
        (PP (IN like)
          (NP (NNS viruses)
            (CC and)
            (NNS prions))))
      (-RRB- -RRB-))
    (, ,)
    (NP (PRP I))
    (VP (VBD mentioned)
      (ADVP (RB before)))
    (. .)))

det(first-2, The-1)
nsubj(mentioned-12, first-2)
dep(mentioned-12, things-4)
prep_like(things-4, viruses-6)
prep_like(things-4, prions-8)
conj_and(viruses-6, prions-8)
nsubj(mentioned-12, I-11)
root(ROOT-0, mentioned-12)
advmod(mentioned-12, before-13)

(ROOT
  (S
    (NP (DT The) (NN second))
    (VP (VBZ is)
      (NP (DT a) (NN seed)))
    (. .)))

det(second-2, The-1)
nsubj(seed-5, second-2)
cop(seed-5, is-3)
det(seed-5, a-4)
root(ROOT-0, seed-5)

(ROOT
  (S
    (NP (DT The) (JJ human) (NN life) (NN cycle))
    (VP (VBZ begins)
      (PP (IN at)
        (NP (NN conception))))
    (. .)))

det(cycle-4, The-1)
amod(cycle-4, human-2)
nn(cycle-4, life-3)
nsubj(begins-5, cycle-4)
root(ROOT-0, begins-5)
prep_at(begins-5, conception-7)

(ROOT
  (S
    (NP (DT A) (NN seed))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN embryo))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (MD can)
              (VP (VB go)
                (ADJP (JJ dormant))))))))
    (. .)))

det(seed-2, A-1)
nsubj(embryo-5, seed-2)
cop(embryo-5, is-3)
det(embryo-5, an-4)
root(ROOT-0, embryo-5)
nsubj(go-8, embryo-5)
aux(go-8, can-7)
rcmod(embryo-5, go-8)
acomp(go-8, dormant-9)

(ROOT
  (FRAG
    (NP (DT That))
    (SBAR
      (S
        (VP (VBZ raises)
          (NP (DT an) (JJ interesting) (NN question)))))
    (: :) (`` ``)
    (S
      (SBAR (IN if)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (ADJP (JJ dormant)))))
      (, ,)
      (NP (RB then))
      (VP (VBZ is)
        (NP
          (NP (PRP it))
          (VP (VBG living)))))
    (. ?)))

root(ROOT-0, That-1)
dep(That-1, raises-2)
det(question-5, an-3)
amod(question-5, interesting-4)
dobj(raises-2, question-5)
mark(dormant-11, if-8)
nsubj(dormant-11, it-9)
cop(dormant-11, is-10)
advcl(it-15, dormant-11)
nsubj(it-15, then-13)
cop(it-15, is-14)
dep(That-1, it-15)
partmod(it-15, living-16)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (VP (VBP 'm) (RB not)
      (ADJP (JJ sure))
      (SBAR (IN that)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP (DT an) (VBN accepted) (NN answer))))))
    (. .)))

nsubj(sure-5, I-2)
cop(sure-5, 'm-3)
neg(sure-5, not-4)
root(ROOT-0, sure-5)
complm(is-8, that-6)
expl(is-8, there-7)
ccomp(sure-5, is-8)
det(answer-11, an-9)
amod(answer-11, accepted-10)
nsubj(is-8, answer-11)

(ROOT
  (S
    (NP
      (NP (NNS Humans))
      (PRN (-LRB- -LRB-)
        (SBAR
          (ADVP (RB as) (RB far))
          (IN as)
          (S
            (NP (PRP I))
            (VP (VBP know))))
        (-RRB- -RRB-)))
    (VP (VBP do) (RB n't)
      (VP (VB become)
        (ADJP (JJ dormant))))
    (. .)))

nsubj(dormant-12, Humans-1)
advmod(far-4, as-3)
advmod(know-7, far-4)
dep(know-7, as-5)
nsubj(know-7, I-6)
dep(Humans-1, know-7)
aux(dormant-12, do-9)
neg(dormant-12, n't-10)
cop(dormant-12, become-11)
root(ROOT-0, dormant-12)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD must)
      (VP (VB admit)
        (SBAR (IN that)
          (S
            (NP (PRP I))
            (VP (VBP 've)
              (ADVP (RB never))
              (VP (VBN heard)
                (PP (IN of) (`` ``)
                  (NP (JJ organismal) (NN biology))
                  ('' ''))))))))
    (. .)))

nsubj(admit-3, I-1)
aux(admit-3, must-2)
root(ROOT-0, admit-3)
complm(heard-8, that-4)
nsubj(heard-8, I-5)
aux(heard-8, 've-6)
neg(heard-8, never-7)
ccomp(admit-3, heard-8)
amod(biology-12, organismal-11)
prep_of(heard-8, biology-12)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP have)
      (NP
        (NP (NN trouble))
        (VP (VBG believing)
          (SBAR (IN that)
            (S
              (NP (DT any) (NN biologist))
              (VP (MD would)
                (VP (VB maintain)
                  (SBAR (IN that)
                    (S
                      (NP
                        (NP (DT an) (NN embryo))
                        (PRN (-LRB- -LRB-)
                          (NP (NN non-dormant))
                          (-RRB- -RRB-)))
                      (VP
                        (VP (VBZ is) (RB n't)
                          (ADJP (JJ alive)))
                        (CC and)
                        (VP (VBZ is) (RB n't)
                          (ADJP (RB completely) (JJ human)
                            (CC or)
                            (JJ feline)
                            (SBAR (IN as)
                              (S
                                (NP (DT the) (NN case))
                                (VP (MD may)
                                  (VP (VB be)))))))))))))))))
    (. .)))

nsubj(have-2, I-1)
root(ROOT-0, have-2)
dobj(have-2, trouble-3)
partmod(trouble-3, believing-4)
complm(maintain-9, that-5)
det(biologist-7, any-6)
nsubj(maintain-9, biologist-7)
aux(maintain-9, would-8)
ccomp(believing-4, maintain-9)
complm(alive-18, that-10)
det(embryo-12, an-11)
nsubj(alive-18, embryo-12)
nsubj(human-23, embryo-12)
appos(embryo-12, non-dormant-14)
cop(alive-18, is-16)
neg(alive-18, n't-17)
ccomp(maintain-9, alive-18)
cop(human-23, is-20)
neg(human-23, n't-21)
advmod(human-23, completely-22)
ccomp(maintain-9, human-23)
conj_and(alive-18, human-23)
conj_and(alive-18, feline-25)
conj_or(human-23, feline-25)
mark(be-30, as-26)
det(case-28, the-27)
nsubj(be-30, case-28)
aux(be-30, may-29)
ccomp(human-23, be-30)

(ROOT
  (S
    (NP (NNP Sure))
    (, ,)
    (PP (IN in)
      (NP (DT the) (JJ latter) (NN case)))
    (NP (PRP you))
    (VP (VBP have)
      (NP (DT a)
        (ADJP (JJ complete) (JJ living))
        (NN cancer) (NN cell)))
    (. .)))

nsubj(have-8, Sure-1)
det(case-6, the-4)
amod(case-6, latter-5)
prep_in(have-8, case-6)
nsubj(have-8, you-7)
root(ROOT-0, have-8)
det(cell-13, a-9)
amod(living-11, complete-10)
amod(cell-13, living-11)
nn(cell-13, cancer-12)
dobj(have-8, cell-13)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's) (RB not)
      (ADJP (JJ incompatible)
        (PP (IN with)
          (NP (PRP$ my) (NN position)))))
    (. .)))

nsubj(incompatible-4, That-1)
cop(incompatible-4, 's-2)
neg(incompatible-4, not-3)
root(ROOT-0, incompatible-4)
poss(position-7, my-6)
prep_with(incompatible-4, position-7)

(ROOT
  (S
    (VP (VB POSSIBLY)
      (NP
        (NP (DT THE) (JJS MOST) (NN IMPORTANT) (NN OBSERVATION))
        (: :)
        (SBARQ
          (WHADVP (WRB When))
          (SQ (VBP do)
            (NP (PRP they))
            (VP (`` ``) (VB put)
              (NP (NN importance) (RB on))
              ('' '')))
          (. ?))))))

root(ROOT-0, POSSIBLY-1)
det(OBSERVATION-5, THE-2)
amod(OBSERVATION-5, MOST-3)
nn(OBSERVATION-5, IMPORTANT-4)
dobj(POSSIBLY-1, OBSERVATION-5)
advmod(put-11, When-7)
aux(put-11, do-8)
nsubj(put-11, they-9)
dep(OBSERVATION-5, put-11)
dobj(put-11, importance-12)
advmod(importance-12, on-13)

(ROOT
  (S
    (NP (WDT Which))
    (VP (VBZ is) (`` ``)
      (NP (DT the)
        (ADJP (RBS most) (JJ important))
        (NN beginning) ('' '')))
    (. ?)))

nsubj(beginning-7, Which-1)
cop(beginning-7, is-2)
det(beginning-7, the-4)
advmod(important-6, most-5)
amod(beginning-7, important-6)
root(ROOT-0, beginning-7)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP are)
      (PP (IN in)
        (NP
          (NP (DT a) (NN position))
          (SBAR
            (WHADVP (WRB wherein))
            (S
              (NP
                (NP (DT the) (NN beginning))
                (PP (IN of)
                  (NP (DT the) (NN life) (NN cycle))))
              (VP (MD must)
                (PP (IN of)
                  (NP (NN necessity)))
                (VP (VB be)
                  (VP (VBG occurring)
                    (PP (TO to)
                      (NP (NN something)))
                    (ADVP (JJ other)
                      (PP (IN than)
                        (NP (DT a) (VBG living) (JJ human) (NN organism))))))))))))
    (. .)))

nsubj(are-2, You-1)
root(ROOT-0, are-2)
det(position-5, a-4)
prep_in(are-2, position-5)
advmod(occurring-17, wherein-6)
det(beginning-8, the-7)
nsubj(occurring-17, beginning-8)
det(cycle-12, the-10)
nn(cycle-12, life-11)
prep_of(beginning-8, cycle-12)
aux(occurring-17, must-13)
prep_of(occurring-17, necessity-15)
aux(occurring-17, be-16)
rcmod(position-5, occurring-17)
prep_to(occurring-17, something-19)
advmod(occurring-17, other-20)
det(organism-25, a-22)
amod(organism-25, living-23)
amod(organism-25, human-24)
prep_than(other-20, organism-25)

(ROOT
  (S
    (NP (DT These))
    (VP (VBP are)
      (NP
        (NP (NNS questions))
        (PP (IN about)
          (NP (NN value) (NNS determinations)))))
    (. .)))

nsubj(questions-3, These-1)
cop(questions-3, are-2)
root(ROOT-0, questions-3)
nn(determinations-6, value-5)
prep_about(questions-3, determinations-6)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP are)
      (NP
        (NP (NNS questions))
        (PP (IN about)
          (SBAR
            (WHNP (WP what))
            (S
              (VP (TO to)
                (VP (VB emphasize)
                  (CC or)
                  (VB give)
                  (NP (NN significance)))))))))
    (. .)))

nsubj(questions-3, They-1)
cop(questions-3, are-2)
root(ROOT-0, questions-3)
nsubj(emphasize-7, what-5)
nsubj(give-9, what-5)
aux(emphasize-7, to-6)
prepc_about(questions-3, emphasize-7)
prepc_about(questions-3, give-9)
conj_or(emphasize-7, give-9)
dobj(emphasize-7, significance-10)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (EX there))
    (VP (MD can)
      (VP (VB be)
        (NP
          (NP (NN value) (NNS determinations))
          (SBAR
            (WHNP (WDT which))
            (S
              (VP (VBP are)
                (UCP
                  (NP (NN context) (NN specific))
                  (, ,)
                  (CC and)
                  (ADVP (RB therefore))
                  (ADJP (JJ testable)))))))))
    (. .)))

advmod(determinations-7, Now-1)
expl(determinations-7, there-3)
aux(determinations-7, can-4)
cop(determinations-7, be-5)
nn(determinations-7, value-6)
root(ROOT-0, determinations-7)
nsubj(specific-11, determinations-7)
nsubj(testable-15, determinations-7)
cop(specific-11, are-9)
nn(specific-11, context-10)
rcmod(determinations-7, specific-11)
advmod(testable-15, therefore-14)
rcmod(determinations-7, testable-15)
conj_and(specific-11, testable-15)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP 've)
      (VP (VBN given)
        (NP
          (NP (JJ excellent) (NNS examples))
          (PP (VBG regarding)
            (NP
              (NP (NNS branches))
              (PP (IN of)
                (NP (NN science))))))))
    (. .)))

nsubj(given-3, You-1)
aux(given-3, 've-2)
root(ROOT-0, given-3)
amod(examples-5, excellent-4)
dobj(given-3, examples-5)
prep_regarding(examples-5, branches-7)
prep_of(branches-7, science-9)

(ROOT
  (S ('' '')
    (PP (VBG Which)
      (PP (IN of)
        (NP (DT these) (CD three) (NN breakfast) (NNS cereals))))
    (VP (VBZ is)
      (ADJP (JJS best)))
    (. ?)))

prep(best-9, Which-2)
pcomp(Which-2, of-3)
det(cereals-7, these-4)
num(cereals-7, three-5)
nn(cereals-7, breakfast-6)
prep_of(Which-2, cereals-7)
cop(best-9, is-8)
root(ROOT-0, best-9)

(ROOT
  (S ('' '')
    (NP (JJ Is) (DT an) (NN untestable))
    (VP (VBP value)
      (NP (NN judgment)))
    (. .)))

amod(untestable-4, Is-2)
det(untestable-4, an-3)
nsubj(value-5, untestable-4)
root(ROOT-0, value-5)
dobj(value-5, judgment-6)

(ROOT
  (S ('' '')
    (NP (WDT Which))
    (ADVP (IN of)
      (NP (DT these) (CD three) (NNS cars)))
    (VP (VBZ is)
      (ADVP (RBS best))
      (: ...)
      (PP (IN at)
        (S
          (VP (VBG saving)
            (NP (NN gas))
            (PP (IN for)
              (S
                (VP (VBG driving)
                  (PP (IN on)
                    (NP (NN city) (NNS streets))))))))))
    (. ?)))

nsubj(is-7, Which-2)
advmod(is-7, of-3)
det(cars-6, these-4)
num(cars-6, three-5)
pobj(of-3, cars-6)
root(ROOT-0, is-7)
advmod(is-7, best-8)
prepc_at(is-7, saving-11)
dobj(saving-11, gas-12)
prepc_for(saving-11, driving-14)
nn(streets-17, city-16)
prep_on(driving-14, streets-17)

(ROOT
  (S
    (NP (NNP ''))
    (VP (VBZ Is)
      (ADJP
        (PRN (-LRB- -LRB-)
          (ADJP (JJ likely))
          (-RRB- -RRB-))
        (JJ empirical)))
    (. .)))

cop(empirical-6, Is-2)
dep(empirical-6, likely-4)
root(ROOT-0, empirical-6)

(ROOT
  (SBARQ
    (WHADVP (RB '') (WRB When))
    (SQ (VBZ Does)
      (NP (NNP Life) (NNP Begin)))
    (. ?)))

advmod(Does-3, When-2)
root(ROOT-0, Does-3)
nn(Begin-5, Life-4)
nsubj(Does-3, Begin-5)

(ROOT
  (S ('' '')
    (S
      (S
        (VP (VBZ is)
          (NP (RB not) (DT a))))
      (VP (VBP matter)))
    (IN of)
    (S
      (S
        (VP (VBG determining)))
      (VP (VBP value)))
    (. .)))

cop(a-4, is-2)
neg(a-4, not-3)
csubj(matter-5, a-4)
root(ROOT-0, matter-5)
dep(matter-5, of-6)
csubj(value-8, determining-7)
ccomp(matter-5, value-8)

(ROOT
  (SBARQ
    (WHADVP (WRB How))
    (SQ (MD can)
      (NP (PRP one))
      (VP (VB make)
        (NP
          (NP (NN sense))
          (PP (IN of)
            (NP (DT that))))))
    (. ?)))

advmod(make-4, How-1)
aux(make-4, can-2)
nsubj(make-4, one-3)
root(ROOT-0, make-4)
dobj(make-4, sense-5)
prep_of(sense-5, that-7)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (NP
        (NP (DT an) (JJ objective) (NN question))
        (, ,)
        (SBAR (IN although)
          (S
            (VP (VBZ ambiguous))))))
    (. .)))

nsubj(question-5, It-1)
cop(question-5, is-2)
det(question-5, an-3)
amod(question-5, objective-4)
root(ROOT-0, question-5)
mark(ambiguous-8, although-7)
dep(question-5, ambiguous-8)

(ROOT
  (FRAG
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (VBP agree)
          (SBAR (IN that)
            (S
              (NP (DT the) (NN question))
              (VP (MD might)
                (ADVP (RBR better))
                (VP (VB be)
                  (VP (VBN stated)
                    (PP (IN along)
                      (NP
                        (NP (DT the) (NNS lines))
                        (PP (IN of))
                        ('' '')
                        (SBAR
                          (WHPP (IN At)
                            (WHNP (WDT What)))
                          (S
                            (NP (NNP Point))
                            (VP (VBZ Does)
                              (NP (DT A) (NNP New) (NNP Human) (NNP Life) (NNP First) (NNP Exist)))))))))))))))
    (. ?)))

mark(agree-3, If-1)
nsubj(agree-3, we-2)
root(ROOT-0, agree-3)
complm(stated-10, that-4)
det(question-6, the-5)
nsubjpass(stated-10, question-6)
aux(stated-10, might-7)
advmod(stated-10, better-8)
auxpass(stated-10, be-9)
ccomp(agree-3, stated-10)
det(lines-13, the-12)
prep_along(stated-10, lines-13)
prep(lines-13, of-14)
rel(Does-19, What-17)
nsubj(Does-19, Point-18)
rcmod(lines-13, Does-19)
det(Exist-25, A-20)
nn(Exist-25, New-21)
nn(Exist-25, Human-22)
nn(Exist-25, Life-23)
nn(Exist-25, First-24)
dobj(Does-19, Exist-25)

(ROOT
  (S ('' '')
    (NP (RB then) (PRP it))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN matter))
        (PP (IN of)
          (NP (NN fact)))))
    (. .)))

advmod(it-3, then-2)
nsubj(matter-6, it-3)
cop(matter-6, is-4)
det(matter-6, a-5)
root(ROOT-0, matter-6)
prep_of(matter-6, fact-8)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ begins)
        (PP (IN at)
          (NP (NN conception)))))
    (, ,)
    (CC and)
    (S
      (NP (DT that))
      (VP (VBZ is) (RB n't)
        (NP
          (NP (DT a) (NN value) (NN judgment))
          (: ...)
          (CC or)
          (NP (DT an) (NN opinion)))))
    (. .)))

nsubj(begins-2, It-1)
root(ROOT-0, begins-2)
prep_at(begins-2, conception-4)
nsubj(judgment-12, that-7)
cop(judgment-12, is-8)
neg(judgment-12, n't-9)
det(judgment-12, a-10)
nn(judgment-12, value-11)
conj_and(begins-2, judgment-12)
det(opinion-16, an-15)
conj_and(begins-2, opinion-16)
conj_or(judgment-12, opinion-16)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP posit)
      (SBAR (IN that)
        (S
          (NP (PRP one))
          (VP (MD can) (RB not)))))
    (. .)))

nsubj(posit-2, I-1)
root(ROOT-0, posit-2)
complm(can-5, that-3)
nsubj(can-5, one-4)
ccomp(posit-2, can-5)
neg(can-5, not-6)

(ROOT
  (S
    (NP (PDT Such) (DT a) (NN cell))
    (VP (MD might) (RB not)
      (VP (VB develop)
        (PP (IN into)
          (NP (DT an) (NN adult)))))
    (. .)))

predet(cell-3, Such-1)
det(cell-3, a-2)
nsubj(develop-6, cell-3)
aux(develop-6, might-4)
neg(develop-6, not-5)
root(ROOT-0, develop-6)
det(adult-9, an-8)
prep_into(develop-6, adult-9)

(ROOT
  (S
    (NP
      (NP (DT A) (NN lot))
      (PP (IN of)
        (NP (JJ genetic) (NNS anomalies))))
    (VP (VBP prevent)
      (S
        (VP (VBG reaching)
          (NP (NN adulthood)))))
    (. .)))

det(lot-2, A-1)
nsubj(prevent-6, lot-2)
amod(anomalies-5, genetic-4)
prep_of(lot-2, anomalies-5)
root(ROOT-0, prevent-6)
xcomp(prevent-6, reaching-7)
dobj(reaching-7, adulthood-8)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP one))
        (VP (VBZ is)
          (ADJP (JJ present)
            (PP (IN in)
              (NP
                (NP (DT an) (NN infant))
                (, ,)
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (MD would) (RB n't)
                      (VP (VB be)
                        (NP
                          (NP (DT a) (NN basis))
                          (PP (IN for)
                            (S
                              (VP (VBG denying)
                                (NP (DT the) (NN infant))))))))))))))))
    (VP (VBZ is)
      (NP
        (NP (JJ human))
        (, ,)
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ brings)
              (NP (PRP us))
              (ADVP (RB right) (RB back)
                (PP (TO to)
                  (SBAR
                    (WHADVP (WRB where))
                    (S
                      (NP (PRP we))
                      (VP (VBD started)))))))))))
    (. .)))

mark(present-4, If-1)
nsubj(present-4, one-2)
cop(present-4, is-3)
csubj(human-20, present-4)
det(infant-7, an-6)
prep_in(present-4, infant-7)
nsubj(basis-14, infant-7)
aux(basis-14, would-10)
neg(basis-14, n't-11)
cop(basis-14, be-12)
det(basis-14, a-13)
rcmod(infant-7, basis-14)
prepc_for(basis-14, denying-16)
det(infant-18, the-17)
dobj(denying-16, infant-18)
cop(human-20, is-19)
root(ROOT-0, human-20)
nsubj(brings-23, human-20)
rcmod(human-20, brings-23)
dobj(brings-23, us-24)
advmod(back-26, right-25)
advmod(brings-23, back-26)
advmod(started-30, where-28)
nsubj(started-30, we-29)
prepc_to(back-26, started-30)

