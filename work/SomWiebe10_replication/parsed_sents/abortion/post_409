(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADVP (RB up)
        (PP (TO to)
          (NP
            (NP (DT the) (NN individual))
            (SBAR
              (WHNP (WP who))
              (S
                (VP (VBZ wants)
                  (S
                    (VP (TO to)
                      (VP (VB change)
                        (NP (DT the) (NN status) (NN quo))
                        (S
                          (VP (TO to)
                            (VP (VB provide)
                              (NP (DT a) (NN reason)))))))))))))))
    (. .)))

nsubj(is-2, It-1)
root(ROOT-0, is-2)
advmod(is-2, up-3)
det(individual-6, the-5)
prep_to(up-3, individual-6)
nsubj(wants-8, individual-6)
rcmod(individual-6, wants-8)
aux(change-10, to-9)
xcomp(wants-8, change-10)
det(quo-13, the-11)
nn(quo-13, status-12)
dobj(change-10, quo-13)
aux(provide-15, to-14)
xcomp(change-10, provide-15)
det(reason-17, a-16)
dobj(provide-15, reason-17)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP (PRP we))
    (VP (VBP have)
      (NP
        (NP (DT a) (NN fetus))
        (VP (VBG bumping)
          (PRT (RP along))
          (PP (IN on)
            (NP
              (NP (PRP it) (POS 's))
              (NN way)))
          (PP (TO to)
            (NP (NN birth))))))
    (. .)))

prep_for(have-5, example-2)
nsubj(have-5, we-4)
root(ROOT-0, have-5)
det(fetus-7, a-6)
dobj(have-5, fetus-7)
partmod(fetus-7, bumping-8)
prt(bumping-8, along-9)
poss(way-13, it-11)
prep_on(bumping-8, way-13)
prep_to(bumping-8, birth-15)

(ROOT
  (S
    (NP
      (NP (DT Any) (NNS arguments))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP bring)
            (PP (IN against)
              (NP (DT this)))))))
    (VP (MD will) (RB not)
      (VP (VB be)
        (VP (VBN considered))))
    (. .)))

det(arguments-2, Any-1)
dobj(bring-4, arguments-2)
nsubjpass(considered-10, arguments-2)
nsubj(bring-4, you-3)
rcmod(arguments-2, bring-4)
prep_against(bring-4, this-6)
aux(considered-10, will-7)
neg(considered-10, not-8)
auxpass(considered-10, be-9)
root(ROOT-0, considered-10)

(ROOT
  (S
    (NP (PRP They))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN written)
          (PRT (RP off))
          (PP (IN as)
            (ADJP
              (ADJP
                (ADVP (RB religiously))
                (JJ motivated)
                (CC or)
                (JJ invalid))
              (SBAR (IN because)
                (S
                  (NP (PRP I))
                  (VP (VBD said)
                    (ADVP (RB so))))))))))
    (. .)))

nsubjpass(written-4, They-1)
aux(written-4, will-2)
auxpass(written-4, be-3)
root(ROOT-0, written-4)
prt(written-4, off-5)
advmod(motivated-8, religiously-7)
prep_as(written-4, motivated-8)
prep_as(written-4, invalid-10)
conj_or(motivated-8, invalid-10)
mark(said-13, because-11)
nsubj(said-13, I-12)
ccomp(motivated-8, said-13)
advmod(said-13, so-14)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP want)
      (S
        (VP (TO to)
          (VP (VB justify)
            (S
              (VP (VBG killing)
                (NP (PRP it))))))))
    (. .)))

nsubj(want-2, You-1)
xsubj(justify-4, You-1)
root(ROOT-0, want-2)
aux(justify-4, to-3)
xcomp(want-2, justify-4)
xcomp(justify-4, killing-5)
dobj(killing-5, it-6)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP 've)
      (VP (VBN got)
        (S
          (VP (TO to)
            (VP (VB have)
              (NP (NNS reasons)))))))
    (. .)))

nsubj(got-3, You-1)
xsubj(have-5, You-1)
aux(got-3, 've-2)
root(ROOT-0, got-3)
aux(have-5, to-4)
xcomp(got-3, have-5)
dobj(have-5, reasons-6)

(ROOT
  (S
    (ADVP (RB Furthermore))
    (, ,)
    (SBAR (RB even) (IN if)
      (S
        (NP
          (NP (DT the) (NN onus))
          (PP (IN of)
            (NP (NN proof))))
        (VP (VBZ is)
          (PP (IN on)
            (NP
              (NP (PRP us))
              (, ,)
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ does) (RB n't)
                    (ADVP (RB also))
                    (VP (VB make)
                      (S
                        (NP (PRP you))
                        (NP
                          (NP (DT the) (NN judge))
                          (PP (IN of)
                            (SBAR
                              (WHNP (WP what))
                              (S
                                (VP (VBZ is)
                                  (NP
                                    (NP
                                      (ADJP (JJ valid))
                                      (NN evidence))
                                    (CC or)
                                    (RB not)))))))))))))))))
    (, ,)
    (NP (DT no) (NNS questions))
    (VP (VBD asked))
    (. .)))

advmod(asked-31, Furthermore-1)
advmod(is-9, even-3)
dep(is-9, if-4)
det(onus-6, the-5)
nsubj(is-9, onus-6)
prep_of(onus-6, proof-8)
dep(asked-31, is-9)
prep_on(is-9, us-11)
nsubj(make-17, us-11)
aux(make-17, does-14)
neg(make-17, n't-15)
advmod(make-17, also-16)
rcmod(us-11, make-17)
nsubj(judge-20, you-18)
det(judge-20, the-19)
xcomp(make-17, judge-20)
nsubj(evidence-25, what-22)
cop(evidence-25, is-23)
amod(evidence-25, valid-24)
prepc_of(judge-20, evidence-25)
prepc_of(judge-20, not-27)
conj_or(evidence-25, not-27)
neg(evidence-25, not-27)
det(questions-30, no-29)
nsubj(asked-31, questions-30)
root(ROOT-0, asked-31)

(ROOT
  (S
    (S
      (SBAR
        (WHADVP (WRB When))
        (S
          (NP (DT an) (NN argument))
          (VP (VBZ is)
            (VP (VBN brought)
              (PRT (RP up))))))
      (, ,)
      (NP (PRP you))
      (VP (MD must)
        (VP (VB argue)
          (PP (IN against)
            (NP (PRP it))))))
    (, ,)
    (NP (PRP you))
    (VP (MD can) (RB not)
      (ADVP (RB simply))
      (VP (VB proclaim)
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBZ is) (RB not)
              (NP (NN evidence)))))))
    (. .)))

advmod(brought-5, When-1)
det(argument-3, an-2)
nsubjpass(brought-5, argument-3)
auxpass(brought-5, is-4)
advcl(argue-10, brought-5)
prt(brought-5, up-6)
nsubj(argue-10, you-8)
aux(argue-10, must-9)
ccomp(proclaim-18, argue-10)
prep_against(argue-10, it-12)
nsubj(proclaim-18, you-14)
aux(proclaim-18, can-15)
neg(proclaim-18, not-16)
advmod(proclaim-18, simply-17)
root(ROOT-0, proclaim-18)
complm(evidence-23, that-19)
nsubj(evidence-23, it-20)
cop(evidence-23, is-21)
neg(evidence-23, not-22)
ccomp(proclaim-18, evidence-23)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP have) (RB n't)
        (VP (VBN read)
          (NP
            (NP (DT all))
            (PP (IN of)
              (NP (PRP$ your) (NNS comments))))
          (ADVP (RB yet)))))
    (, ,)
    (CC but)
    (S
      (S
        (NP (PRP I))
        (VP (VBP 'm)
          (VP (VBG getting)
            (ADVP (RB there)))))
      (, ,)
      (CC and)
      (S
        (NP (PRP I))
        (VP (VBP have) (RB not)
          (ADVP (RB yet))
          (VP (VBN seen)
            (S
              (NP (PRP you))
              (VP (VB give)
                (NP (DT a) (JJ counter) (NN argument))))))))
    (. .)))

nsubj(read-4, I-1)
aux(read-4, have-2)
neg(read-4, n't-3)
root(ROOT-0, read-4)
dobj(read-4, all-5)
poss(comments-8, your-7)
prep_of(all-5, comments-8)
advmod(read-4, yet-9)
nsubj(getting-14, I-12)
aux(getting-14, 'm-13)
conj_but(read-4, getting-14)
advmod(getting-14, there-15)
nsubj(seen-22, I-18)
aux(seen-22, have-19)
neg(seen-22, not-20)
advmod(seen-22, yet-21)
conj_but(read-4, seen-22)
conj_and(getting-14, seen-22)
nsubj(give-24, you-23)
ccomp(seen-22, give-24)
det(argument-27, a-25)
amod(argument-27, counter-26)
dobj(give-24, argument-27)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB just))
    (VP (VBP state)
      (NP (DT the) (JJ same) (JJ arbitrary) (NN proclaimation))
      (ADVP (RP over)
        (CC and)
        (RP over))
      (ADVP (RB again)))
    (. .)))

nsubj(state-3, You-1)
advmod(state-3, just-2)
root(ROOT-0, state-3)
det(proclaimation-7, the-4)
amod(proclaimation-7, same-5)
amod(proclaimation-7, arbitrary-6)
dobj(state-3, proclaimation-7)
advmod(state-3, over-8)
advmod(state-3, over-10)
conj_and(over-8, over-10)
advmod(state-3, again-11)

(ROOT
  (S ('' '')
    (S
      (NP (DT A) (NN fetus))
      (VP (VBZ is) (RB not)
        (NP (DT a) (NN person))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (NP (DT a) (JJ potential) (NN person)))
    (. .)))

det(fetus-3, A-2)
nsubj(person-7, fetus-3)
cop(person-7, is-4)
neg(person-7, not-5)
det(person-7, a-6)
ccomp(person-13, person-7)
nsubj(person-13, it-9)
cop(person-13, is-10)
det(person-13, a-11)
amod(person-13, potential-12)
root(ROOT-0, person-13)

(ROOT
  (S
    (NP (NNP Birth))
    (VP (VBZ makes)
      (NP (DT a) (NN human)))
    (. .)))

nsubj(makes-2, Birth-1)
root(ROOT-0, makes-2)
det(human-4, a-3)
dobj(makes-2, human-4)

