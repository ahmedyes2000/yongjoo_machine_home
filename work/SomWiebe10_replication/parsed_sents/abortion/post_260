(ROOT
  (S
    (VP (MD Can) (RB not)
      (VP (VB be)
        (VP (VBN committed)
          (PP (IN against)
            (NP (DT a) (JJ dead) (NN person))))))
    (. .)))

aux(committed-4, Can-1)
neg(committed-4, not-2)
auxpass(committed-4, be-3)
root(ROOT-0, committed-4)
det(person-8, a-6)
amod(person-8, dead-7)
prep_against(committed-4, person-8)

(ROOT
  (S
    (NP (DT A) (JJ dead) (NN body))
    (VP (VBZ has)
      (NP (DT no) (NNS rights))
      (ADVP (RB whatsoever)))
    (. .)))

det(body-3, A-1)
amod(body-3, dead-2)
nsubj(has-4, body-3)
root(ROOT-0, has-4)
det(rights-6, no-5)
dobj(has-4, rights-6)
advmod(has-4, whatsoever-7)

(ROOT
  (S
    (S
      (ADVP (RB Legally))
      (, ,)
      (NP (PRP it))
      (VP (VBZ has)
        (NP (DT some) (NNS PROTECTIONS))))
    (, ,)
    (CC but)
    (S
      (NP (NNS protections))
      (VP (VBP do) (RB not)
        (VP (VB equate)
          (PP (TO to)
            (NP (NNS rights))))))
    (. .)))

advmod(has-4, Legally-1)
nsubj(has-4, it-3)
root(ROOT-0, has-4)
det(PROTECTIONS-6, some-5)
dobj(has-4, PROTECTIONS-6)
nsubj(equate-12, protections-9)
aux(equate-12, do-10)
neg(equate-12, not-11)
conj_but(has-4, equate-12)
prep_to(equate-12, rights-14)

(ROOT
  (S
    (NP (JJ THese) (NNS protections))
    (VP (VBP are)
      (NP (PDT both)
        (NP
          (LST (LS a) (-RRB- -RRB-))
          (NP (NN sort))
          (PP (IN of)
            (NP (JJ new))))
        (, ,)
        (CC and)
        (NP
          (LST (LS b) (-RRB- -RRB-))
          (NP (RB not) (NN generalizable))
          (PP (IN towards)
            (NP (DT all) (NNS corpses))))))
    (. .)))

amod(protections-2, THese-1)
nsubj(sort-7, protections-2)
cop(sort-7, are-3)
preconj(sort-7, both-4)
dep(sort-7, a-5)
root(ROOT-0, sort-7)
prep_of(sort-7, new-9)
dep(generalizable-15, b-12)
neg(generalizable-15, not-14)
conj_and(sort-7, generalizable-15)
det(corpses-18, all-17)
prep_towards(generalizable-15, corpses-18)

(ROOT
  (S
    (VP (VB Define)
      (NP (NN development)))
    (. .)))

root(ROOT-0, Define-1)
dobj(Define-1, development-2)

(ROOT
  (S
    (NP (NNP Everything))
    (VP (VBZ develops)
      (PP (IN into)
        (NP (NN something) (RB else))))
    (. .)))

nsubj(develops-2, Everything-1)
root(ROOT-0, develops-2)
prep_into(develops-2, something-4)
advmod(something-4, else-5)

(ROOT
  (S
    (NP (NNS Corpses))
    (VP (VBP have)
      (NP
        (NP (NNS stages))
        (PP (IN of)
          (NP (NN development)))))
    (. .)))

nsubj(have-2, Corpses-1)
root(ROOT-0, have-2)
dobj(have-2, stages-3)
prep_of(stages-3, development-5)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP 're)
          (VP (VBG defining)
            (NP (NN life))
            (PP (IN as)
              (NP
                (NP (DT a) (JJ single-celled) (NN organism))
                (PP (IN with)
                  (NP (DT a) (JJ unique) (JJ genetic) (NN code)))))))))
    (, ,)
    (NP (NNS corpses))
    (VP (VBP have)
      (NP
        (NP (DT a) (NN lot))
        (PP (IN of)
          (NP (DT those)))))
    (. .)))

mark(defining-4, If-1)
nsubj(defining-4, you-2)
aux(defining-4, 're-3)
advcl(have-17, defining-4)
dobj(defining-4, life-5)
det(organism-9, a-7)
amod(organism-9, single-celled-8)
prep_as(defining-4, organism-9)
det(code-14, a-11)
amod(code-14, unique-12)
amod(code-14, genetic-13)
prep_with(organism-9, code-14)
nsubj(have-17, corpses-16)
root(ROOT-0, have-17)
det(lot-19, a-18)
dobj(have-17, lot-19)
prep_of(lot-19, those-21)

