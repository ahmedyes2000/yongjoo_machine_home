(ROOT
  (SQ
    (S
      (S
        (INTJ (UH Yes))
        (, ,)
        (S
          (NP (PRP you))
          (VP (VBP are)
            (ADJP (RB absolutely) (JJ right))))
        (, ,)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (ADJP (JJ illegal)
              (S
                (VP (TO to)
                  (VP (VB kill)
                    (NP (DT a) (NN child)))))))))
      (, ,)
      (CC but)
      (S
        (ADVP (RB just))
        (PP (IN because)
          (NP (PRP it)))
        (NP (DT a) (NN simple))
        (VP (`` ``) (VBZ cluster)
          (PP (IN of)
            (NP (NNS cells)))
          ('' '')
          (PP (IN in)
            (NP
              (NP (DT the) (JJ early) (NNS stages))
              (PP (IN of)
                (NP (NN pregnancy))))))))
    (, ,)
    (SQ (VBZ does)
      (NP (DT that))
      (VP (VB give)
        (NP (PRP us))
        (NP (DT any) (JJ further) (NN right)
          (S
            (VP (TO to)
              (VP (VB destroy)
                (NP (PRP it))))))))
    (. ?)))

dep(right-6, Yes-1)
nsubj(right-6, you-3)
cop(right-6, are-4)
advmod(right-6, absolutely-5)
dep(give-36, right-6)
nsubj(illegal-10, it-8)
cop(illegal-10, is-9)
dep(right-6, illegal-10)
aux(kill-12, to-11)
xcomp(illegal-10, kill-12)
det(child-14, a-13)
dobj(kill-12, child-14)
advmod(cluster-23, just-17)
prep_because(cluster-23, it-19)
det(simple-21, a-20)
nsubj(cluster-23, simple-21)
conj_but(right-6, cluster-23)
dep(give-36, cluster-23)
prep_of(cluster-23, cells-25)
det(stages-30, the-28)
amod(stages-30, early-29)
prep_in(cluster-23, stages-30)
prep_of(stages-30, pregnancy-32)
aux(give-36, does-34)
nsubj(give-36, that-35)
root(ROOT-0, give-36)
iobj(give-36, us-37)
det(right-40, any-38)
amod(right-40, further-39)
dobj(give-36, right-40)
aux(destroy-42, to-41)
infmod(right-40, destroy-42)
dobj(destroy-42, it-43)

(ROOT
  (FRAG (RB Not)
    (ADJP (JJ convinced))
    (. ?)))

root(ROOT-0, Not-1)
dep(Not-1, convinced-2)

(ROOT
  (S
    (S
      (ADVP (RB Perhaps))
      (NP (DT this) (NN example))
      (VP (MD will)
        (VP (VB help)
          (NP (PRP$ my) (NN point)))))
    (: :)
    (S
      (S
        (NP (PRP You))
        (VP (VBP are)
          (VP (VBG walking)
            (PP (IN through)
              (NP (DT a) (NN farm)))
            (NP (CD one) (NN day)))))
      (, ,)
      (CC and)
      (S
        (NP (PRP you))
        (VP (VBP stumble)
          (PP (IN upon)
            (NP
              (NP (DT a) (NN chicken) (NN egg))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBZ has)
                    (VP (VBN been)
                      (VP
                        (ADVP (RB freshly))
                        (VBN laid)))))))))))
    (. .)))

advmod(help-5, Perhaps-1)
det(example-3, this-2)
nsubj(help-5, example-3)
aux(help-5, will-4)
root(ROOT-0, help-5)
poss(point-7, my-6)
dobj(help-5, point-7)
nsubj(walking-11, You-9)
aux(walking-11, are-10)
parataxis(help-5, walking-11)
det(farm-14, a-13)
prep_through(walking-11, farm-14)
num(day-16, one-15)
tmod(walking-11, day-16)
nsubj(stumble-20, you-19)
parataxis(help-5, stumble-20)
conj_and(walking-11, stumble-20)
det(egg-24, a-22)
nn(egg-24, chicken-23)
prep_upon(stumble-20, egg-24)
nsubjpass(laid-29, egg-24)
aux(laid-29, has-26)
auxpass(laid-29, been-27)
advmod(laid-29, freshly-28)
rcmod(egg-24, laid-29)

(ROOT
  (S
    (NP (PRP You))
    (VP
      (VP (VBP step)
        (PP (IN on)
          (NP (PRP it))))
      (, ,)
      (CC and)
      (VP (VBP guess)
        (NP (WP what))))
    (. ?)))

nsubj(step-2, You-1)
nsubj(guess-7, You-1)
root(ROOT-0, step-2)
prep_on(step-2, it-4)
conj_and(step-2, guess-7)
dobj(guess-7, what-8)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have)
      (VP (VBN commited)
        (NP (NN murder))))
    (. !)))

nsubj(commited-3, You-1)
aux(commited-3, have-2)
root(ROOT-0, commited-3)
dobj(commited-3, murder-4)

(ROOT
  (S
    (S
      (NP (PRP I))
      (ADVP (RB instantly))
      (VP (VBP know)
        (NP (DT the) (NN reply))
        (PP (TO to)
          (NP (DT that) (NN statement)))))
    (, ,)
    (S
      (PP (IN after)
        (NP (DT all)))
      (, ,)
      (NP (PRP it))
      (VP (VBZ 's)
        (ADVP (RB just))
        (NP (DT an) (NN egg))))
    (, ,) (IN so)
    (S
      (ADVP (RB therefore))
      (NP (EX there))
      (VP (VBZ is) (RB n't)
        (NP
          (NP (DT any) (JJ developed) (NN life))
          (VP (VBG growing)
            (ADVP (RB inside))
            (: ...)
            (S
              (ADVP (RB yet)))))))
    (. !)))

nsubj(know-3, I-1)
advmod(know-3, instantly-2)
root(ROOT-0, know-3)
det(reply-5, the-4)
dobj(know-3, reply-5)
det(statement-8, that-7)
prep_to(know-3, statement-8)
prep_after(egg-17, all-11)
nsubj(egg-17, it-13)
cop(egg-17, 's-14)
advmod(egg-17, just-15)
det(egg-17, an-16)
ccomp(know-3, egg-17)
dep(know-3, so-19)
advmod(is-22, therefore-20)
expl(is-22, there-21)
ccomp(know-3, is-22)
neg(is-22, n't-23)
det(life-26, any-24)
amod(life-26, developed-25)
nsubj(is-22, life-26)
partmod(life-26, growing-27)
advmod(growing-27, inside-28)
parataxis(growing-27, yet-30)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ does) (RB n't)
        (VP (VB matter)
          (SBAR
            (WHADVP (WRB how) (RB far))
            (S
              (NP
                (NP (DT the) (NNS stages))
                (PP (IN of)
                  (NP (NN development))))
              (VP (VBP have)
                (VP (VBN gone) (, ,)
                  (SBAR (IN because)
                    (S
                      (NP (EX there))
                      (VP (VBZ is)
                        (ADVP (RB ultimately))
                        (VP (VBG going)
                          (S
                            (VP (TO to)
                              (VP (VB be)
                                (NP (DT a) (NN child))))))))))))))))
    (, ,)
    (CC and)
    (S
      (S
        (VP (VBG forcing)
          (SBAR
            (S
              (NP (DT an) (JJ early) (NN abortion))
              (VP (VBZ is)
                (NP
                  (NP (DT the) (NN prevention))
                  (PP (IN of)
                    (NP (NN life))))))
            (, ,)
            (CC and)
            (S
              (PP (IN in)
                (NP (PRP$ my) (NNS eyes)))
              (, ,)
              (VP (VBZ is)
                (ADJP (NN nothing) (JJ short)
                  (PP (IN of)
                    (ADVP
                      (NP (DT an) (NN abortion))
                      (IN at)))))))))
      (VP (VBP say)
        (NP
          (NP (DT the) (CD six) (NN month) (NN stage))
          (PP (IN of)
            (NP (DT a) (JJ human) (NN pregnancy))))))
    (. .)))

nsubj(matter-4, It-1)
aux(matter-4, does-2)
neg(matter-4, n't-3)
root(ROOT-0, matter-4)
advmod(far-6, how-5)
advmod(gone-12, far-6)
det(stages-8, the-7)
nsubj(gone-12, stages-8)
prep_of(stages-8, development-10)
aux(gone-12, have-11)
ccomp(matter-4, gone-12)
mark(going-18, because-14)
expl(going-18, there-15)
xsubj(child-22, there-15)
aux(going-18, is-16)
advmod(going-18, ultimately-17)
advcl(gone-12, going-18)
aux(child-22, to-19)
cop(child-22, be-20)
det(child-22, a-21)
xcomp(going-18, child-22)
csubj(say-47, forcing-25)
det(abortion-28, an-26)
amod(abortion-28, early-27)
nsubj(prevention-31, abortion-28)
nsubj(short-42, abortion-28)
cop(prevention-31, is-29)
det(prevention-31, the-30)
ccomp(forcing-25, prevention-31)
prep_of(prevention-31, life-33)
poss(eyes-38, my-37)
prep_in(short-42, eyes-38)
cop(short-42, is-40)
dep(short-42, nothing-41)
ccomp(forcing-25, short-42)
conj_and(prevention-31, short-42)
prep(short-42, of-43)
det(abortion-45, an-44)
npadvmod(at-46, abortion-45)
pcomp(of-43, at-46)
conj_and(matter-4, say-47)
det(stage-51, the-48)
num(stage-51, six-49)
nn(stage-51, month-50)
dobj(say-47, stage-51)
det(pregnancy-55, a-53)
amod(pregnancy-55, human-54)
prep_of(stage-51, pregnancy-55)

(ROOT
  (S
    (PP (IN By)
      (NP (DT the) (NN way)))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP I))
        (VP (MD may)
          (VP (VB add)
            (NP (DT this))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP I))
    (VP (MD would)
      (VP (VB say)
        (SBAR (IN that)
          (S
            (NP
              (NP (PRP$ your) (NN view))
              (PP (IN on)
                (UCP
                  (NP (DT the) (`` ``) (JJ potential) (NN bs) (, ,) ('' ''))
                  (CC and)
                  (SBAR
                    (WHADVP (WRB how))
                    (S
                      (NP (PRP we))
                      (VP (MD should) (`` ``)
                        (VP (VB outlaw)
                          (NP (NN masterbation))))
                      (, ,) ('' ''))))))
            (VP (VBZ is) (RB either)
              (ADJP
                (ADJP (RB incredibly) (JJ misguided))
                (, ,)
                (CC or)
                (ADJP (RB incredibly) (JJ stupid))))))))
    (. .)))

det(way-3, the-2)
prep_by(say-14, way-3)
mark(add-8, if-5)
nsubj(add-8, I-6)
aux(add-8, may-7)
advcl(say-14, add-8)
dobj(add-8, this-9)
advmod(say-14, then-11)
nsubj(say-14, I-12)
aux(say-14, would-13)
root(ROOT-0, say-14)
complm(misguided-37, that-15)
poss(view-17, your-16)
nsubj(misguided-37, view-17)
nsubj(stupid-41, view-17)
det(bs-22, the-19)
amod(bs-22, potential-21)
prep_on(view-17, bs-22)
advmod(outlaw-30, how-26)
nsubj(outlaw-30, we-27)
aux(outlaw-30, should-28)
prep_on(view-17, outlaw-30)
conj_and(bs-22, outlaw-30)
dobj(outlaw-30, masterbation-31)
cop(misguided-37, is-34)
advmod(misguided-37, either-35)
advmod(misguided-37, incredibly-36)
ccomp(say-14, misguided-37)
advmod(stupid-41, incredibly-40)
ccomp(say-14, stupid-41)
conj_or(misguided-37, stupid-41)

(ROOT
  (S
    (VP (VB Need)
      (S
        (NP (PRP I))
        (VP (VB remind)
          (NP (PRP you))
          (SBAR (IN that)
            (S
              (NP (EX there))
              (VP (VBP are)
                (NP
                  (NP
                    (QP (JJ several) (CD billion))
                    (NN sperm) (NNS cells))
                  (PP (IN in)
                    (NP (DT each) (NN male))))))))))
    (. .)))

root(ROOT-0, Need-1)
nsubj(remind-3, I-2)
ccomp(Need-1, remind-3)
dobj(remind-3, you-4)
complm(are-7, that-5)
expl(are-7, there-6)
ccomp(remind-3, are-7)
quantmod(billion-9, several-8)
num(cells-11, billion-9)
nn(cells-11, sperm-10)
nsubj(are-7, cells-11)
det(male-14, each-13)
prep_in(cells-11, male-14)

(ROOT
  (SBARQ (RB So) (, ,)
    (WHNP
      (WHADJP (WRB how) (JJ many))
      (NN sperm) (NNS cells))
    (SQ
      (VP (VBP are)
        (VP (VBN produced)
          (PP (IN during)
            (NP
              (NP (DT the) (NN process))
              (PP (IN of)
                (NP (NN masterbation))))))))
    (. ?)))

advmod(produced-8, So-1)
advmod(many-4, how-3)
amod(cells-6, many-4)
nn(cells-6, sperm-5)
nsubjpass(produced-8, cells-6)
auxpass(produced-8, are-7)
root(ROOT-0, produced-8)
det(process-11, the-10)
prep_during(produced-8, process-11)
prep_of(process-11, masterbation-13)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB certainly))
    (VP (MD would) (RB n't)
      (VP (VB think)
        (NP
          (NP (NNS billions))
          (, ,)
          (NP (NNS millions))
          (, ,)
          (CC or)
          (NP (RB even) (JJ several) (NNS thousands)))))
    (. !)))

nsubj(think-5, I-1)
advmod(think-5, certainly-2)
aux(think-5, would-3)
neg(think-5, n't-4)
root(ROOT-0, think-5)
dobj(think-5, billions-6)
dobj(think-5, millions-8)
conj_or(billions-6, millions-8)
advmod(thousands-13, even-11)
amod(thousands-13, several-12)
dobj(think-5, thousands-13)
conj_or(billions-6, thousands-13)

