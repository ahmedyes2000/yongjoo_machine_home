(ROOT
  (S
    (NP
      (NP (NNP Funny))
      (SBAR (IN that)
        (S
          (NP (PRP you))
          (VP (MD should)
            (VP (VB be)
              (VP (VBG using)
                (NP
                  (NP
                    (NP (NNS metaphysics))
                    (PP (IN in)
                      (NP (DT an) (NN argument))))
                  (: ;)
                  (CC but)
                  (NP
                    (NP (NNS thanks))
                    (PP (IN for)
                      (S
                        (VP (VBG making)
                          (NP (PRP$ my) (NN point) (: :) (NN dependence)))))))))))))
    (VP (VBZ is) (RB n't)
      (NP
        (NP (DT a) (NNS criteria))
        (PP (IN for)
          (NP
            (NP (NN life) (, ,) (NN humanity) (, ,)
              (CC or)
              (NN lack))
            (ADVP (RB thereof))))))
    (. .)))

nsubj(criteria-23, Funny-1)
complm(using-6, that-2)
nsubj(using-6, you-3)
aux(using-6, should-4)
aux(using-6, be-5)
dep(Funny-1, using-6)
dobj(using-6, metaphysics-7)
det(argument-10, an-9)
prep_in(metaphysics-7, argument-10)
dobj(using-6, thanks-13)
conj_but(metaphysics-7, thanks-13)
prepc_for(thanks-13, making-15)
poss(dependence-19, my-16)
nn(dependence-19, point-17)
dobj(making-15, dependence-19)
cop(criteria-23, is-20)
neg(criteria-23, n't-21)
det(criteria-23, a-22)
root(ROOT-0, criteria-23)
prep_for(criteria-23, life-25)
prep_for(criteria-23, humanity-27)
conj_or(life-25, humanity-27)
prep_for(criteria-23, lack-30)
conj_or(life-25, lack-30)
advmod(life-25, thereof-31)

(ROOT
  (FRAG
    (ADJP (JJ Okay) (, ,) (JJ good))
    (, ,)
    (SBAR (IN so)
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBZ cares)
            (PP (IN about)
              (NP (NN pig) (NNS embryos)))))))
    (. ?)))

amod(good-3, Okay-1)
root(ROOT-0, good-3)
dep(cares-7, so-5)
nsubj(cares-7, who-6)
dep(good-3, cares-7)
nn(embryos-10, pig-9)
prep_about(cares-7, embryos-10)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ other) (NNS words)))
    (, ,)
    (S
      (NP
        (NP (DT a) (NN fetus))
        (CC and)
        (NP (DT an) (NN embryo)))
      (VP (VBP are)
        (NP (DT both) (VBG living) (NNS beings))))
    (: ;)
    (S
      (ADVP (RBR more) (RB specifically))
      (NP (PRP we))
      (VP (VBP 're)
        (VP (VBG talking)
          (NP
            (UCP
              (PP (IN about)
                (NP (NNP HUMAN) (NNS embryos)
                  (CC and)
                  (NNS fetuses)))
              (, ,)
              (CC and)
              (RB thus)
              (ADJP (JJ HUMAN)))
            (NNS beings)))))
    (, ,)
    (CC and)
    (ADVP (RB therefore))
    (S
      (NP (PRP we))
      (VP (VBP are)
        (VP (VBG talking)
          (PP (IN about)
            (NP
              (NP (NNS persons))
              (, ,)
              (SBAR
                (WHNP
                  (NP (DT the) (NN plural))
                  (WHPP (IN of)
                    (WHNP (WDT which))))
                (S
                  (VP (VBZ is)
                    (NP (NNS people))))))))))
    (. .)))

amod(words-3, other-2)
prep_in(beings-13, words-3)
det(fetus-6, a-5)
nsubj(beings-13, fetus-6)
det(embryo-9, an-8)
conj_and(fetus-6, embryo-9)
nsubj(beings-13, embryo-9)
cop(beings-13, are-10)
det(beings-13, both-11)
amod(beings-13, living-12)
root(ROOT-0, beings-13)
advmod(specifically-16, more-15)
advmod(talking-19, specifically-16)
nsubj(talking-19, we-17)
aux(talking-19, 're-18)
conj_and(beings-13, talking-19)
parataxis(beings-13, talking-19)
dep(beings-29, about-20)
nn(embryos-22, HUMAN-21)
pobj(about-20, embryos-22)
pobj(about-20, fetuses-24)
conj_and(embryos-22, fetuses-24)
conj_and(about-20, thus-27)
dep(beings-29, thus-27)
dep(about-20, HUMAN-28)
dobj(talking-19, beings-29)
advmod(beings-13, therefore-32)
conj_and(beings-13, therefore-32)
nsubj(talking-35, we-33)
aux(talking-35, are-34)
ccomp(beings-13, talking-35)
conj_and(beings-13, talking-35)
prep_about(talking-35, persons-37)
prep_of(plural-40, persons-37)
det(plural-40, the-39)
nsubj(people-44, plural-40)
cop(people-44, is-43)
rcmod(persons-37, people-44)

(ROOT
  (S
    (VP (VB Thank)
      (NP (PRP you))
      (ADVP (RB once) (RB again))
      (PP (IN for)
        (S
          (VP (VBG making)
            (NP (PRP$ my) (NN case))))))
    (. .)))

root(ROOT-0, Thank-1)
dobj(Thank-1, you-2)
advmod(again-4, once-3)
advmod(Thank-1, again-4)
prepc_for(Thank-1, making-6)
poss(case-8, my-7)
dobj(making-6, case-8)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (PRP I))
    (VP (VBP believe)
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP are)
            (VP (VBG confusing)
              (NP (DT this) (NN argument))
              (PP (IN with)
                (NP
                  (NP (NNS arguments))
                  (PP (IN for)
                    (NP (NN existence)))
                  (SBAR
                    (WHPP (IN in)
                      (WHNP (WDT which)))
                    (S
                      (NP
                        (NP (DT the) (NN burden))
                        (PP (IN of)
                          (NP (NN proof))))
                      (VP (VBZ is)
                        (ADVP (RB logically))
                        (ADJP (JJ one-sided))))))))))))
    (. .)))

advmod(believe-4, Now-1)
nsubj(believe-4, I-3)
root(ROOT-0, believe-4)
nsubj(confusing-7, you-5)
aux(confusing-7, are-6)
ccomp(believe-4, confusing-7)
det(argument-9, this-8)
dobj(confusing-7, argument-9)
prep_with(confusing-7, arguments-11)
prep_for(arguments-11, existence-13)
rel(one-sided-22, which-15)
det(burden-17, the-16)
nsubj(one-sided-22, burden-17)
prep_of(burden-17, proof-19)
cop(one-sided-22, is-20)
advmod(one-sided-22, logically-21)
rcmod(arguments-11, one-sided-22)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (VBP 're) (RB not)
        (VP (VBG debating)
          (SBAR (IN whether)
            (S
              (NP
                (NP (JJ unborn) (JJ human) (NNS beings))
                (PRN (-LRB- -LRB-)
                  (NP (NNS persons))
                  (-RRB- -RRB-)))
              (VP (VBP exist)))))))
    (, ,)
    (NP (DT that))
    (VP (VBZ 's)
      (ADVP (RB already))
      (VP (VBN proven)))
    (. .)))

nsubj(debating-4, We-1)
aux(debating-4, 're-2)
neg(debating-4, not-3)
ccomp(proven-17, debating-4)
complm(exist-12, whether-5)
amod(beings-8, unborn-6)
amod(beings-8, human-7)
nsubj(exist-12, beings-8)
appos(beings-8, persons-10)
ccomp(debating-4, exist-12)
nsubjpass(proven-17, that-14)
auxpass(proven-17, 's-15)
advmod(proven-17, already-16)
root(ROOT-0, proven-17)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP 're)
      (VP (VBG debating)
        (SBAR (IN whether)
          (S
            (NP (DT these) (NNS beings))
            (VP (VBP are)
              (ADJP (JJ human))))
          (CC or)
          (RB not))))
    (. .)))

nsubj(debating-3, We-1)
aux(debating-3, 're-2)
root(ROOT-0, debating-3)
complm(human-8, whether-4)
det(beings-6, these-5)
nsubj(human-8, beings-6)
cop(human-8, are-7)
ccomp(debating-3, human-8)
ccomp(debating-3, not-10)
conj_or(human-8, not-10)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (MD can)
        (VP (VB prove)
          (SBAR (IN whether)
            (CC or)
            (RB not)
            (S
              (NP (PRP they))
              (VP (VBP 're)
                (ADJP (JJ human))))))))
    (: ;)
    (S
      (NP (PRP I))
      (VP (VBP have)))
    (. .)))

nsubj(prove-3, You-1)
aux(prove-3, can-2)
root(ROOT-0, prove-3)
complm(human-9, whether-4)
ccomp(prove-3, not-6)
conj_or(human-9, not-6)
nsubj(human-9, they-7)
cop(human-9, 're-8)
ccomp(prove-3, human-9)
nsubj(have-12, I-11)
parataxis(prove-3, have-12)

(ROOT
  (S
    (ADVP (RB Now))
    (NP
      (NP (DT the) (NN burden))
      (PP (IN of)
        (NP (NN proof))))
    (VP
      (ADVP (RB still))
      (VBZ remains)
      (PP (IN with)
        (NP (PRP you)))
      (SBAR (IN that)
        (S
          (NP (PRP they))
          (VP (VBP are) (RB not)
            (ADJP
              (ADJP (JJ human))
              (, ,)
              (CC or)
              (ADJP (RB not) (JJ alive)))))))
    (. .)))

advmod(remains-7, Now-1)
det(burden-3, the-2)
nsubj(remains-7, burden-3)
prep_of(burden-3, proof-5)
advmod(remains-7, still-6)
root(ROOT-0, remains-7)
prep_with(remains-7, you-9)
complm(human-14, that-10)
nsubj(human-14, they-11)
nsubj(alive-18, they-11)
cop(human-14, are-12)
neg(human-14, not-13)
ccomp(remains-7, human-14)
neg(alive-18, not-17)
ccomp(remains-7, alive-18)
conj_or(human-14, alive-18)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD can) (RB not)
      (VP (VB make)
        (NP (DT either) (NN case))
        (, ,)
        (SBAR (IN because)
          (S
            (NP
              (NP (DT the) (NN contrary))
              (PP (TO to)
                (NP
                  (NP (DT both))
                  (PP (IN of)
                    (NP (DT these) (NNS assertions))))))
            (VP (VBZ is)
              (ADJP (JJ false)))))))
    (. .)))

nsubj(make-4, You-1)
aux(make-4, can-2)
neg(make-4, not-3)
root(ROOT-0, make-4)
det(case-6, either-5)
dobj(make-4, case-6)
mark(false-17, because-8)
det(contrary-10, the-9)
nsubj(false-17, contrary-10)
prep_to(contrary-10, both-12)
det(assertions-15, these-14)
prep_of(both-12, assertions-15)
cop(false-17, is-16)
advcl(make-4, false-17)

