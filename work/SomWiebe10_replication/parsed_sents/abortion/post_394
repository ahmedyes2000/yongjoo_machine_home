(ROOT
  (S
    (NP
      (NP (NN Ok))
      (, ,)
      (SBAR (IN if)
        (S
          (NP (DT a) (NN mother))
          (VP (VBD decided)
            (S
              (VP (TO to)
                (VP (VB take)
                  (NP (NN abortion))))))))
      (, ,))
    (VP (VBZ does)
      (SBAR (IN that)
        (S
          (VP (VBP mean)
            (S
              (VP (VBG killing)
                (NP (DT a) (JJ human) (NN being))))))))
    (. ?)))

dobj(decided-6, Ok-1)
nsubj(does-11, Ok-1)
mark(decided-6, if-3)
det(mother-5, a-4)
nsubj(decided-6, mother-5)
xsubj(take-8, mother-5)
dep(Ok-1, decided-6)
aux(take-8, to-7)
xcomp(decided-6, take-8)
dobj(take-8, abortion-9)
root(ROOT-0, does-11)
complm(mean-13, that-12)
ccomp(does-11, mean-13)
xcomp(mean-13, killing-14)
det(being-17, a-15)
amod(being-17, human-16)
dobj(killing-14, being-17)

(ROOT
  (S
    (PP (IN Consider)
      (NP
        (NP (DT this))
        (-RRB- -RRB-)
        (SBAR
          (S
            (NP (PRP I))
            (VP (VBP have)
              (NP (DT the) (NN right)
                (S
                  (VP (TO to)
                    (VP (VB take)
                      (NP
                        (NP (DT the) (NN life))
                        (PP (IN of)
                          (NP (DT a) (NN mouse)))))))))))
        (, ,)))
    (NP
      (NP (NNS ants))
      (, ,)
      (CC or)
      (RB even)
      (NP (DT a) (NN micro-organism))
      (DT that))
    (VP (VBZ does) (RB not)
      (ADVP (RB even))
      (VP (VB count)
        (NP (-LRB- -LRB-) (NN unprotected) (NNS animals) (-RRB- -RRB-))
        (, ,)
        (ADVP (RB right))))
    (. ?)))

prep_consider(count-26, this-2)
nsubj(have-5, I-4)
rcmod(this-2, have-5)
det(right-7, the-6)
dobj(have-5, right-7)
aux(take-9, to-8)
infmod(right-7, take-9)
det(life-11, the-10)
dobj(take-9, life-11)
det(mouse-14, a-13)
prep_of(life-11, mouse-14)
nsubj(count-26, ants-16)
advmod(ants-16, even-19)
conj_or(ants-16, even-19)
nsubj(count-26, even-19)
det(micro-organism-21, a-20)
dep(ants-16, micro-organism-21)
dep(ants-16, that-22)
aux(count-26, does-23)
neg(count-26, not-24)
advmod(count-26, even-25)
root(ROOT-0, count-26)
nn(animals-29, unprotected-28)
dobj(count-26, animals-29)
advmod(count-26, right-32)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (FW i))
        (VP (VBD mentioned)
          (ADVP (RBR earlier))
          (, ,)
          (SBAR (IN if)
            (S
              (NP (FW i))
              (VP (VBD poked)
                (NP (NN someone))))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ means)
      (S
        (VP (VBG killing)
          (NP
            (NP (DT some))
            (PP (IN of)
              (NP (PRP$ his) (NNS cells)))))))
    (. .)))

mark(mentioned-3, As-1)
nsubj(mentioned-3, i-2)
advcl(means-12, mentioned-3)
advmod(mentioned-3, earlier-4)
mark(poked-8, if-6)
nsubj(poked-8, i-7)
advcl(mentioned-3, poked-8)
dobj(poked-8, someone-9)
nsubj(means-12, it-11)
root(ROOT-0, means-12)
xcomp(means-12, killing-13)
dobj(killing-13, some-14)
poss(cells-17, his-16)
prep_of(some-14, cells-17)

(ROOT
  (SBARQ (CC But)
    (WHADVP (WRB why))
    (SQ (VBZ is)
      (NP
        (NP (PRP it))
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBZ 's) (RB not)
              (NP (DT a) (NN crime)))))))
    (. ?)))

cc(is-3, But-1)
advmod(is-3, why-2)
root(ROOT-0, is-3)
nsubj(is-3, it-4)
complm(crime-10, that-5)
nsubj(crime-10, it-6)
cop(crime-10, 's-7)
neg(crime-10, not-8)
det(crime-10, a-9)
dep(it-4, crime-10)

(ROOT
  (S
    (S
      (NP (DT the) (NN reason))
      (VP (VBZ is)
        (ADVP (RB maybe))
        (SBAR (IN that)
          (S
            (NP (PRP it))
            (VP (VBZ 's)
              (ADJP (JJ minor)))))))
    (, ,)
    (S
      (NP (DT these) (NNS cells))
      (ADVP (RB almost))
      (VP (VBZ has)
        (NP
          (NP (DT no) (NN benefit))
          (PP (TO to)
            (NP (DT that) (NN person))))))
    (CC and)
    (S
      (ADVP (RB therefore))
      (NP (PRP it))
      (VP (VBZ makes)
        (NP (RB almost) (DT no) (NN loss))))
    (. .)))

det(reason-2, the-1)
nsubj(is-3, reason-2)
root(ROOT-0, is-3)
advmod(is-3, maybe-4)
complm(minor-8, that-5)
nsubj(minor-8, it-6)
cop(minor-8, 's-7)
ccomp(is-3, minor-8)
det(cells-11, these-10)
nsubj(has-13, cells-11)
advmod(has-13, almost-12)
conj_and(is-3, has-13)
det(benefit-15, no-14)
dobj(has-13, benefit-15)
det(person-18, that-17)
prep_to(benefit-15, person-18)
advmod(makes-22, therefore-20)
nsubj(makes-22, it-21)
conj_and(is-3, makes-22)
advmod(loss-25, almost-23)
det(loss-25, no-24)
dobj(makes-22, loss-25)

(ROOT
  (S
    (NP (PRP$ Its))
    (RB not)
    (NP (DT the) (JJ same))
    (VP
      (VP
        (ADVP (IN if) (DT a))
        (VBD ran)
        (PP (IN into)
          (NP (DT a) (NN man))))
      (CC and)
      (VP
        (ADVP (RB purposely))
        (VBD decapitated)
        (NP (PRP$ his) (NNS arms))))
    (. .)))

nsubj(ran-7, Its-1)
nsubj(decapitated-13, Its-1)
neg(ran-7, not-2)
det(same-4, the-3)
nsubj(ran-7, same-4)
advmod(ran-7, if-5)
dep(if-5, a-6)
root(ROOT-0, ran-7)
det(man-10, a-9)
prep_into(ran-7, man-10)
advmod(decapitated-13, purposely-12)
conj_and(ran-7, decapitated-13)
poss(arms-15, his-14)
dobj(decapitated-13, arms-15)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN sent)
          (PP (TO to)
            (NP (NN jail))))))
    (. .)))

nsubjpass(sent-4, I-1)
aux(sent-4, will-2)
auxpass(sent-4, be-3)
root(ROOT-0, sent-4)
prep_to(sent-4, jail-6)

(ROOT
  (S
    (NP (RB Now))
    (VP (VBZ lets)
      (VP (VB go)
        (PRT (RP back))
        (PP (TO to)
          (NP (NN abortion)))))
    (. .)))

nsubj(lets-2, Now-1)
root(ROOT-0, lets-2)
dep(lets-2, go-3)
prt(go-3, back-4)
prep_to(go-3, abortion-6)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (DT the) (NN mother))
        (VP (VBZ feels)
          (WHNP (WDT that)))))
    (NP (DT the) (NN child))
    (ADVP (RB only))
    (VP (VBP cause)
      (NP
        (NP (NN trouble))
        (PP (IN for)
          (NP (PRP her)))))
    (. .)))

mark(feels-4, If-1)
det(mother-3, the-2)
nsubj(feels-4, mother-3)
advcl(cause-9, feels-4)
dobj(feels-4, that-5)
det(child-7, the-6)
nsubj(cause-9, child-7)
advmod(cause-9, only-8)
root(ROOT-0, cause-9)
dobj(cause-9, trouble-10)
prep_for(trouble-10, her-12)

(ROOT
  (S
    (SBAR
      (PRN (-LRB- -LRB-)
        (NP
          (NP
            (NP (NNS cases))
            (PP (JJ such) (IN as)
              (NP (JJ financial) (NN problem))))
          (, ,)
          (NP (NN time))
          (, ,) (FW etc.))
        (-RRB- -RRB-))
      (S
        (NP (PRP It))
        (ADVP (RB also))
        (VP (VBZ means)
          (SBAR (IN that)
            (S
              (NP (DT the) (NN baby))
              (VP (VBZ has)
                (NP (RB almost) (DT no))))))))
    (VP (VB benefit)
      (PP (TO to)
        (NP (DT the) (NN mother))))
    (. .)))

dep(means-14, cases-2)
amod(problem-6, financial-5)
prep_such_as(cases-2, problem-6)
appos(cases-2, time-8)
dep(cases-2, etc.-10)
nsubj(means-14, It-12)
advmod(means-14, also-13)
csubj(benefit-21, means-14)
complm(has-18, that-15)
det(baby-17, the-16)
nsubj(has-18, baby-17)
ccomp(means-14, has-18)
advmod(no-20, almost-19)
dobj(has-18, no-20)
root(ROOT-0, benefit-21)
det(mother-24, the-23)
prep_to(benefit-21, mother-24)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP know)))
    (, ,)
    (NP (PRP it))
    (VP (VBZ means)
      (NP (`` ``)
        (NP (NN something))
        ('' '')
        (PP (TO to)
          (NP (DT the) (NN baby)))))
    (. .)))

nsubj(know-2, I-1)
ccomp(means-5, know-2)
nsubj(means-5, it-4)
root(ROOT-0, means-5)
dobj(means-5, something-7)
det(baby-11, the-10)
prep_to(something-7, baby-11)

(ROOT
  (S (CC But)
    (S
      (VP
        (VP (VB consider)
          (NP (DT this))
          (-RRB- -RRB-)
          (PP (IN if)
            (NP
              (NP (FW i))
              (VP (VBN cloned)
                (NP
                  (NP (DT an) (NN animal))
                  (PRN (-LRB- -LRB-)
                    (SBAR
                      (WHNP (WDT which))
                      (S
                        (VP (VBZ is)
                          (ADJP (JJ illegal)))))
                    (-RRB- -RRB-)))))))
        (, ,)
        (NP
          (NP (DT the) (NN animal) (POS 's))
          (NN cell\/dna))))
    (CC or)
    (S
      (NP (WDT whatever))
      (VP (VBZ is)
        (VP (VBN needed)
          (PP (IN for)
            (NP (DT this))))))
    (. .)))

root(ROOT-0, consider-2)
dobj(consider-2, this-3)
prep_if(consider-2, i-6)
partmod(i-6, cloned-7)
det(animal-9, an-8)
dobj(cloned-7, animal-9)
nsubj(illegal-13, which-11)
cop(illegal-13, is-12)
dep(animal-9, illegal-13)
det(animal-17, the-16)
poss(cell\/dna-19, animal-17)
dobj(consider-2, cell\/dna-19)
nsubjpass(needed-23, whatever-21)
auxpass(needed-23, is-22)
conj_or(consider-2, needed-23)
prep_for(needed-23, this-25)

(ROOT
  (FRAG (CC and)
    (VP (VB consider)
      (NP (DT this))
      (-RRB- -RRB-)
      (ADVP (RB so))
      (SBAR (IN if)
        (S
          (NP (FW i))
          (VP (VBP do) (RB not)
            (VP (VB have)
              (NP (DT the) (NN right)
                (S
                  (VP (TO to)
                    (VP (VB take)
                      (NP
                        (NP (DT a) (NN life))
                        (PP (IN of)
                          (NP (DT a) (NN human) (VBG being))))))))
              (, ,)
              (SBAR
                (WHADVP (WRB why))
                (S
                  (VP (VBZ is)
                    (NP (PRP it))
                    (SBAR (IN that)
                      (S
                        (NP (NN im))
                        (VP (VBD allowed)
                          (S
                            (VP (TO to)
                              (VP (VB take)
                                (NP
                                  (NP (DT the) (NN life))
                                  (PP (IN of)
                                    (NP (DT a) (NN human) (VBG being)))))))
                          (ADVP (RB partly)))))))))))))
    (. ?)))

dep(consider-2, and-1)
root(ROOT-0, consider-2)
dobj(consider-2, this-3)
advmod(consider-2, so-5)
mark(have-10, if-6)
nsubj(have-10, i-7)
aux(have-10, do-8)
neg(have-10, not-9)
advcl(consider-2, have-10)
det(right-12, the-11)
dobj(have-10, right-12)
aux(take-14, to-13)
infmod(right-12, take-14)
det(life-16, a-15)
dobj(take-14, life-16)
det(human-19, a-18)
prep_of(life-16, human-19)
amod(human-19, being-20)
advmod(it-24, why-22)
cop(it-24, is-23)
advcl(have-10, it-24)
complm(allowed-27, that-25)
nsubj(allowed-27, im-26)
xsubj(take-29, im-26)
ccomp(it-24, allowed-27)
aux(take-29, to-28)
xcomp(allowed-27, take-29)
det(life-31, the-30)
dobj(take-29, life-31)
det(human-34, a-33)
prep_of(life-31, human-34)
amod(human-34, being-35)
advmod(allowed-27, partly-36)

(ROOT
  (SQ
    (SBAR (RB so) (IN if)
      (S
        (NP (FW i))
        (VP (VBD killed)
          (NP (PRP it)))))
    (, ,) (VBZ does)
    (NP (PRP it))
    (ADVP (RB also))
    (VP (VB mean)
      (S
        (VP (VBG killing)
          (NP
            (NP (DT some))
            (PP (IN of)
              (NP
                (NP (DT the) (NN animal) (POS 's))
                (NN cell)))
            (SBAR
              (WHNP (WDT which))
              (S
                (VP (VBZ has)
                  (NP
                    (NP (DT no) (NN benefit))
                    (PP (IN at)
                      (NP (DT all)))))))))))
    (. ?)))

advmod(killed-4, so-1)
dep(killed-4, if-2)
nsubj(killed-4, i-3)
advcl(mean-10, killed-4)
dobj(killed-4, it-5)
aux(mean-10, does-7)
nsubj(mean-10, it-8)
advmod(mean-10, also-9)
root(ROOT-0, mean-10)
xcomp(mean-10, killing-11)
dobj(killing-11, some-12)
nsubj(has-19, some-12)
det(animal-15, the-14)
poss(cell-17, animal-15)
prep_of(some-12, cell-17)
rcmod(some-12, has-19)
det(benefit-21, no-20)
dobj(has-19, benefit-21)
prep_at(benefit-21, all-23)

(ROOT
  (S
    (NP (DT Every) (JJ human) (NN being))
    (VP (VBZ has)
      (NP
        (NP (JJ individual) (NNS rights))
        (PP (IN of)
          (NP (PRP$ their) (JJ own) (NN body)))))
    (. .)))

det(being-3, Every-1)
amod(being-3, human-2)
nsubj(has-4, being-3)
root(ROOT-0, has-4)
amod(rights-6, individual-5)
dobj(has-4, rights-6)
poss(body-10, their-8)
amod(body-10, own-9)
prep_of(rights-6, body-10)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (VP (VBN allowed)
            (S
              (VP (TO to)
                (VP
                  (VP (VB kill)
                    (NP (DT a) (NN sperm))
                    (SBAR (IN because)
                      (S
                        (NP (DT the) (NN father))
                        (VP (VBP have)
                          (NP (DT the) (NN right))))))
                  (, ,)
                  (CC and)
                  (VP (VB kill)
                    (NP (DT an) (NN egg))
                    (PP (IN because)
                      (NP (DT the) (NN mother)))))))))))
    (VP (VBP have)
      (NP (DT the) (NN right)))
    (. .)))

mark(allowed-4, if-1)
nsubjpass(allowed-4, it-2)
xsubj(kill-6, it-2)
auxpass(allowed-4, is-3)
csubj(have-23, allowed-4)
aux(kill-6, to-5)
xcomp(allowed-4, kill-6)
det(sperm-8, a-7)
dobj(kill-6, sperm-8)
mark(have-12, because-9)
det(father-11, the-10)
nsubj(have-12, father-11)
advcl(kill-6, have-12)
det(right-14, the-13)
dobj(have-12, right-14)
xcomp(allowed-4, kill-17)
conj_and(kill-6, kill-17)
det(egg-19, an-18)
dobj(kill-17, egg-19)
det(mother-22, the-21)
prep_because(kill-17, mother-22)
root(ROOT-0, have-23)
det(right-25, the-24)
dobj(have-23, right-25)

(ROOT
  (S
    (ADVP (RB Surely))
    (NP (PRP it))
    (VP (VBZ is)
      (VP (VBN allowed)
        (S
          (VP (TO to)
            (VP (VB kill)
              (SBAR
                (WHADVP (WRB when))
                (S
                  (NP (DT the) (NN egg))
                  (VP (VBZ fertilizes)
                    (SBAR (IN as)
                      (S
                        (NP (DT the) (NNS parents))
                        (VP (VBP have)
                          (NP (DT the) (NN right)))))))))))))
    (. ?)))

advmod(allowed-4, Surely-1)
nsubjpass(allowed-4, it-2)
xsubj(kill-6, it-2)
auxpass(allowed-4, is-3)
root(ROOT-0, allowed-4)
aux(kill-6, to-5)
xcomp(allowed-4, kill-6)
advmod(fertilizes-10, when-7)
det(egg-9, the-8)
nsubj(fertilizes-10, egg-9)
advcl(kill-6, fertilizes-10)
mark(have-14, as-11)
det(parents-13, the-12)
nsubj(have-14, parents-13)
advcl(fertilizes-10, have-14)
det(right-16, the-15)
dobj(have-14, right-16)

(ROOT
  (S
    (PP (IN for)
      (NP (NN example)))
    (, ,)
    (NP
      (NP (DT some))
      (PP (IN of)
        (NP
          (NP (DT the) (NN person) (POS 's))
          (NNS cells))))
    (VP (VBP are)
      (VP (VBN killed)
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (DT the) (NN person))
            (VP (VBZ is)
              (VP (VBG doing)
                (NP (DT an) (NN X-ray) (NN test))))))))
    (. .)))

prep_for(killed-11, example-2)
nsubjpass(killed-11, some-4)
det(person-7, the-6)
poss(cells-9, person-7)
prep_of(some-4, cells-9)
auxpass(killed-11, are-10)
root(ROOT-0, killed-11)
advmod(doing-16, when-12)
det(person-14, the-13)
nsubj(doing-16, person-14)
aux(doing-16, is-15)
advcl(killed-11, doing-16)
det(test-19, an-17)
nn(test-19, X-ray-18)
dobj(doing-16, test-19)

(ROOT
  (S
    (NP (DT The) (JJ same))
    (VP (VBZ goes)
      (SBAR (IN if)
        (S
          (NP (FW i))
          (VP (VBD poked)
            (NP (NN someone))
            (ADVP (RB lightly))))))
    (. .)))

det(same-2, The-1)
nsubj(goes-3, same-2)
root(ROOT-0, goes-3)
mark(poked-6, if-4)
nsubj(poked-6, i-5)
advcl(goes-3, poked-6)
dobj(poked-6, someone-7)
advmod(poked-6, lightly-8)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ
      (VP (VBD happened)
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP
              (NP (DT the) (NN egg))
              (PP (IN in)
                (NP
                  (NP (DT the) (NN mother) (POS 's))
                  (NN womb))))
            (VP (VBZ is)
              (VP (VBN fertilised)))))))
    (. ?)))

nsubj(happened-2, What-1)
root(ROOT-0, happened-2)
advmod(fertilised-12, when-3)
det(egg-5, the-4)
nsubjpass(fertilised-12, egg-5)
det(mother-8, the-7)
poss(womb-10, mother-8)
prep_in(egg-5, womb-10)
auxpass(fertilised-12, is-11)
advcl(happened-2, fertilised-12)

(ROOT
  (SQ (NNP Does)
    (NP (DT that))
    (VP (VB mean)
      (NP (NN life)))
    (. ?)))

dep(mean-3, Does-1)
nsubj(mean-3, that-2)
root(ROOT-0, mean-3)
dobj(mean-3, life-4)

(ROOT
  (SBARQ
    (WHNP (WDT what)
      (ADJP (IN if)
        (ADVP (RB somehow)))
      (NN i))
    (SQ
      (VP (VBD killed)
        (NP (DT the) (VBN fertilized) (NN egg))
        (PP (IN at)
          (NP (DT that) (JJ particular) (NN moment)))))
    (. ?)))

det(i-4, what-1)
amod(i-4, if-2)
advmod(if-2, somehow-3)
nsubj(killed-5, i-4)
root(ROOT-0, killed-5)
det(egg-8, the-6)
amod(egg-8, fertilized-7)
dobj(killed-5, egg-8)
det(moment-12, that-10)
amod(moment-12, particular-11)
prep_at(killed-5, moment-12)

(ROOT
  (SQ (NNP Does)
    (NP (DT that))
    (VP (VB mean)
      (NP
        (NP (FW i) (FW murdered))
        (CC and)
        (ADVP (RB therefore))
        (NP
          (NP (FW i))
          (VP (VBN committed)
            (NP (DT a) (NN crime))))))
    (. ?)))

dep(mean-3, Does-1)
nsubj(mean-3, that-2)
root(ROOT-0, mean-3)
nn(murdered-5, i-4)
dobj(mean-3, murdered-5)
dobj(mean-3, therefore-7)
advmod(murdered-5, therefore-7)
conj_and(murdered-5, therefore-7)
dobj(mean-3, i-8)
conj_and(murdered-5, i-8)
partmod(i-8, committed-9)
det(crime-11, a-10)
dobj(committed-9, crime-11)

(ROOT
  (PRN
    (ADVP (RB well))
    (, ,)
    (SBAR (WP what) (IN if)
      (S
        (NP (FW i))
        (VP (VBD killed)
          (NP
            (NP (DT the) (NN sperm))
            (CC and)
            (NP (DT the) (NN egg) (NN seperately)))))
      (. ?))))

dep(killed-6, well-1)
dep(killed-6, what-3)
dep(killed-6, if-4)
nsubj(killed-6, i-5)
root(ROOT-0, killed-6)
det(sperm-8, the-7)
dobj(killed-6, sperm-8)
det(seperately-12, the-10)
nn(seperately-12, egg-11)
dobj(killed-6, seperately-12)
conj_and(sperm-8, seperately-12)

(ROOT
  (S
    (NP (PRP it))
    (VP (VBZ 's)
      (ADVP (RB still))
      (VP (VBG ending)
        (NP (DT a) (NN life))))
    (. .)))

nsubj(ending-4, it-1)
aux(ending-4, 's-2)
advmod(ending-4, still-3)
root(ROOT-0, ending-4)
det(life-6, a-5)
dobj(ending-4, life-6)

