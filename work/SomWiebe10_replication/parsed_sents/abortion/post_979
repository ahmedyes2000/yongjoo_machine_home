(ROOT
  (S
    (NP (NNS Lets))
    (VP (VBP see)
      (SBAR
        (S
          (NP (NNP Hitler))
          (VP (VBD killed)
            (NP (NNS people))))))
    (. .)))

nsubj(see-2, Lets-1)
root(ROOT-0, see-2)
nsubj(killed-4, Hitler-3)
ccomp(see-2, killed-4)
dobj(killed-4, people-5)

(ROOT
  (S
    (NP (NNS abortions))
    (VP (VBP kill)
      (NP (NNS people)))
    (. .)))

nsubj(kill-2, abortions-1)
root(ROOT-0, kill-2)
dobj(kill-2, people-3)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (VBZ 's) (RB not)
          (ADJP (JJ human)))))
    (, ,)
    (NP (DT no) (NN justification))
    (VP (VBZ is)
      (ADJP (JJ necessary)))
    (. .)))

mark(human-5, If-1)
nsubj(human-5, it-2)
cop(human-5, 's-3)
neg(human-5, not-4)
advcl(necessary-10, human-5)
det(justification-8, no-7)
nsubj(necessary-10, justification-8)
cop(necessary-10, is-9)
root(ROOT-0, necessary-10)

(ROOT
  (S
    (NP (DT No) (NN one))
    (VP (VBZ needs)
      (NP (NN justification))
      (S
        (VP (TO to)
          (VP (VB remove)
            (S
              (NP (DT a) (NN tumor))
              (VP (VB do)
                (NP (PRP they))))))))
    (. ?)))

det(one-2, No-1)
nsubj(needs-3, one-2)
root(ROOT-0, needs-3)
dobj(needs-3, justification-4)
aux(remove-6, to-5)
xcomp(needs-3, remove-6)
det(tumor-8, a-7)
nsubj(do-9, tumor-8)
ccomp(remove-6, do-9)
dobj(do-9, they-10)

(ROOT
  (S (CC But)
    (SBAR (IN if)
      (S
        (NP (PRP it))
        (VP (VBZ 's)
          (NP
            (NP (DT a) (NN human))
            (VP (VBG being)
              (VP (VBN killed)
                (PP (IN in)
                  (NP (DT an) (NN abortion)))))))))
    (ADVP (RB then))
    (NP (DT no) (NN justification))
    (VP (VBZ is)
      (ADJP (JJ adequate)))
    (. .)))

cc(adequate-16, But-1)
mark(human-6, if-2)
nsubj(human-6, it-3)
cop(human-6, 's-4)
det(human-6, a-5)
dep(adequate-16, human-6)
auxpass(killed-8, being-7)
partmod(human-6, killed-8)
det(abortion-11, an-10)
prep_in(killed-8, abortion-11)
advmod(adequate-16, then-12)
det(justification-14, no-13)
nsubj(adequate-16, justification-14)
cop(adequate-16, is-15)
root(ROOT-0, adequate-16)

(ROOT
  (S (IN So)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP think)
          (SBAR
            (S
              (NP (NNS abortions))
              (VP (MD should) (RB n't)
                (VP (VB be)
                  (VP (VBN banned)))))))))
    (, ,)
    (ADVP (RB please))
    (VP (VBP tell)
      (NP
        (NP (PRP me))
        (SBAR
          (WHNP (RB exactly) (WP what))
          (S
            (VP (VBZ is)
              (VP (VBG being)
                (VP (VBN killed)
                  (PP (IN in)
                    (NP (DT an) (NN abortion))))))))))
    (, ,)))

dep(tell-12, So-1)
mark(think-4, if-2)
nsubj(think-4, you-3)
dep(tell-12, think-4)
nsubjpass(banned-9, abortions-5)
aux(banned-9, should-6)
neg(banned-9, n't-7)
auxpass(banned-9, be-8)
ccomp(think-4, banned-9)
advmod(tell-12, please-11)
root(ROOT-0, tell-12)
dobj(tell-12, me-13)
nsubjpass(killed-18, me-13)
advmod(what-15, exactly-14)
aux(killed-18, is-16)
auxpass(killed-18, being-17)
rcmod(me-13, killed-18)
det(abortion-21, an-20)
prep_in(killed-18, abortion-21)

(ROOT
  (NP
    (NP (NN Wow) (PRP$ your) (NN right))
    (, ,)
    (NP
      (NP (DT no) (NN correlation))
      (PP (IN at)
        (NP (DT all))))
    (, ,)
    (NP (DT a)
      (ADJP (JJ true) (JJ red))
      (NN herring))
    (. .)))

nn(right-3, Wow-1)
poss(right-3, your-2)
root(ROOT-0, right-3)
det(correlation-6, no-5)
appos(right-3, correlation-6)
prep_at(correlation-6, all-8)
det(herring-13, a-10)
amod(red-12, true-11)
amod(herring-13, red-12)
appos(right-3, herring-13)

(ROOT
  (SQ
    (VP (VB Want)
      (S
        (S
          (VP (TO to)
            (VP (VB know)
              (SBAR
                (WHNP (WP what))
                (S
                  (NP (NNP Jesus))
                  (VP (VBD taught)
                    (PP (IN about)
                      (NP (NN abortion)))
                    (, ,)
                    (ADVP (JJ right)
                      (CC and)
                      (JJ wrong))))))))
        (CC and)
        (S
          (VP (VBG judging)
            (NP (NNS people))))))
    (. ?)))

root(ROOT-0, Want-1)
aux(know-3, to-2)
dep(Want-1, know-3)
dobj(taught-6, what-4)
nsubj(taught-6, Jesus-5)
ccomp(know-3, taught-6)
prep_about(taught-6, abortion-8)
advmod(taught-6, right-10)
advmod(taught-6, wrong-12)
conj_and(right-10, wrong-12)
dep(Want-1, judging-14)
conj_and(know-3, judging-14)
dobj(judging-14, people-15)

(ROOT
  (S
    (VP (VB Go)
      (VP
        (VP (VB get)
          (NP (PRP$ your) (NN Bible)))
        (CC and)
        (VP (VB knock)
          (PRT (RP off))
          (NP (DT the) (NN dust))
          (SBAR (IN because)
            (S
              (NP (PRP it))
              (VP (MD would)
                (VP (VB be)
                  (ADJP (JJ wise)
                    (S
                      (VP (TO to)
                        (VP (VB ask)
                          (S
                            (NP (PRP Him))
                            (VP (RB not)
                              (NP (PRP me)))))))))))))))
    (. .)))

root(ROOT-0, Go-1)
dep(Go-1, get-2)
poss(Bible-4, your-3)
dobj(get-2, Bible-4)
dep(Go-1, knock-6)
conj_and(get-2, knock-6)
prt(knock-6, off-7)
det(dust-9, the-8)
dobj(knock-6, dust-9)
mark(wise-14, because-10)
nsubj(wise-14, it-11)
aux(wise-14, would-12)
cop(wise-14, be-13)
advcl(knock-6, wise-14)
aux(ask-16, to-15)
xcomp(wise-14, ask-16)
nsubj(me-19, Him-17)
neg(me-19, not-18)
ccomp(ask-16, me-19)

(ROOT
  (S
    (S
      (NP (NNP Final))
      (VP (VBD thought)))
    (: ;)
    (S
      (S
        (NP (PRP We))
        (VP (VBP are) (RB all)
          (ADJP (JJ lawbreakers))))
      (CC and)
      (S
        (PP (RB apart)
          (PP (IN from)
            (NP
              (NP (DT the) (NN grace))
              (PP (IN of)
                (NP (NNP God))))))
        (, ,)
        (NP
          (NP (DT all))
          (PP (IN of)
            (NP (PRP us))))
        (VP (VBP are)
          (VP (VBG going)
            (PP (TO to)
              (NP (NN prison)))
            (PP (IN for)
              (NP
                (NP (DT a) (JJ long) (NN time))
                (PP (IN for)
                  (NP (JJ comic) (NNS treason)))))))))
    (. .)))

nsubj(thought-2, Final-1)
root(ROOT-0, thought-2)
nsubj(lawbreakers-7, We-4)
cop(lawbreakers-7, are-5)
advmod(lawbreakers-7, all-6)
parataxis(thought-2, lawbreakers-7)
advcl(going-20, from-10)
det(grace-12, the-11)
prep_apart_from(going-20, grace-12)
prep_of(grace-12, God-14)
nsubj(going-20, all-16)
prep_of(all-16, us-18)
aux(going-20, are-19)
parataxis(thought-2, going-20)
conj_and(lawbreakers-7, going-20)
prep_to(going-20, prison-22)
det(time-26, a-24)
amod(time-26, long-25)
prep_for(going-20, time-26)
amod(treason-29, comic-28)
prep_for(time-26, treason-29)

(ROOT
  (S (CC And)
    (SBAR (IN since)
      (S
        (NP
          (NP (DT the) (NN one))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBD offended)))))
        (VP (VBZ is)
          (ADJP (JJ infinite)
            (PP (IN in)
              (ADJP (JJ worth)))))))
    (, ,)
    (NP
      (NP (DT the) (NN debt))
      (SBAR
        (S
          (NP (PRP we))
          (VP (VBP owe)))))
    (VP (VBZ is)
      (ADJP (JJ infinite))
      (ADVP (RB also)))
    (. .)))

cc(infinite-17, And-1)
mark(infinite-8, since-2)
det(one-4, the-3)
dobj(offended-6, one-4)
nsubj(infinite-8, one-4)
nsubj(offended-6, we-5)
rcmod(one-4, offended-6)
cop(infinite-8, is-7)
advcl(infinite-17, infinite-8)
prep_in(infinite-8, worth-10)
det(debt-13, the-12)
dobj(owe-15, debt-13)
nsubj(infinite-17, debt-13)
nsubj(owe-15, we-14)
rcmod(debt-13, owe-15)
cop(infinite-17, is-16)
root(ROOT-0, infinite-17)
advmod(infinite-17, also-18)

(ROOT
  (S (RB So)
    (VP (VB consider)
      (SBAR
        (WHNP (WP what))
        (S
          (NP
            (NP (NN infinity))
            (PP (CC minus)
              (NP (CD 10) (CD thousand))))
          (VP (VBZ is) (, ,)
            (NP (NN infinity))))))
    (. .)))

advmod(consider-2, So-1)
root(ROOT-0, consider-2)
dobj(infinity-10, what-3)
nsubj(infinity-10, infinity-4)
prep(infinity-4, minus-5)
num(thousand-7, 10-6)
dep(minus-5, thousand-7)
cop(infinity-10, is-8)
ccomp(consider-2, infinity-10)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (SBAR
        (WHADVP (WRB how) (RB long))
        (S
          (NP (PRP it))
          (VP (MD will)
            (VP (VB take)
              (S
                (VP (TO to)
                  (VP (VB pay)
                    (NP (DT the) (NN debt))))))))))
    (. .)))

nsubj('s-2, That-1)
root(ROOT-0, 's-2)
advmod(long-4, how-3)
advmod(take-7, long-4)
nsubj(take-7, it-5)
xsubj(pay-9, it-5)
aux(take-7, will-6)
ccomp('s-2, take-7)
aux(pay-9, to-8)
xcomp(take-7, pay-9)
det(debt-11, the-10)
dobj(pay-9, debt-11)

(ROOT
  (S
    (S (CC But)
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBZ 's) (RB not)
            (NP
              (NP (DT the) (NN question))
              (PP (IN at)
                (NP (NN hand)))))))
      (VP (VBZ is)
        (NP (PRP it))))
    (: ;)
    (S
      (NP (PRP it))
      (VP (VBZ 's)
        (PP (IN about)
          (NP (NN abortion)))))
    (. .)))

cc(it-10, But-1)
nsubj(question-6, that-2)
cop(question-6, 's-3)
neg(question-6, not-4)
det(question-6, the-5)
csubj(it-10, question-6)
prep_at(question-6, hand-8)
cop(it-10, is-9)
root(ROOT-0, it-10)
nsubj('s-13, it-12)
parataxis(it-10, 's-13)
prep_about('s-13, abortion-15)

(ROOT
  (FRAG (CC And)
    (PP (IN for)
      (SBAR (IN that)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP
              (NP (RB only) (CD one) (NN question))
              (: ;)
              (SBARQ
                (WHNP (WP what))
                (SQ
                  (VP (VBZ 's)
                    (VP (VBG being)
                      (VP (VBN killed)))))
                (. ?)))))))))

root(ROOT-0, And-1)
dep(And-1, for-2)
complm(is-5, that-3)
expl(is-5, there-4)
pcomp(for-2, is-5)
advmod(question-8, only-6)
num(question-8, one-7)
nsubj(is-5, question-8)
nsubjpass(killed-13, what-10)
aux(killed-13, 's-11)
auxpass(killed-13, being-12)
dep(question-8, killed-13)

