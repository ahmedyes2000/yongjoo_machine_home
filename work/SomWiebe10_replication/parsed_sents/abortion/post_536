(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (ADJP (RB just) (JJ thankful)
        (SBAR
          (S
            (NP (PRP$ my) (NN mother))
            (VP (VBD did) (RB n't)
              (VP (VB take)
                (NP (PRP$ my) (NN life))
                (ADVP (RB away))))))))
    (. .)))

nsubj(thankful-4, I-1)
cop(thankful-4, 'm-2)
advmod(thankful-4, just-3)
root(ROOT-0, thankful-4)
poss(mother-6, my-5)
nsubj(take-9, mother-6)
aux(take-9, did-7)
neg(take-9, n't-8)
dep(thankful-4, take-9)
poss(life-11, my-10)
dobj(take-9, life-11)
advmod(take-9, away-12)

(ROOT
  (S
    (NP
      (NP (CD One) (JJ big) (NN problem))
      (PP (IN with)
        (NP (DT this) (`` ``) (NN law) ('' ''))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBD was)
            (ADVP (RB never))
            (VP (VBN taken)
              (PP (TO to)
                (NP
                  (NP (DT the) (NNS people))
                  (PP (IN for)
                    (NP (DT a) (NN vote))))))))))
    (. .)))

num(problem-3, One-1)
amod(problem-3, big-2)
nsubj(is-9, problem-3)
det(law-7, this-5)
prep_with(problem-3, law-7)
root(ROOT-0, is-9)
complm(taken-14, that-10)
nsubjpass(taken-14, it-11)
auxpass(taken-14, was-12)
neg(taken-14, never-13)
ccomp(is-9, taken-14)
det(people-17, the-16)
prep_to(taken-14, people-17)
det(vote-20, a-19)
prep_for(people-17, vote-20)

(ROOT
  (S
    (NP
      (NP (DT A) (JJ few) (JJ old) (NNS guys))
      (PP (IN in)
        (NP (NNS robes))))
    (VP (VBD decided)
      (PP (IN for)
        (NP (PRP us)))
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (MD should)
            (VP (VB be)
              (ADJP (JJ legal)))))))
    (. .)))

det(guys-4, A-1)
amod(guys-4, few-2)
amod(guys-4, old-3)
nsubj(decided-7, guys-4)
prep_in(guys-4, robes-6)
root(ROOT-0, decided-7)
prep_for(decided-7, us-9)
complm(legal-14, that-10)
nsubj(legal-14, it-11)
aux(legal-14, should-12)
cop(legal-14, be-13)
ccomp(decided-7, legal-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP say)
      (VP (VB let)
        (S
          (NP (DT each) (NN state))
          (VP
            (VP (VB put)
              (NP (PRP it))
              (PP (TO to)
                (NP (DT the) (NNS people))))
            (, ,)
            (VP (VB like)
              (NP (NNP South) (NNP Dakota)))
            (, ,)
            (CC and)
            (VP (VB keep)
              (NP (DT the) (NNPS Feds))
              (PRT (RP out))
              (PP (IN of)
                (NP (PRP it))))))))
    (. .)))

nsubj(say-2, I-1)
root(ROOT-0, say-2)
dep(say-2, let-3)
det(state-5, each-4)
nsubj(put-6, state-5)
nsubj(like-12, state-5)
nsubj(keep-17, state-5)
ccomp(let-3, put-6)
dobj(put-6, it-7)
det(people-10, the-9)
prep_to(put-6, people-10)
ccomp(let-3, like-12)
conj_and(put-6, like-12)
nn(Dakota-14, South-13)
dobj(like-12, Dakota-14)
ccomp(let-3, keep-17)
conj_and(put-6, keep-17)
det(Feds-19, the-18)
dobj(keep-17, Feds-19)
prep_out_of(keep-17, it-22)

(ROOT
  (S
    (S
      (ADVP (RB Sid))
      (, ,)
      (NP (PRP you))
      (VP (VBP say)
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP do) (RB n't)
              (VP (VB know)
                (SBAR
                  (WHADVP (WRB when))
                  (S
                    (NP (NN life))
                    (VP (VBZ begins))))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP you))
      (VP (VBP do)
        (SBAR
          (S
            (VP (VBP know)
              (SBAR
                (S
                  (NP (PRP it))
                  (VP (VBZ 's) (RB not)
                    (PP (IN at)
                      (NP (NN conception))))))))))
      (. .))
    (. .)))

advmod(say-4, Sid-1)
nsubj(say-4, you-3)
root(ROOT-0, say-4)
nsubj(know-8, you-5)
aux(know-8, do-6)
neg(know-8, n't-7)
ccomp(say-4, know-8)
advmod(begins-11, when-9)
nsubj(begins-11, life-10)
advcl(know-8, begins-11)
nsubj(do-15, you-14)
conj_but(say-4, do-15)
ccomp(do-15, know-16)
nsubj('s-18, it-17)
ccomp(know-16, 's-18)
neg('s-18, not-19)
prep_at('s-18, conception-21)

(ROOT
  (NP (NNP ???)))

root(ROOT-0, ???-1)

(ROOT
  (SBARQ
    (WHNP (WP Which))
    (SQ (VBZ is)
      (NP (PRP it)))
    (. ?)))

attr(is-2, Which-1)
root(ROOT-0, is-2)
nsubj(is-2, it-3)

(ROOT
  (S
    (S
      (NP (PRP you))
      (VP (VBP do) (RB n't)
        (VP (VB know))))
    (CC but)
    (S
      (NP (PRP you))
      (VP (VBP do)
        (VP (VB know))))
    (. ?)))

nsubj(know-4, you-1)
aux(know-4, do-2)
neg(know-4, n't-3)
root(ROOT-0, know-4)
nsubj(know-8, you-6)
aux(know-8, do-7)
conj_but(know-4, know-8)

(ROOT
  (S
    (NP (NNP Life))
    (VP (VBZ is)
      (NP (NN life))
      (SBAR (IN whether)
        (S
          (NP (PRP we))
          (VP (VBP believe)
            (PP (IN in)
              (NP (PRP it)))))
        (CC or)
        (RB not)))
    (. .)))

nsubj(life-3, Life-1)
cop(life-3, is-2)
root(ROOT-0, life-3)
complm(believe-6, whether-4)
nsubj(believe-6, we-5)
ccomp(life-3, believe-6)
prep_in(believe-6, it-8)
ccomp(life-3, not-10)
conj_or(believe-6, not-10)

