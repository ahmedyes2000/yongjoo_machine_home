(ROOT
  (FRAG
    (INTJ (UH Okay))
    (, ,)
    (ADVP (RB then))
    (. .)))

dep(then-3, Okay-1)
root(ROOT-0, then-3)

(ROOT
  (S (CC And)
    (SBAR (IN if)
      (S
        (NP (PRP you))
        (VP (VBP see))))
    (S
      (NP (DT any) (NNS mistakes))
      (INTJ (VB please))
      (VP
        (ADVP (RB just))
        (VB skip)
        (PRT (RP over))
        (NP (DT the) (NN spelling))))
    (: ...)
    (S
      (NP (PRP$ my) (JJ backspace) (NN key))
      (VP (VBD was)
        (VP (VBN ripped)
          (PRT (RP off))
          (PP (IN through)
            (NP
              (NP (DT some) (NN freak) (NN accident))
              (PRN (-LRB- -LRB-)
                (SBAR (IN as)
                  (S
                    (VP (VBD was)
                      (NP (DT the) (NN space) (NN bar))
                      (ADVP
                        (NP (DT a) (JJ few) (NNS months))
                        (RB ago)))))
                (-RRB- -RRB-)))))))
    (. .)))

cc(skip-9, And-1)
mark(see-4, if-2)
nsubj(see-4, you-3)
dep(skip-9, see-4)
det(mistakes-6, any-5)
nsubj(skip-9, mistakes-6)
dep(skip-9, please-7)
advmod(skip-9, just-8)
root(ROOT-0, skip-9)
prt(skip-9, over-10)
det(spelling-12, the-11)
dobj(skip-9, spelling-12)
poss(key-16, my-14)
amod(key-16, backspace-15)
nsubjpass(ripped-18, key-16)
auxpass(ripped-18, was-17)
parataxis(skip-9, ripped-18)
prt(ripped-18, off-19)
det(accident-23, some-21)
nn(accident-23, freak-22)
prep_through(ripped-18, accident-23)
mark(bar-29, as-25)
cop(bar-29, was-26)
det(bar-29, the-27)
nn(bar-29, space-28)
dep(accident-23, bar-29)
det(months-32, a-30)
amod(months-32, few-31)
npadvmod(ago-33, months-32)
advmod(bar-29, ago-33)

(ROOT
  (S
    (S
      (S
        (VP (TO To)
          (VP (VB use)
            (NP (PRP$ your) (NN argument)))))
      (, ,)
      (S
        (VP (VBG sorry)
          (PP (IN for)
            (NP (DT the) (NN fetus))))))
    (, ,)
    (CC but)
    (S
      (NP (NN nature))
      (VP (VBD designed)
        (NP (PRP it))
        (SBAR (IN that)
          (S
            (NP (DT the) (NN fetus))
            (VP (MD could) (RB n't)
              (VP (VB live)
                (PP (IN outside)
                  (NP (DT the) (NN womb)))))))))
    (. .)))

aux(use-2, To-1)
root(ROOT-0, use-2)
poss(argument-4, your-3)
dobj(use-2, argument-4)
dep(use-2, sorry-6)
det(fetus-9, the-8)
prep_for(sorry-6, fetus-9)
nsubj(designed-13, nature-12)
conj_but(use-2, designed-13)
dobj(designed-13, it-14)
complm(live-20, that-15)
det(fetus-17, the-16)
nsubj(live-20, fetus-17)
aux(live-20, could-18)
neg(live-20, n't-19)
ccomp(designed-13, live-20)
det(womb-23, the-22)
prep_outside(live-20, womb-23)

(ROOT
  (S (RB Not)
    (NP (PRP$ my))
    (VP (VBP fault))
    (. .)))

neg(fault-3, Not-1)
nsubj(fault-3, my-2)
root(ROOT-0, fault-3)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (ADVP (RB just))
      (NP
        (NP (NN nature))
        (VP (VBG taking)
          (NP
            (NP (PRP it) (POS 's))
            (NN course)))))
    (. .)))

nsubj(nature-4, That-1)
cop(nature-4, 's-2)
advmod(nature-4, just-3)
root(ROOT-0, nature-4)
partmod(nature-4, taking-5)
poss(course-8, it-6)
dobj(taking-5, course-8)

(ROOT
  (S ('' '')
    (S
      (NP (PRP I))
      (VP (VBP 'm) (RB not)
        (ADJP (JJ obligated)
          (S
            (VP (TO to)
              (VP (VB save)
                (NP (DT a) (NN life))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP I))
      (VP (VBP am)
        (VP (VBN obligated)
          (S (RB not)
            (VP (TO to)
              (VP (VB take)
                (NP (CD one))))))))
    (. .)))

nsubj(obligated-5, I-2)
cop(obligated-5, 'm-3)
neg(obligated-5, not-4)
root(ROOT-0, obligated-5)
aux(save-7, to-6)
xcomp(obligated-5, save-7)
det(life-9, a-8)
dobj(save-7, life-9)
nsubjpass(obligated-14, I-12)
xsubj(take-17, I-12)
auxpass(obligated-14, am-13)
conj_but(obligated-5, obligated-14)
neg(take-17, not-15)
aux(take-17, to-16)
xcomp(obligated-14, take-17)
dobj(take-17, one-18)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ s)
      (NP (DT a) (JJ huge) (NN difference)))
    (. .)))

expl(s-2, There-1)
root(ROOT-0, s-2)
det(difference-5, a-3)
amod(difference-5, huge-4)
nsubj(s-2, difference-5)

(ROOT
  (S ('' '')
    (NP (DT This))
    (VP (VBZ is)
      (SBAR
        (WHNP (WP what))
        (S
          (NP (PRP you))
          (VP (VBD said)))))
    (. .)))

nsubj(is-3, This-2)
root(ROOT-0, is-3)
dobj(said-6, what-4)
nsubj(said-6, you-5)
ccomp(is-3, said-6)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (SBAR
        (WHADVP (WRB why))
        (S
          (NP (PRP I))
          (VP (VBD responded)
            (SBAR (IN that)
              (S
                (NP (NN morality))
                (VP (MD ca) (RB n't)
                  (VP (VB be)
                    (VP (VBN turned)
                      (PRT (RP on)
                        (CC and)
                        (RP off))
                      (PP (TO to)
                        (NP
                          (NP (NN suit))
                          (SBAR
                            (WHNP (WDT whatever))
                            (S
                              (VP (VBZ fits)
                                (NP (PRP$ Your) (NN argument))
                                (PP (IN at)
                                  (NP (DT the) (NN time)))))))))))))))))
    (. .)))

nsubj(is-2, This-1)
root(ROOT-0, is-2)
advmod(responded-5, why-3)
nsubj(responded-5, I-4)
advcl(is-2, responded-5)
complm(turned-11, that-6)
nsubjpass(turned-11, morality-7)
aux(turned-11, ca-8)
neg(turned-11, n't-9)
auxpass(turned-11, be-10)
ccomp(responded-5, turned-11)
prt(turned-11, on-12)
dep(on-12, and-13)
dep(on-12, off-14)
prep_to(turned-11, suit-16)
nsubj(fits-18, suit-16)
rcmod(suit-16, fits-18)
poss(argument-20, Your-19)
dobj(fits-18, argument-20)
det(time-23, the-22)
prep_at(fits-18, time-23)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ
      (VP (VBD did)
        (NP (NN talk))
        (PP (IN about)
          (NP (NN nature)))))
    (. ?)))

advmod(did-2, Why-1)
root(ROOT-0, did-2)
dobj(did-2, talk-3)
prep_about(did-2, nature-5)

(ROOT
  (S (`` ``)
    (NP (PRP I))
    (VP (VBD did) (RB not)
      (VP (VB kill)
        (NP (DT that) (NN person))))
    (. .)))

nsubj(kill-5, I-2)
aux(kill-5, did-3)
neg(kill-5, not-4)
root(ROOT-0, kill-5)
det(person-7, that-6)
dobj(kill-5, person-7)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBD did) (RB n't)
        (VP (VB do)
          (NP (NN anything))
          (S
            (VP (TO to)
              (VP (VB help)
                (NP (PRP them))))))))
    (, ,)
    (CC but)
    (S
      (NP (NN nature))
      (VP (VBD took)
        (NP (PRP$ their) (NN life))
        (, ,)
        (SBAR (RB not)
          (S
            (NP (PRP me))))))
    (. .) ('' '')))

nsubj(do-4, I-1)
aux(do-4, did-2)
neg(do-4, n't-3)
root(ROOT-0, do-4)
dobj(do-4, anything-5)
aux(help-7, to-6)
xcomp(do-4, help-7)
dobj(help-7, them-8)
nsubj(took-12, nature-11)
conj_but(do-4, took-12)
poss(life-14, their-13)
dobj(took-12, life-14)
dep(me-17, not-16)
dep(took-12, me-17)

(ROOT
  (S (RB So)
    (S
      (VP
        (VP (VBG standing)
          (PP (IN by)))
        (CC and)
        (VP (VBG doing)
          (NP (NN nothing)))))
    (VP (VBZ is)
      (ADJP (RB morally) (JJ acceptable)
        (PP (TO to)
          (NP (PRP you))))
      (, ,)
      (ADVP (RB apparently)))
    (. .)))

advmod(acceptable-9, So-1)
csubj(acceptable-9, standing-2)
prep(standing-2, by-3)
conj_and(standing-2, doing-5)
csubj(acceptable-9, doing-5)
dobj(doing-5, nothing-6)
cop(acceptable-9, is-7)
advmod(acceptable-9, morally-8)
root(ROOT-0, acceptable-9)
prep_to(acceptable-9, you-11)
advmod(acceptable-9, apparently-13)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP say)
          (SBAR
            (S
              (NP (NN abortion))
              (VP (MD should)
                (VP (VB be)
                  (ADJP (JJ illegal))
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (NP (PRP I))
                      (VP (VBP hear)
                        (SBAR
                          (WHNP (WP what))
                          (S
                            (S
                              (NP (PRP you))
                              (VP (VBP 're)
                                (VP (VBG saying)
                                  (PP (IN about)
                                    (NP (DT the) (JJ late) (NN term) (NN thing))))))
                            (, ,)
                            (CC but)
                            (S
                              (NP (PRP I))
                              (VP (MD 'll)
                                (ADVP (RB just))
                                (VP (VB throw)
                                  (NP (PRP it))
                                  (PRT (RP out))
                                  (ADVP
                                    (ADVP (RB there) (RB again))
                                    (SBAR (IN that)
                                      (S
                                        (NP (JJ third) (NN term) (NNS abortions))
                                        (VP (VBP Are)
                                          (ADJP (JJ illegal)
                                            (SBAR
                                              (S
                                                (NP (PRP you))
                                                (VP (VBP are)
                                                  (VP (VBG saying)
                                                    (NP
                                                      (NP (NNS people))
                                                      (PRN (-LRB- -LRB-)
                                                        (NP (NNS women) (, ,) (NNS men) (, ,) (NN anyone))
                                                        (-RRB- -RRB-)))))))))))))))))))))))))))
    (VP (VBP do) (RB not)
      (VP (VB have)
        (NP
          (NP (NN government))
          (PP (IN over)
            (NP (PRP$ their) (JJ own) (NN body) (NNS parts))))))
    (. .)))

mark(say-3, If-1)
nsubj(say-3, you-2)
csubj(have-49, say-3)
nsubj(illegal-7, abortion-4)
aux(illegal-7, should-5)
cop(illegal-7, be-6)
ccomp(say-3, illegal-7)
dep(hear-10, which-8)
nsubj(hear-10, I-9)
ccomp(illegal-7, hear-10)
dep(saying-14, what-11)
nsubj(saying-14, you-12)
aux(saying-14, 're-13)
dep(hear-10, saying-14)
det(thing-19, the-16)
amod(thing-19, late-17)
nn(thing-19, term-18)
prep_about(saying-14, thing-19)
nsubj(throw-25, I-22)
aux(throw-25, 'll-23)
advmod(throw-25, just-24)
dep(hear-10, throw-25)
conj_but(saying-14, throw-25)
dobj(throw-25, it-26)
prt(throw-25, out-27)
advmod(again-29, there-28)
advmod(throw-25, again-29)
dep(illegal-35, that-30)
amod(abortions-33, third-31)
nn(abortions-33, term-32)
nsubj(illegal-35, abortions-33)
cop(illegal-35, Are-34)
ccomp(again-29, illegal-35)
nsubj(saying-38, you-36)
aux(saying-38, are-37)
dep(illegal-35, saying-38)
dobj(saying-38, people-39)
nn(anyone-45, women-41)
dep(anyone-45, men-43)
appos(people-39, anyone-45)
aux(have-49, do-47)
neg(have-49, not-48)
root(ROOT-0, have-49)
dobj(have-49, government-50)
poss(parts-55, their-52)
amod(parts-55, own-53)
nn(parts-55, body-54)
prep_over(government-50, parts-55)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP 're)
      (ADVP (RB now))
      (VP (VBG trying)
        (S
          (VP (TO to)
            (VP (VB change)
              (NP (PRP it)))))))
    (. .)))

nsubj(trying-4, You-1)
xsubj(change-6, You-1)
aux(trying-4, 're-2)
advmod(trying-4, now-3)
root(ROOT-0, trying-4)
aux(change-6, to-5)
xcomp(trying-4, change-6)
dobj(change-6, it-7)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm) (RB not)
      (VP (VBG twisting)
        (NP (NN anything))))
    (: ...)))

nsubj(twisting-4, I-1)
aux(twisting-4, 'm-2)
neg(twisting-4, not-3)
root(ROOT-0, twisting-4)
dobj(twisting-4, anything-5)

(ROOT
  (INTJ (UH .)))


(ROOT
  (S
    (NP (PRP you))
    (VP (VBP 're)
      (VP (VBG changing)
        (NP (PRP$ your) (NNS words))
        (S
          (VP (TO to)
            (VP (VB suit)
              (NP (PRP yourself)))))))
    (. .)))

nsubj(changing-3, you-1)
aux(changing-3, 're-2)
root(ROOT-0, changing-3)
poss(words-5, your-4)
dobj(changing-3, words-5)
aux(suit-7, to-6)
xcomp(changing-3, suit-7)
dobj(suit-7, yourself-8)

(ROOT
  (S
    (VP
      (ADVP (CC But)))
    (. .)))

root(ROOT-0, But-1)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB answer)
          (NP (PRP$ your) (NN question)))))
    (, ,)
    (NP (PRP you))
    (VP (VBP do) (RB not)
      (VP (VB have)
        (NP (DT that) (NN right))))
    (. .)))

aux(answer-2, To-1)
purpcl(have-9, answer-2)
poss(question-4, your-3)
dobj(answer-2, question-4)
nsubj(have-9, you-6)
aux(have-9, do-7)
neg(have-9, not-8)
root(ROOT-0, have-9)
det(right-11, that-10)
dobj(have-9, right-11)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP are)
          (VP (VBG going)
            (S
              (VP (TO to)
                (VP (VB force)
                  (NP (DT a) (NN woman)
                    (S
                      (VP (TO to)
                        (VP (VB go)
                          (PP (IN through)
                            (NP (DT a) (JJ dangerous) (NN process)))
                          (SBAR (IN because)
                            (S
                              (ADVP (RB otherwise))
                              (NP (DT another) (NN person))
                              (VP (MD will)
                                (VP (VB die))))))))))))))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ is)
      (ADJP (RB equally) (JJ moral))
      (S
        (VP (TO to)
          (VP (VB force)
            (S
              (NP (NN anyone) (RB else))
              (VP (TO to)
                (VP (VB go)
                  (PP (IN through)
                    (NP (DT a) (JJ dangerous) (NN process)))))))))
      (SBAR (IN because)
        (S
          (ADVP (RB otherwise))
          (NP (DT a) (NN person))
          (VP (MD will)
            (VP (VB die))))))
    (. .)))

mark(going-4, If-1)
nsubj(going-4, you-2)
xsubj(force-6, you-2)
aux(going-4, are-3)
advcl(moral-25, going-4)
aux(force-6, to-5)
xcomp(going-4, force-6)
det(woman-8, a-7)
dobj(force-6, woman-8)
aux(go-10, to-9)
infmod(woman-8, go-10)
det(process-14, a-12)
amod(process-14, dangerous-13)
prep_through(go-10, process-14)
mark(die-20, because-15)
advmod(die-20, otherwise-16)
det(person-18, another-17)
nsubj(die-20, person-18)
aux(die-20, will-19)
advcl(go-10, die-20)
nsubj(moral-25, it-22)
xsubj(force-27, it-22)
cop(moral-25, is-23)
advmod(moral-25, equally-24)
root(ROOT-0, moral-25)
aux(force-27, to-26)
xcomp(moral-25, force-27)
nsubj(go-31, anyone-28)
advmod(anyone-28, else-29)
aux(go-31, to-30)
xcomp(force-27, go-31)
det(process-35, a-33)
amod(process-35, dangerous-34)
prep_through(go-31, process-35)
mark(die-41, because-36)
advmod(die-41, otherwise-37)
det(person-39, a-38)
nsubj(die-41, person-39)
aux(die-41, will-40)
advcl(moral-25, die-41)

(ROOT
  (S
    (NP (PRP$ Your) (NN logic))
    (VP (VBZ says)
      (SBAR (IN that)
        (S
          (NP (DT a) (NN woman))
          (VP (MD can) (RB not)
            (VP (VB retain)
              (NP (DT the) (NNS rights))
              (PP (TO to)
                (NP (PRP$ her) (NN uterus)))
              (SBAR (IN because)
                (S
                  (SBAR (IN if)
                    (S
                      (NP (PRP she))
                      (VP (VBZ does) (RB n't)
                        (VP (VB use)
                          (S
                            (NP (DT those) (NNS parts))
                            (VP (TO to)
                              (VP (VB give)
                                (NP (NN life)))))))))
                  (, ,)
                  (NP (PRP she))
                  (VP (VBZ is)
                    (ADJP (JJ immoral))))))))))
    (. .)))

poss(logic-2, Your-1)
nsubj(says-3, logic-2)
root(ROOT-0, says-3)
complm(retain-9, that-4)
det(woman-6, a-5)
nsubj(retain-9, woman-6)
aux(retain-9, can-7)
neg(retain-9, not-8)
ccomp(says-3, retain-9)
det(rights-11, the-10)
dobj(retain-9, rights-11)
poss(uterus-14, her-13)
prep_to(retain-9, uterus-14)
mark(immoral-29, because-15)
mark(use-20, if-16)
nsubj(use-20, she-17)
aux(use-20, does-18)
neg(use-20, n't-19)
advcl(immoral-29, use-20)
det(parts-22, those-21)
nsubj(give-24, parts-22)
aux(give-24, to-23)
xcomp(use-20, give-24)
dobj(give-24, life-25)
nsubj(immoral-29, she-27)
cop(immoral-29, is-28)
advcl(retain-9, immoral-29)

(ROOT
  (S
    (PP (IN By)
      (NP (PRP$ your) (NN logic)))
    (, ,)
    (NP (PRP you))
    (VP (MD can) (RB not)
      (VP (VB retain)
        (NP (DT the) (NNS rights))
        (PP (TO to)
          (NP (PRP$ your) (NN body) (NNS parts)))
        (SBAR (IN because)
          (S
            (SBAR (IN if)
              (S
                (NP (PRP you))
                (VP (VBP do) (RB n't)
                  (VP (VB use)
                    (S
                      (NP (DT those) (NNS parts))
                      (VP (TO to)
                        (VP (VB give)
                          (NP (NN life)))))))))
            (NP (PRP you))
            (VP (VBP are)
              (ADJP (JJ immoral)))))))
    (. .)))

poss(logic-3, your-2)
prep_by(retain-8, logic-3)
nsubj(retain-8, you-5)
aux(retain-8, can-6)
neg(retain-8, not-7)
root(ROOT-0, retain-8)
det(rights-10, the-9)
dobj(retain-8, rights-10)
poss(parts-14, your-12)
nn(parts-14, body-13)
prep_to(retain-8, parts-14)
mark(immoral-28, because-15)
mark(use-20, if-16)
nsubj(use-20, you-17)
aux(use-20, do-18)
neg(use-20, n't-19)
advcl(immoral-28, use-20)
det(parts-22, those-21)
nsubj(give-24, parts-22)
aux(give-24, to-23)
xcomp(use-20, give-24)
dobj(give-24, life-25)
nsubj(immoral-28, you-26)
cop(immoral-28, are-27)
advcl(retain-8, immoral-28)

(ROOT
  (S
    (S
      (VP
        (VP
          (ADVP (RB Deliberately))
          (VBG killing)
          (NP (NN someone)))
        (CC and)
        (VP
          (VP
            (ADVP (RB deliberately))
            (VBG doing)
            (NP (NN nothing)))
          (CC and)
          (VP (VBG letting)
            (S
              (NP (NN someone))
              (VP (VB die)))))))
    (VP (VBZ IS)
      (NP (DT the) (JJ same) (NN thing)))
    (. .)))

advmod(killing-2, Deliberately-1)
csubj(thing-15, killing-2)
dobj(killing-2, someone-3)
advmod(doing-6, deliberately-5)
conj_and(killing-2, doing-6)
csubj(thing-15, doing-6)
dobj(doing-6, nothing-7)
conj_and(killing-2, letting-9)
conj_and(doing-6, letting-9)
nsubj(die-11, someone-10)
ccomp(letting-9, die-11)
cop(thing-15, IS-12)
det(thing-15, the-13)
amod(thing-15, same-14)
root(ROOT-0, thing-15)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBD thought)
      (PP (IN about)
        (NP
          (NP (DT the) (NNS actions))
          (CC and)
          (NP (DT the) (NNS consequences))))
      (PP
        (ADVP (RB beforehand))
        (IN for)
        (NP
          (NP (DT each))
          (PP (IN of)
            (NP (DT those) (NNS things))))))
    (. .)))

nsubj(thought-2, You-1)
root(ROOT-0, thought-2)
det(actions-5, the-4)
prep_about(thought-2, actions-5)
det(consequences-8, the-7)
prep_about(thought-2, consequences-8)
conj_and(actions-5, consequences-8)
advmod(thought-2, beforehand-9)
prep_for(thought-2, each-11)
det(things-14, those-13)
prep_of(each-11, things-14)

(ROOT
  (S
    (NP (WDT Which))
    (VP (VBZ means)
      (SBAR
        (S
          (NP (PRP you))
          (VP (MD should) (RB not)
            (VP (VB have)
              (NP
                (NP (NN government))
                (PP (IN over)
                  (NP
                    (NP (DT any))
                    (PP (IN of)
                      (NP (PRP$ your) (NN body) (NNS parts)))))))))))
    (. .)))

nsubj(means-2, Which-1)
root(ROOT-0, means-2)
nsubj(have-6, you-3)
aux(have-6, should-4)
neg(have-6, not-5)
ccomp(means-2, have-6)
dobj(have-6, government-7)
prep_over(government-7, any-9)
poss(parts-13, your-11)
nn(parts-13, body-12)
prep_of(any-9, parts-13)

(ROOT
  (S
    (NP (PRP You))
    (VP
      (VP (VBD weighed)
        (NP (PRP$ your) (NNS options)))
      (CC and)
      (VP (VBD made)
        (NP (DT a) (NN decision))))
    (. .)))

nsubj(weighed-2, You-1)
nsubj(made-6, You-1)
root(ROOT-0, weighed-2)
poss(options-4, your-3)
dobj(weighed-2, options-4)
conj_and(weighed-2, made-6)
det(decision-8, a-7)
dobj(made-6, decision-8)

(ROOT
  (S
    (NP
      (NP (DT The) (VBG deciding) (NN factor))
      (PP (IN in)
        (NP (DT each) (NN case))))
    (VP (VBZ is)
      (NP (PRP you)))
    (. .)))

det(factor-3, The-1)
amod(factor-3, deciding-2)
nsubj(you-8, factor-3)
det(case-6, each-5)
prep_in(factor-3, case-6)
cop(you-8, is-7)
root(ROOT-0, you-8)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (S
          (NP
            (NP (DT all))
            (SBAR
              (S
                (NP (PRP you))
                (VP (VBP have)
                  (S
                    (VP (TO to)
                      (VP (VB do))))))))
          (VP (VBZ is)
            (VP (VB push)
              (NP (DT a) (NN button)
                (S
                  (VP (TO to)
                    (VP (VB save)
                      (NP (DT a) (NN life)))))))))
        (CC and)
        (S
          (S
            (NP (PRP you))
            (VP (VBP know)
              (NP (PRP it))
              (SBAR
                (S
                  (NP (PRP you))
                  (VP (VBP see)
                    (S
                      (NP (PRP it))
                      (VP (VBG happening)
                        (SBAR
                          (S
                            (NP (PRP you))
                            (VP (MD can)
                              (VP (VB push)
                                (NP (DT the) (NN button)))))))))))))
          (CC but)
          (S
            (NP (PRP you))
            (VP (VBP do) (RB n't))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (ADVP (RB deliberately))
      (VP (VBG killing)
        (NP (DT that) (NN person))))
    (. .)))

mark(push-8, If-1)
dobj(have-4, all-2)
nsubj(push-8, all-2)
nsubj(have-4, you-3)
xsubj(do-6, you-3)
rcmod(all-2, have-4)
aux(do-6, to-5)
xcomp(have-4, do-6)
aux(push-8, is-7)
advcl(killing-36, push-8)
det(button-10, a-9)
dobj(push-8, button-10)
aux(save-12, to-11)
infmod(button-10, save-12)
det(life-14, a-13)
dobj(save-12, life-14)
nsubj(know-17, you-16)
conj_and(push-8, know-17)
advcl(killing-36, know-17)
dobj(know-17, it-18)
nsubj(see-20, you-19)
dep(know-17, see-20)
nsubj(happening-22, it-21)
dep(see-20, happening-22)
nsubj(push-25, you-23)
aux(push-25, can-24)
ccomp(happening-22, push-25)
det(button-27, the-26)
dobj(push-25, button-27)
nsubj(do-30, you-29)
conj_and(push-8, do-30)
conj_but(know-17, do-30)
neg(do-30, n't-31)
nsubj(killing-36, you-33)
aux(killing-36, are-34)
advmod(killing-36, deliberately-35)
root(ROOT-0, killing-36)
det(person-38, that-37)
dobj(killing-36, person-38)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP
          (NP (DT all))
          (SBAR
            (S
              (NP (PRP you))
              (VP (VBP have)
                (S
                  (VP (TO to)
                    (VP (VB do))))))))
        (VP (VBZ is)
          (VP (VB push)
            (S
              (S
                (NP (DT a) (NN button)
                  (CC and)
                  (NN someone))
                (VP (VBZ dies)
                  (SBAR
                    (S
                      (NP (PRP you))
                      (VP (VBP know)
                        (NP (DT this)))))))
              (CC and)
              (S
                (NP (PRP you))
                (VP (VBP push)
                  (NP (PRP it)))))))))
    (, ,)
    (NP (PRP you))
    (VP (VBP are)
      (ADVP (RB deliberately))
      (VP (VBG killing)
        (NP (DT that) (NN person))))
    (. .)))

mark(push-8, If-1)
dobj(have-4, all-2)
nsubj(push-8, all-2)
nsubj(have-4, you-3)
xsubj(do-6, you-3)
rcmod(all-2, have-4)
aux(do-6, to-5)
xcomp(have-4, do-6)
aux(push-8, is-7)
advcl(killing-25, push-8)
det(button-10, a-9)
nsubj(dies-13, button-10)
conj_and(button-10, someone-12)
nsubj(dies-13, someone-12)
dep(push-8, dies-13)
nsubj(know-15, you-14)
ccomp(dies-13, know-15)
dobj(know-15, this-16)
nsubj(push-19, you-18)
dep(push-8, push-19)
conj_and(dies-13, push-19)
dobj(push-19, it-20)
nsubj(killing-25, you-22)
aux(killing-25, are-23)
advmod(killing-25, deliberately-24)
root(ROOT-0, killing-25)
det(person-27, that-26)
dobj(killing-25, person-27)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP (DT no) (NN difference)))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(difference-4, no-3)
nsubj(is-2, difference-4)

(ROOT
  (S
    (NP (PRP$ Your) (NN decision))
    (VP (MD will)
      (VP (VB kill)
        (NP (DT a) (NN person))))
    (. .)))

poss(decision-2, Your-1)
nsubj(kill-4, decision-2)
aux(kill-4, will-3)
root(ROOT-0, kill-4)
det(person-6, a-5)
dobj(kill-4, person-6)

(ROOT
  (S ('' '')
    (NP (NNP Do) (NNP I))
    (VP (VBP risk)
      (NP (PRP$ my) (JJ own) (NN life))
      (PP (IN by)
        (S
          (VP (VBG undergoing)
            (NP (JJ major) (NN surgery))))))
    (. ?)))

nn(I-3, Do-2)
nsubj(risk-4, I-3)
root(ROOT-0, risk-4)
poss(life-7, my-5)
amod(life-7, own-6)
dobj(risk-4, life-7)
prepc_by(risk-4, undergoing-9)
amod(surgery-11, major-10)
dobj(undergoing-9, surgery-11)

(ROOT
  (FRAG ('' '')
    (NP (NNP Is))
    (PP
      (ADVP (RB there)
        (NP (DT no) (NN risk)))
      (IN in)
      (NP (NN pregnancy)))
    (. ?)))

root(ROOT-0, Is-2)
advmod(in-6, there-3)
det(risk-5, no-4)
pobj(there-3, risk-5)
dep(Is-2, in-6)
pobj(in-6, pregnancy-7)

(ROOT
  (S (`` ``)
    (S
      (NP (NNP Am) (NNP I))
      (ADJP (JJ willing)
        (S
          (VP (TO to)
            (VP (VB live)
              (NP (PRP$ my) (NN life))
              (PP (IN with)
                (NP (RB only) (CD one) (NN kidney))))))))
    (CC and)
    (, ,)
    (PRN
      (SINV (MD should)
        (NP (DT the) (JJ other))
        (VP (VB be)
          (VP (VBN damaged)
            (PP (IN by)
              (NP
                (NP (DT any) (NN number))
                (PP (IN of)
                  (NP (NNS things)))))))))
    (, ,)
    (S
      (ADJP (RB potentially) (JJ die)))
    (. ?)))

nn(I-3, Am-2)
dep(willing-4, I-3)
root(ROOT-0, willing-4)
aux(live-6, to-5)
xcomp(willing-4, live-6)
poss(life-8, my-7)
dobj(live-6, life-8)
advmod(kidney-12, only-10)
num(kidney-12, one-11)
prep_with(live-6, kidney-12)
aux(damaged-19, should-15)
det(other-17, the-16)
nsubjpass(damaged-19, other-17)
auxpass(damaged-19, be-18)
dep(willing-4, damaged-19)
det(number-22, any-21)
agent(damaged-19, number-22)
prep_of(number-22, things-24)
advmod(die-27, potentially-26)
ccomp(willing-4, die-27)
conj_and(willing-4, die-27)

(ROOT
  (FRAG ('' '')
    (NP (NNP Is))
    (PP
      (ADVP (RB there)
        (NP (DT no) (NN potential)))
      (IN for)
      (NP
        (NP (NN death))
        (PP (IN in)
          (NP (NN pregnancy)))))
    (. ?)))

root(ROOT-0, Is-2)
advmod(for-6, there-3)
det(potential-5, no-4)
pobj(there-3, potential-5)
dep(Is-2, for-6)
pobj(for-6, death-7)
prep_in(death-7, pregnancy-9)

(ROOT
  (S
    (NP
      (NP (DT The) (NN fact))
      (SBAR (IN that)
        (S
          (NP (EX there))
          (VP (VBZ is)
            (NP (DT a) (JJ potential) (NN life))))))
    (VP (VBZ means)
      (NP (NN nothing)))
    (. .)))

det(fact-2, The-1)
nsubj(means-9, fact-2)
complm(is-5, that-3)
expl(is-5, there-4)
dep(fact-2, is-5)
det(life-8, a-6)
amod(life-8, potential-7)
nsubj(is-5, life-8)
root(ROOT-0, means-9)
dobj(means-9, nothing-10)

(ROOT
  (SQ (MD Can)
    (NP (PRP we))
    (VP (RB not) (VB be)
      (VP (VBN damaged)
        (ADVP (RB irreparably))
        (PP (IN during)
          (NP
            (NP (NN pregnancy))
            (SBAR
              (S (-LRB- -LRB-)
                (NP (PRP I))
                (VP (VBP 'm)
                  (ADVP (RB just))
                  (VP (VBG assuming)
                    (SBAR
                      (S
                        (NP (PRP you))
                        (VP (VBP 're)
                          (NP (DT a) (NN woman)))))))))))))
    (. .)))

aux(damaged-5, Can-1)
nsubjpass(damaged-5, we-2)
neg(damaged-5, not-3)
auxpass(damaged-5, be-4)
root(ROOT-0, damaged-5)
advmod(damaged-5, irreparably-6)
prep_during(damaged-5, pregnancy-8)
nsubj(assuming-13, I-10)
aux(assuming-13, 'm-11)
advmod(assuming-13, just-12)
rcmod(pregnancy-8, assuming-13)
nsubj(woman-17, you-14)
cop(woman-17, 're-15)
det(woman-17, a-16)
ccomp(assuming-13, woman-17)

(ROOT
  (SQ
    (VP (VB Forgive)
      (ADVP (PRP me))
      (SBAR (IN if)
        (S
          (NP (PRP I))
          (VP (VBP 'm)
            (ADJP (JJ wrong)))))
      (-RRB- -RRB-))
    (. ?)))

root(ROOT-0, Forgive-1)
advmod(Forgive-1, me-2)
mark(wrong-6, if-3)
nsubj(wrong-6, I-4)
cop(wrong-6, 'm-5)
advcl(Forgive-1, wrong-6)

(ROOT
  (S (`` ``)
    (SBAR
      (NP (WP What))
      (IN if)
      (S
        (NP (PRP I))
        (VP (VBP give)
          (PRT (RP up))
          (NP
            (NP (PRP$ my) (NN kidney))
            (CC and)
            (RB then)
            (NP
              (NP (DT a) (NN member))
              (PP (IN of)
                (NP (PRP$ my) (NN family))))))))
    (VP (VBZ needs)
      (NP (CD one)))
    (. ?)))

dep(give-5, What-2)
dep(give-5, if-3)
nsubj(give-5, I-4)
csubj(needs-16, give-5)
prt(give-5, up-6)
poss(kidney-8, my-7)
dobj(give-5, kidney-8)
dobj(give-5, then-10)
advmod(kidney-8, then-10)
conj_and(kidney-8, then-10)
det(member-12, a-11)
dep(kidney-8, member-12)
poss(family-15, my-14)
prep_of(member-12, family-15)
root(ROOT-0, needs-16)
dobj(needs-16, one-17)

(ROOT
  (S ('' '')
    (S
      (NP (DT No) (NN one))
      (VP (VBZ has)
        (NP
          (NP (NNS rights))
          (PP (TO to)
            (NP (PRP$ their) (NN body))))))
    (, ,)
    (VP (VBP remember))
    (. ?)))

det(one-3, No-2)
nsubj(has-4, one-3)
ccomp(remember-10, has-4)
dobj(has-4, rights-5)
poss(body-8, their-7)
prep_to(rights-5, body-8)
root(ROOT-0, remember-10)

(ROOT
  (S
    (NP (NN Someone) (RB else))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN forced)
          (S
            (VP (TO to)
              (VP (VB give)
                (NP (PRP$ your) (NN family) (NN member))
                (NP (DT a) (NN kidney))))))))
    (. .)))

nsubjpass(forced-5, Someone-1)
advmod(Someone-1, else-2)
aux(forced-5, will-3)
auxpass(forced-5, be-4)
root(ROOT-0, forced-5)
aux(give-7, to-6)
xcomp(forced-5, give-7)
poss(member-10, your-8)
nn(member-10, family-9)
dep(give-7, member-10)
det(kidney-12, a-11)
dobj(give-7, kidney-12)

(ROOT
  (S ('' '')
    (NP (PRP I))
    (ADVP (RB never))
    (VP (VBD said)
      (SBAR
        (S
          (NP (PRP it))
          (VP (VBD was)
            (ADJP (RB perfectly) (JJ moral)
              (S
                (VP (TO to)
                  (VP
                    (VP (VB sit)
                      (PP (IN by)))
                    (CC and)
                    (VP (VB do)
                      (NP (NN nothing))
                      (SBAR
                        (SBAR
                          (WHADVP (WRB when))
                          (S
                            (NP (PRP I))
                            (VP (MD could)
                              (VP (VB be)
                                (VP (VBG saving)
                                  (NP (DT a) (NN life)))))))
                        (, ,)
                        (CC but)
                        (SBAR (IN that)
                          (S
                            (NP (NN doesn) (NN t))
                            (VP (VBP mean)
                              (S
                                (NP (PRP I))
                                (VP (VB m)
                                  (VP (VBN compelled)
                                    (S
                                      (VP (TO to)
                                        (VP (VB have)
                                          (NP (PDT all) (PRP$ my) (JJ spare) (NN body) (NNS parts))
                                          (ADVP (RB out)))))))))))))))))))))
    (. .)))

nsubj(said-4, I-2)
neg(said-4, never-3)
root(ROOT-0, said-4)
nsubj(moral-8, it-5)
cop(moral-8, was-6)
advmod(moral-8, perfectly-7)
ccomp(said-4, moral-8)
aux(sit-10, to-9)
xcomp(moral-8, sit-10)
prep(sit-10, by-11)
xcomp(moral-8, do-13)
conj_and(sit-10, do-13)
dobj(do-13, nothing-14)
advmod(saving-19, when-15)
nsubj(saving-19, I-16)
aux(saving-19, could-17)
aux(saving-19, be-18)
ccomp(do-13, saving-19)
det(life-21, a-20)
dobj(saving-19, life-21)
complm(mean-27, that-24)
nn(t-26, doesn-25)
nsubj(mean-27, t-26)
ccomp(do-13, mean-27)
conj_but(saving-19, mean-27)
nsubj(m-29, I-28)
xsubj(have-32, I-28)
ccomp(mean-27, m-29)
dep(m-29, compelled-30)
aux(have-32, to-31)
xcomp(compelled-30, have-32)
predet(parts-37, all-33)
poss(parts-37, my-34)
amod(parts-37, spare-35)
nn(parts-37, body-36)
dobj(have-32, parts-37)
advmod(have-32, out-38)

(ROOT
  (S ('' '')
    (ADVP (RB Well))
    (, ,)
    (ADVP (RB actually))
    (NP (PRP you))
    (VP (VBD did)
      (SBAR
        (S
          (VP (VBP say)
            (SBAR (IN that)
              (S
                (NP (PRP you))
                (VP (VBD were)
                  (VP (VBN obligated)
                    (S
                      (VP (TO to)
                        (VP (VB save)
                          (NP (DT a) (NN life)))))))))))))
    (. .)))

advmod(did-6, Well-2)
advmod(did-6, actually-4)
nsubj(did-6, you-5)
root(ROOT-0, did-6)
ccomp(did-6, say-7)
complm(obligated-11, that-8)
nsubjpass(obligated-11, you-9)
xsubj(save-13, you-9)
auxpass(obligated-11, were-10)
ccomp(say-7, obligated-11)
aux(save-13, to-12)
xcomp(obligated-11, save-13)
det(life-15, a-14)
dobj(save-13, life-15)

(ROOT
  (SBARQ
    (FRAG (CC But)
      (NP
        (NP (DT that))
        (ADVP (RB aside))))
    (, ,)
    (SBARQ
      (WHADVP (WRB why))
      (SQ (MD should)
        (NP (DT a) (NN woman))
        (VP (VB be)
          (VP (VBN compelled)
            (S
              (VP (TO to)
                (VP (VB use)
                  (NP (PRP$ her) (NN body) (NNS parts))
                  (S
                    (VP (TO to)
                      (VP (VB sustain)
                        (S
                          (NP
                            (NP (DT the) (NN life))
                            (PP (IN of)
                              (NP (NN someone))))
                          (ADJP (RB else))
                          (SBAR (IN if)
                            (S
                              (NP (PRP she))
                              (VP (VBZ does) (RB n't)
                                (VP (VB want)
                                  (PP (TO to)
                                    (ADVP (RB so))))))))))))))))))
    (. ?)))

dep(that-2, But-1)
dep(compelled-10, that-2)
advmod(that-2, aside-3)
advmod(compelled-10, why-5)
aux(compelled-10, should-6)
det(woman-8, a-7)
nsubjpass(compelled-10, woman-8)
auxpass(compelled-10, be-9)
root(ROOT-0, compelled-10)
aux(use-12, to-11)
xcomp(compelled-10, use-12)
poss(parts-15, her-13)
nn(parts-15, body-14)
dobj(use-12, parts-15)
aux(sustain-17, to-16)
xcomp(use-12, sustain-17)
det(life-19, the-18)
nsubj(want-27, life-19)
prep_of(life-19, someone-21)
dep(want-27, else-22)
mark(want-27, if-23)
nsubj(want-27, she-24)
aux(want-27, does-25)
neg(want-27, n't-26)
xcomp(sustain-17, want-27)
prep(want-27, to-28)
pcomp(to-28, so-29)

(ROOT
  (S
    (ADVP (RB So))
    (, ,)
    (NP (PRP I))
    (VP (VBP 've)
      (VP (VBN answered)
        (NP (PRP$ your) (NN question))
        (SBAR (CC but)
          (S
            (NP (PRP you))
            (VP (VBP 've)
              (ADVP (RB yet))
              (S
                (VP (TO to)
                  (VP (VB answer)
                    (FRAG
                      (X (SYM \*))
                      (NP (DT the) (JJ \*) (NN question)))))))))
        (: :)
        (SQ (VBP Do)
          (NP (PRP you))
          (VP (VB have)
            (NP (DT the) (NN right)
              (S
                (VP (TO to)
                  (VP (VB govern)
                    (NP (PRP$ your) (JJ own) (NN body))))))))))
    (. ?)))

advmod(answered-5, So-1)
nsubj(answered-5, I-3)
aux(answered-5, 've-4)
root(ROOT-0, answered-5)
poss(question-7, your-6)
dobj(answered-5, question-7)
cc('ve-10, but-8)
nsubj('ve-10, you-9)
xsubj(answer-13, you-9)
dep(answered-5, 've-10)
advmod('ve-10, yet-11)
aux(answer-13, to-12)
xcomp('ve-10, answer-13)
dep(question-17, \*-14)
det(question-17, the-15)
amod(question-17, \*-16)
dep(answer-13, question-17)
aux(have-21, Do-19)
nsubj(have-21, you-20)
parataxis(answered-5, have-21)
det(right-23, the-22)
dobj(have-21, right-23)
aux(govern-25, to-24)
infmod(right-23, govern-25)
poss(body-28, your-26)
amod(body-28, own-27)
dobj(govern-25, body-28)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (NP (DT the) (JJ only) (NN answer))
      (SBAR
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP need)
              (S
                (VP (TO to)
                  (VP (VB give)
                    (PP (IN in)
                      (NP (DT this) (NN argument)))))))))
        (CC and)
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ 's)
              (NP
                (NP (DT the) (JJ only) (NN one))
                (SBAR
                  (S
                    (NP (PRP I))
                    (VP (VBP 'm)
                      (VP (VBG asking)
                        (S
                          (NP (PRP you))
                          (VP (TO to)
                            (VP (VB answer))))))))))))))
    (. .)))

nsubj(answer-5, That-1)
cop(answer-5, 's-2)
det(answer-5, the-3)
amod(answer-5, only-4)
root(ROOT-0, answer-5)
nsubj(need-7, you-6)
xsubj(give-9, you-6)
dep(answer-5, need-7)
aux(give-9, to-8)
xcomp(need-7, give-9)
det(argument-12, this-11)
prep_in(give-9, argument-12)
nsubj(one-18, that-14)
cop(one-18, 's-15)
det(one-18, the-16)
amod(one-18, only-17)
dep(answer-5, one-18)
conj_and(need-7, one-18)
dobj(asking-21, one-18)
nsubj(asking-21, I-19)
aux(asking-21, 'm-20)
rcmod(one-18, asking-21)
nsubj(answer-24, you-22)
aux(answer-24, to-23)
xcomp(asking-21, answer-24)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD would) (RB not)
      (VP (VB matter)
        (SBAR (IN if)
          (S
            (NP (NNS men))
            (VP (MD could)
              (VP (VB carry)
                (NP (DT a) (NN fetus))))))))
    (. .)))

nsubj(matter-4, It-1)
aux(matter-4, would-2)
neg(matter-4, not-3)
root(ROOT-0, matter-4)
mark(carry-8, if-5)
nsubj(carry-8, men-6)
aux(carry-8, could-7)
advcl(matter-4, carry-8)
det(fetus-10, a-9)
dobj(carry-8, fetus-10)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ does) (RB n't)
      (VP (VB matter)
        (SBAR (IN if)
          (S
            (NP (PRP we))
            (VP (VBP 're)
              (VP (VBG talking)
                (PP (IN about)
                  (NP
                    (NP (VBN forced) (NN birth))
                    (CC or)
                    (NP
                      (NP (DT the) (VBN forced) (NN donation))
                      (PP (IN of)
                        (NP (NNS kidneys)
                          (CC or)
                          (NN bone) (NN marrow))))))))))))
    (. .)))

nsubj(matter-4, It-1)
aux(matter-4, does-2)
neg(matter-4, n't-3)
root(ROOT-0, matter-4)
mark(talking-8, if-5)
nsubj(talking-8, we-6)
aux(talking-8, 're-7)
advcl(matter-4, talking-8)
amod(birth-11, forced-10)
prep_about(talking-8, birth-11)
det(donation-15, the-13)
amod(donation-15, forced-14)
prep_about(talking-8, donation-15)
conj_or(birth-11, donation-15)
prep_of(donation-15, kidneys-17)
nn(marrow-20, bone-19)
prep_of(donation-15, marrow-20)
conj_or(kidneys-17, marrow-20)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ 's) (RB not)
        (NP (DT a) (NN debate))
        (SBAR (IN that)
          (S
            (NP (DT those) (NNS things))
            (`` ``)
            (VP (VB save))))))
    ('' '')
    (VP (VBZ lives))
    (. .)))

nsubj(debate-5, It-1)
cop(debate-5, 's-2)
neg(debate-5, not-3)
det(debate-5, a-4)
ccomp(lives-12, debate-5)
csubj(lives-12, debate-5)
complm(save-10, that-6)
det(things-8, those-7)
nsubj(save-10, things-8)
ccomp(debate-5, save-10)
root(ROOT-0, lives-12)

(ROOT
  (SQ (VBP Do)
    (NP (PRP you))
    (VP (VB have)
      (NP (DT the) (NN right)
        (S
          (VP (TO to)
            (VP (VB govern)
              (NP (PRP$ your) (JJ own) (NN body)))))))
    (. ?)))

aux(have-3, Do-1)
nsubj(have-3, you-2)
root(ROOT-0, have-3)
det(right-5, the-4)
dobj(have-3, right-5)
aux(govern-7, to-6)
infmod(right-5, govern-7)
poss(body-10, your-8)
amod(body-10, own-9)
dobj(govern-7, body-10)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is) (RB n't)
      (NP
        (NP
          (NP (DT a) (NN woman) (POS 's))
          (NN issue))
        (PP (IN for)
          (NP (DT this) (JJ very) (NN reason)))))
    (. .)))

nsubj(issue-7, This-1)
cop(issue-7, is-2)
neg(issue-7, n't-3)
det(woman-5, a-4)
poss(issue-7, woman-5)
root(ROOT-0, issue-7)
det(reason-11, this-9)
amod(reason-11, very-10)
prep_for(issue-7, reason-11)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (NN abortion))
        (VP (VBZ is)
          (ADJP (JJ illegal)))))
    (, ,)
    (S
      (ADVP (RB not) (RB only))
      (VP (VBZ is)
        (NP (PRP it)))
      (NP
        (NP (NNS women))
        (SBAR
          (WHNP (WP who))
          (S
            (VP (VBP do) (RB n't)
              (VP (VB have)
                (NP (DT the) (NN right)
                  (S
                    (VP (TO to)
                      (VP (VB govern)
                        (NP (PRP$ their) (NNS bodies))))))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ follows)
        (SBAR (IN that)
          (S
            (NP (DT all) (NNS people))
            (VP (VBP do) (RB not)
              (VP (VB have)
                (NP (DT that) (NN right))))))))
    (. .)))

mark(illegal-4, If-1)
nsubj(illegal-4, abortion-2)
cop(illegal-4, is-3)
advcl(it-9, illegal-4)
dep(only-7, not-6)
advmod(it-9, only-7)
cop(it-9, is-8)
root(ROOT-0, it-9)
dep(it-9, women-10)
nsubj(have-14, women-10)
aux(have-14, do-12)
neg(have-14, n't-13)
rcmod(women-10, have-14)
det(right-16, the-15)
dobj(have-14, right-16)
aux(govern-18, to-17)
infmod(right-16, govern-18)
poss(bodies-20, their-19)
dobj(govern-18, bodies-20)
nsubj(follows-24, it-23)
conj_but(it-9, follows-24)
complm(have-30, that-25)
det(people-27, all-26)
nsubj(have-30, people-27)
aux(have-30, do-28)
neg(have-30, not-29)
ccomp(follows-24, have-30)
det(right-32, that-31)
dobj(have-30, right-32)

(ROOT
  (SBARQ (RB So)
    (WHNP (WDT which))
    (SQ (VBZ is)
      (NP (PRP it)))
    (. ?)))

advmod(is-3, So-1)
attr(is-3, which-2)
root(ROOT-0, is-3)
nsubj(is-3, it-4)

(ROOT
  (S
    (NP (DT The) (NN fetus))
    (VP (VBZ is)
      (ADVP (RB literally))
      (VP (VBG living)
        (PRT (RP off))
        (NP (DT the) (NN carrier))))
    (. .)))

det(fetus-2, The-1)
nsubj(living-5, fetus-2)
aux(living-5, is-3)
advmod(living-5, literally-4)
root(ROOT-0, living-5)
prt(living-5, off-6)
det(carrier-8, the-7)
dobj(living-5, carrier-8)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (PRP you))
          (VP (VBD had)
            (NP
              (NP (DT a) (JJ grown) (NN person))
              (VP (VBN hooked)
                (PRT (RP up))
                (PP (IN through)
                  (NP
                    (NP (DT an) (NN i.v.))
                    (SBAR
                      (WHNP (WP who))
                      (S
                        (VP (MD would)
                          (VP (VB die)
                            (SBAR (IN if)
                              (S
                                (NP (DT the) (NNS cords))
                                (VP (VBD were)
                                  (VP (VBN cut))))
                              (CC and)
                              (RB only)))))))))))))
      (NP (PRP you))
      (VP (MD could)
        (VP (VB provide)
          (NP (NN life))
          (PP (TO to)
            (NP
              (NP (NN person))
              (SBAR
                (S
                  (S
                    (NP (PRP you))
                    (VP (MD would)
                      (ADVP (RB still))
                      (VP (VB retain)
                        (NP (DT the) (NN right)
                          (S
                            (VP (TO to)
                              (VP (VB say) ('' ''))))))))
                  (S
                    (INTJ (UH No))
                    (, ,)
                    (VP (VB thank)
                      (NP (PRP you)))))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP I))
      (VP (VBP think)
        (SBAR
          (S
            (NP (PRP I))
            (VP (VBP 'm)
              (ADJP (JJ fine)
                (PP (IN without)
                  (NP (PRP you)))))))))
    (. .)))

mark(had-3, If-1)
nsubj(had-3, you-2)
advcl(provide-24, had-3)
det(person-6, a-4)
amod(person-6, grown-5)
dobj(had-3, person-6)
partmod(person-6, hooked-7)
prt(hooked-7, up-8)
det(i.v.-11, an-10)
prep_through(hooked-7, i.v.-11)
nsubj(die-14, i.v.-11)
aux(die-14, would-13)
rcmod(i.v.-11, die-14)
mark(cut-19, if-15)
det(cords-17, the-16)
nsubjpass(cut-19, cords-17)
auxpass(cut-19, were-18)
advcl(die-14, cut-19)
advcl(die-14, only-21)
advmod(cut-19, only-21)
conj_and(cut-19, only-21)
nsubj(provide-24, you-22)
aux(provide-24, could-23)
root(ROOT-0, provide-24)
dobj(provide-24, life-25)
prep_to(provide-24, person-27)
nsubj(retain-31, you-28)
aux(retain-31, would-29)
advmod(retain-31, still-30)
rcmod(person-27, retain-31)
det(right-33, the-32)
dobj(retain-31, right-33)
aux(say-35, to-34)
infmod(right-33, say-35)
dep(thank-39, No-37)
dep(retain-31, thank-39)
dobj(thank-39, you-40)
nsubj(think-44, I-43)
conj_but(provide-24, think-44)
nsubj(fine-47, I-45)
cop(fine-47, 'm-46)
ccomp(think-44, fine-47)
prep_without(fine-47, you-49)

(ROOT
  (S ('' '')
    (S
      (NP
        (NP (DT This))
        (, ,)
        (PP (IN of)
          (NP (NN course)))
        (, ,))
      (VP (MD might)
        (ADVP (RB never))
        (VP (VB happen))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is) (RB not)
        (ADJP (JJ murder)
          (S
            (VP (TO to)
              (VP (VB retain)
                (NP
                  (NP (DT the) (NN use))
                  (PP (IN of)
                    (NP (PRP$ your) (NN body))))))))
        (SBAR (IN as)
          (S
            (NP (PRP you))
            (VP (VBP see)
              (ADJP (JJ fit)))))))
    (. .)))

nsubj(happen-9, This-2)
prep_of(This-2, course-5)
aux(happen-9, might-7)
neg(happen-9, never-8)
root(ROOT-0, happen-9)
nsubj(murder-15, it-12)
cop(murder-15, is-13)
neg(murder-15, not-14)
conj_but(happen-9, murder-15)
aux(retain-17, to-16)
xcomp(murder-15, retain-17)
det(use-19, the-18)
dobj(retain-17, use-19)
poss(body-22, your-21)
prep_of(use-19, body-22)
mark(see-25, as-23)
nsubj(see-25, you-24)
advcl(murder-15, see-25)
acomp(see-25, fit-26)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADVP (RB entirely))
      (PP (IN within)
        (NP (PRP$ your) (NNS rights))))
    (. .)))

nsubj(is-2, It-1)
root(ROOT-0, is-2)
advmod(is-2, entirely-3)
poss(rights-6, your-5)
prep_within(is-2, rights-6)

