(ROOT
  (S
    (NP (PRP I))
    (VP (VBP disagree)
      (PP (IN with)
        (NP (DT the) (JJ binary) (NN assumption)))
      (: :)
      (UCP
        (ADJP (JJ human))
        (CC or)
        (RB not)
        (ADJP (JJ human))))
    (. .)))

nsubj(disagree-2, I-1)
root(ROOT-0, disagree-2)
det(assumption-6, the-4)
amod(assumption-6, binary-5)
prep_with(disagree-2, assumption-6)
acomp(disagree-2, human-8)
acomp(disagree-2, not-10)
conj_or(human-8, not-10)
neg(human-8, not-10)
dep(human-8, human-11)

(ROOT
  (S
    (S
      (NP
        (NP (NN Something))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ has)
              (NP (DT the) (NN potential)
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (ADJP (JJ human))))))))))
      (VP (VBZ is) (RB not)
        (NP
          (NP (DT the) (JJ same))
          (PP (IN as)
            (NP (NN something)))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ is)
                (ADJP (JJ human))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADVP (RB certainly))
        (RB not)
        (ADJP (JJ worthless))))
    (. .)))

nsubj(has-3, Something-1)
nsubj(same-12, Something-1)
rcmod(Something-1, has-3)
det(potential-5, the-4)
dobj(has-3, potential-5)
aux(human-8, to-6)
cop(human-8, be-7)
infmod(potential-5, human-8)
cop(same-12, is-9)
neg(same-12, not-10)
det(same-12, the-11)
root(ROOT-0, same-12)
nsubj(human-17, same-12)
prep_as(same-12, something-14)
cop(human-17, is-16)
rcmod(same-12, human-17)
nsubj(worthless-24, it-20)
cop(worthless-24, is-21)
advmod(worthless-24, certainly-22)
neg(worthless-24, not-23)
conj_but(same-12, worthless-24)
nsubj(human-17, worthless-24)

(ROOT
  (FRAG
    (WHADVP (WRB How))
    (PP (IN about)
      (NP (DT an) (`` ``) (NN enemy) (NN combatant) ('' ''))
      (. ?))))

root(ROOT-0, How-1)
dep(How-1, about-2)
det(combatant-6, an-3)
nn(combatant-6, enemy-5)
pobj(about-2, combatant-6)

(ROOT
  (S
    (NP (DT The) (NN truth))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VB assign) (, ,)
            (PP (IN as)
              (NP (DT a) (NN society)))
            (, ,)
            (NP
              (NP (DT the) (NNS rights))
              (SBAR
                (S
                  (NP (PRP we))
                  (VP (VBP deem)
                    (ADJP (JJ appropriate)
                      (PP (TO to)
                        (NP (DT the) (NNS circumstances))))))))))))
    (. .)))

det(truth-2, The-1)
nsubj(is-3, truth-2)
root(ROOT-0, is-3)
complm(assign-6, that-4)
nsubj(assign-6, we-5)
ccomp(is-3, assign-6)
det(society-10, a-9)
prep_as(assign-6, society-10)
det(rights-13, the-12)
dobj(assign-6, rights-13)
dobj(deem-15, rights-13)
nsubj(deem-15, we-14)
rcmod(rights-13, deem-15)
acomp(deem-15, appropriate-16)
det(circumstances-19, the-18)
prep_to(appropriate-16, circumstances-19)

(ROOT
  (S
    (NP (PRP We))
    (ADVP (RB constantly))
    (VP (VB balance)
      (NP
        (NP
          (NP (CD one) (NN person) (POS 's))
          (NNS rights))
        (PP (IN against)
          (NP (DT another) (NNS 's)))))
    (. .)))

nsubj(balance-3, We-1)
advmod(balance-3, constantly-2)
root(ROOT-0, balance-3)
num(person-5, one-4)
poss(rights-7, person-5)
dobj(balance-3, rights-7)
det('s-10, another-9)
prep_against(rights-7, 's-10)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP do) (RB not)
      (VP (VB have)
        (NP (DT a)
          (ADJP (JJ black)
            (CC and)
            (JJ white))
          (NN system))
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (DT every) (NN human))
            (VP (VBZ gets)
              (NP (DT the) (JJ same) (NN treatment)))))))
    (. .)))

nsubj(have-4, We-1)
aux(have-4, do-2)
neg(have-4, not-3)
root(ROOT-0, have-4)
det(system-9, a-5)
amod(system-9, black-6)
conj_and(black-6, white-8)
amod(system-9, white-8)
dobj(have-4, system-9)
advmod(gets-13, where-10)
det(human-12, every-11)
nsubj(gets-13, human-12)
advcl(have-4, gets-13)
det(treatment-16, the-14)
amod(treatment-16, same-15)
dobj(gets-13, treatment-16)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (NP (DT a) (NN crime)
        (S
          (VP (TO to)
            (VP (VB sterilize)
              (NP (NN someone))
              (PP (IN against)
                (NP (PRP$ their) (NN will))))))))
    (. .)))

nsubj(crime-4, It-1)
cop(crime-4, is-2)
det(crime-4, a-3)
root(ROOT-0, crime-4)
aux(sterilize-6, to-5)
infmod(crime-4, sterilize-6)
dobj(sterilize-6, someone-7)
poss(will-10, their-9)
prep_against(sterilize-6, will-10)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ is)
      (NP
        (NP (NN assault))
        (PP (IN on)
          (NP
            (NP (DT the) (JJ potential) (NN parent))
            (, ,) (RB not)
            (NP (DT the) (JJ potential) (NNS children))))))
    (. .)))

nsubj(assault-3, That-1)
cop(assault-3, is-2)
root(ROOT-0, assault-3)
det(parent-7, the-5)
amod(parent-7, potential-6)
prep_on(assault-3, parent-7)
neg(parent-7, not-9)
det(children-12, the-10)
amod(children-12, potential-11)
dep(parent-7, children-12)

(ROOT
  (S
    (ADVP (RB Somewhere)
      (PP (IN along)
        (NP (DT the) (NN way))))
    (NP (DT the) (JJ potential) (NN child))
    (VP (VBZ starts)
      (S
        (VP (TO to)
          (VP (VB get)
            (S
              (NP (NNS rights))
              (ADJP (JJ independent)
                (PP (IN of)
                  (NP (DT the) (JJ potential) (NN parent)))))))))
    (. .)))

advmod(starts-8, Somewhere-1)
det(way-4, the-3)
prep_along(Somewhere-1, way-4)
det(child-7, the-5)
amod(child-7, potential-6)
nsubj(starts-8, child-7)
xsubj(get-10, child-7)
root(ROOT-0, starts-8)
aux(get-10, to-9)
xcomp(starts-8, get-10)
nsubj(independent-12, rights-11)
xcomp(get-10, independent-12)
det(parent-16, the-14)
amod(parent-16, potential-15)
prep_of(independent-12, parent-16)

(ROOT
  (S
    (PP (IN In)
      (NP (DT some)
        (ADJP (JJ unfortunate))
        (NNS cases)))
    (, ,)
    (NP (DT those) (NNS rights))
    (VP (VBP are)
      (PP (IN in)
        (NP (NN opposition))))
    (. .)))

det(cases-4, some-2)
amod(cases-4, unfortunate-3)
prep_in(are-8, cases-4)
det(rights-7, those-6)
nsubj(are-8, rights-7)
root(ROOT-0, are-8)
prep_in(are-8, opposition-10)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP do) (RB not)
      (VP (VB believe)
        (SBAR (IN that)
          (S
            (NP (PRP we))
            (VP (MD should)
              (VP (VB ascribe)
                (NP (JJ equal) (NNS rights))
                (PP (TO to)
                  (NP
                    (NP (DT the) (VBN fertilized) (NN egg))
                    (CC and)
                    (NP (DT the)
                      (ADJP (JJ unconscious))
                      (NN nurse))))))))))
    (. .)))

nsubj(believe-4, I-1)
aux(believe-4, do-2)
neg(believe-4, not-3)
root(ROOT-0, believe-4)
complm(ascribe-8, that-5)
nsubj(ascribe-8, we-6)
aux(ascribe-8, should-7)
ccomp(believe-4, ascribe-8)
amod(rights-10, equal-9)
dobj(ascribe-8, rights-10)
det(egg-14, the-12)
amod(egg-14, fertilized-13)
prep_to(ascribe-8, egg-14)
det(nurse-18, the-16)
amod(nurse-18, unconscious-17)
prep_to(ascribe-8, nurse-18)
conj_and(egg-14, nurse-18)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (RB only) (CD one))
        (VP (MD can)
          (VP (VB be)
            (VP (VBN saved))))))
    (NP (PRP it))
    (VP (MD should)
      (VP (VB be)
        (NP (DT the) (JJ potential) (NN mother))))
    (. .)))

mark(saved-6, If-1)
advmod(one-3, only-2)
nsubjpass(saved-6, one-3)
aux(saved-6, can-4)
auxpass(saved-6, be-5)
advcl(mother-12, saved-6)
nsubj(mother-12, it-7)
aux(mother-12, should-8)
cop(mother-12, be-9)
det(mother-12, the-10)
amod(mother-12, potential-11)
root(ROOT-0, mother-12)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP feel)
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (ADJP (JJ dangerous)
              (S
                (VP (TO to)
                  (VP (VB deal)
                    (PP (IN in)
                      (NP (NNS absolutes)))))))))))
    (. .)))

nsubj(feel-2, I-1)
root(ROOT-0, feel-2)
complm(dangerous-6, that-3)
nsubj(dangerous-6, it-4)
cop(dangerous-6, is-5)
ccomp(feel-2, dangerous-6)
aux(deal-8, to-7)
xcomp(dangerous-6, deal-8)
prep_in(deal-8, absolutes-10)

(ROOT
  (NP
    (NP (DT The) (NN humanity))
    (PRN (-LRB- -LRB-)
      (NP (NNP humanness) (. ?))
      (-RRB- -RRB-))))

det(humanity-2, The-1)
root(ROOT-0, humanity-2)
appos(humanity-2, humanness-4)

(ROOT
  (S
    (NP (IN of) (DT a) (NN fetus))
    (VP (VBZ grows)
      (PP (IN with)
        (NP (NN time))))
    (. .)))

amod(fetus-3, of-1)
det(fetus-3, a-2)
nsubj(grows-4, fetus-3)
root(ROOT-0, grows-4)
prep_with(grows-4, time-6)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT a) (JJ light) (NN switch))
        (CC nor)
        (NP
          (NP (DT a) (JJ flip))
          (PP (IN of)
            (NP (DT a) (NN coin))))))
    (. .)))

nsubj(switch-6, It-1)
nsubj(flip-9, It-1)
cop(switch-6, is-2)
neg(switch-6, not-3)
det(switch-6, a-4)
amod(switch-6, light-5)
root(ROOT-0, switch-6)
det(flip-9, a-8)
conj_nor(switch-6, flip-9)
det(coin-12, a-11)
prep_of(flip-9, coin-12)

(ROOT
  (SQ (VBZ Is)
    (NP (DT a) (NN brain))
    (NP
      (NP
        (NP (JJ dead) (NN person))
        (PP (IN on)
          (NP (NN life) (NN support))))
      (NP (DT a) (NN human)))
    (. ?)))

cop(person-5, Is-1)
det(brain-3, a-2)
nsubj(person-5, brain-3)
amod(person-5, dead-4)
root(ROOT-0, person-5)
nn(support-8, life-7)
prep_on(person-5, support-8)
det(human-10, a-9)
dep(person-5, human-10)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD 'd)
      (VP (VB say)
        (INTJ (UH yes))))
    (. .)))

nsubj(say-3, I-1)
aux(say-3, 'd-2)
root(ROOT-0, say-3)
dep(say-3, yes-4)

(ROOT
  (SBARQ
    (PP
      (ADVP (RB Now))
      (IN in)
      (NP (DT a) (NN fire)))
    (, ,)
    (WHNP (WP who))
    (SQ (MD should)
      (VP (VB be)
        (VP (VBN rescued)
          (NP
            (NP (JJ first))
            (, ,)
            (NP (DT the) (JJ unconscious) (NN nurse))
            (CC or)
            (NP (DT the) (NN vegetable))))))
    (. ?)))

advmod(rescued-9, Now-1)
det(fire-4, a-3)
prep_in(rescued-9, fire-4)
nsubjpass(rescued-9, who-6)
aux(rescued-9, should-7)
auxpass(rescued-9, be-8)
root(ROOT-0, rescued-9)
dobj(rescued-9, first-10)
det(nurse-14, the-12)
amod(nurse-14, unconscious-13)
dobj(rescued-9, nurse-14)
conj_or(first-10, nurse-14)
det(vegetable-17, the-16)
dobj(rescued-9, vegetable-17)
conj_or(first-10, vegetable-17)

(ROOT
  (S
    (VP (VB Harsh))
    (. !)))

root(ROOT-0, Harsh-1)

(ROOT
  (SQ (VBZ Is)
    (NP (DT a) (NN convicted))
    (NP (JJ criminal)
      (NP (DT a) (NN human)))
    (. ?)))

cop(human-6, Is-1)
det(convicted-3, a-2)
nsubj(human-6, convicted-3)
amod(human-6, criminal-4)
det(human-6, a-5)
root(ROOT-0, human-6)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD 'd)
      (VP (VB say)
        (INTJ (UH yes))))
    (. .)))

nsubj(say-3, I-1)
aux(say-3, 'd-2)
root(ROOT-0, say-3)
dep(say-3, yes-4)

(ROOT
  (S (CC But)
    (NP (PRP we))
    (VP (VB strip)
      (NP
        (NP (DT that) (NN person))
        (PP (IN of)
          (NP (PRP$ their) (JJ inalienable) (NNS rights)))))
    (. .)))

cc(strip-3, But-1)
nsubj(strip-3, we-2)
root(ROOT-0, strip-3)
det(person-5, that-4)
dobj(strip-3, person-5)
poss(rights-9, their-7)
amod(rights-9, inalienable-8)
prep_of(person-5, rights-9)

(ROOT
  (SQ (VBZ Is)
    (NP
      (NP (DT a) (NN soldier))
      (PP (IN in)
        (NP (DT an) (NN enemy))))
    (VP (VBG army)
      (NP (DT a) (NN human)))
    (. ?)))

aux(army-7, Is-1)
det(soldier-3, a-2)
nsubj(army-7, soldier-3)
det(enemy-6, an-5)
prep_in(soldier-3, enemy-6)
root(ROOT-0, army-7)
det(human-9, a-8)
dobj(army-7, human-9)

