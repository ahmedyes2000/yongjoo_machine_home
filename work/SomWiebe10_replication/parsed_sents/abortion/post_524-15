(ROOT
  (S
    (S
      (NP (DT That))
      (VP (VBG being)
        (VP (VBD said))))
    (, ,)
    (NP (PRP one))
    (VP (MD can) (RB not)
      (VP (VB fail)
        (S
          (VP (TO to)
            (VP (VB do)
              (SBAR
                (WHNP (WP what))
                (S
                  (VP (VBZ is)
                    (ADJP (JJ necessary)
                      (PP (IN for)
                        (NP
                          (NP (NN fear))
                          (PP (IN of)
                            (NP (DT the) (JJ negative) (NNS consequences))))))))))))))
    (. .)))

nsubjpass(said-3, That-1)
auxpass(said-3, being-2)
partmod(fail-8, said-3)
nsubj(fail-8, one-5)
xsubj(do-10, one-5)
aux(fail-8, can-6)
neg(fail-8, not-7)
root(ROOT-0, fail-8)
aux(do-10, to-9)
xcomp(fail-8, do-10)
nsubj(necessary-13, what-11)
cop(necessary-13, is-12)
ccomp(do-10, necessary-13)
prep_for(necessary-13, fear-15)
det(consequences-19, the-17)
amod(consequences-19, negative-18)
prep_of(fear-15, consequences-19)

