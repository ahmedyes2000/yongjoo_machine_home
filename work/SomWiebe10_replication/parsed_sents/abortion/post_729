(ROOT
  (S
    (S
      (NP
        (NP (NN ok))
        (CC and)
        (NP (JJ like) (NNS i)))
      (VP (VBD saidd)))
    (, ,)
    (NP (DT every) (NN mothere))
    (VP (MD should)
      (VP (VB have)
        (NP (PRP$ her) (JJ own) (NN desicon))
        (PP (IN on))
        (SBAR (IN whether)
          (CC or)
          (RB not)
          (S
            (NP (PRP they))
            (VP (VBP want)
              (S
                (VP (TO to)
                  (VP (VB go)
                    (PP (IN through)
                      (NP (DT a) (NN pregancy)))))))))))
    (. .)))

nsubj(saidd-5, ok-1)
amod(i-4, like-3)
conj_and(ok-1, i-4)
nsubj(saidd-5, i-4)
ccomp(have-10, saidd-5)
det(mothere-8, every-7)
nsubj(have-10, mothere-8)
aux(have-10, should-9)
root(ROOT-0, have-10)
poss(desicon-13, her-11)
amod(desicon-13, own-12)
dobj(have-10, desicon-13)
prep(have-10, on-14)
complm(want-19, whether-15)
ccomp(have-10, not-17)
conj_or(want-19, not-17)
nsubj(want-19, they-18)
xsubj(go-21, they-18)
ccomp(have-10, want-19)
aux(go-21, to-20)
xcomp(want-19, go-21)
det(pregancy-24, a-23)
prep_through(go-21, pregancy-24)

(ROOT
  (S (IN For)
    (NP
      (NP (NN instance))
      (SBAR
        (WHNP (WP what))
        (S
          (SBAR (IN if)
            (S
              (NP (PRP it))
              (VP (VBP wasnt)
                (S
                  (NP (DT a) (NN accident))
                  (VP (TO to)
                    (VP (VB have)
                      (NP
                        (NP (DT the) (NN child))
                        (CC and)
                        (NP (DT the) (NN mother)))))))))
          (VP (VBD found)
            (PRT (RP out))
            (SBAR (IN that)
              (S
                (NP (PRP her))
                (ADVP (RB soon))
                (VP (TO to)
                  (VP (VB be)
                    (NP (NN baby))))))))))
    (VP (VBD was)
      (NP (JJ special) (NN ed)))
    (. .)))

dep(ed-26, For-1)
dep(found-16, instance-2)
nsubj(ed-26, instance-2)
mark(wasnt-6, if-4)
nsubj(wasnt-6, it-5)
csubj(found-16, wasnt-6)
det(accident-8, a-7)
nsubj(have-10, accident-8)
aux(have-10, to-9)
xcomp(wasnt-6, have-10)
det(child-12, the-11)
dobj(have-10, child-12)
det(mother-15, the-14)
dobj(have-10, mother-15)
conj_and(child-12, mother-15)
rcmod(instance-2, found-16)
prt(found-16, out-17)
complm(baby-23, that-18)
nsubj(baby-23, her-19)
advmod(baby-23, soon-20)
aux(baby-23, to-21)
cop(baby-23, be-22)
ccomp(found-16, baby-23)
xcomp(found-16, baby-23)
cop(ed-26, was-24)
amod(ed-26, special-25)
root(ROOT-0, ed-26)

(ROOT
  (S (IN so)
    (NP (PRP she))
    (VP (VBD desided)
      (S
        (VP (TO to)
          (VP (VB get)
            (NP (DT an) (NN abortion))))))
    (. .)))

dep(desided-3, so-1)
nsubj(desided-3, she-2)
xsubj(get-5, she-2)
root(ROOT-0, desided-3)
aux(get-5, to-4)
xcomp(desided-3, get-5)
det(abortion-7, an-6)
dobj(get-5, abortion-7)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP know)
      (SBAR
        (S
          (S
            (NP (PRP she))
            (VP (VBZ 's)
              (VP (VBN killin)
                (NP (DT a) (NN life)))))
          (CC and)
          (S
            (S
              (NP (FW i))
              (VP (VBP do)
                (S
                  (NP (VB think) (NNS thats))
                  (ADJP (JJ wrong)))))
            (, ,)
            (CC but)
            (S
              (PP (IN in)
                (NP (DT the) (JJ same) (NN way)))
              (NP (PRP she))
              (VP (MD might)
                (VP (VB want)
                  (S
                    (VP (TO to)
                      (VP (VB protect)
                        (NP (DT that) (NN unborn))
                        (PP (IN from)
                          (S
                            (VP (VBG going)
                              (PP (IN through)
                                (NP (NN pain)
                                  (CC and)
                                  (NNS trials)))
                              (PP (IN in)
                                (NP (DT the) (NN future))))))))))))))))
    (: ...)))

nsubj(know-2, I-1)
root(ROOT-0, know-2)
nsubjpass(killin-5, she-3)
auxpass(killin-5, 's-4)
dep(know-2, killin-5)
det(life-7, a-6)
dobj(killin-5, life-7)
nsubj(do-10, i-9)
dep(know-2, do-10)
conj_and(killin-5, do-10)
dep(thats-12, think-11)
nsubj(wrong-13, thats-12)
xcomp(do-10, wrong-13)
det(way-19, the-17)
amod(way-19, same-18)
prep_in(want-22, way-19)
nsubj(want-22, she-20)
xsubj(protect-24, she-20)
aux(want-22, might-21)
conj_and(killin-5, want-22)
conj_but(do-10, want-22)
aux(protect-24, to-23)
xcomp(want-22, protect-24)
det(unborn-26, that-25)
dobj(protect-24, unborn-26)
prepc_from(protect-24, going-28)
prep_through(going-28, pain-30)
prep_through(going-28, trials-32)
conj_and(pain-30, trials-32)
det(future-35, the-34)
prep_in(going-28, future-35)

(ROOT
  (S
    (VP (VB Let)
      (S
        (NP (PRP me))
        (VP (VB remind)
          (NP (PRP you))
          (SBAR (IN that)
            (S
              (NP
                (NP (DT the) (NN title))
                (PP (IN of)
                  (NP (DT this) (NN argument) ('' '') (NN Abortion))))
              (VP (MD should)
                (VP (VB be)
                  (VP (VBN Banned) ('' '')))))))))
    (. .)))

root(ROOT-0, Let-1)
nsubj(remind-3, me-2)
ccomp(Let-1, remind-3)
dobj(remind-3, you-4)
complm(Banned-15, that-5)
det(title-7, the-6)
nsubjpass(Banned-15, title-7)
det(Abortion-12, this-9)
nn(Abortion-12, argument-10)
prep_of(title-7, Abortion-12)
aux(Banned-15, should-13)
auxpass(Banned-15, be-14)
ccomp(remind-3, Banned-15)

(ROOT
  (UCP
    (S
      (NP (NNS Thats))
      (NP
        (NP (DT a) (JJ straight) (JJ forward) (NN yes))
        (CC or)
        (NP (DT no) (NN question))))
    (CC and)
    (SBAR (IN since)
      (S
        (NP (EX there))
        (VP (VBP are) ('' '')
          (PP
            (NP (WP what))
            (IN if)
            (NP (PRP 's) ('' '')))
          (PRN (-LRB- -LRB-)
            (SBAR (WP what) (IN if)
              (S
                (NP (PRP it))
                (VP (VBZ is)
                  (NP
                    (NP (NN rape))
                    (, ,)
                    (SBAR
                      (WHNP (WP what))
                      (S
                        (SBAR (IN if)
                          (S
                            (NP (PRP it))
                            (VP (VBZ 's)
                              (NP (DT an) (NN aciddent)))))
                        (, ,)
                        (VP (VB ect)))))))
              (. .))
            (-RRB- -RRB-)))))))

dep(yes-5, Thats-1)
det(yes-5, a-2)
amod(yes-5, straight-3)
amod(yes-5, forward-4)
root(ROOT-0, yes-5)
det(question-8, no-7)
conj_or(yes-5, question-8)
mark(are-12, since-10)
expl(are-12, there-11)
conj_and(yes-5, are-12)
npadvmod(are-12, what-14)
prep_if(are-12, 's-16)
dep(rape-23, what-19)
dep(rape-23, if-20)
nsubj(rape-23, it-21)
cop(rape-23, is-22)
parataxis(are-12, rape-23)
dep(ect-32, rape-23)
mark(aciddent-30, if-26)
nsubj(aciddent-30, it-27)
cop(aciddent-30, 's-28)
det(aciddent-30, an-29)
advcl(ect-32, aciddent-30)
rcmod(rape-23, ect-32)

(ROOT
  (S
    (PP (IN in)
      (NP (DT this) (NN situation)))
    (NP (DT the) (NN conclusion))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (NNP Abortions))
          (VP (MD should) (`` `)
            (VP (RB nt) (VB be)
              (VP (VBN banned)))))))
    (. .)))

det(situation-3, this-2)
prep_in(is-6, situation-3)
det(conclusion-5, the-4)
nsubj(is-6, conclusion-5)
root(ROOT-0, is-6)
complm(banned-13, that-7)
nsubjpass(banned-13, Abortions-8)
aux(banned-13, should-9)
neg(banned-13, nt-11)
auxpass(banned-13, be-12)
ccomp(is-6, banned-13)

