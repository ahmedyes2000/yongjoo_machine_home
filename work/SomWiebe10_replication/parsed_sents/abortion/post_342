(ROOT
  (S
    (VP (VBG Pardon)
      (NP (PRP me))
      (PP (IN for)
        (S
          (VP (VBG pointing)
            (NP (DT this))
            (PRT (RP out)))))
      (, ,)
      (SBAR (CC but)
        (S
          (NP (JJ late) (NN term) (NNS abortions))
          (ADVP (RB already))
          (VP (VBP are)
            (ADJP (JJ illegal))))))
    (: ...)))

root(ROOT-0, Pardon-1)
dobj(Pardon-1, me-2)
prepc_for(Pardon-1, pointing-4)
dobj(pointing-4, this-5)
prt(pointing-4, out-6)
cc(illegal-14, but-8)
amod(abortions-11, late-9)
nn(abortions-11, term-10)
nsubj(illegal-14, abortions-11)
advmod(illegal-14, already-12)
cop(illegal-14, are-13)
dep(Pardon-1, illegal-14)

(ROOT
  (S
    (NP (PRP they))
    (VP (VBP Have)
      (VP (VBN been)
        (VP (VBN restricted)
          (SBAR (IN so)
            (S
              (NP (PRP I))
              (VP (VBP 'm) (RB not)
                (ADJP (JJ sure)
                  (SBAR
                    (WHNP (WP what))
                    (S
                      (NP (PRP you))
                      (VP (VBP 're)
                        (VP (VBG arguing)
                          (ADVP (RB here)))))))))))))
    (. .)))

nsubjpass(restricted-4, they-1)
aux(restricted-4, Have-2)
auxpass(restricted-4, been-3)
root(ROOT-0, restricted-4)
mark(sure-9, so-5)
nsubj(sure-9, I-6)
cop(sure-9, 'm-7)
neg(sure-9, not-8)
advcl(restricted-4, sure-9)
dobj(arguing-13, what-10)
nsubj(arguing-13, you-11)
aux(arguing-13, 're-12)
dep(sure-9, arguing-13)
advmod(arguing-13, here-14)

(ROOT
  (S
    (NP (NNP Life))
    (VP
      (VP (VBZ is)
        (NP (JJ precious)))
      (CC and)
      (VP (VBZ needs)
        (S
          (VP
            (VP (TO to)
              (VP (VB be)
                (VP (VBN protected)
                  (PP (IN at)
                    (NP (DT all) (NNS costs))))))
            (IN except)
            (VP
              (SBAR (IN if)
                (S
                  (NP (PRP it))
                  (VP (MD will)
                    (VP (VB inconvenience)
                      (NP (PRP you)))))))))))
    (. .)))

nsubj(precious-3, Life-1)
nsubj(needs-5, Life-1)
cop(precious-3, is-2)
root(ROOT-0, precious-3)
conj_and(precious-3, needs-5)
aux(protected-8, to-6)
auxpass(protected-8, be-7)
ccomp(needs-5, protected-8)
det(costs-11, all-10)
prep_at(protected-8, costs-11)
dep(protected-8, except-12)
mark(inconvenience-16, if-13)
nsubj(inconvenience-16, it-14)
aux(inconvenience-16, will-15)
dep(protected-8, inconvenience-16)
dobj(inconvenience-16, you-17)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (PRP it))
          (VP (VBZ 's)
            (NP
              (NP (DT another) (NN person) (POS 's))
              (NN body))
            (, ,)
            (PP (IN by)
              (NP (DT all))))))
      (VP (VBZ means)))
    (: ...)
    (S
      (VP (VB dictate)
        (PP (TO to)
          (NP (PRP her)))
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP she))
            (VP (MD can)
              (CC and)
              (MD can) (RB not)
              (VP (VB do)
                (PP (IN with)
                  (NP (PRP$ her) (NN body)))))))))
    (. .)))

mark(body-7, If-1)
nsubj(body-7, it-2)
cop(body-7, 's-3)
det(person-5, another-4)
poss(body-7, person-5)
csubj(means-11, body-7)
prep_by(body-7, all-10)
root(ROOT-0, means-11)
parataxis(means-11, dictate-13)
prep_to(dictate-13, her-15)
dobj(do-22, what-16)
nsubj(do-22, she-17)
aux(do-22, can-18)
ccomp(dictate-13, can-20)
aux(do-22, can-20)
conj_and(do-22, can-20)
neg(do-22, not-21)
ccomp(dictate-13, do-22)
poss(body-25, her-24)
prep_with(do-22, body-25)

(ROOT
  (S
    (S
      (VP (VBG Doing)
        (NP (NN nothing))))
    (VP (VBZ is)
      (ADVP (RB just))
      (ADJP (RB as) (JJ immoral)
        (PP (IN as)
          (S
            (VP (VBG doing)
              (NP
                (NP (NN something))
                (PRN (-LRB- -LRB-)
                  (SBAR (IN if)
                    (S
                      (NP (PRP you))
                      (VP (VBP 're)
                        (VP (VBG going)
                          (S
                            (VP (TO to)
                              (VP (VB use)
                                (NP (DT the) (NN reasoning))
                                (SBAR (IN that)
                                  (S
                                    (NP (DT a) (NN woman))
                                    (VP (MD can) (RB not)
                                      (VP (VB retain)
                                        (NP (NN government))
                                        (PP (IN over)
                                          (NP (PRP$ her) (NN body) (NNS parts)))
                                        (SBAR (IN because)
                                          (S
                                            (NP (PRP it))
                                            (VP (VBZ saves)
                                              (NP (DT a) (NN life))))))))))))))))
                  (-RRB- -RRB-))))))))
    (. .)))

csubj(immoral-6, Doing-1)
dobj(Doing-1, nothing-2)
cop(immoral-6, is-3)
advmod(immoral-6, just-4)
advmod(immoral-6, as-5)
root(ROOT-0, immoral-6)
prepc_as(immoral-6, doing-8)
dobj(doing-8, something-9)
mark(going-14, if-11)
nsubj(going-14, you-12)
xsubj(use-16, you-12)
aux(going-14, 're-13)
dep(something-9, going-14)
aux(use-16, to-15)
xcomp(going-14, use-16)
det(reasoning-18, the-17)
dobj(use-16, reasoning-18)
complm(retain-24, that-19)
det(woman-21, a-20)
nsubj(retain-24, woman-21)
aux(retain-24, can-22)
neg(retain-24, not-23)
ccomp(use-16, retain-24)
dobj(retain-24, government-25)
poss(parts-29, her-27)
nn(parts-29, body-28)
prep_over(retain-24, parts-29)
mark(saves-32, because-30)
nsubj(saves-32, it-31)
advcl(retain-24, saves-32)
det(life-34, a-33)
dobj(saves-32, life-34)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (VBP 're)
          (VP (VBG going)
            (S
              (VP (TO to)
                (VP (VB use)
                  (NP (DT the)
                    (S (`` ``)
                      (NP (PRP it))
                      (VP (VBZ is)
                        (NP (DT the) (NN process))))))))))))
    (VP (VBD decided)
      (PP (IN by)
        (NP (NN nature))))
    (. .)))

mark(going-4, If-1)
nsubj(going-4, you-2)
xsubj(use-6, you-2)
aux(going-4, 're-3)
csubj(decided-13, going-4)
aux(use-6, to-5)
xcomp(going-4, use-6)
dobj(use-6, the-7)
nsubj(process-12, it-9)
cop(process-12, is-10)
det(process-12, the-11)
dep(the-7, process-12)
root(ROOT-0, decided-13)
prep_by(decided-13, nature-15)

(ROOT
  (S ('' '')
    (S
      (NP (NN defense))
      (, ,)
      (ADVP (WRB how))
      (VP (VBP do)
        (S
          (NP (PRP we))
          (VP (VB respond)
            (PP (TO to)
              (NP (NN something)))))))
    (IN like)
    (S
      (NP (DT a) (NN heart))
      (VP (VBP attack)))
    (. .)))

nsubj(do-5, defense-2)
advmod(do-5, how-4)
root(ROOT-0, do-5)
nsubj(respond-7, we-6)
ccomp(do-5, respond-7)
prep_to(respond-7, something-9)
dep(do-5, like-10)
det(heart-12, a-11)
nsubj(attack-13, heart-12)
ccomp(do-5, attack-13)

(ROOT
  (SQ (VBZ Is)
    (NP (PRP it))
    (ADJP (JJ immoral))
    (S
      (VP (TO to)
        (VP (VB save)
          (NP
            (NP (DT a) (NN woman))
            (VP (VBG having)
              (NP (DT a) (NN heart) (NN attack)))))))
    (. ?)))

cop(immoral-3, Is-1)
nsubj(immoral-3, it-2)
root(ROOT-0, immoral-3)
aux(save-5, to-4)
dep(immoral-3, save-5)
det(woman-7, a-6)
dobj(save-5, woman-7)
partmod(woman-7, having-8)
det(attack-11, a-9)
nn(attack-11, heart-10)
dobj(having-8, attack-11)

(ROOT
  (S
    (PP (IN After)
      (NP (DT all)))
    (, ,)
    (NP (PRP it))
    (VP (VBZ 's)
      (ADVP (RB just))
      (NP
        (NP (NN nature))
        (VP (VBG taking)
          (NP (PRP$ its) (NN course)))))
    (. .)))

prep_after(nature-7, all-2)
nsubj(nature-7, it-4)
cop(nature-7, 's-5)
advmod(nature-7, just-6)
root(ROOT-0, nature-7)
partmod(nature-7, taking-8)
poss(course-10, its-9)
dobj(taking-8, course-10)

(ROOT
  (SQ (MD Should)
    (NP (PRP we))
    (ADVP (RB simply))
    (VP (VB watch)
      (CC and)
      (VB hope)
      (PP (IN for)
        (NP (DT the) (JJS best))))
    (. ?)))

aux(watch-4, Should-1)
nsubj(watch-4, we-2)
nsubj(hope-6, we-2)
advmod(watch-4, simply-3)
root(ROOT-0, watch-4)
conj_and(watch-4, hope-6)
det(best-9, the-8)
prep_for(watch-4, best-9)

(ROOT
  (S
    (ADVP (RB Perhaps))
    (NP (PRP we))
    (VP (MD should)
      (ADVP (RB just))
      (VP (VB watch)
        (SBAR (IN as)
          (S
            (NP (DT the) (RB newly) (VBN born) (NN baby))
            (VP (VBZ struggles)
              (PP (IN for)
                (NP (NN breath))))))))
    (. .)))

advmod(watch-5, Perhaps-1)
nsubj(watch-5, we-2)
aux(watch-5, should-3)
advmod(watch-5, just-4)
root(ROOT-0, watch-5)
mark(struggles-11, as-6)
det(baby-10, the-7)
advmod(baby-10, newly-8)
amod(baby-10, born-9)
nsubj(struggles-11, baby-10)
advcl(watch-5, struggles-11)
prep_for(struggles-11, breath-13)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (NP
        (NP (NN nature))
        (VP (VBG taking)
          (NP (PRP$ its) (NN course)))))
    (. .)))

nsubj(nature-3, That-1)
cop(nature-3, 's-2)
root(ROOT-0, nature-3)
partmod(nature-3, taking-4)
poss(course-6, its-5)
dobj(taking-4, course-6)

(ROOT
  (S
    (VP
      (ADVP (CC But)))
    (. .)))

root(ROOT-0, But-1)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP have)
      (NP (DT no) (JJ moral) (NNS obligations)
        (S
          (VP (TO to)
            (VP (VB save)
              (NP
                (NP (NNS lives))
                (, ,) (RB only)
                (NP (JJ moral) (NNS obligations)))
              (PP (IN against)
                (S
                  (VP (VBG taking)
                    (NP (NNS lives))))))))))
    (: ...)))

nsubj(have-2, We-1)
root(ROOT-0, have-2)
det(obligations-5, no-3)
amod(obligations-5, moral-4)
dobj(have-2, obligations-5)
aux(save-7, to-6)
infmod(obligations-5, save-7)
dobj(save-7, lives-8)
advmod(lives-8, only-10)
amod(obligations-12, moral-11)
dep(lives-8, obligations-12)
prepc_against(save-7, taking-14)
dobj(taking-14, lives-15)

(ROOT
  (S (IN so)
    (NP (PRP we))
    (VP (MD should)
      (VP (VB do)
        (NP (NN nothing))
        (SBAR (IN as)
          (S
            (NP (DT the) (NN newborn))
            (VP (VBZ struggles)
              (S
                (VP (TO to)
                  (VP (VB breathe)
                    (PP (RB instead) (IN of)
                      (S
                        (VP
                          (VP (VBG clearing)
                            (PRT (RP out))
                            (NP (DT the) (NNS cavities)))
                          (CC and)
                          (VP (VBG giving)
                            (NP (DT the) (NN baby) (NN oxygen))))))))))))))
    (. .)))

dep(do-4, so-1)
nsubj(do-4, we-2)
aux(do-4, should-3)
root(ROOT-0, do-4)
dobj(do-4, nothing-5)
mark(struggles-9, as-6)
det(newborn-8, the-7)
nsubj(struggles-9, newborn-8)
xsubj(breathe-11, newborn-8)
advcl(do-4, struggles-9)
aux(breathe-11, to-10)
xcomp(struggles-9, breathe-11)
prepc_instead_of(breathe-11, clearing-14)
prt(clearing-14, out-15)
det(cavities-17, the-16)
dobj(clearing-14, cavities-17)
prepc_instead_of(breathe-11, giving-19)
conj_and(clearing-14, giving-19)
det(oxygen-22, the-20)
nn(oxygen-22, baby-21)
dobj(giving-19, oxygen-22)

(ROOT
  (SQ (CC Or)
    (VBZ does)
    (NP (DT this))
    (VP (VB seem)
      (ADJP (JJ unreasonable)))
    (. ?)))

cc(unreasonable-5, Or-1)
aux(unreasonable-5, does-2)
nsubj(unreasonable-5, this-3)
cop(unreasonable-5, seem-4)
root(ROOT-0, unreasonable-5)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP 'm)
      (VP (VBG thinking)
        (SBAR
          (S
            (NP (PRP it))
            (VP (VBZ sounds)
              (ADJP (JJ unreasonable)))))))
    (. .)))

nsubj(thinking-3, I-1)
aux(thinking-3, 'm-2)
root(ROOT-0, thinking-3)
nsubj(sounds-5, it-4)
ccomp(thinking-3, sounds-5)
acomp(sounds-5, unreasonable-6)

(ROOT
  (S (CC Yet)
    (SBAR (IN if)
      (S
        (NP (PRP I))
        (NP (PRP$ your) (NN reasoning))))
    (, ,)
    (NP (DT this))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN conclusion))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ is)
              (VP (VBN reached)))))))
    (. .)))

cc(conclusion-10, Yet-1)
mark(reasoning-5, if-2)
dep(reasoning-5, I-3)
poss(reasoning-5, your-4)
advcl(conclusion-10, reasoning-5)
nsubj(conclusion-10, this-7)
cop(conclusion-10, is-8)
det(conclusion-10, the-9)
root(ROOT-0, conclusion-10)
nsubjpass(reached-13, conclusion-10)
auxpass(reached-13, is-12)
rcmod(conclusion-10, reached-13)

(ROOT
  (S
    (ADVP (RB Also))
    (PRN (, ,)
      (S
        (NP (EX there))
        (VP (VBP are) ('' '')
          (NP (NNP Good) (NNP Samaritan))
          ('' ''))))
    (NP
      (NP (NNS laws))
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VB do) (, ,)
            (PP (IN in)
              (NP (NN fact)))
            (, ,)
            (S
              (VP (VB make)
                (S
                  (NP (PRP it))
                  (ADJP (JJ illegal)
                    (S
                      (VP (TO to)
                        (VP (VB do)
                          (NP (NN nothing))
                          (SBAR (IN if)
                            (S
                              (NP (PRP one))
                              (VP (VBZ does)))))))))))
            (, ,)
            (PP (IN in)
              (NP (NN fact)))))))
    (, ,)
    (VP (VBP know)
      (SBAR (IN that)
        (S
          (NP (NN inaction))
          (VP (MD will)
            (VP (VB result)
              (PP (IN in)
                (NP (JJ great) (NN injury)
                  (CC or)
                  (NN death))))))))
    (. .)))

advmod(know-29, Also-1)
expl(are-4, there-3)
parataxis(know-29, are-4)
nn(Samaritan-7, Good-6)
nsubj(are-4, Samaritan-7)
nsubj(do-11, laws-9)
nsubj(know-29, laws-9)
rcmod(laws-9, do-11)
prep_in(do-11, fact-14)
ccomp(do-11, make-16)
nsubj(illegal-18, it-17)
xcomp(make-16, illegal-18)
aux(do-20, to-19)
xcomp(illegal-18, do-20)
dobj(do-20, nothing-21)
mark(does-24, if-22)
nsubj(does-24, one-23)
advcl(do-20, does-24)
prep_in(do-11, fact-27)
root(ROOT-0, know-29)
complm(result-33, that-30)
nsubj(result-33, inaction-31)
aux(result-33, will-32)
ccomp(know-29, result-33)
amod(injury-36, great-35)
prep_in(result-33, injury-36)
prep_in(result-33, death-38)
conj_or(injury-36, death-38)

(ROOT
  (S
    (SBAR (RB Not) (IN that)
      (S
        (NP (DT any) (NN judge))
        (VP (MD would)
          (VP (VB stretch)
            (S
              (NP (DT this))
              (VP (TO to)
                (VP (VB include)
                  (S
                    (S (RB not)
                      (VP (VBG giving)
                        (NP (NN blood))))
                    (, ,)
                    (CC or)
                    (S (RB not)
                      (VP (VBG donating)
                        (NP (DT a) (NN kidney))))))))))))
    (: ...)
    (S (CC but)
      (NP (DT that))
      (VP (VBZ 's)
        (ADVP (RB precisely))
        (NP (DT the) (NN point))))
    (. .)))

dep(stretch-6, Not-1)
dep(stretch-6, that-2)
det(judge-4, any-3)
nsubj(stretch-6, judge-4)
aux(stretch-6, would-5)
dep(point-25, stretch-6)
nsubj(include-9, this-7)
aux(include-9, to-8)
xcomp(stretch-6, include-9)
neg(giving-11, not-10)
dep(include-9, giving-11)
dobj(giving-11, blood-12)
neg(donating-16, not-15)
dep(include-9, donating-16)
conj_or(giving-11, donating-16)
det(kidney-18, a-17)
dobj(donating-16, kidney-18)
cc(point-25, but-20)
nsubj(point-25, that-21)
cop(point-25, 's-22)
advmod(point-25, precisely-23)
det(point-25, the-24)
root(ROOT-0, point-25)

(ROOT
  (S
    (NP (DT No) (NN one))
    (VP (MD can)
      (VP (VB force)
        (S
          (NP (PRP you))
          (VP (TO to)
            (VP (VB do)
              (NP (DT those) (NNS things)))))))
    (. .)))

det(one-2, No-1)
nsubj(force-4, one-2)
aux(force-4, can-3)
root(ROOT-0, force-4)
nsubj(do-7, you-5)
aux(do-7, to-6)
xcomp(force-4, do-7)
det(things-9, those-8)
dobj(do-7, things-9)

(ROOT
  (S
    (ADVP (RB Again))
    (, ,)
    (SBAR
      (WHNP (WP what))
      (S
        (NP (DT that) (NN woman))
        (VP (VBZ decides)
          (S
            (VP (TO to)
              (VP (VB do)))))))
    (VP (VBZ is)
      (NP (PRP$ her) (NN decision))
      (: ...)
      (ADVP (RB regardless)
        (PP (IN of)
          (NP
            (NP (DT the) (NN outcome))
            (: ...)
            (SBAR (IN because)
              (S
                (NP (PRP it))
                (VP (VBZ is)
                  (NP (PRP$ her) (NN body)))))))))
    (. .)))

advmod(decision-11, Again-1)
dep(decides-6, what-3)
det(woman-5, that-4)
nsubj(decides-6, woman-5)
xsubj(do-8, woman-5)
csubj(decision-11, decides-6)
aux(do-8, to-7)
xcomp(decides-6, do-8)
cop(decision-11, is-9)
poss(decision-11, her-10)
root(ROOT-0, decision-11)
det(outcome-16, the-15)
prep_regardless_of(decision-11, outcome-16)
mark(body-22, because-18)
nsubj(body-22, it-19)
cop(body-22, is-20)
poss(body-22, her-21)
dep(outcome-16, body-22)

(ROOT
  (S
    (S
      (S
        (VP (TO To)
          (VP (VB say)
            (ADVP (RB otherwise)))))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB deny)
              (NP (DT that))
              (NP (PRP she))
              (, ,)
              (NP (PRP yourself)))))))
    (, ,)
    (CC or)
    (S
      (NP (NN anyone) (RB else))
      (VP (VBZ has)
        (NP (DT the) (NN right)
          (S
            (VP (TO to)
              (VP (VB govern)
                (NP (PRP$ their) (NNS bodies))))))))
    (. .)))

aux(say-2, To-1)
csubj(is-4, say-2)
advmod(say-2, otherwise-3)
root(ROOT-0, is-4)
aux(deny-6, to-5)
xcomp(is-4, deny-6)
iobj(deny-6, that-7)
dobj(deny-6, she-8)
dobj(deny-6, yourself-10)
nsubj(has-15, anyone-13)
advmod(anyone-13, else-14)
conj_or(is-4, has-15)
det(right-17, the-16)
dobj(has-15, right-17)
aux(govern-19, to-18)
infmod(right-17, govern-19)
poss(bodies-21, their-20)
dobj(govern-19, bodies-21)

(ROOT
  (S
    (S
      (SBAR (IN If)
        (S
          (NP (PRP you))
          (VP (VBP 're)
            (VP (VBG going)
              (S
                (VP (TO to)
                  (VP (VB speak)
                    (PP (IN about)
                      (NP (NN morality))))))))))
      (, ,)
      (VP (VB please)
        (ADVP (RB clear) (DT this) (RB up))
        (PP (IN for)
          (NP (PRP me)))))
    (: :)
    (S
      (S
        (NP (PRP It))
        (VP (VBZ 's)
          (ADJP (JJ immoral)
            (PP (IN for)
              (NP (DT a) (NN woman))))
          (S
            (VP (TO to)
              (VP
                (VP (VB have)
                  (NP (DT an) (NN abortion)))
                (, ,)
                (CC or)
                (VP (VB clear)
                  (NP
                    (NP (PRP$ her) (NN body))
                    (PP (IN of)
                      (NP (DT a) (NN parasite))))))))
          (SBAR (IN that)
            (S
              (NP (PRP she))
              (VP (VBZ does) (RB not)
                (VP (VB want)))))))
      (, ,)
      (CC but)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (ADJP (RB perfectly) (JJ moral)
            (PP (IN for)
              (NP (PRP you))))
          (S
            (VP (TO to)
              (VP (VB ignore)
                (NP
                  (NP (DT the) (JJ impending) (NN death))
                  (PP (IN of)
                    (NP
                      (NP (DT the)
                        (ADJP (RB already) (JJ viable) (, ,) (JJ innocent))
                        (NN life))
                      (PP (IN of)
                        (NP (DT a) (NN child))))))))))))
    (. .)))

mark(going-4, If-1)
nsubj(going-4, you-2)
xsubj(speak-6, you-2)
aux(going-4, 're-3)
advcl(please-10, going-4)
aux(speak-6, to-5)
xcomp(going-4, speak-6)
prep_about(speak-6, morality-8)
root(ROOT-0, please-10)
advmod(up-13, clear-11)
dep(up-13, this-12)
advmod(please-10, up-13)
prep_for(please-10, me-15)
nsubj(immoral-19, It-17)
xsubj(have-24, It-17)
cop(immoral-19, 's-18)
parataxis(please-10, immoral-19)
det(woman-22, a-21)
prep_for(immoral-19, woman-22)
aux(have-24, to-23)
xcomp(immoral-19, have-24)
det(abortion-26, an-25)
dobj(have-24, abortion-26)
xcomp(immoral-19, clear-29)
conj_or(have-24, clear-29)
poss(body-31, her-30)
dobj(clear-29, body-31)
det(parasite-34, a-33)
prep_of(body-31, parasite-34)
complm(want-39, that-35)
nsubj(want-39, she-36)
aux(want-39, does-37)
neg(want-39, not-38)
ccomp(immoral-19, want-39)
nsubj(moral-45, it-42)
xsubj(ignore-49, it-42)
cop(moral-45, is-43)
advmod(moral-45, perfectly-44)
parataxis(please-10, moral-45)
conj_but(immoral-19, moral-45)
prep_for(moral-45, you-47)
aux(ignore-49, to-48)
xcomp(moral-45, ignore-49)
det(death-52, the-50)
amod(death-52, impending-51)
dobj(ignore-49, death-52)
det(life-59, the-54)
advmod(innocent-58, already-55)
amod(innocent-58, viable-56)
amod(life-59, innocent-58)
prep_of(death-52, life-59)
det(child-62, a-61)
prep_of(life-59, child-62)

(ROOT
  (S
    (NP
      (NP (DT The) (NN fact))
      (SBAR (IN that)
        (S
          (NP (PRP you))
          (VP (VBP do)
            (NP
              (NP (NN nothing))
              (CC and)
              (NP (DT the) (JJ innocent) (NN child)))
            (PP (IN with)
              (NP (NN leukemia)))))))
    (VP (MD will)
      (VP (VB die)
        (SBAR (IN because)
          (S
            (NP (NN nature))
            (VP (VBD took)
              (SBAR
                (S
                  (NP (PRP$ its) (NN course))
                  (VP (VBZ means)
                    (SBAR
                      (S
                        (NP (PRP you))
                        (ADVP (RB knowingly))
                        (VP (VBD let)
                          (SBAR (IN that)
                            (S
                              (NP (NN child))
                              (VP (VBP die)))))))))))))))
    (. .)))

det(fact-2, The-1)
nsubj(die-14, fact-2)
complm(do-5, that-3)
nsubj(do-5, you-4)
dep(fact-2, do-5)
dobj(do-5, nothing-6)
det(child-10, the-8)
amod(child-10, innocent-9)
dobj(do-5, child-10)
conj_and(nothing-6, child-10)
prep_with(do-5, leukemia-12)
aux(die-14, will-13)
root(ROOT-0, die-14)
mark(took-17, because-15)
nsubj(took-17, nature-16)
advcl(die-14, took-17)
poss(course-19, its-18)
nsubj(means-20, course-19)
ccomp(took-17, means-20)
nsubj(let-23, you-21)
advmod(let-23, knowingly-22)
ccomp(means-20, let-23)
complm(die-26, that-24)
nsubj(die-26, child-25)
ccomp(let-23, die-26)

(ROOT
  (S
    (S
      (NP (PRP$ Your) (NN body) (NNS parts))
      (VP (MD could)
        (VP (VB have)
          (VP (VBN prevented)
            (NP (PRP it))))))
    (CC and)
    (S
      (NP (PRP you))
      (ADVP (RB simply))
      (VP (VBD chose)
        (NP (DT the) (JJ other) (NN direction))))
    (. .)))

poss(parts-3, Your-1)
nn(parts-3, body-2)
nsubj(prevented-6, parts-3)
aux(prevented-6, could-4)
aux(prevented-6, have-5)
root(ROOT-0, prevented-6)
dobj(prevented-6, it-7)
nsubj(chose-11, you-9)
advmod(chose-11, simply-10)
conj_and(prevented-6, chose-11)
det(direction-14, the-12)
amod(direction-14, other-13)
dobj(chose-11, direction-14)

(ROOT
  (S
    (NP (PRP You))
    (ADVP (RB knowingly))
    (VP (VBP make)
      (SBAR (IN that)
        (S
          (NP
            (NP (NN choice) (JJ everyday))
            (CC and)
            (NP (DT no) (NN one)))
          (VP (VBZ calls)
            (S
              (NP (PRP you))
              (NP (DT a) (NN murderer)))))))
    (. .)))

nsubj(make-3, You-1)
advmod(make-3, knowingly-2)
root(ROOT-0, make-3)
complm(calls-10, that-4)
nsubj(calls-10, choice-5)
amod(choice-5, everyday-6)
det(one-9, no-8)
conj_and(choice-5, one-9)
nsubj(calls-10, one-9)
ccomp(make-3, calls-10)
nsubj(murderer-13, you-11)
det(murderer-13, a-12)
xcomp(calls-10, murderer-13)

(ROOT
  (S
    (S
      (NP (DT No) (NN one))
      (VP
        (VP (VBZ looks)
          (PP (IN at)
            (NP (JJ other) (NNS people)))
          (S
            (VP
              (VP (VBG standing)
                (PP (IN in)
                  (NP
                    (NP (NN line))
                    (PP (IN in)
                      (NP (DT the) (NN grocery) (NN store))))))
              (CC or)
              (VP (VBG pumping)
                (NP (NN gas))))))
        (CC and)
        (VP (VBZ thinks))))
    ('' '')
    (VP
      (ADVP
        (NP (DT That) (NN guy))
        (RB just))
      (VBP let)
      (SBAR (IN that)
        (S
          (NP (NN kid))
          (VP (VBP die)))))
    (. .)))

det(one-2, No-1)
nsubj(looks-3, one-2)
nsubj(thinks-18, one-2)
ccomp(let-23, looks-3)
csubj(let-23, looks-3)
amod(people-6, other-5)
prep_at(looks-3, people-6)
ccomp(looks-3, standing-7)
prep_in(standing-7, line-9)
det(store-13, the-11)
nn(store-13, grocery-12)
prep_in(line-9, store-13)
ccomp(looks-3, pumping-15)
conj_or(standing-7, pumping-15)
dobj(pumping-15, gas-16)
conj_and(looks-3, thinks-18)
ccomp(let-23, thinks-18)
csubj(let-23, thinks-18)
det(guy-21, That-20)
npadvmod(just-22, guy-21)
advmod(let-23, just-22)
root(ROOT-0, let-23)
complm(die-26, that-24)
nsubj(die-26, kid-25)
ccomp(let-23, die-26)

(ROOT
  (FRAG
    (WHNP (WP What)
      (NP (DT a) (NN douche)))
    (. !)))

root(ROOT-0, What-1)
det(douche-3, a-2)
dep(What-1, douche-3)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADVP (RB simply))
      (ADJP (JJR easier))
      (S
        (VP (TO to) (RB not)
          (VP (VB think)
            (PP (IN about)
              (NP (DT the) (NNS things))))))
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP do) (RB not)
            (VP (VB do)
              (PRN (-LRB- -LRB-)
                (FRAG (CC but)
                  (S
                    (VP (MD could)
                      (VP (VB be)
                        (VP (VBG doing))))))
                (-RRB- -RRB-))
              (PP (TO to)
                (NP (JJ saves) (NNS lives))))))))
    (. .)))

nsubj(easier-4, It-1)
xsubj(think-7, It-1)
cop(easier-4, 's-2)
advmod(easier-4, simply-3)
root(ROOT-0, easier-4)
aux(think-7, to-5)
neg(think-7, not-6)
xcomp(easier-4, think-7)
det(things-10, the-9)
prep_about(think-7, things-10)
complm(do-15, that-11)
nsubj(do-15, we-12)
aux(do-15, do-13)
neg(do-15, not-14)
ccomp(easier-4, do-15)
dep(doing-20, but-17)
aux(doing-20, could-18)
aux(doing-20, be-19)
dep(do-15, doing-20)
amod(lives-24, saves-23)
prep_to(do-15, lives-24)

(ROOT
  (FRAG (WRB Why) (. ?)))

root(ROOT-0, Why-1)

(ROOT
  (FRAG
    (SBAR (IN Because)
      (S
        (NP (PRP it))
        (VP (VBZ 's)
          (NP (DT an) (NN inconvenience)))))
    (. .)))

mark(inconvenience-5, Because-1)
nsubj(inconvenience-5, it-2)
cop(inconvenience-5, 's-3)
det(inconvenience-5, an-4)
root(ROOT-0, inconvenience-5)

(ROOT
  (S (CC Yet)
    (NP
      (NP (DT the) (NN logic))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (MD will)
            (ADVP (RB morally))
            (VP (VB condemn)
              (NP
                (NP (DT a) (NN woman))
                (SBAR
                  (WHNP (WP who))
                  (S
                    (VP (VBZ has)
                      (NP (NN abortion)))))))))))
    (VP (VBZ means)
      (SBAR (IN that)
        (S
          (NP (NN everyone))
          (VP (VBZ is)
            (ADJP (JJ guilty))))))
    (. .)))

cc(means-13, Yet-1)
det(logic-3, the-2)
nsubj(condemn-7, logic-3)
nsubj(means-13, logic-3)
aux(condemn-7, will-5)
advmod(condemn-7, morally-6)
rcmod(logic-3, condemn-7)
det(woman-9, a-8)
dobj(condemn-7, woman-9)
nsubj(has-11, woman-9)
rcmod(woman-9, has-11)
dobj(has-11, abortion-12)
root(ROOT-0, means-13)
complm(guilty-17, that-14)
nsubj(guilty-17, everyone-15)
cop(guilty-17, is-16)
ccomp(means-13, guilty-17)

(ROOT
  (S
    (NP (EX There))
    (VP (VBZ is)
      (NP
        (NP (DT no) (NN difference))
        (PP (IN in)
          (NP (DT those) (NNS choices)))))
    (. .)))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(difference-4, no-3)
nsubj(is-2, difference-4)
det(choices-7, those-6)
prep_in(difference-4, choices-7)

(ROOT
  (NP (DT An) (JJ actual) (NN child) (. .)))

det(child-3, An-1)
amod(child-3, actual-2)
root(ROOT-0, child-3)

(ROOT
  (S
    (NP (DT The) (NN choice))
    (VP (VBZ is)
      (ADJP (JJ yours)
        (S
          (VP (TO to)
            (VP (VB make))))))
    (. .)))

det(choice-2, The-1)
nsubj(yours-4, choice-2)
cop(yours-4, is-3)
root(ROOT-0, yours-4)
aux(make-6, to-5)
xcomp(yours-4, make-6)

(ROOT
  (S
    (NP (DT No) (NN one))
    (VP (MD can)
      (VP (VB force)
        (S
          (NP (PRP you))
          (VP (TO to)
            (VP (VB become)
              (NP (DT a) (NN marrow) (NN donor))
              (SBAR (IN because)
                (S
                  (S
                    (VP (TO to)
                      (VP (VB do)
                        (ADVP (RB so)))))
                  (VP (MD would)
                    (VP (VB mean)
                      (SBAR (IN that)
                        (S
                          (NP (PRP you))
                          (VP (VBP are) (RB not)
                            (ADJP (JJ free)
                              (S
                                (VP (TO to)
                                  (VP (VB make)
                                    (NP (NNS decisions))
                                    (PP (IN about)
                                      (NP (PRP$ your) (NN body)))))))))))))))))))
    (. .)))

det(one-2, No-1)
nsubj(force-4, one-2)
aux(force-4, can-3)
root(ROOT-0, force-4)
nsubj(donor-10, you-5)
aux(donor-10, to-6)
cop(donor-10, become-7)
det(donor-10, a-8)
nn(donor-10, marrow-9)
xcomp(force-4, donor-10)
mark(mean-16, because-11)
aux(do-13, to-12)
csubj(mean-16, do-13)
advmod(do-13, so-14)
aux(mean-16, would-15)
advcl(donor-10, mean-16)
complm(free-21, that-17)
nsubj(free-21, you-18)
cop(free-21, are-19)
neg(free-21, not-20)
ccomp(mean-16, free-21)
aux(make-23, to-22)
xcomp(free-21, make-23)
dobj(make-23, decisions-24)
poss(body-27, your-26)
prep_about(make-23, body-27)

(ROOT
  (S
    (SBAR
      (X (SYM \*))
      (S
        (SBAR (RB even) (IN if)
          (FRAG
            (SBAR
              (X (SYM \*))
              (S
                (NP (DT those) (NNS decisions))
                (VP (MD can)
                  (VP (`` ``) (VB save) ('' '')))))))
        (VP (VBZ lives))))
    (NP (DT that))
    (VP (MD might)
      (ADVP (RB otherwise))
      (VP (VB die)))
    (. .)))

dep(lives-11, \*-1)
advmod(save-9, even-2)
dep(save-9, if-3)
dep(save-9, \*-4)
det(decisions-6, those-5)
nsubj(save-9, decisions-6)
aux(save-9, can-7)
advcl(lives-11, save-9)
csubj(lives-11, save-9)
dep(die-15, lives-11)
nsubj(die-15, that-12)
aux(die-15, might-13)
advmod(die-15, otherwise-14)
root(ROOT-0, die-15)

(ROOT
  (FRAG
    (SBAR
      (WHADVP (WRB when))
      (S
        (NP (PRP you))
        (VP (VBP have)
          (NP (DT the) (NN power)
            (S
              (VP (TO to)
                (VP (VB save)
                  (NP (DT that) (NN child)))))))))
    (. .)))

advmod(have-3, when-1)
nsubj(have-3, you-2)
root(ROOT-0, have-3)
det(power-5, the-4)
dobj(have-3, power-5)
aux(save-7, to-6)
infmod(power-5, save-7)
det(child-9, that-8)
dobj(save-7, child-9)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (ADJP (RB perfectly) (JJ moral))
      (SBAR (IN for)
        (S
          (NP (PRP you))
          (VP (VBD let)
            (SBAR
              (S
                (NP (DT a) (NN child))
                (VP
                  (VP (VBP die))
                  (CC and)
                  (RB not)
                  (VP (VBP do)
                    (NP (DT a) (JJ single) (NN thing))
                    (S
                      (VP (TO to)
                        (VP (VB prevent)
                          (NP (PRP it)))))))))))))
    (. .)))

nsubj(moral-4, It-1)
cop(moral-4, 's-2)
advmod(moral-4, perfectly-3)
root(ROOT-0, moral-4)
mark(let-7, for-5)
nsubj(let-7, you-6)
advcl(moral-4, let-7)
det(child-9, a-8)
nsubj(die-10, child-9)
ccomp(let-7, die-10)
ccomp(let-7, not-12)
conj_and(die-10, not-12)
neg(die-10, not-12)
dep(die-10, do-13)
det(thing-16, a-14)
amod(thing-16, single-15)
dobj(do-13, thing-16)
aux(prevent-18, to-17)
xcomp(do-13, prevent-18)
dobj(prevent-18, it-19)

(ROOT
  (S
    (SBAR (IN Because)
      (S
        (NP (PRP you))
        (VP (VBP 're) (RB not)
          (ADJP (RB morally) (JJ obligated)
            (S
              (VP (TO to)
                (VP (VB save)
                  (NP (DT a) (NN life))
                  (SBAR (IN if)
                    (S
                      (NP (PRP you))
                      (VP (VBP know)
                        (NP (DT that))))))))))))
    (NP (PRP you))
    (VP (MD can))
    (. .)))

mark(obligated-6, Because-1)
nsubj(obligated-6, you-2)
cop(obligated-6, 're-3)
neg(obligated-6, not-4)
advmod(obligated-6, morally-5)
advcl(can-16, obligated-6)
aux(save-8, to-7)
xcomp(obligated-6, save-8)
det(life-10, a-9)
dobj(save-8, life-10)
mark(know-13, if-11)
nsubj(know-13, you-12)
advcl(save-8, know-13)
dobj(know-13, that-14)
nsubj(can-16, you-15)
root(ROOT-0, can-16)

(ROOT
  (SQ (VBD Did)
    (NP (PRP I))
    (VP (VB get)
      (NP (DT that) (NN right)))
    (. ?)))

aux(get-3, Did-1)
nsubj(get-3, I-2)
root(ROOT-0, get-3)
det(right-5, that-4)
dobj(get-3, right-5)

(ROOT
  (S
    (ADVP (RB Morality))
    (, ,)
    (ADVP (RB then))
    (, ,)
    (VP (MD can)
      (VP (VB be)
        (VP (VBN turned)
          (PRT (RP on)
            (CC and)
            (RP off))
          (PP (VBG according)
            (PP (TO to)
              (SBAR
                (WHNP (WDT whatever))
                (S
                  (VP (VBZ suits)
                    (NP (DT the) (NN mood))))))))))
    (. .)))

advmod(turned-7, Morality-1)
advmod(turned-7, then-3)
aux(turned-7, can-5)
auxpass(turned-7, be-6)
root(ROOT-0, turned-7)
prt(turned-7, on-8)
dep(on-8, and-9)
dep(on-8, off-10)
prepc_according_to(turned-7, to-12)
nsubj(suits-14, whatever-13)
pcomp(turned-7, suits-14)
det(mood-16, the-15)
dobj(suits-14, mood-16)

