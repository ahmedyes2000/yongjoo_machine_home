(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP
      (NP (NN space) (NNS constraints))
      (PP (IN of)
        (NP (DT the) (NN prison) (NN system))))
    (VP (MD may) (RB not)
      (VP (VB allow)
        (PP (IN for)
          (NP (JJ just) (NNS sentences)))
        (SBAR
          (SBAR
            (S
              (VP (TO to)
                (VP (VB be)
                  (VP (VBN carried)
                    (PRT (RP out)))))))
          (, ,)
          (CC but)
          (SBAR
            (WHNP (WDT that))
            (S
              (VP (VBZ is)
                (NP
                  (NP (DT an) (NN argument))
                  (PP (IN for)
                    (NP (JJR more) (JJ prison) (NN space) (NN and\/or) (NNS executions))))
                (, ,)
                (S (RB not)
                  (VP (VBG making)
                    (NP
                      (ADJP (JJ arbitrary))
                      (NNS laws))
                    (S
                      (VP (TO to)
                        (VP (VB make)
                          (ADJP (JJ sure))
                          (SBAR (IN that)
                            (S
                              (NP (DT some) (NNS crimes))
                              (VP (VBP do)
                                (VP (VB receive)
                                  (NP (DT a) (JJ just) (NN sentence)))))))))))))))))
    (. .)))

advmod(allow-11, Now-1)
nn(constraints-4, space-3)
nsubj(allow-11, constraints-4)
det(system-8, the-6)
nn(system-8, prison-7)
prep_of(constraints-4, system-8)
aux(allow-11, may-9)
neg(allow-11, not-10)
root(ROOT-0, allow-11)
amod(sentences-14, just-13)
prep_for(allow-11, sentences-14)
aux(carried-17, to-15)
auxpass(carried-17, be-16)
dep(allow-11, carried-17)
prt(carried-17, out-18)
nsubj(argument-24, that-21)
cop(argument-24, is-22)
det(argument-24, an-23)
dep(allow-11, argument-24)
conj_but(carried-17, argument-24)
amod(executions-30, more-26)
amod(executions-30, prison-27)
nn(executions-30, space-28)
nn(executions-30, and\/or-29)
prep_for(argument-24, executions-30)
neg(making-33, not-32)
partmod(argument-24, making-33)
xcomp(argument-24, making-33)
amod(laws-35, arbitrary-34)
dobj(making-33, laws-35)
aux(make-37, to-36)
xcomp(making-33, make-37)
acomp(make-37, sure-38)
complm(receive-43, that-39)
det(crimes-41, some-40)
nsubj(receive-43, crimes-41)
aux(receive-43, do-42)
ccomp(make-37, receive-43)
det(sentence-46, a-44)
amod(sentence-46, just-45)
dobj(receive-43, sentence-46)

