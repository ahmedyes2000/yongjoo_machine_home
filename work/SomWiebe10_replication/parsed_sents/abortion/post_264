(ROOT
  (S
    (NP (PRP$ its))
    (ADVP (RB just))
    (VP (VBZ selfish))
    (. .)))

nsubj(selfish-3, its-1)
advmod(selfish-3, just-2)
root(ROOT-0, selfish-3)

(ROOT
  (S
    (ADVP (RB ok))
    (, ,)
    (NP (FW i))
    (VP (MD 'll)
      (VP (VB exclude)
        (NP (NNS cases))
        (SBAR
          (WHADVP (WRB where))
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP
                (NP (DT some) (NN sort))
                (PP (IN of)
                  (NP (NN complication)))))))))
    (. .)))

advmod(exclude-5, ok-1)
nsubj(exclude-5, i-3)
aux(exclude-5, 'll-4)
root(ROOT-0, exclude-5)
dobj(exclude-5, cases-6)
advmod(is-9, where-7)
expl(is-9, there-8)
advcl(exclude-5, is-9)
det(sort-11, some-10)
nsubj(is-9, sort-11)
prep_of(sort-11, complication-13)

(ROOT
  (S
    (NP (PRP it))
    (VP (MD would)
      (VP (VB be)
        (ADJP (RB absolutely) (JJ devastating))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (DT the) (NN guy))
            (VP (VBZ finds)
              (NP (DT that))
              (PRT (RP out)))))))
    (. .)))

nsubj(devastating-5, it-1)
aux(devastating-5, would-2)
cop(devastating-5, be-3)
advmod(devastating-5, absolutely-4)
root(ROOT-0, devastating-5)
advmod(finds-9, when-6)
det(guy-8, the-7)
nsubj(finds-9, guy-8)
advcl(devastating-5, finds-9)
dobj(finds-9, that-10)
prt(finds-9, out-11)

(ROOT
  (FRAG
    (PP (FW a)
      (NP (JJ sad) (NN story)))
    (, ,)
    (INTJ (UH yes))
    (. ?)))

root(ROOT-0, a-1)
amod(story-3, sad-2)
pobj(a-1, story-3)
dep(a-1, yes-5)

(ROOT
  (S
    (ADVP (RB now))
    (NP (NNP lest))
    (VP (VBP say)
      (SBAR (IN that)
        (S
          (NP (NN story))
          (VP (VBZ is)
            (ADJP (JJ true))))))
    (. .)))

advmod(say-3, now-1)
nsubj(say-3, lest-2)
root(ROOT-0, say-3)
complm(true-7, that-4)
nsubj(true-7, story-5)
cop(true-7, is-6)
ccomp(say-3, true-7)

(ROOT
  (S
    (NP (PRP we))
    (VP (MD 'll)
      (VP (VB say)
        (SBAR (IN that) (IN because)
          (S
            (NP (PRP it))
            (VP (VBZ is))))))
    (. .)))

nsubj(say-3, we-1)
aux(say-3, 'll-2)
root(ROOT-0, say-3)
complm(is-7, that-4)
dep(is-7, because-5)
nsubj(is-7, it-6)
ccomp(say-3, is-7)

(ROOT
  (S
    (S
      (NP (PRP$ my) (NN baby))
      (VP (VBD was)
        (VP (VBN killed)
          (NP (NNS years))
          (ADVP (IN ago)))))
    (, ,)
    (CC and)
    (S
      (NP (PRP it))
      (ADVP (RB still))
      (VP (VBZ hurts)))
    (. .)))

poss(baby-2, my-1)
nsubjpass(killed-4, baby-2)
auxpass(killed-4, was-3)
root(ROOT-0, killed-4)
tmod(killed-4, years-5)
advmod(killed-4, ago-6)
nsubj(hurts-11, it-9)
advmod(hurts-11, still-10)
conj_and(killed-4, hurts-11)

(ROOT
  (S
    (S
      (NP (FW i))
      (VP (VBD tried)
        (SBAR
          (S
            (NP (NN everything) (NNS i))
            (VP (MD could)
              (S
                (VP (TO to)
                  (VP (VB keep)
                    (S
                      (NP (PRP$ my) (NN baby))
                      (ADJP (JJ alive)))))))))))
    (, ,)
    (CC and)
    (S
      (NP (FW i))
      (VP (VBD failed)))
    (. .)))

nsubj(tried-2, i-1)
root(ROOT-0, tried-2)
nn(i-4, everything-3)
nsubj(could-5, i-4)
xsubj(keep-7, i-4)
ccomp(tried-2, could-5)
aux(keep-7, to-6)
xcomp(could-5, keep-7)
poss(baby-9, my-8)
nsubj(alive-10, baby-9)
xcomp(keep-7, alive-10)
nsubj(failed-14, i-13)
conj_and(tried-2, failed-14)

(ROOT
  (S
    (NP (PRP it))
    (VP (VBD was)
      (NP (DT an)
        (ADJP (JJ impossible))
        (NN battle)))
    (. .)))

nsubj(battle-5, it-1)
cop(battle-5, was-2)
det(battle-5, an-3)
amod(battle-5, impossible-4)
root(ROOT-0, battle-5)

(ROOT
  (S
    (SBAR (IN if)
      (S
        (NP (PRP it))
        (VP (VBZ 's)
          (NP
            (NP (DT a) (NN choice))
            (PP (IN between)
              (NP
                (NP (NN abortion))
                (, ,)
                (CC and)
                (NP (DT both) (NNS people) (NN dieing))
                (, ,) (FW i)))))))
    (NP (NN dont))
    (VP (VBP have)
      (NP
        (NP (DT a) (NN problem))
        (PP (IN with)
          (NP (DT that)))))
    (. .)))

mark(choice-5, if-1)
nsubj(choice-5, it-2)
cop(choice-5, 's-3)
det(choice-5, a-4)
advcl(have-16, choice-5)
prep_between(choice-5, abortion-7)
det(dieing-12, both-10)
nn(dieing-12, people-11)
prep_between(choice-5, dieing-12)
conj_and(abortion-7, dieing-12)
nn(abortion-7, dieing-12)
dep(abortion-7, i-14)
nsubj(have-16, dont-15)
root(ROOT-0, have-16)
det(problem-18, a-17)
dobj(have-16, problem-18)
prep_with(problem-18, that-20)

(ROOT
  (S
    (NP
      (NP (PRP$ my) (JJ main) (NN problem))
      (PP (IN with)
        (NP (PRP it))))
    (VP (VBZ is)
      (SBAR (IN that)
        (S
          (NP (DT the) (NN man))
          (VP (VBZ has)
            (NP
              (NP
                (ADJP (RB absolutly) (DT no))
                (NN say))
              (PP (IN in)
                (NP (DT this))))))))
    (. .)))

poss(problem-3, my-1)
amod(problem-3, main-2)
nsubj(is-6, problem-3)
prep_with(problem-3, it-5)
root(ROOT-0, is-6)
complm(has-10, that-7)
det(man-9, the-8)
nsubj(has-10, man-9)
ccomp(is-6, has-10)
advmod(no-12, absolutly-11)
amod(say-13, no-12)
dobj(has-10, say-13)
prep_in(say-13, this-15)

(ROOT
  (S
    (NP (NNP lets))
    (VP (VBP say)
      (SBAR
        (S
          (NP (DT a) (NN woman))
          (VP (VBZ gets)
            (ADJP (JJ pregnant))))))
    (. .)))

nsubj(say-2, lets-1)
root(ROOT-0, say-2)
det(woman-4, a-3)
nsubj(pregnant-6, woman-4)
dep(pregnant-6, gets-5)
ccomp(say-2, pregnant-6)

(ROOT
  (S
    (S
      (NP (DT the) (NN man))
      (VP (VBZ wants)
        (NP (DT the) (NN child))))
    (, ,)
    (CC and)
    (S
      (NP (DT the) (NN woman))
      (VP (VBZ does) (RB n't)))
    (. .)))

det(man-2, the-1)
nsubj(wants-3, man-2)
root(ROOT-0, wants-3)
det(child-5, the-4)
dobj(wants-3, child-5)
det(woman-9, the-8)
nsubj(does-10, woman-9)
conj_and(wants-3, does-10)
neg(does-10, n't-11)

(ROOT
  (S
    (S
      (NP (DT the) (NN guy))
      (VP
        (VP (MD can)
          (ADVP (NN kind) (IN of))
          (VP (VB see)
            (S
              (NP (PRP it))
              (VP (VBG coming)))))
        (CC and)
        (VP (MD may)
          (VP (VB try)
            (S
              (VP (TO to)
                (VP (VB talk)
                  (NP (PRP her))
                  (PRT (RP out))
                  (PP (IN of)
                    (NP (PRP it))))))))))
    (, ,)
    (CC but)
    (S
      (NP (DT that))
      (VP (VBZ 's)
        (NP
          (NP (DT the) (JJS best))
          (SBAR
            (S
              (NP (PRP he))
              (VP (MD can)
                (VP (VB do))))))))
    (. .)))

det(guy-2, the-1)
nsubj(see-6, guy-2)
nsubj(try-11, guy-2)
xsubj(talk-13, guy-2)
aux(see-6, can-3)
dep(of-5, kind-4)
advmod(see-6, of-5)
root(ROOT-0, see-6)
nsubj(coming-8, it-7)
dep(see-6, coming-8)
aux(try-11, may-10)
conj_and(see-6, try-11)
aux(talk-13, to-12)
xcomp(try-11, talk-13)
dobj(talk-13, her-14)
prep_out_of(talk-13, it-17)
nsubj(best-23, that-20)
cop(best-23, 's-21)
det(best-23, the-22)
conj_but(see-6, best-23)
dobj(do-26, best-23)
nsubj(do-26, he-24)
aux(do-26, can-25)
rcmod(best-23, do-26)

(ROOT
  (S
    (SBAR (IN while)
      (S
        (NP (DT the) (JJ male) (NN half))
        (VP (VBZ is)
          (ADVP (RB already))
          (VP (VBN attached)
            (PP (TO to)
              (NP (DT the) (NN baby)))))))
    (, ,)
    (NP (DT the) (JJ female) (NN half))
    (VP (MD could)
      (VP (VB be)
        (PP (IN out)
          (S
            (NP (EX there))
            (VP (VBG having)
              (NP (PRP$ his) (NN baby))
              (VP (VBN killed)
                (PP (IN without)
                  (S
                    (NP (PRP him))
                    (ADVP (RB even))
                    (VP (VBG knowing))))))))))
    (. .)))

mark(attached-7, while-1)
det(half-4, the-2)
amod(half-4, male-3)
nsubjpass(attached-7, half-4)
auxpass(attached-7, is-5)
advmod(attached-7, already-6)
advcl(be-16, attached-7)
det(baby-10, the-9)
prep_to(attached-7, baby-10)
det(half-14, the-12)
amod(half-14, female-13)
nsubj(be-16, half-14)
aux(be-16, could-15)
root(ROOT-0, be-16)
expl(killed-22, there-18)
aux(killed-22, having-19)
poss(baby-21, his-20)
dobj(killed-22, baby-21)
nsubj(killed-22, baby-21)
prepc_out(be-16, killed-22)
nsubj(knowing-26, him-24)
advmod(knowing-26, even-25)
prepc_without(killed-22, knowing-26)

(ROOT
  (NP (DT a) (NN child)
    (SBAR (IN that)
      (S
        (NP (DT the) (NN man))
        (VP
          (VP (VBZ wants))
          (, ,)
          (CC and)
          (VP (MD would)
            (VP (VB take)
              (NP (DT all) (NN responsability))
              (PP (IN for)))))))
    (. .)))

det(child-2, a-1)
root(ROOT-0, child-2)
complm(wants-6, that-3)
det(man-5, the-4)
nsubj(wants-6, man-5)
nsubj(take-10, man-5)
ccomp(child-2, wants-6)
aux(take-10, would-9)
ccomp(child-2, take-10)
conj_and(wants-6, take-10)
det(responsability-12, all-11)
dobj(take-10, responsability-12)
prep(take-10, for-13)

(ROOT
  (FRAG
    (ADJP (JJ financial)
      (CC and)
      (JJ otherwise))
    (. .)))

root(ROOT-0, financial-1)
conj_and(financial-1, otherwise-3)

(ROOT
  (S
    (NP (NN anything))
    (NP (PRP it))
    (VP (VBZ takes)
      (S
        (VP (TO to)
          (VP (VB keep)
            (S
              (NP (PRP$ his) (NN child))
              (ADJP (JJ alive)))))))
    (. .)))

nsubj(takes-3, anything-1)
xsubj(keep-5, anything-1)
nsubj(takes-3, it-2)
xsubj(keep-5, it-2)
root(ROOT-0, takes-3)
aux(keep-5, to-4)
xcomp(takes-3, keep-5)
poss(child-7, his-6)
nsubj(alive-8, child-7)
xcomp(keep-5, alive-8)

