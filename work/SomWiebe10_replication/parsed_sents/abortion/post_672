(ROOT
  (S
    (NP
      (NP (DT The) (NN claim))
      (SBAR (IN that)
        (S
          (NP (DT this))
          (VP (VBZ is)
            (NP (DT the) (JJ only) (`` ``) (JJ logical) (NN answer) ('' ''))))))
    (VP (VBZ is)
      (ADVP (RB positively))
      (ADJP (JJ absurd)))
    (. .)))

det(claim-2, The-1)
nsubj(absurd-14, claim-2)
complm(answer-10, that-3)
nsubj(answer-10, this-4)
cop(answer-10, is-5)
det(answer-10, the-6)
amod(answer-10, only-7)
amod(answer-10, logical-9)
dep(claim-2, answer-10)
cop(absurd-14, is-12)
advmod(absurd-14, positively-13)
root(ROOT-0, absurd-14)

(ROOT
  (FRAG
    (SBAR (IN If)
      (S
        (NP (PRP it))
        (VP (VBZ 's)
          (ADJP (JJ logical)
            (PP (IN at)
              (NP
                (NP (DT the) (NN stage))
                (PP (IN of)
                  (NP (DT a) (VBN fertilized) (NN egg)))))))))
    (, ,)
    (WHADVP (WRB why))
    (RB not)
    (VP
      (ADVP (IN at)
        (NP (DT the) (NN sperm)))
      (VB and)
      (NP (NN ovum) (NN production)))
    (. ?)))

mark(logical-4, If-1)
nsubj(logical-4, it-2)
cop(logical-4, 's-3)
dep(not-14, logical-4)
det(stage-7, the-6)
prep_at(logical-4, stage-7)
det(egg-11, a-9)
amod(egg-11, fertilized-10)
prep_of(stage-7, egg-11)
dep(not-14, why-13)
root(ROOT-0, not-14)
advmod(and-18, at-15)
det(sperm-17, the-16)
pobj(at-15, sperm-17)
dep(not-14, and-18)
nn(production-20, ovum-19)
dobj(and-18, production-20)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (DT any) (NN logician))
        (VP (VBZ knows))))
    (, ,)
    (NP (DT a) (NN consequence))
    (VP (MD can) (RB not)
      (VP (VB come)
        (NP
          (NP
            (ADJP (IN about)
              (PP (IN without)
                (S
                  (VP (VBG \*)
                    (NP (DT all))
                    (X (SYM \*))))))
            (JJ necessary) (NNS conditions))
          (PRN (-LRB- -LRB-)
            (CC and)
            (S
              (NP
                (NP
                  (QP (IN at) (JJS least) (CD one)))
                (PP (IN of)
                  (NP
                    (NP (PRP them))
                    (CC or)
                    (NP (DT an) (JJ additional) (NN one)))))
              (VP (VBG being)
                (ADJP (JJ sufficient))))
            (-RRB- -RRB-)))))
    (. .)))

mark(knows-4, As-1)
det(logician-3, any-2)
nsubj(knows-4, logician-3)
advcl(come-10, knows-4)
det(consequence-7, a-6)
nsubj(come-10, consequence-7)
aux(come-10, can-8)
neg(come-10, not-9)
root(ROOT-0, come-10)
amod(conditions-17, about-11)
prepc_without(about-11, \*-13)
dobj(\*-13, all-14)
dep(\*-13, \*-15)
amod(conditions-17, necessary-16)
dobj(come-10, conditions-17)
dep(sufficient-30, and-19)
quantmod(one-22, at-20)
mwe(at-20, least-21)
pobj(at-20, least-21)
nsubj(sufficient-30, one-22)
prep_of(one-22, them-24)
det(one-28, an-26)
amod(one-28, additional-27)
prep_of(one-22, one-28)
conj_or(them-24, one-28)
cop(sufficient-30, being-29)
dep(conditions-17, sufficient-30)

(ROOT
  (S
    (PP (IN Under)
      (NP (DT this) (NN model)))
    (, ,)
    (NP (NN life))
    (VP (MD could)
      (VP (VB be)
        (VP (VBN defined)
          (PP (IN as)
            (NP
              (NP (DT the) (NN point))
              (SBAR
                (WHPP (IN at)
                  (WHNP (WDT which)))
                (S
                  (NP
                    (NP (DT all) (JJ necessary) (NNS conditions))
                    (-LRB- -LRB-)
                    (CC and)
                    (ADVP (IN at) (JJS least))
                    (NP (CD one) (JJ sufficient) (NN condition))
                    (-RRB- -RRB-))
                  (VP (VBP have)
                    (VP (VBN been)
                      (VP (VBN fulfilled)))))))))))
    (. .)))

det(model-3, this-2)
prep_under(defined-8, model-3)
nsubjpass(defined-8, life-5)
aux(defined-8, could-6)
auxpass(defined-8, be-7)
root(ROOT-0, defined-8)
det(point-11, the-10)
prep_as(defined-8, point-11)
rel(fulfilled-27, which-13)
det(conditions-16, all-14)
amod(conditions-16, necessary-15)
nsubjpass(fulfilled-27, conditions-16)
advmod(conditions-16, at-19)
conj_and(conditions-16, at-19)
nsubjpass(fulfilled-27, at-19)
pobj(at-19, least-20)
num(condition-23, one-21)
amod(condition-23, sufficient-22)
conj_and(conditions-16, condition-23)
nsubjpass(fulfilled-27, condition-23)
aux(fulfilled-27, have-25)
auxpass(fulfilled-27, been-26)
rcmod(point-11, fulfilled-27)

(ROOT
  (S
    (ADVP (RB Logically))
    (, ,)
    (NP (DT that))
    (ADVP (RB probably))
    (VP (VBZ puts)
      (NP (DT the) (NN event))
      (PP (IN at)
        (NP
          (NP (DT the) (NN point))
          (SBAR
            (WHPP (IN at)
              (WHNP (WDT which)))
            (S
              (NP (DT a) (NN fetus))
              (VP (MD can)
                (VP (VB survive)
                  (NP
                    (NP (RB outside))
                    (PP (IN of)
                      (NP (DT the) (NN mother)))))))))))
    (. .)))

advmod(puts-5, Logically-1)
nsubj(puts-5, that-3)
advmod(puts-5, probably-4)
root(ROOT-0, puts-5)
det(event-7, the-6)
dobj(puts-5, event-7)
det(point-10, the-9)
prep_at(puts-5, point-10)
rel(survive-16, which-12)
det(fetus-14, a-13)
nsubj(survive-16, fetus-14)
aux(survive-16, can-15)
rcmod(point-10, survive-16)
dobj(survive-16, outside-17)
det(mother-20, the-19)
prep_of(outside-17, mother-20)

(ROOT
  (S
    (S
      (ADVP (RB Obviously))
      (NP (DT that))
      (VP (VBZ 's) (RB not)
        (NP
          (NP (DT the) (JJ only) (NN possibility))
          (PP (IN for)
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (`` ``) (NN life) ('' ''))
                (VP (VBZ begins)
                  (SBAR (IN because)
                    (S
                      (NP (DT the) (NN question))
                      (VP (VBZ is)
                        (ADJP (RB terribly) (JJ broad)
                          (PP (IN after)
                            (NP (DT all))))))))))))))
    (, ,)
    (NP (NN sperm))
    (VP (VBP are)
      (ADJP
        (ADVP (RBS most) (RB certainly))
        (JJ alive)))
    (. .)))

advmod(possibility-7, Obviously-1)
nsubj(possibility-7, that-2)
cop(possibility-7, 's-3)
neg(possibility-7, not-4)
det(possibility-7, the-5)
amod(possibility-7, only-6)
ccomp(alive-27, possibility-7)
advmod(begins-13, when-9)
nsubj(begins-13, life-11)
prepc_for(possibility-7, begins-13)
mark(broad-19, because-14)
det(question-16, the-15)
nsubj(broad-19, question-16)
cop(broad-19, is-17)
advmod(broad-19, terribly-18)
advcl(begins-13, broad-19)
prep_after(broad-19, all-21)
nsubj(alive-27, sperm-23)
cop(alive-27, are-24)
advmod(certainly-26, most-25)
advmod(alive-27, certainly-26)
root(ROOT-0, alive-27)

(ROOT
  (S
    (S
      (NP (DT This))
      (VP (VBZ is)
        (ADVP (RB also))
        (RB not)
        (NP (DT the) (JJS best) (NNS criteria))
        (PP (IN for)
          (S
            (VP (VBG drawing)
              (NP
                (NP (DT a) (NN line))
                (PP (IN for)
                  (NP (NN abortion)))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ 's)
        (ADJP
          (ADJP (RB indisputably) (RBR more) (JJ logical))
          (PP (IN than)
            (NP
              (NP (DT the) (JJ original) (NN author) (POS 's))
              (ADJP (JJ weak)
                (CC and)
                (JJ baseless))
              (NN claim))))))
    (. .)))

nsubj(criteria-7, This-1)
cop(criteria-7, is-2)
advmod(criteria-7, also-3)
neg(criteria-7, not-4)
det(criteria-7, the-5)
amod(criteria-7, best-6)
root(ROOT-0, criteria-7)
prepc_for(criteria-7, drawing-9)
det(line-11, a-10)
dobj(drawing-9, line-11)
prep_for(line-11, abortion-13)
nsubj(logical-20, it-16)
cop(logical-20, 's-17)
advmod(logical-20, indisputably-18)
advmod(logical-20, more-19)
conj_but(criteria-7, logical-20)
det(author-24, the-22)
amod(author-24, original-23)
poss(claim-29, author-24)
amod(claim-29, weak-26)
conj_and(weak-26, baseless-28)
amod(claim-29, baseless-28)
prep_than(logical-20, claim-29)

(ROOT
  (S
    (NP (EX There))
    (VP (VBP are)
      (ADJP (RBR more) (JJ pertinent)
        (SBAR
          (S
            (VP (VBZ questions)
              (S
                (S
                  (VP (TO to)
                    (VP (VB be)
                      (VP (VBN asked)
                        (PP (IN in)
                          (NP (DT the) (NN abortion) (NN debate)))
                        (PP (IN beyond)
                          (NP
                            (NP (DT this) (NN one))
                            (, ,)
                            (ADJP (JJ such) (RB as))
                            ('' '')))))))
                (SBARQ
                  (WHADVP (WRB When))
                  (SQ (VBZ does)
                    (NP (DT a) (NN fetus))
                    (VP (VB achieve)
                      (NP (JJ independent) (NN brain) (NN function))))
                  (. ?))))))))))

expl(are-2, There-1)
root(ROOT-0, are-2)
advmod(pertinent-4, more-3)
acomp(are-2, pertinent-4)
dep(pertinent-4, questions-5)
aux(asked-8, to-6)
auxpass(asked-8, be-7)
dep(questions-5, asked-8)
det(debate-12, the-10)
nn(debate-12, abortion-11)
prep_in(asked-8, debate-12)
det(one-15, this-14)
prep_beyond(asked-8, one-15)
amod(one-15, such-17)
advmod(such-17, as-18)
advmod(achieve-24, When-20)
aux(achieve-24, does-21)
det(fetus-23, a-22)
nsubj(achieve-24, fetus-23)
dep(asked-8, achieve-24)
amod(function-27, independent-25)
nn(function-27, brain-26)
dobj(achieve-24, function-27)

(ROOT
  (S
    (S
      (PP (IN On)
        (NP (DT those) (NNS topics)))
      (NP (EX there))
      (VP (MD can)
        (ADVP (RB certainly))
        (VP (VB be)
          (NP
            (ADJP (JJ fruitful)
              (CC and)
              (JJ interesting))
            (NN debate)))))
    (, ,)
    (CC but)
    (S
      (S
        (NP (DT this) (NN question))
        (VP (VBZ is)
          (ADJP (RB too) (JJ broad))))
      (CC and)
      (S
        (NP (DT this) (`` ``) (NN expert) ('' ''))
        (VP (VBZ is)
          (ADVP (RB tragically))
          (S
            (VP (TO na)
              (VP (VB ve)))))))
    (. .)))

det(topics-3, those-2)
prep_on(debate-11, topics-3)
expl(debate-11, there-4)
aux(debate-11, can-5)
advmod(debate-11, certainly-6)
cop(debate-11, be-7)
amod(debate-11, fruitful-8)
conj_and(fruitful-8, interesting-10)
amod(debate-11, interesting-10)
root(ROOT-0, debate-11)
det(question-15, this-14)
nsubj(broad-18, question-15)
cop(broad-18, is-16)
advmod(broad-18, too-17)
conj_but(debate-11, broad-18)
det(expert-22, this-20)
nsubj(is-24, expert-22)
xsubj(na-26, expert-22)
conj_but(debate-11, is-24)
conj_and(broad-18, is-24)
advmod(is-24, tragically-25)
xcomp(is-24, na-26)
dep(na-26, ve-27)

(ROOT
  (S (CC But)
    (S
      (NP (DT those) (NNS events))
      (VP (MD ca) (RB n't)
        (VP (VB happen)
          (PP (IN without)
            (S
              (NP (PRP$ their) (NN host) (NNS bodies))
              (ADVP (RB first))
              (VP (VBG being)
                (VP (VBN born))))))))
    (, ,) (IN so)
    (S
      (ADVP (RB maybe))
      (NP (PRP it))
      (VP (MD should)
        (VP (VB be)
          (NP
            (NP (DT the) (NNP grandparents) ('' '') (NN conception))
            (PP (IN of)
              (NP (DT the) (JJS earliest) (NN parent)))))))
    (. .)))

cc(happen-6, But-1)
det(events-3, those-2)
nsubj(happen-6, events-3)
aux(happen-6, ca-4)
neg(happen-6, n't-5)
root(ROOT-0, happen-6)
poss(bodies-10, their-8)
nn(bodies-10, host-9)
nsubjpass(born-13, bodies-10)
advmod(born-13, first-11)
auxpass(born-13, being-12)
prepc_without(happen-6, born-13)
dep(happen-6, so-15)
advmod(conception-23, maybe-16)
nsubj(conception-23, it-17)
aux(conception-23, should-18)
cop(conception-23, be-19)
det(conception-23, the-20)
nn(conception-23, grandparents-21)
ccomp(happen-6, conception-23)
det(parent-27, the-25)
amod(parent-27, earliest-26)
prep_of(conception-23, parent-27)

(ROOT
  (S (CC But)
    (S
      (ADVP (RB then))
      (NP (PRP you))
      (VP (VBP run)
        (PP (IN into)
          (NP (DT the) (JJ same) (NN issue)))))
    (CC and)
    (S
      (NP (PRP it))
      (VP (VBZ regresses)
        (ADVP (RB infinitely))))
    (. .)))

advmod(run-4, then-2)
nsubj(run-4, you-3)
root(ROOT-0, run-4)
det(issue-8, the-6)
amod(issue-8, same-7)
prep_into(run-4, issue-8)
nsubj(regresses-11, it-10)
conj_and(run-4, regresses-11)
advmod(regresses-11, infinitely-12)

(ROOT
  (S
    (S
      (NP (NN Conception))
      (VP (VBZ is)
        (ADVP (RB certainly))
        (NP
          (NP (DT a) (NN choice))
          (CC and)
          (NP
            (NP (DT a) (NN point))
            (PP (IN in)
              (NP (NN time)))))))
    (, ,)
    (CC but)
    (S
      (S
        (VP (TO to)
          (VP (VB claim)
            (SBAR (IN that)
              (S
                (NP (PRP it))
                (VP (VBZ is)
                  (NP (DT the)
                    (ADJP (RB only) (JJ logical))
                    (NN answer))))))))
      (VP (VBZ is)
        (NP (JJ utter) (NN inanity))))
    (. .)))

nsubj(choice-5, Conception-1)
cop(choice-5, is-2)
advmod(choice-5, certainly-3)
det(choice-5, a-4)
root(ROOT-0, choice-5)
det(point-8, a-7)
conj_and(choice-5, point-8)
prep_in(point-8, time-10)
aux(claim-14, to-13)
csubj(inanity-24, claim-14)
complm(answer-21, that-15)
nsubj(answer-21, it-16)
cop(answer-21, is-17)
det(answer-21, the-18)
advmod(logical-20, only-19)
amod(answer-21, logical-20)
ccomp(claim-14, answer-21)
cop(inanity-24, is-22)
amod(inanity-24, utter-23)
conj_but(choice-5, inanity-24)

(ROOT
  (S
    (SBAR (RB Just) (IN as)
      (S
        (NP (DT a) (VBN fertilized) (NN egg))
        (VP (VBZ is)
          (NP
            (NP (DT a) (NN component))
            (PP (IN of)
              (NP
                (NP (DT a) (NN human))
                (VP
                  (ADVP (RB finally))
                  (VBG being)
                  (VP (VBN born)))))))))
    (, ,) (RB so)
    (VP (VBP are)
      (NP
        (NP (NNS millions))
        (PP (IN of)
          (NP
            (NP (JJ other) (NNS factors))
            (, ,)
            (NP
              (NP (JJ many))
              (PP (VBG including)
                (NP
                  (NP (DT the) (JJ internal) (NN environment) (, ,) (NN incubation)
                    (CC and)
                    (NN nourishment))
                  (PP (IN of)
                    (NP
                      (NP (DT a) (NN fetus) (NN inside))
                      (PP (IN of)
                        (NP (DT a) (NN woman))))))))))))
    (. .)))

advmod(component-8, Just-1)
dep(component-8, as-2)
det(egg-5, a-3)
amod(egg-5, fertilized-4)
nsubj(component-8, egg-5)
cop(component-8, is-6)
det(component-8, a-7)
advcl(millions-18, component-8)
det(human-11, a-10)
prep_of(component-8, human-11)
advmod(born-14, finally-12)
auxpass(born-14, being-13)
partmod(human-11, born-14)
advmod(millions-18, so-16)
cop(millions-18, are-17)
root(ROOT-0, millions-18)
amod(factors-21, other-20)
prep_of(millions-18, factors-21)
appos(factors-21, many-23)
det(environment-27, the-25)
amod(environment-27, internal-26)
prep_including(many-23, environment-27)
prep_including(many-23, incubation-29)
conj_and(environment-27, incubation-29)
prep_including(many-23, nourishment-31)
conj_and(environment-27, nourishment-31)
det(inside-35, a-33)
nn(inside-35, fetus-34)
prep_of(environment-27, inside-35)
det(woman-38, a-37)
prep_of(inside-35, woman-38)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB say)
          (SBAR (IN that)
            (S
              (NP (DT a) (VBN fertilized) (NN egg) (NN \*))
              (VP (VBZ is)
                (NP
                  (NP (JJ \*) (NN life))
                  (SBAR
                    (S
                      (VP (MD would)
                        (S
                          (VP (TO to)
                            (VP (VB be))))))))))))))
    (VP (VBP say)
      (SBAR (IN that)
        (S
          (NP (DT an) (NN engine) (NN \*))
          (VP (VBZ is)
            (VP (VBG \*)
              (NP (DT a) (NN vehicle)))))))
    (. .)))

aux(say-2, To-1)
csubj(say-14, say-2)
complm(life-10, that-3)
det(\*-7, a-4)
amod(\*-7, fertilized-5)
nn(\*-7, egg-6)
nsubj(life-10, \*-7)
cop(life-10, is-8)
amod(life-10, \*-9)
ccomp(say-2, life-10)
rcmod(life-10, would-11)
aux(be-13, to-12)
xcomp(would-11, be-13)
root(ROOT-0, say-14)
complm(\*-20, that-15)
det(\*-18, an-16)
nn(\*-18, engine-17)
nsubj(\*-20, \*-18)
aux(\*-20, is-19)
ccomp(say-14, \*-20)
det(vehicle-22, a-21)
dobj(\*-20, vehicle-22)

(ROOT
  (S
    (NP (PRP It))
    (ADVP (RB simply))
    (VP (VBZ is) (RB n't)
      (ADJP (JJ sufficient)
        (S
          (VP (TO to)
            (VP (VB produce)
              (NP (DT a) (NN human)))))))
    (. .)))

nsubj(sufficient-5, It-1)
advmod(sufficient-5, simply-2)
cop(sufficient-5, is-3)
neg(sufficient-5, n't-4)
root(ROOT-0, sufficient-5)
aux(produce-7, to-6)
xcomp(sufficient-5, produce-7)
det(human-9, a-8)
dobj(produce-7, human-9)

(ROOT
  (S
    (ADVP (RB As) (RB long)
      (SBAR (IN as)
        (S
          (NP (PRP we))
          (VP (VBP 're)
            (VP (VBG talking)
              (PP (IN about)
                (NP (NN logic))))))))
    (, ,)
    (NP (PRP we))
    (VP (MD may)
      (ADVP (RB as) (RB well))
      (VP (VB examine)
        (NP (JJ actual) (JJ logical) (NNS constructs))))
    (. .)))

advmod(long-2, As-1)
advmod(examine-14, long-2)
mark(talking-6, as-3)
nsubj(talking-6, we-4)
aux(talking-6, 're-5)
ccomp(long-2, talking-6)
prep_about(talking-6, logic-8)
nsubj(examine-14, we-10)
aux(examine-14, may-11)
advmod(well-13, as-12)
mwe(well-13, as-12)
advmod(examine-14, well-13)
root(ROOT-0, examine-14)
amod(constructs-17, actual-15)
amod(constructs-17, logical-16)
dobj(examine-14, constructs-17)

(ROOT
  (S
    (NP
      (NP (DT A) (VBN fertilized) (NN egg))
      (PP (IN at)
        (NP
          (NP (DT the) (NN point))
          (PP (IN of)
            (NP (NN conception))))))
    (VP (VBZ is)
      (NP
        (NP
          (NP (DT a)
            (ADJP (RB \*) (JJ necessary))
            (NN \*) (NN condition))
          (PP (IN for)
            (NP (JJ human) (NN life))))
        (, ,)
        (CONJP (CC but)
          (RB not))
        (NP (DT a) (JJ \*) (JJ sufficient) (NN \*) (NN condition))))
    (. .)))

det(egg-3, A-1)
amod(egg-3, fertilized-2)
nsubj(condition-14, egg-3)
det(point-6, the-5)
prep_at(egg-3, point-6)
prep_of(point-6, conception-8)
cop(condition-14, is-9)
det(condition-14, a-10)
advmod(necessary-12, \*-11)
amod(condition-14, necessary-12)
nn(condition-14, \*-13)
root(ROOT-0, condition-14)
amod(life-17, human-16)
prep_for(condition-14, life-17)
det(condition-25, a-21)
amod(condition-25, \*-22)
amod(condition-25, sufficient-23)
nn(condition-25, \*-24)
conj_negcc(condition-14, condition-25)

