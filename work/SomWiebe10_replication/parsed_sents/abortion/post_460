(ROOT
  (UCP
    (PP (VBG According)
      (PP (TO to)
        (NP (PRP$ your) (NN reasoning))))
    (: :)
    (S
      (VP (VBG ??)))))

root(ROOT-0, According-1)
pcomp(According-1, to-2)
poss(reasoning-4, your-3)
prep_to(According-1, reasoning-4)
dep(According-1, ??-6)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (NN anyone))
        (ADVP (RB really))
        (VP (VBD belived)
          (SBAR
            (S
              (NP (NN death) (NN penalty))
              (VP (VBZ is)
                (NP (NN murder))))))))
    (, ,)
    (NP (PRP he)
      (CC or)
      (PRP she))
    (VP (MD would)
      (VP (VB be)
        (VP (VBG advocating)
          (NP (DT the) (JJ same) (NN penalty))
          (PP (IN for)
            (NP
              (NP (DT those))
              (SBAR
                (WHNP (WP who))
                (S
                  (VP (VBP carry)
                    (VP (VB out\/sentence)
                      (NP (DT the) (NN death) (NN penalty))
                      (SBAR (IN as)
                        (S
                          (NP (DT the) (NN law))
                          (VP (VBZ prescribes)
                            (PP (IN for)
                              (NP (JJ premeditated) (NN murder)))))))))))))))
    (. .)))

mark(belived-4, If-1)
nsubj(belived-4, anyone-2)
advmod(belived-4, really-3)
advcl(advocating-15, belived-4)
nn(penalty-6, death-5)
nsubj(murder-8, penalty-6)
cop(murder-8, is-7)
ccomp(belived-4, murder-8)
nsubj(advocating-15, he-10)
conj_or(he-10, she-12)
nsubj(advocating-15, she-12)
aux(advocating-15, would-13)
aux(advocating-15, be-14)
root(ROOT-0, advocating-15)
det(penalty-18, the-16)
amod(penalty-18, same-17)
dobj(advocating-15, penalty-18)
prep_for(advocating-15, those-20)
nsubj(carry-22, those-20)
rcmod(those-20, carry-22)
xcomp(carry-22, out\/sentence-23)
det(penalty-26, the-24)
nn(penalty-26, death-25)
dobj(out\/sentence-23, penalty-26)
mark(prescribes-30, as-27)
det(law-29, the-28)
nsubj(prescribes-30, law-29)
advcl(out\/sentence-23, prescribes-30)
amod(murder-33, premeditated-32)
prep_for(prescribes-30, murder-33)

(ROOT
  (S
    (VP (VB Correct))
    (. .)))

root(ROOT-0, Correct-1)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB honestly))
    (VP (VBP do) (RB n't)
      (VP (VB believe)
        (SBAR (IN that)
          (S
            (NP
              (NP (DT those))
              (VP (VBN opposed)
                (PP (TO to)
                  (NP (DT the) (NN death) (NN penalty)))))
            (VP (VBP want)
              (NP
                (NP (NN jury) (NNS members))
                (, ,)
                (NP (NNS judges))
                (, ,)
                (CC and)
                (NP (NN law) (NNS officials)))
              (S
                (VP (TO to)
                  (VP (VB be)
                    (VP (VBN jailed)
                      (PP (IN over)
                        (NP (PRP it))))))))))))
    (. .)))

nsubj(believe-5, I-1)
advmod(believe-5, honestly-2)
aux(believe-5, do-3)
neg(believe-5, n't-4)
root(ROOT-0, believe-5)
complm(want-13, that-6)
nsubj(want-13, those-7)
partmod(those-7, opposed-8)
det(penalty-12, the-10)
nn(penalty-12, death-11)
prep_to(opposed-8, penalty-12)
ccomp(believe-5, want-13)
nn(members-15, jury-14)
dobj(want-13, members-15)
dobj(want-13, judges-17)
conj_and(members-15, judges-17)
nn(officials-21, law-20)
dobj(want-13, officials-21)
conj_and(members-15, officials-21)
aux(jailed-24, to-22)
auxpass(jailed-24, be-23)
xcomp(want-13, jailed-24)
prep_over(jailed-24, it-26)

(ROOT
  (FRAG
    (WHADVP (WRB Why))
    (NP (RB not))
    (. ?)))

dep(not-2, Why-1)
root(ROOT-0, not-2)

(ROOT
  (S
    (NP (PRP They))
    (ADVP (RB simply))
    (VP (VBP want)
      (NP (DT the) (NN option))
      (PP (IN off)
        (NP (DT the) (NN table))))
    (. .)))

nsubj(want-3, They-1)
advmod(want-3, simply-2)
root(ROOT-0, want-3)
det(option-5, the-4)
dobj(want-3, option-5)
det(table-8, the-7)
prep_off(want-3, table-8)

(ROOT
  (S
    (NP (DT That))
    (VP (MD can) (RB not)
      (VP (VB be)
        (VP (VBN accomplished) (, ,)
          (PP (IN without)
            (NP (NN punishment))))))
    (. .)))

nsubjpass(accomplished-5, That-1)
aux(accomplished-5, can-2)
neg(accomplished-5, not-3)
auxpass(accomplished-5, be-4)
root(ROOT-0, accomplished-5)
prep_without(accomplished-5, punishment-8)

(ROOT
  (S
    (NP (PRP$ Your) (NN argument))
    (ADVP (RB once) (RB again))
    (VP (VBZ tries)
      (S
        (VP (TO to)
          (VP (VB make)
            (NP (NN abortion))
            (ADVP (RB solely))
            (NP
              (NP
                (NP (DT a) (NNS women) (POS 's))
                (NNS rights) (NN issue))
              (SBAR
                (S
                  (INTJ (UH No))
                  (, ,)
                  (NP (PRP it))
                  (VP (VBP doesn)
                    (NP (NN t.))))))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP
                  (NP (DT those))
                  (SBAR
                    (WHNP (WP who))
                    (S
                      (VP (VBP oppose)
                        (NP (PRP it))))))
                (VP (VBP are)
                  (ADJP (JJ heart-broken)
                    (PP (IN over)
                      (NP
                        (NP (DT the) (NN loss))
                        (PP (IN of)
                          (NP (JJ innocent) (NN life)))))))))))))
    (. .)))

poss(argument-2, Your-1)
nsubj(tries-5, argument-2)
xsubj(make-7, argument-2)
advmod(again-4, once-3)
advmod(tries-5, again-4)
root(ROOT-0, tries-5)
aux(make-7, to-6)
xcomp(tries-5, make-7)
dobj(make-7, abortion-8)
advmod(make-7, solely-9)
det(women-11, a-10)
poss(issue-14, women-11)
nn(issue-14, rights-13)
dobj(make-7, issue-14)
dep(doesn-18, No-15)
nsubj(doesn-18, it-17)
rcmod(issue-14, doesn-18)
dobj(doesn-18, t.-19)
advmod(heart-broken-26, when-20)
nsubj(oppose-23, those-21)
nsubj(heart-broken-26, those-21)
rcmod(those-21, oppose-23)
dobj(oppose-23, it-24)
cop(heart-broken-26, are-25)
advcl(make-7, heart-broken-26)
det(loss-29, the-28)
prep_over(heart-broken-26, loss-29)
amod(life-32, innocent-31)
prep_of(loss-29, life-32)

(ROOT
  (SBARQ
    (WHADVP
      (ADVP (RB Then))
      (WRB why))
    (SQ (VBP don)
      (NP
        (NP (NN t))
        (SBAR
          (S
            (NP (PRP you))
            (VP (VBP want)
              (NP (DT the) (NNS killers))))))
      (VP (VBN punished)))
    (. ?)))

advmod(why-2, Then-1)
advmod(punished-9, why-2)
aux(punished-9, don-3)
nsubj(punished-9, t-4)
nsubj(want-6, you-5)
rcmod(t-4, want-6)
det(killers-8, the-7)
dobj(want-6, killers-8)
root(ROOT-0, punished-9)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (MD will)
        (ADVP (RB never))
        (VP (VB accept)
          (NP
            (NP (DT the) (JJ pro-choice) (NN point))
            (PP (IN of)
              (NP (NN view)))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP I))
      (VP (MD can)
        (VP (VB oppose)
          (NP (PRP it))
          (PP (IN without)
            (S
              (VP (VBG labeling)
                (NP (NNS pro-choicers))
                (PP (IN as)
                  (NP (NNS murderers)))))))))
    (. .)))

nsubj(accept-4, I-1)
aux(accept-4, will-2)
neg(accept-4, never-3)
root(ROOT-0, accept-4)
det(point-7, the-5)
amod(point-7, pro-choice-6)
dobj(accept-4, point-7)
prep_of(point-7, view-9)
nsubj(oppose-14, I-12)
aux(oppose-14, can-13)
conj_but(accept-4, oppose-14)
dobj(oppose-14, it-15)
prepc_without(oppose-14, labeling-17)
dobj(labeling-17, pro-choicers-18)
prep_as(labeling-17, murderers-20)

(ROOT
  (SBARQ
    (SBAR (IN If)
      (S
        (NP
          (NP (DT the) (NNS takers))
          (PP (IN of)
            (NP (JJ innocent) (NN life))))
        (VP (VBP are) (RB not)
          (NP (NNS murderers)))))
    (, ,)
    (WHNP (WP what))
    (SQ (VBP are)
      (NP (PRP they)))
    (. ?)))

mark(murderers-9, If-1)
det(takers-3, the-2)
nsubj(murderers-9, takers-3)
amod(life-6, innocent-5)
prep_of(takers-3, life-6)
cop(murderers-9, are-7)
neg(murderers-9, not-8)
advcl(are-12, murderers-9)
attr(are-12, what-11)
root(ROOT-0, are-12)
nsubj(are-12, they-13)

(ROOT
  (FRAG (CC And)
    (SBAR
      (WHNP (WP what))
      (, ,)
      (NP (RB then))
      (, ,)
      (S
        (VP (VBZ is)
          (NP (DT a) (NN murderer)))))
    (. ?)))

dep(murderer-8, And-1)
nsubj(murderer-8, what-2)
dep(murderer-8, then-4)
cop(murderer-8, is-6)
det(murderer-8, a-7)
root(ROOT-0, murderer-8)

(ROOT
  (S
    (PP (IN With)
      (NP (DT all) (JJ due) (NN respect)))
    (, ,)
    (NP (PRP I))
    (VP (VBP think)
      (S
        (NP (PRP$ your) (NNS contradictions))
        (VP (VB make)
          (NP (PRP$ my) (NN point)))))
    (. .)))

det(respect-4, all-2)
amod(respect-4, due-3)
prep_with(think-7, respect-4)
nsubj(think-7, I-6)
root(ROOT-0, think-7)
poss(contradictions-9, your-8)
nsubj(make-10, contradictions-9)
ccomp(think-7, make-10)
poss(point-12, my-11)
dobj(make-10, point-12)

