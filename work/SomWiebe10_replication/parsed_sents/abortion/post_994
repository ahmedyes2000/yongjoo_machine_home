(ROOT
  (S
    (ADVP (RB Well))
    (, ,)
    (SBAR (IN once)
      (S
        (NP (PRP it))
        (VP (VBZ is)
          (NP (DT a) (NN child)))))
    (, ,)
    (NP (PRP it))
    (ADVP (RB already))
    (VP (VBZ is)
      (ADJP (JJ illegal)
        (S
          (VP (TO to)
            (VP (VB kill)
              (NP (PRP it)))))))
    (. .)))

advmod(illegal-12, Well-1)
mark(child-7, once-3)
nsubj(child-7, it-4)
cop(child-7, is-5)
det(child-7, a-6)
advcl(illegal-12, child-7)
nsubj(illegal-12, it-9)
advmod(illegal-12, already-10)
cop(illegal-12, is-11)
root(ROOT-0, illegal-12)
aux(kill-14, to-13)
xcomp(illegal-12, kill-14)
dobj(kill-14, it-15)

(ROOT
  (S
    (PP (IN Before)
      (NP (DT the) (JJ first) (NN tri) (NN mester)))
    (NP (PRP it))
    (VP (VBZ 's)
      (NP
        (NP (DT a) (NN cluster))
        (PP (IN of)
          (NP
            (NP (NNS cells))
            (PP (IN with)
              (NP
                (NP (DT no) (JJR more) (NN self-awareness))
                (PP (IN than)
                  (NP (DT a) (NN kitchen) (NN table)))))))))
    (. .)))

det(mester-5, the-2)
amod(mester-5, first-3)
nn(mester-5, tri-4)
prep_before(cluster-9, mester-5)
nsubj(cluster-9, it-6)
cop(cluster-9, 's-7)
det(cluster-9, a-8)
root(ROOT-0, cluster-9)
prep_of(cluster-9, cells-11)
det(self-awareness-15, no-13)
amod(self-awareness-15, more-14)
prep_with(cells-11, self-awareness-15)
det(table-19, a-17)
nn(table-19, kitchen-18)
prep_than(self-awareness-15, table-19)

(ROOT
  (S (IN So)
    (NP (DT that))
    (VP (MD would) (RB n't)
      (VP (VB be)
        (VP (`` ``) (VBG killing)
          (NP (DT a) (NN child))
          ('' '')
          (PP (IN at)
            (NP (DT all))))))
    (. .)))

dep(killing-7, So-1)
nsubj(killing-7, that-2)
aux(killing-7, would-3)
neg(killing-7, n't-4)
aux(killing-7, be-5)
root(ROOT-0, killing-7)
det(child-9, a-8)
dobj(killing-7, child-9)
prep_at(killing-7, all-12)

(ROOT
  (S (CC And)
    (VP (VBP do) (RB n't)
      (VP (VB start)
        (PP (IN with)
          (NP (DT the) (JJ potential) (NN bs)))))
    (. .)))

cc(start-4, And-1)
aux(start-4, do-2)
neg(start-4, n't-3)
root(ROOT-0, start-4)
det(bs-8, the-6)
amod(bs-8, potential-7)
prep_with(start-4, bs-8)

(ROOT
  (S
    (PP (IN Because)
      (PP (IN by)
        (NP (DT that) (NN logic))))
    (NP (PRP you))
    (VP (MD would)
      (ADVP (RB also))
      (VP (VB have)
        (S
          (VP (TO to)
            (VP
              (VP (VB outlaw)
                (NP (NN masterbation)))
              (, ,)
              (CC and)
              (VP (VB save)
                (NP
                  (NP (DT every) (NN ejaculation))
                  (PP (IN in)
                    (NP (DT a) (NN cup))))))))
        (S
          (VP
            (VP (VBG separating)
              (PRT (RP out))
              (NP
                (NP (DT the) (NNS thousands))
                (PP (IN of)
                  (NP
                    (NP (NNS sperms))
                    (VP (VBG representing)
                      (NP (`` ``) (JJ potential) ('' '') (NN life)))))))
            (CC and)
            (VP (VBG finding)
              (NP (JJ female) (NNS eggs))
              (S
                (VP (TO to)
                  (VP (VB inject)
                    (NP (PRP them))
                    (PP (IN in))))))))))
    (. ...)))

prep(have-8, Because-1)
pcomp(Because-1, by-2)
det(logic-4, that-3)
prep_by(Because-1, logic-4)
nsubj(have-8, you-5)
xsubj(outlaw-10, you-5)
aux(have-8, would-6)
advmod(have-8, also-7)
root(ROOT-0, have-8)
aux(outlaw-10, to-9)
xcomp(have-8, outlaw-10)
dobj(outlaw-10, masterbation-11)
xcomp(have-8, save-14)
conj_and(outlaw-10, save-14)
det(ejaculation-16, every-15)
dobj(save-14, ejaculation-16)
det(cup-19, a-18)
prep_in(ejaculation-16, cup-19)
ccomp(have-8, separating-20)
prt(separating-20, out-21)
det(thousands-23, the-22)
dobj(separating-20, thousands-23)
prep_of(thousands-23, sperms-25)
partmod(sperms-25, representing-26)
amod(life-30, potential-28)
dobj(representing-26, life-30)
ccomp(have-8, finding-32)
conj_and(separating-20, finding-32)
amod(eggs-34, female-33)
dobj(finding-32, eggs-34)
aux(inject-36, to-35)
xcomp(finding-32, inject-36)
dobj(inject-36, them-37)
prep(inject-36, in-38)

(ROOT
  (S (`` ``)
    (S
      (NP (NN course))
      (VP (VBG judging)
        (PP (IN by)
          (NP (PRP$ your) (JJ past) (NN arguement)))))
    (, ,)
    (NP (PRP I))
    (VP (VBP guess)
      (SBAR
        (S
          (NP (PRP you))
          (VP (MD 'll)
            (VP (VB try)
              (ADVP (RB anyway)))))))
    (. .)))

nsubj(judging-3, course-2)
partmod(guess-10, judging-3)
poss(arguement-7, your-5)
amod(arguement-7, past-6)
agent(judging-3, arguement-7)
nsubj(guess-10, I-9)
root(ROOT-0, guess-10)
nsubj(try-13, you-11)
aux(try-13, 'll-12)
ccomp(guess-10, try-13)
advmod(try-13, anyway-14)

