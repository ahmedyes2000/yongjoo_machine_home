(ROOT
  (S
    (NP
      (NP (DT The) (JJ only) (NN way))
      (VP (VBG repealing)
        (SBAR
          (S
            (NP (DT the) (NNP MCP))
            (VP (MD could) (RB not)
              (VP (VB be)
                (VP (VBN seen)
                  (PP (IN as)
                    (S
                      (VP (VBG being)
                        (PP (IN in)
                          (NP (NN consonance)))
                        (PP (IN with)
                          (NP
                            (NP (DT the) (NN will))
                            (PP (IN of)
                              (NP (DT the) (NN majority)))))))))))))))
    (VP (VBZ is)
      (SBAR (IN if)
        (S
          (NP (DT the) (NN default))
          (VP (VBZ is)
            (VP (VBN given)
              (PP (TO to)
                (NP
                  (NP (CD one) (NN side))
                  (CC or)
                  (NP (DT the) (JJ other))))
              (PP (IN in)
                (NP
                  (NP (DT the) (NN case))
                  (PP (IN of)
                    (NP (DT an) (JJ equal) (NN split))))))))))
    (. .)))

det(way-3, The-1)
amod(way-3, only-2)
nsubj(is-21, way-3)
partmod(way-3, repealing-4)
det(MCP-6, the-5)
nsubjpass(seen-10, MCP-6)
aux(seen-10, could-7)
neg(seen-10, not-8)
auxpass(seen-10, be-9)
ccomp(repealing-4, seen-10)
prepc_as(seen-10, being-12)
prep_in(being-12, consonance-14)
det(will-17, the-16)
prep_with(being-12, will-17)
det(majority-20, the-19)
prep_of(will-17, majority-20)
root(ROOT-0, is-21)
mark(given-26, if-22)
det(default-24, the-23)
nsubjpass(given-26, default-24)
auxpass(given-26, is-25)
advcl(is-21, given-26)
num(side-29, one-28)
prep_to(given-26, side-29)
det(other-32, the-31)
prep_to(given-26, other-32)
conj_or(side-29, other-32)
det(case-35, the-34)
prep_in(given-26, case-35)
det(split-39, an-37)
amod(split-39, equal-38)
prep_of(case-35, split-39)

