(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP we))
        (VP (MD can)
          (VP (VB accept)
            (SBAR (IN that)
              (S
                (NP (JJ single) (JJ celled) (NNS organisms))
                (VP (VBP are)
                  (ADJP (JJ alive))
                  (, ,)
                  (SBAR
                    (WHPP (IN in)
                      (WHNP (WDT that)))
                    (S
                      (NP (PRP they))
                      (VP (VBP have)
                        (NP
                          (NP (JJ active) (NNS micro-organisms))
                          (VP (VBG working)
                            (ADVP (RB collectively))
                            (S
                              (VP (TO to)
                                (VP (VB prevent)
                                  (NP (NN atrophy)
                                    (CC and)
                                    (NN cell) (NN decay)))))))))))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP we))
    (VP (MD could)
      (VP (VB say)
        (SBAR (IN that)
          (S
            (NP
              (NP (DT an) (NN egg) (NN cell))
              (CC or)
              (NP (DT a) (NN sperm) (NN cell)))
            (VP (VBZ is) (`` ``)
              (ADJP (JJ alive))
              ('' ''))))))
    (. .)))

mark(accept-4, If-1)
nsubj(accept-4, we-2)
aux(accept-4, can-3)
advcl(say-30, accept-4)
complm(alive-10, that-5)
amod(organisms-8, single-6)
amod(organisms-8, celled-7)
nsubj(alive-10, organisms-8)
cop(alive-10, are-9)
ccomp(accept-4, alive-10)
dep(have-15, in-12)
pobj(in-12, that-13)
nsubj(have-15, they-14)
ccomp(alive-10, have-15)
amod(micro-organisms-17, active-16)
dobj(have-15, micro-organisms-17)
xsubj(prevent-21, micro-organisms-17)
partmod(micro-organisms-17, working-18)
advmod(working-18, collectively-19)
aux(prevent-21, to-20)
xcomp(working-18, prevent-21)
nn(decay-25, atrophy-22)
conj_and(atrophy-22, cell-24)
nn(decay-25, cell-24)
dobj(prevent-21, decay-25)
advmod(say-30, then-27)
nsubj(say-30, we-28)
aux(say-30, could-29)
root(ROOT-0, say-30)
complm(alive-41, that-31)
det(cell-34, an-32)
nn(cell-34, egg-33)
nsubj(alive-41, cell-34)
det(cell-38, a-36)
nn(cell-38, sperm-37)
conj_or(cell-34, cell-38)
nsubj(alive-41, cell-38)
cop(alive-41, is-39)
ccomp(say-30, alive-41)

