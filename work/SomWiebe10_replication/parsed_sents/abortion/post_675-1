(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (ADVP (RB just))
        (VP (VBP want)
          (S
            (VP (TO to)
              (VP (VB consider)
                (NP (NN life))
                (PP (IN as)
                  (NP
                    (ADJP (JJ equivalent) (TO to) (JJ independent))
                    (NN life)))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP you))
    (VP (VBP 're)
      (VP (VBG attempting)
        (S
          (VP (TO to)
            (VP (VB bypass)
              (NP (DT the) (NN problem))
              (ADVP (RB entirely))
              (PP (IN by)
                (S
                  (VP (VBG redefining)
                    (NP (`` ``) (NN life) ('' ''))))))))))
    (. .)))

mark(want-4, If-1)
nsubj(want-4, you-2)
xsubj(consider-6, you-2)
advmod(want-4, just-3)
advcl(attempting-17, want-4)
aux(consider-6, to-5)
xcomp(want-4, consider-6)
dobj(consider-6, life-7)
amod(independent-11, equivalent-9)
dep(independent-11, to-10)
amod(life-12, independent-11)
prep_as(consider-6, life-12)
advmod(attempting-17, then-14)
nsubj(attempting-17, you-15)
xsubj(bypass-19, you-15)
aux(attempting-17, 're-16)
root(ROOT-0, attempting-17)
aux(bypass-19, to-18)
xcomp(attempting-17, bypass-19)
det(problem-21, the-20)
dobj(bypass-19, problem-21)
advmod(bypass-19, entirely-22)
prepc_by(bypass-19, redefining-24)
dobj(redefining-24, life-26)

