(ROOT
  (S
    (NP (PRP$ My) (JJ original) (NN point))
    (VP (VBD was)
      (SBAR (IN that)
        (S
          (PP (IN on)
            (NP (DT the) (NN nec\/suf) (NN issue)))
          (, ,)
          (NP (PRP you))
          (VP
            (VP (VBD granted)
              (NP (DT the) (JJ former)))
            (CC but)
            (VP (VBD made)
              (NP (DT no) (JJ positive) (NN argument))
              (PP (IN for)
                (NP
                  (NP (DT the) (NN latter))
                  (, ,)
                  (SBAR (IN whereas)
                    (S
                      (NP (DT the) (NN article))
                      (VP (VBD was)
                        (VP (VBG arguing)
                          (SBAR (IN that)
                            (S
                              (SBAR (IN if)
                                (S
                                  (NP (DT the) (NN latter))
                                  (VP (VBZ is) (RB not)
                                    (VP (VBN excluded)))))
                              (NP (PRP it))
                              (VP (MD would)
                                (VP (VB be)
                                  (ADJP (`` ``) (JJ rational) ('' '') (RB not)
                                    (S
                                      (VP (TO to)
                                        (VP (VB err)
                                          (PP (IN on)
                                            (NP
                                              (NP (DT the) (NN side))
                                              (PP (IN of)
                                                (S
                                                  (VP
                                                    (ADVP (RB possibly))
                                                    (VBG taking)
                                                    (NP (DT a) (JJ human) (NN life))))))))))))))))))))))))))
    (. .)))

poss(point-3, My-1)
amod(point-3, original-2)
nsubj(was-4, point-3)
root(ROOT-0, was-4)
complm(granted-12, that-5)
det(issue-9, the-7)
nn(issue-9, nec\/suf-8)
prep_on(granted-12, issue-9)
nsubj(granted-12, you-11)
nsubj(made-16, you-11)
ccomp(was-4, granted-12)
det(former-14, the-13)
dobj(granted-12, former-14)
ccomp(was-4, made-16)
conj_but(granted-12, made-16)
det(argument-19, no-17)
amod(argument-19, positive-18)
dobj(made-16, argument-19)
det(latter-22, the-21)
prep_for(made-16, latter-22)
dobj(arguing-28, latter-22)
mark(arguing-28, whereas-24)
det(article-26, the-25)
nsubj(arguing-28, article-26)
aux(arguing-28, was-27)
dep(latter-22, arguing-28)
complm(rational-40, that-29)
mark(excluded-35, if-30)
det(latter-32, the-31)
nsubjpass(excluded-35, latter-32)
auxpass(excluded-35, is-33)
neg(excluded-35, not-34)
advcl(rational-40, excluded-35)
nsubj(rational-40, it-36)
aux(rational-40, would-37)
cop(rational-40, be-38)
ccomp(arguing-28, rational-40)
neg(rational-40, not-42)
aux(err-44, to-43)
xcomp(rational-40, err-44)
det(side-47, the-46)
prep_on(err-44, side-47)
advmod(taking-50, possibly-49)
prepc_of(side-47, taking-50)
det(life-53, a-51)
amod(life-53, human-52)
dobj(taking-50, life-53)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (ADVP (RB just))
        (VP (VBP want)
          (S
            (VP (TO to)
              (VP (VB consider)
                (NP (NN life))
                (PP (IN as)
                  (NP
                    (ADJP (JJ equivalent) (TO to) (JJ independent))
                    (NN life)))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP you))
    (VP (VBP 're)
      (VP (VBG attempting)
        (S
          (VP (TO to)
            (VP (VB bypass)
              (NP (DT the) (NN problem))
              (ADVP (RB entirely))
              (PP (IN by)
                (S
                  (VP (VBG redefining)
                    (NP (`` ``) (NN life) ('' ''))))))))))
    (. .)))

mark(want-4, If-1)
nsubj(want-4, you-2)
xsubj(consider-6, you-2)
advmod(want-4, just-3)
advcl(attempting-17, want-4)
aux(consider-6, to-5)
xcomp(want-4, consider-6)
dobj(consider-6, life-7)
amod(independent-11, equivalent-9)
dep(independent-11, to-10)
amod(life-12, independent-11)
prep_as(consider-6, life-12)
advmod(attempting-17, then-14)
nsubj(attempting-17, you-15)
xsubj(bypass-19, you-15)
aux(attempting-17, 're-16)
root(ROOT-0, attempting-17)
aux(bypass-19, to-18)
xcomp(attempting-17, bypass-19)
det(problem-21, the-20)
dobj(bypass-19, problem-21)
advmod(bypass-19, entirely-22)
prepc_by(bypass-19, redefining-24)
dobj(redefining-24, life-26)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (S
          (NP (DT a) (NN boulder))
          (VP (VBD were)
            (VP (VBG rolling)
              (PRT (RP down))
              (NP
                (NP (DT a) (NN hillside))
                (PP (IN toward)
                  (NP (PRP$ my) (NN car)))))))
        (CC and)
        (S
          (NP (PRP I))
          (VP (VBD regarded)
            (SBAR
              (S
                (NP (PRP it))
                (VP (VBZ is)
                  (ADVP (RB merely))
                  (NP
                    (NP (DT another) (NN rock))
                    (PP (IN on)
                      (NP (DT a) (NN hill)))))))))))
    (, ,)
    (ADVP (RB then))
    (NP (PRP I))
    (VP (MD would)
      (VP (VB be)
        (ADJP (JJ foolish))))
    (. .)))

mark(rolling-5, If-1)
det(boulder-3, a-2)
nsubj(rolling-5, boulder-3)
aux(rolling-5, were-4)
advcl(foolish-28, rolling-5)
prt(rolling-5, down-6)
det(hillside-8, a-7)
dobj(rolling-5, hillside-8)
poss(car-11, my-10)
prep_toward(hillside-8, car-11)
nsubj(regarded-14, I-13)
conj_and(rolling-5, regarded-14)
advcl(foolish-28, regarded-14)
nsubj(rock-19, it-15)
cop(rock-19, is-16)
advmod(rock-19, merely-17)
det(rock-19, another-18)
ccomp(regarded-14, rock-19)
det(hill-22, a-21)
prep_on(rock-19, hill-22)
advmod(foolish-28, then-24)
nsubj(foolish-28, I-25)
aux(foolish-28, would-26)
cop(foolish-28, be-27)
root(ROOT-0, foolish-28)

(ROOT
  (S
    (S
      (NP (NNP Logic))
      (VP (MD can)
        (VP (VB point)
          (PRT (RP out))
          (SBAR (IN that)
            (S
              (NP (DT an) (NN argument))
              (VP (VBZ is)
                (ADJP (JJ invalid))))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (MD ca) (RB n't)
        (VP (VB speak)
          (PP (TO to)
            (NP
              (NP (DT the) (NN merit))
              (PP (IN of)
                (NP (DT a) (NN definition))))))))
    (. .)))

nsubj(point-3, Logic-1)
aux(point-3, can-2)
root(ROOT-0, point-3)
prt(point-3, out-4)
complm(invalid-9, that-5)
det(argument-7, an-6)
nsubj(invalid-9, argument-7)
cop(invalid-9, is-8)
ccomp(point-3, invalid-9)
nsubj(speak-15, it-12)
aux(speak-15, ca-13)
neg(speak-15, n't-14)
conj_but(point-3, speak-15)
det(merit-18, the-17)
prep_to(speak-15, merit-18)
det(definition-21, a-20)
prep_of(merit-18, definition-21)

(ROOT
  (S
    (NP (NNP Logic))
    (VP (MD wo) (RB n't)
      (VP (VB help)
        (NP (DT the) (JJ post-conception) (NN side))
        (ADVP (DT any) (RBR more))
        (PP (IN than)
          (NP (DT the) (JJ pre-conception) (NN side)))))
    (. .)))

nsubj(help-4, Logic-1)
aux(help-4, wo-2)
neg(help-4, n't-3)
root(ROOT-0, help-4)
det(side-7, the-5)
amod(side-7, post-conception-6)
dobj(help-4, side-7)
dep(more-9, any-8)
advmod(help-4, more-9)
det(side-13, the-11)
amod(side-13, pre-conception-12)
prep_than(help-4, side-13)

(ROOT
  (S
    (NP
      (NP (NNS People))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (VBP are)
            (ADJP (RB uncontroversially) (JJ alive))))))
    (VP (MD can)
      (VP (VB be)
        (ADJP (JJ incapable)
          (PP (IN of)
            (S
              (VP (VBG surviving)
                (NP
                  (NP (JJ independent))
                  (PP (IN of)
                    (NP (NN life) (NN support))))))))))
    (. .)))

nsubj(alive-5, People-1)
nsubj(incapable-8, People-1)
cop(alive-5, are-3)
advmod(alive-5, uncontroversially-4)
rcmod(People-1, alive-5)
aux(incapable-8, can-6)
cop(incapable-8, be-7)
root(ROOT-0, incapable-8)
prepc_of(incapable-8, surviving-10)
dobj(surviving-10, independent-11)
nn(support-14, life-13)
prep_of(independent-11, support-14)

(ROOT
  (S
    (SBAR (IN Unless)
      (S
        (NP
          (NP (NNS people))
          (PP (IN on)
            (NP (NNS respirators))))
        (VP (VBP are) (`` ``)
          (ADJP (JJ un-alive))
          ('' ''))))
    (, ,)
    (NP (DT that))
    (VP (MD would)
      (VP (VB eliminate)
        (NP (NN independence))
        (PP (IN as)
          (NP (DT a) (JJ necessary) (NN condition)))))
    (. .)))

mark(un-alive-7, Unless-1)
nsubj(un-alive-7, people-2)
prep_on(people-2, respirators-4)
cop(un-alive-7, are-5)
advcl(eliminate-12, un-alive-7)
nsubj(eliminate-12, that-10)
aux(eliminate-12, would-11)
root(ROOT-0, eliminate-12)
dobj(eliminate-12, independence-13)
det(condition-17, a-15)
amod(condition-17, necessary-16)
prep_as(eliminate-12, condition-17)

(ROOT
  (S
    (NP
      (NP (NNS Warts))
      (, ,)
      (NP (NNS moles))
      (, ,)
      (CC and)
      (NP (NNS tumors)))
    (VP (VBP are) (RB not)
      (ADJP (JJ germane)))
    (. .)))

nsubj(germane-9, Warts-1)
conj_and(Warts-1, moles-3)
nsubj(germane-9, moles-3)
conj_and(Warts-1, tumors-6)
nsubj(germane-9, tumors-6)
cop(germane-9, are-7)
neg(germane-9, not-8)
root(ROOT-0, germane-9)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP are)
      (ADVP (RB just))
      (NP
        (NP (NN body) (NN tissue))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (MD may) (RB not)
              (VP (VB be)
                (VP (VBG functioning)
                  (ADVP (RB normally)))))))))
    (. .)))

nsubj(tissue-5, They-1)
cop(tissue-5, are-2)
advmod(tissue-5, just-3)
nn(tissue-5, body-4)
root(ROOT-0, tissue-5)
nsubj(functioning-10, tissue-5)
aux(functioning-10, may-7)
neg(functioning-10, not-8)
aux(functioning-10, be-9)
rcmod(tissue-5, functioning-10)
advmod(functioning-10, normally-11)

(ROOT
  (S
    (NP (DT A) (NNS zygotes))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT a) (NN part))
        (PP (IN of)
          (NP
            (NP (DT the) (NN woman) (POS 's))
            (NN body)))))
    (. .)))

det(zygotes-2, A-1)
nsubj(part-6, zygotes-2)
cop(part-6, is-3)
neg(part-6, not-4)
det(part-6, a-5)
root(ROOT-0, part-6)
det(woman-9, the-8)
poss(body-11, woman-9)
prep_of(part-6, body-11)

(ROOT
  (S
    (NP
      (NP (DT A) (NN chunk))
      (PP (IN of)
        (NP (NN metal))))
    (, ,)
    (SBAR (IN if)
      (S
        (ADVP (RB left))
        (ADJP (RB alone))))
    (, ,)
    (VP (MD will)
      (VP (VB remain)
        (NP
          (NP (DT a) (NN chunk))
          (PP (IN of)
            (NP (NN metal))))
        (PRN (-LRB- -LRB-)
          (CC or)
          (VB deteriorate) (-RRB- -RRB-))))
    (. .)))

det(chunk-2, A-1)
nsubj(chunk-13, chunk-2)
prep_of(chunk-2, metal-4)
mark(alone-8, if-6)
advmod(alone-8, left-7)
dep(chunk-13, alone-8)
aux(chunk-13, will-10)
cop(chunk-13, remain-11)
det(chunk-13, a-12)
root(ROOT-0, chunk-13)
prep_of(chunk-13, metal-15)
dep(chunk-13, or-17)
dep(or-17, deteriorate-18)

(ROOT
  (S
    (NP
      (NP (DT A) (NN zygote))
      (, ,)
      (SBAR (IN if)
        (S
          (VP (VBD left)
            (ADVP (RB alone)))))
      (, ,))
    (VP (MD will)
      (VP (VB begin)
        (NP
          (NP (DT the) (NN process))
          (PP (IN of)
            (S
              (VP (VBG developing)
                (PP (IN into)
                  (NP (DT a) (NN person)))))))))
    (. .)))

det(zygote-2, A-1)
nsubj(begin-9, zygote-2)
mark(left-5, if-4)
dep(zygote-2, left-5)
advmod(left-5, alone-6)
aux(begin-9, will-8)
root(ROOT-0, begin-9)
det(process-11, the-10)
dobj(begin-9, process-11)
prepc_of(process-11, developing-13)
det(person-16, a-15)
prep_into(developing-13, person-16)

(ROOT
  (S
    (NP
      (NP (DT The) (NN argument))
      (SBAR
        (WHNP (WDT that))
        (S
          (PP (IN because)
            (NP (NN something)))
          (VP (VBZ is) (RB not)
            (PP (IN in)
              (NP (DT a) (NN state)))))))
    (ADVP (RB now))
    (VP (VBZ entails)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (MD should)
            (VP (VB treat)
              (NP (PRP it))
              (ADVP (RB no) (RB differently))
              (PP (IN than)
                (NP
                  (NP (NN something))
                  (SBAR
                    (WHNP (WDT which))
                    (S
                      (VP (VBZ is) (RB not)
                        (ADJP (RB particularly) (JJ likely)
                          (S
                            (VP (TO to)
                              (VP (VB enter)
                                (SBAR (IN that)
                                  (S
                                    (NP (NN state))
                                    (VP (VBZ is)
                                      (ADJP (JJ irrational)))))))))))))))))))
    (. .)))

det(argument-2, The-1)
nsubj(is-6, argument-2)
nsubj(entails-12, argument-2)
prep_because(is-6, something-5)
rcmod(argument-2, is-6)
neg(is-6, not-7)
det(state-10, a-9)
prep_in(is-6, state-10)
advmod(entails-12, now-11)
root(ROOT-0, entails-12)
complm(treat-16, that-13)
nsubj(treat-16, we-14)
aux(treat-16, should-15)
ccomp(entails-12, treat-16)
dobj(treat-16, it-17)
advmod(differently-19, no-18)
advmod(treat-16, differently-19)
prep_than(treat-16, something-21)
nsubj(likely-26, something-21)
cop(likely-26, is-23)
neg(likely-26, not-24)
advmod(likely-26, particularly-25)
rcmod(something-21, likely-26)
aux(enter-28, to-27)
xcomp(likely-26, enter-28)
complm(irrational-32, that-29)
nsubj(irrational-32, state-30)
cop(irrational-32, is-31)
ccomp(enter-28, irrational-32)

