(ROOT
  (S
    (NP (PRP I))
    (VP (VBP think)
      (SBAR
        (S
          (NP (PRP we))
          (VP (VBP need)
            (S
              (VP (TO to)
                (VP (VB introduce)
                  (PP (TO to)
                    (NP (DT this) (NN conversation)))
                  (NP
                    (NP (DT a) (NN definition))
                    (PP (IN of)
                      (NP (NN freedom)))))))))))
    (. .)))

nsubj(think-2, I-1)
root(ROOT-0, think-2)
nsubj(need-4, we-3)
xsubj(introduce-6, we-3)
ccomp(think-2, need-4)
aux(introduce-6, to-5)
xcomp(need-4, introduce-6)
det(conversation-9, this-8)
prep_to(introduce-6, conversation-9)
det(definition-11, a-10)
dobj(introduce-6, definition-11)
prep_of(definition-11, freedom-13)

(ROOT
  (S
    (NP (NNP Freedom))
    (VP (VBZ is) (RB not)
      (NP (DT the) (NN ability)
        (S
          (VP (TO to)
            (VP (VB do)
              (SBAR
                (WHNP (WDT whatever))
                (S
                  (NP (PRP you))
                  (VP (VBP want)))))))))
    (. .)))

nsubj(ability-5, Freedom-1)
cop(ability-5, is-2)
neg(ability-5, not-3)
det(ability-5, the-4)
root(ROOT-0, ability-5)
aux(do-7, to-6)
infmod(ability-5, do-7)
dobj(want-10, whatever-8)
nsubj(want-10, you-9)
ccomp(do-7, want-10)

(ROOT
  (S
    (NP (DT Both))
    (VP (MD can) (RB not)
      (VP (VB be)))
    (. .)))

nsubj(be-4, Both-1)
aux(be-4, can-2)
neg(be-4, not-3)
root(ROOT-0, be-4)

(ROOT
  (S
    (S
      (NP (PRP It))
      (VP (VBZ is)
        (ADJP (RB absolutely) (JJ wrong))
        (S
          (VP (TO to)
            (VP (VB keep)
              (NP (NNS slaves)))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP (RB absolutely) (JJ wrong))
        (S
          (VP (TO to)
            (VP (VB confiscate)
              (NP (DT an) (NNS individuals) (NN property)))))))
    (. .)))

nsubj(wrong-4, It-1)
xsubj(keep-6, It-1)
cop(wrong-4, is-2)
advmod(wrong-4, absolutely-3)
root(ROOT-0, wrong-4)
aux(keep-6, to-5)
xcomp(wrong-4, keep-6)
dobj(keep-6, slaves-7)
nsubj(wrong-13, it-10)
xsubj(confiscate-15, it-10)
cop(wrong-13, is-11)
advmod(wrong-13, absolutely-12)
conj_but(wrong-4, wrong-13)
aux(confiscate-15, to-14)
xcomp(wrong-13, confiscate-15)
det(property-18, an-16)
nn(property-18, individuals-17)
dobj(confiscate-15, property-18)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (S
      (VP (TO to)
        (VP (VB do))))
    (. ?)))

dep(do-3, What-1)
aux(do-3, to-2)
root(ROOT-0, do-3)

(ROOT
  (S
    (ADVP (RB Fortunately))
    (, ,)
    (NP (DT this) (NN nation))
    (VP (VBD made)
      (NP (DT a) (NN decision))
      (SBAR (IN that)
        (S
          (NP
            (NP (DT the) (NN right))
            (PP (TO to)
              (NP (NN liberty))))
          (VP (VBZ trumps)
            (NP (DT the) (NN right))
            (PP (TO to)
              (NP (NN property)))))))
    (. .)))

advmod(made-5, Fortunately-1)
det(nation-4, this-3)
nsubj(made-5, nation-4)
root(ROOT-0, made-5)
det(decision-7, a-6)
dobj(made-5, decision-7)
complm(trumps-13, that-8)
det(right-10, the-9)
nsubj(trumps-13, right-10)
prep_to(right-10, liberty-12)
ccomp(made-5, trumps-13)
det(right-15, the-14)
dobj(trumps-13, right-15)
prep_to(trumps-13, property-17)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (NP (PRP you))
        (ADVP (RB well))
        (VP (VBP know))))
    (, ,)
    (NP (DT this))
    (VP (VBD was) (RB not)
      (ADVP (RB always))
      (NP (DT the) (NN case)))
    (. .)))

mark(know-4, As-1)
nsubj(know-4, you-2)
advmod(know-4, well-3)
advcl(case-11, know-4)
nsubj(case-11, this-6)
cop(case-11, was-7)
neg(case-11, not-8)
advmod(case-11, always-9)
det(case-11, the-10)
root(ROOT-0, case-11)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (NP (PRP you))
    (ADVP (RB rightly))
    (VP (VBP argue)
      (SBAR (IN that)
        (S
          (NP (PRP it))
          (VP (VBZ is)
            (ADJP (RB absolutely) (JJ wrong))
            (S
              (VP (TO to)
                (VP (VB force)
                  (NP (DT a) (NN woman)
                    (S
                      (VP (TO to)
                        (VP (VB be)
                          (VP (VBN imprisoned)
                            (PP (IN in)
                              (NP
                                (NP (PRP$ her) (JJ own) (NN body))
                                (PP (IN for)
                                  (NP (DT any) (NN reason)))))))))))))))))
    (. .)))

advmod(argue-5, Now-1)
nsubj(argue-5, you-3)
advmod(argue-5, rightly-4)
root(ROOT-0, argue-5)
complm(wrong-10, that-6)
nsubj(wrong-10, it-7)
xsubj(force-12, it-7)
cop(wrong-10, is-8)
advmod(wrong-10, absolutely-9)
ccomp(argue-5, wrong-10)
aux(force-12, to-11)
xcomp(wrong-10, force-12)
det(woman-14, a-13)
dobj(force-12, woman-14)
aux(imprisoned-17, to-15)
auxpass(imprisoned-17, be-16)
infmod(woman-14, imprisoned-17)
poss(body-21, her-19)
amod(body-21, own-20)
prep_in(imprisoned-17, body-21)
det(reason-24, any-23)
prep_for(body-21, reason-24)

(ROOT
  (S
    (S
      (NP (PRP I))
      (VP (VBP agree)
        (PP (IN with)
          (NP (DT this)))))
    (, ,)
    (CC but)
    (S
      (PP (IN by)
        (NP (DT the) (JJ same) (NN token)))
      (, ,)
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP (RB absolutely) (JJ wrong))
        (S
          (VP (TO to)
            (VP (VB kill)
              (NP (PRP$ her) (NN child))
              (PP (IN for)
                (NP (DT any) (NN reason))))))))
    (. .)))

nsubj(agree-2, I-1)
root(ROOT-0, agree-2)
prep_with(agree-2, this-4)
det(token-10, the-8)
amod(token-10, same-9)
prep_by(wrong-15, token-10)
nsubj(wrong-15, it-12)
xsubj(kill-17, it-12)
cop(wrong-15, is-13)
advmod(wrong-15, absolutely-14)
conj_but(agree-2, wrong-15)
aux(kill-17, to-16)
xcomp(wrong-15, kill-17)
poss(child-19, her-18)
dobj(kill-17, child-19)
det(reason-22, any-21)
prep_for(kill-17, reason-22)

(ROOT
  (S
    (NP (DT The) (NN pregnancy))
    (VP
      (VP (MD can) (RB not)
        (ADVP (RB rightfully))
        (VP (VB be)
          (VP (VBN terminated))))
      (, ,)
      (CC and)
      (VP (MD can) (RB not)
        (ADVP (RB rightfully))
        (VP (VB be)
          (VP (VBN allowed)
            (S
              (VP (TO to)
                (VP (VB continue))))))))
    (. .)))

det(pregnancy-2, The-1)
nsubjpass(terminated-7, pregnancy-2)
nsubjpass(allowed-14, pregnancy-2)
aux(terminated-7, can-3)
neg(terminated-7, not-4)
advmod(terminated-7, rightfully-5)
auxpass(terminated-7, be-6)
root(ROOT-0, terminated-7)
aux(allowed-14, can-10)
neg(allowed-14, not-11)
advmod(allowed-14, rightfully-12)
auxpass(allowed-14, be-13)
conj_and(terminated-7, allowed-14)
aux(continue-16, to-15)
xcomp(allowed-14, continue-16)

(ROOT
  (S
    (ADVP (RB Alas))
    (, ,)
    (NP (DT both))
    (VP (MD can) (RB not)
      (VP (VB be)))
    (. .)))

advmod(be-6, Alas-1)
nsubj(be-6, both-3)
aux(be-6, can-4)
neg(be-6, not-5)
root(ROOT-0, be-6)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN situation)))
    (, ,)
    (NP (PRP one))
    (VP (MD must)
      (VP (VB consider)
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ has)
              (NP (DT the) (JJR greater) (NN claim))
              (PP (TO to)
                (NP
                  (ADJP (PRP$ his)
                    (CC or)
                    (PRP$ her))
                  (NNS rights))))))))
    (. .)))

det(situation-3, this-2)
prep_in(consider-7, situation-3)
nsubj(consider-7, one-5)
aux(consider-7, must-6)
root(ROOT-0, consider-7)
nsubj(has-9, which-8)
ccomp(consider-7, has-9)
det(claim-12, the-10)
amod(claim-12, greater-11)
dobj(has-9, claim-12)
amod(rights-17, his-14)
conj_or(his-14, her-16)
poss(his-14, her-16)
amod(rights-17, her-16)
prep_to(has-9, rights-17)

(ROOT
  (S
    (NP (DT That))
    (VP (VBZ 's)
      (NP (NN anarchy)))
    (. .)))

nsubj(anarchy-3, That-1)
cop(anarchy-3, 's-2)
root(ROOT-0, anarchy-3)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJ only) (NN situation))
        (SBAR
          (WHPP (IN in)
            (WHNP (WDT which)))
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (ADJP (JJ acceptable)
                (S
                  (VP (TO to)
                    (VP (VB consider)
                      (NP
                        (NP (DT the) (NN extent)
                          (CC and)
                          (NN length))
                        (PP (IN of)
                          (NP
                            (NP (DT the) (NNS limitations))
                            (PP (IN of)
                              (NP (NNS freedoms)))))))))))))))
    (. .)))

nsubj(situation-5, This-1)
cop(situation-5, is-2)
det(situation-5, the-3)
amod(situation-5, only-4)
root(ROOT-0, situation-5)
rel(acceptable-10, which-7)
nsubj(acceptable-10, it-8)
cop(acceptable-10, is-9)
rcmod(situation-5, acceptable-10)
aux(consider-12, to-11)
xcomp(acceptable-10, consider-12)
det(extent-14, the-13)
dobj(consider-12, extent-14)
dobj(consider-12, length-16)
conj_and(extent-14, length-16)
det(limitations-19, the-18)
prep_of(extent-14, limitations-19)
prep_of(limitations-19, freedoms-21)

(ROOT
  (S
    (NP (PRP I))
    (VP (MD would)
      (VP (VB argue)
        (SBAR (IN that)
          (S
            (NP
              (NP (DT the) (NN fetus))
              (, ,)
              (VP (VBG assuming)
                (SBAR (IN that)
                  (S
                    (NP (PRP it))
                    (VP (VBZ is)
                      (NP (DT a) (NN person))))))
              (, ,))
            (VP (VBZ has)
              (NP (DT a) (JJR greater) (NN right))
              (PP (TO to)
                (NP (NN life)))
              (SBAR (IN than)
                (S
                  (NP (PRP$ its) (NN mother))
                  (VP (VBZ has)
                    (VP
                      (PP (TO to)
                        (NP
                          (NP (PRP$ her) (NN right))
                          (PP (TO to)
                            (NP (JJ reproductive) (NN freedom))))))))))))))
    (. .)))

nsubj(argue-3, I-1)
aux(argue-3, would-2)
root(ROOT-0, argue-3)
complm(has-15, that-4)
det(fetus-6, the-5)
nsubj(has-15, fetus-6)
partmod(fetus-6, assuming-8)
complm(person-13, that-9)
nsubj(person-13, it-10)
cop(person-13, is-11)
det(person-13, a-12)
ccomp(assuming-8, person-13)
ccomp(argue-3, has-15)
det(right-18, a-16)
amod(right-18, greater-17)
dobj(has-15, right-18)
prep_to(has-15, life-20)
mark(to-25, than-21)
poss(mother-23, its-22)
nsubj(to-25, mother-23)
aux(to-25, has-24)
advcl(has-15, to-25)
poss(right-27, her-26)
pobj(to-25, right-27)
amod(freedom-30, reproductive-29)
prep_to(right-27, freedom-30)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP fail)
      (S
        (VP (TO to)
          (VP (VB see)
            (SBAR
              (WHADVP (WRB where))
              (S
                (NP (PRP you))
                (VP (VBP are)
                  (VP (VBG trying)
                    (S
                      (VP (TO to)
                        (VP (VB go)
                          (PP (IN with)
                            (NP (PRP$ your) (JJ little)))
                          (NP (`` ``)
                            (S
                              (NP (DT the) (NN government))
                              (VP (VBD enslaved)
                                (NP (NNPS Americans))
                                (ADVP (RB back))
                                (PP (IN in)
                                  (NP (NNP Nam)))))
                            ('' '') (NN rant)))))))))))))
    (. .)))

nsubj(fail-2, I-1)
xsubj(see-4, I-1)
root(ROOT-0, fail-2)
aux(see-4, to-3)
xcomp(fail-2, see-4)
advmod(trying-8, where-5)
nsubj(trying-8, you-6)
xsubj(go-10, you-6)
aux(trying-8, are-7)
advcl(see-4, trying-8)
aux(go-10, to-9)
xcomp(trying-8, go-10)
poss(little-13, your-12)
prep_with(go-10, little-13)
det(government-16, the-15)
nsubj(enslaved-17, government-16)
dep(rant-23, enslaved-17)
dobj(enslaved-17, Americans-18)
advmod(enslaved-17, back-19)
prep_in(enslaved-17, Nam-21)
dobj(go-10, rant-23)

(ROOT
  (SQ (VBP Are)
    (NP (PRP you))
    (VP (VBN referring)
      (PP (TO to)
        (NP (DT the) (NN draft))))
    (. ?)))

auxpass(referring-3, Are-1)
nsubjpass(referring-3, you-2)
root(ROOT-0, referring-3)
det(draft-6, the-5)
prep_to(referring-3, draft-6)

(ROOT
  (S
    (ADVP (RB Also))
    (, ,)
    (NP (PRP you))
    (VP (VBP seem)
      (S
        (VP (TO to)
          (VP (VB suggest)
            (SBAR
              (S
                (NP (PRP I))
                (VP (VBD said)
                  (NP (DT some) (NNS things))
                  (SBAR (IN that)
                    (S
                      (NP (PRP I))
                      (VP (VBD did) (RB not)))))))))))
    (. .)))

advmod(seem-4, Also-1)
nsubj(seem-4, you-3)
xsubj(suggest-6, you-3)
root(ROOT-0, seem-4)
aux(suggest-6, to-5)
xcomp(seem-4, suggest-6)
nsubj(said-8, I-7)
ccomp(suggest-6, said-8)
det(things-10, some-9)
dobj(said-8, things-10)
complm(did-13, that-11)
nsubj(did-13, I-12)
ccomp(said-8, did-13)
neg(did-13, not-14)

(ROOT
  (S
    (NP (DT The) (JJ first))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN comment))
        (PP (IN about)
          (NP
            (NP (JJ natural) (JJ medical) (NNS procedures))
            (PP (IN near)
              (NP (DT the) (NN beginning)))))))
    (. .)))

det(first-2, The-1)
nsubj(comment-5, first-2)
cop(comment-5, is-3)
det(comment-5, the-4)
root(ROOT-0, comment-5)
amod(procedures-9, natural-7)
amod(procedures-9, medical-8)
prep_about(comment-5, procedures-9)
det(beginning-12, the-11)
prep_near(procedures-9, beginning-12)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB never))
    (VP (VBD said)
      (NP (NN anything))
      (PP (IN about)
        (NP (NN abortion)))
      (S
        (VP (VBG being)
          (UCP
            (ADJP (`` ``) (JJ unnatural) ('' ''))
            (CC or)
            (NP
              (NP (NN anything))
              (PP (IN like)
                (NP (DT that))))))))
    (. .)))

nsubj(said-3, I-1)
neg(said-3, never-2)
root(ROOT-0, said-3)
dobj(said-3, anything-4)
prep_about(said-3, abortion-6)
cop(unnatural-9, being-7)
xcomp(said-3, unnatural-9)
xcomp(said-3, anything-12)
conj_or(unnatural-9, anything-12)
prep_like(anything-12, that-14)

(ROOT
  (S
    (NP (PRP I))
    (VP (VBP support)
      (NP
        (NP (JJ genetic) (NN engineering))
        (, ,)
        (NP (NN cloning))
        (, ,)
        (NP (JJ adult) (NN stem) (NN cell) (NN research))
        (, ,)
        (NP (NNP Frankenfoods))
        (, ,)
        (NP (FW etc.))))
    (. .)))

nsubj(support-2, I-1)
root(ROOT-0, support-2)
amod(engineering-4, genetic-3)
dobj(support-2, engineering-4)
appos(engineering-4, cloning-6)
amod(research-11, adult-8)
nn(research-11, stem-9)
nn(research-11, cell-10)
appos(engineering-4, research-11)
appos(engineering-4, Frankenfoods-13)
appos(engineering-4, etc.-15)

(ROOT
  (S
    (NP
      (NP (DT The) (JJ only) (NN reason))
      (SBAR
        (S
          (NP (PRP I))
          (VP (VBP am)
            (VP (VBN opposed)
              (PP (TO to)
                (NP (NN infant))))))))
    (VP (VBP stem)
      (SBAR
        (S
          (NP (NN cell) (NN research))
          (VP (VBZ is)
            (NP
              (NP (DT the) (NN necessity))
              (PP (IN of)
                (S
                  (VP (VBG killing)
                    (NP (DT a) (NN fetus)
                      (S
                        (VP (TO to)
                          (VP (VB conduct)
                            (NP (VBN said) (NN research))))))))))))))
    (. .)))

det(reason-3, The-1)
amod(reason-3, only-2)
nsubj(stem-9, reason-3)
nsubjpass(opposed-6, I-4)
auxpass(opposed-6, am-5)
rcmod(reason-3, opposed-6)
prep_to(opposed-6, infant-8)
root(ROOT-0, stem-9)
nn(research-11, cell-10)
nsubj(necessity-14, research-11)
cop(necessity-14, is-12)
det(necessity-14, the-13)
ccomp(stem-9, necessity-14)
prepc_of(necessity-14, killing-16)
det(fetus-18, a-17)
dobj(killing-16, fetus-18)
aux(conduct-20, to-19)
infmod(fetus-18, conduct-20)
amod(research-22, said-21)
dobj(conduct-20, research-22)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB really))
    (VP (VBP do) (RB n't)
      (VP (VB give)
        (NP (DT a) (NN shit))
        (PP (IN about)
          (SBAR (IN whether)
            (S
              (NP (NN something))
              (VP (VBZ is) (`` ``)
                (ADJP (JJ natural))))))))
    (. .)))

nsubj(give-5, I-1)
advmod(give-5, really-2)
aux(give-5, do-3)
neg(give-5, n't-4)
root(ROOT-0, give-5)
det(shit-7, a-6)
dobj(give-5, shit-7)
complm(natural-13, whether-9)
nsubj(natural-13, something-10)
cop(natural-13, is-11)
prepc_about(give-5, natural-13)

(ROOT
  (S ('' '')
    (NP (DT The) (NN second))
    (VP (VBZ is)
      (NP (DT the) (NN claim))
      (SBAR (IN that)
        (S
          (PP (RB somewhere) (IN in)
            (NP (DT this) (NN conversation)))
          (NP (PRP I))
          (VP (VBD said)
            (SBAR (IN that)
              (S
                (NP (PRP$ my) (NN life))
                (VP (VBD was) (`` ``)
                  (ADJP (RBR less) (JJ valuable))
                  ('' '')
                  (PP (IN than)
                    (NP (JJ other) (NNS Americans))))))))))
    (. .)))

det(second-3, The-2)
nsubj(claim-6, second-3)
cop(claim-6, is-4)
det(claim-6, the-5)
root(ROOT-0, claim-6)
complm(said-13, that-7)
advmod(said-13, somewhere-8)
advcl(said-13, in-9)
det(conversation-11, this-10)
prep_in(said-13, conversation-11)
nsubj(said-13, I-12)
ccomp(claim-6, said-13)
complm(valuable-20, that-14)
poss(life-16, my-15)
nsubj(valuable-20, life-16)
cop(valuable-20, was-17)
advmod(valuable-20, less-19)
ccomp(said-13, valuable-20)
amod(Americans-24, other-23)
prep_than(valuable-20, Americans-24)

(ROOT
  (S
    (PP (IN In)
      (NP (DT a) (JJ free) (NN society)))
    (, ,)
    (NP (NN everyone))
    (VP (VBZ has) (`` ``)
      (NP (JJ inalienable) (NNS rights))
      ('' '')
      (SBAR (IN that)
        (S
          (VP (VBP are)
            (VP (VBN protected)
              (PP (IN by)
                (NP (DT the) (NN government))))))))
    (. .)))

det(society-4, a-2)
amod(society-4, free-3)
prep_in(has-7, society-4)
nsubj(has-7, everyone-6)
root(ROOT-0, has-7)
amod(rights-10, inalienable-9)
dobj(has-7, rights-10)
complm(protected-14, that-12)
auxpass(protected-14, are-13)
ccomp(has-7, protected-14)
det(government-17, the-16)
agent(protected-14, government-17)

(ROOT
  (S
    (NP (PRP I))
    (ADVP (RB never))
    (VP
      (VP (VBD said)
        (WHNP (WDT that)))
      (, ,)
      (ADVP
        (ADVP (RB not) (RB once))
        (, ,)
        (CC or)
        (ADVP (RB even)))
      (VP (VBD implied)
        (WHNP (WDT that))))
    (. .)))

nsubj(said-3, I-1)
neg(said-3, never-2)
root(ROOT-0, said-3)
dobj(said-3, that-4)
dep(once-7, not-6)
advmod(said-3, once-7)
advmod(said-3, even-10)
conj_or(once-7, even-10)
dep(said-3, implied-11)
dobj(implied-11, that-12)

(ROOT
  (SBARQ (CC And)
    (WHADVP (WRB where))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB get)
        (PRT (RP off))
        (S
          (VP (VBG questioning)
            (NP (PRP$ my) (NN support))
            (PP (IN for)
              (NP
                (NP (DT the) (NN war))
                (VP (VBN based)
                  (PP (IN on)
                    (NP (PRP$ my) (JJ enlistment) (NN status))))))))))
    (. ?)))

cc(get-5, And-1)
advmod(get-5, where-2)
aux(get-5, do-3)
nsubj(get-5, you-4)
root(ROOT-0, get-5)
prt(get-5, off-6)
xcomp(get-5, questioning-7)
poss(support-9, my-8)
dobj(questioning-7, support-9)
det(war-12, the-11)
prep_for(questioning-7, war-12)
partmod(war-12, based-13)
poss(status-17, my-15)
amod(status-17, enlistment-16)
prep_on(based-13, status-17)

(ROOT
  (S
    (SBAR (IN Because)
      (S
        (NP (PRP I))
        (VP (VBD did) (RB n't)
          (VP (VB enlist)
            (ADVP (RB right) (RB out))
            (PP (IN of)
              (NP (JJ high) (NN school)))))))
    (NP (PRP I))
    (ADVP (RB obviously))
    (VP (VBP do) (RB n't)
      (VP (VB believe)
        (PP (IN in)
          (NP (DT the) (NN war)))))
    (. ?)))

mark(enlist-5, Because-1)
nsubj(enlist-5, I-2)
aux(enlist-5, did-3)
neg(enlist-5, n't-4)
advcl(believe-15, enlist-5)
advmod(enlist-5, right-6)
amod(school-10, high-9)
prep_out_of(enlist-5, school-10)
nsubj(believe-15, I-11)
advmod(believe-15, obviously-12)
aux(believe-15, do-13)
neg(believe-15, n't-14)
root(ROOT-0, believe-15)
det(war-18, the-17)
prep_in(believe-15, war-18)

(ROOT
  (FRAG
    (WHNP (WDT What))
    (. ?)))

root(ROOT-0, What-1)

(ROOT
  (S
    (S
      (NP (PRP You))
      (VP (VBP do) (RB n't)
        (VP (VB know)
          (NP (DT the) (NNS circumstances)))))
    (, ,)
    (CC and)
    (S
      (NP (PRP you))
      (VP (MD ca) (RB n't)
        (VP (VB make)
          (NP (NNS judgements))
          (PP (IN like)
            (NP
              (NP (DT that))
              (PP (IN without)
                (NP
                  (ADJP (RB signifigantly) (JJR more))
                  (NN information)))))
          (SBAR (IN than)
            (S
              (NP (PRP you))
              (VP (VBP have)
                (VP (VBN been)
                  (VP (VBN given)))))))))
    (. .)))

nsubj(know-4, You-1)
aux(know-4, do-2)
neg(know-4, n't-3)
root(ROOT-0, know-4)
det(circumstances-6, the-5)
dobj(know-4, circumstances-6)
nsubj(make-12, you-9)
aux(make-12, ca-10)
neg(make-12, n't-11)
conj_and(know-4, make-12)
dobj(make-12, judgements-13)
prep_like(make-12, that-15)
advmod(more-18, signifigantly-17)
amod(information-19, more-18)
prep_without(that-15, information-19)
mark(given-24, than-20)
nsubjpass(given-24, you-21)
aux(given-24, have-22)
auxpass(given-24, been-23)
advcl(make-12, given-24)

(ROOT
  (S
    (ADVP (RB Sometimes))
    (, ,)
    (NP (DT those) (JJ inalienable) (NNS rights))
    (VP (VBP are)
      (ADJP (RB mutually) (JJ exclusive)))
    (. .)))

advmod(exclusive-8, Sometimes-1)
det(rights-5, those-3)
amod(rights-5, inalienable-4)
nsubj(exclusive-8, rights-5)
cop(exclusive-8, are-6)
advmod(exclusive-8, mutually-7)
root(ROOT-0, exclusive-8)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (S
      (NP
        (ADJP (IN if))
        (NN someone))
      (VP (VBZ buys)
        (NP (NN something))))
    (, ,)
    (S
      (NP (PRP it))
      (NP
        (NP (PRP$ his) (NN property))
        (PP (IN by)
          (NP (NN right)))))
    (, ,)
    (CC and)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP (RB absolutely) (JJ wrong))
        (S
          (VP (TO to)
            (VP (VB take)
              (NP (PRP it))
              (ADVP (RB away)))))))
    (. .)))

prep_for(buys-6, example-2)
amod(someone-5, if-4)
nsubj(buys-6, someone-5)
root(ROOT-0, buys-6)
dobj(buys-6, something-7)
dep(property-11, it-9)
poss(property-11, his-10)
ccomp(buys-6, property-11)
conj_and(buys-6, property-11)
prep_by(property-11, right-13)
nsubj(wrong-19, it-16)
xsubj(take-21, it-16)
cop(wrong-19, is-17)
advmod(wrong-19, absolutely-18)
conj_and(buys-6, wrong-19)
aux(take-21, to-20)
xcomp(wrong-19, take-21)
dobj(take-21, it-22)
advmod(take-21, away-23)

(ROOT
  (S
    (PP (IN At)
      (NP (DT the) (JJ same) (NN time)))
    (, ,)
    (S
      (NP (NNS people))
      (VP (VBP have)
        (NP (DT a) (NN right))
        (PP (TO to)
          (NP
            (NP (NN freedom))
            (PP (IN from)
              (NP (NN slavery)))))))
    (, ,)
    (CC and)
    (S
      (NP (PRP it))
      (VP (VBZ is)
        (ADJP (RB absolutely) (JJ wrong))
        (S
          (VP (TO to)
            (VP (VB violate)
              (NP (DT that) (NN right)))))))
    (. .)))

det(time-4, the-2)
amod(time-4, same-3)
prep_at(have-7, time-4)
nsubj(have-7, people-6)
root(ROOT-0, have-7)
det(right-9, a-8)
dobj(have-7, right-9)
prep_to(have-7, freedom-11)
prep_from(freedom-11, slavery-13)
nsubj(wrong-19, it-16)
xsubj(violate-21, it-16)
cop(wrong-19, is-17)
advmod(wrong-19, absolutely-18)
conj_and(have-7, wrong-19)
aux(violate-21, to-20)
xcomp(wrong-19, violate-21)
det(right-23, that-22)
dobj(violate-21, right-23)

(ROOT
  (S (IN So)
    (SBAR (IN if)
      (S
        (NP (DT a) (NN someone))
        (VP (VBZ buys)
          (NP (DT another) (NN person)))))
    (, ,)
    (NP (PRP we))
    (VP (VBP have)
      (NP (DT a) (NN problem)))
    (. .)))

dep(have-10, So-1)
mark(buys-5, if-2)
det(someone-4, a-3)
nsubj(buys-5, someone-4)
advcl(have-10, buys-5)
det(person-7, another-6)
dobj(buys-5, person-7)
nsubj(have-10, we-9)
root(ROOT-0, have-10)
det(problem-12, a-11)
dobj(have-10, problem-12)

(ROOT
  (S
    (PP (IN On)
      (NP (DT the) (CD one) (NN hand)))
    (, ,)
    (NP (DT the) (JJ first))
    (VP (VBZ has)
      (NP (DT an) (JJ inalienable)
        (ADJP
          (ADJP (JJ right)
            (PP (TO to)
              (NP (PRP$ his))))
          (PRN (-LRB- -LRB-)
            (PP (CC or)
              (NP (PRP her)))
            (-RRB- -RRB-)))
        (NN property)))
    (. .)))

det(hand-4, the-2)
num(hand-4, one-3)
prep_on(has-8, hand-4)
det(first-7, the-6)
nsubj(has-8, first-7)
root(ROOT-0, has-8)
det(property-18, an-9)
amod(property-18, inalienable-10)
amod(property-18, right-11)
prep_to(right-11, his-13)
dep(right-11, or-15)
dep(or-15, her-16)
dobj(has-8, property-18)

(ROOT
  (S
    (PP (IN On)
      (NP (DT the) (JJ other)))
    (, ,)
    (NP (DT the) (NN second))
    (VP (VBZ has)
      (NP
        (NP (DT an)
          (ADJP (RB equally) (JJ inalienable))
          (NN right))
        (PP (TO to)
          (NP (NN his\/her) (NN liberty)))))
    (. .)))

det(other-3, the-2)
prep_on(has-7, other-3)
det(second-6, the-5)
nsubj(has-7, second-6)
root(ROOT-0, has-7)
det(right-11, an-8)
advmod(inalienable-10, equally-9)
amod(right-11, inalienable-10)
dobj(has-7, right-11)
nn(liberty-14, his\/her-13)
prep_to(right-11, liberty-14)

