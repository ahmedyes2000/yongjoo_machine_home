(ROOT
  (S
    (ADVP (RB First))
    (, ,)
    (NP (PRP I))
    (VP (VBP find)
      (S
        (NP (PRP it))
        (ADJP (JJ interesting)))
      (SBAR (IN that)
        (S
          (NP (PRP you))
          (ADVP (RB intentionally))
          (VP (VBP choose)
            (NP
              (NP (DT the) (JJ loaded) (NN term) (`` ``) (NN anti) (NN choice) ('' ''))
              (ADJP (RB as) (VBN opposed)))
            (PP (TO to)
              (NP (JJ pro) (NN life)
                (S
                  (VP (TO to)
                    (VP (VB describe)
                      (NP (PRP$ your) (NNS opponents)))))))))))
    (. .)))

advmod(find-4, First-1)
nsubj(find-4, I-3)
root(ROOT-0, find-4)
nsubj(interesting-6, it-5)
xcomp(find-4, interesting-6)
complm(choose-10, that-7)
nsubj(choose-10, you-8)
advmod(choose-10, intentionally-9)
ccomp(find-4, choose-10)
det(choice-16, the-11)
amod(choice-16, loaded-12)
nn(choice-16, term-13)
nn(choice-16, anti-15)
dobj(choose-10, choice-16)
advmod(opposed-19, as-18)
amod(choice-16, opposed-19)
amod(life-22, pro-21)
prep_to(choose-10, life-22)
aux(describe-24, to-23)
infmod(life-22, describe-24)
poss(opponents-26, your-25)
dobj(describe-24, opponents-26)

(ROOT
  (S
    (S
      (PP (IN Of)
        (NP (NN course)))
      (NP (DT the) (JJ other) (NN side))
      (VP (VBZ does)
        (NP (DT the) (JJ same))
        (PP (IN with)
          (NP (JJ pro) (NN abortion)))))
    (CC but)
    (S
      (NP (DT that))
      (VP (VBZ does) (RB n't)
        (VP (VB make)
          (S
            (NP (PRP it))
            (NP (DT a) (JJ sound) (NN practice))))))
    (. .)))

prep_of(does-6, course-2)
det(side-5, the-3)
amod(side-5, other-4)
nsubj(does-6, side-5)
root(ROOT-0, does-6)
det(same-8, the-7)
dobj(does-6, same-8)
amod(abortion-11, pro-10)
prep_with(does-6, abortion-11)
nsubj(make-16, that-13)
aux(make-16, does-14)
neg(make-16, n't-15)
conj_but(does-6, make-16)
nsubj(practice-20, it-17)
det(practice-20, a-18)
amod(practice-20, sound-19)
xcomp(make-16, practice-20)

(ROOT
  (S
    (NP (PRP$ Your) (NN argument))
    (VP (MD should)
      (VP (VB stand)
        (PP
          (PP (IN on)
            (NP (PRP$ its) (NNS merits)))
          (, ,) (RB not)
          (PP (IN on)
            (NP
              (ADJP (RB emptionally) (VBN loaded))
              (NNS terms))))))
    (. .)))

poss(argument-2, Your-1)
nsubj(stand-4, argument-2)
aux(stand-4, should-3)
root(ROOT-0, stand-4)
poss(merits-7, its-6)
prep_on(stand-4, merits-7)
neg(stand-4, not-9)
advmod(loaded-12, emptionally-11)
amod(terms-13, loaded-12)
prep_on(stand-4, terms-13)

(ROOT
  (S
    (ADVP (LS Second))
    (, ,)
    (NP
      (NP (PRP$ your) (NN argument))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBD personhood)))))
    (VP (VBZ is)
      (SBAR
        (WHNP (WP what))
        (S
          (NP (NNS matters))
          (VP (VBZ is) (, ,)
            (PP (IN in)
              (NP (PRP$ my) (NN view)))
            (, ,)
            (NP (DT a) (NN subterfuge))))))
    (. .)))

advmod(is-7, Second-1)
poss(argument-4, your-3)
nsubj(personhood-6, argument-4)
nsubj(is-7, argument-4)
rcmod(argument-4, personhood-6)
root(ROOT-0, is-7)
dobj(subterfuge-17, what-8)
nsubj(subterfuge-17, matters-9)
cop(subterfuge-17, is-10)
poss(view-14, my-13)
prep_in(subterfuge-17, view-14)
det(subterfuge-17, a-16)
ccomp(is-7, subterfuge-17)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (NP (PRP I))
        (VP (MD ca) (RB n't)
          (VP (VB fathom)))))
    (VP (VBZ is)
      (SBAR
        (WHADVP (WRB why))
        (, ,)
        (S
          (SBAR
            (WHADVP (WRB when))
            (S
              (NP (PRP you))
              (VP (MD can) (RB not)
                (VP (VB say)
                  (SBAR
                    (WHADVP (WRB when))
                    (S
                      (NP (DT that))
                      (VP (VBZ is) (, ,)
                        (ADVP (DT any) (RBR more))
                        (SBAR (IN than)
                          (S
                            (NP (NNS others))
                            (VP (MD can)
                              (VP (VB answer)
                                (SBAR
                                  (WHADVP (WRB when))
                                  (S
                                    (NP (NN life))
                                    (VP (VBZ begins)))))))))))))))
          (, ,)
          (NP (PRP you))
          (VP (VBP have)
            (NP
              (NP (DT no) (NN problem))
              (PP (IN with)
                (S
                  (VP (VB proceed)
                    (PP (IN with)
                      (NP (NN abortion)))
                    (PP (IN without)
                      (NP (DT an) (NN answer)))))))))))
    (. .)))

dobj(fathom-5, What-1)
nsubj(fathom-5, I-2)
aux(fathom-5, ca-3)
neg(fathom-5, n't-4)
csubj(is-6, fathom-5)
root(ROOT-0, is-6)
advmod(have-29, why-7)
advmod(say-13, when-9)
nsubj(say-13, you-10)
aux(say-13, can-11)
neg(say-13, not-12)
advcl(have-29, say-13)
advmod(is-16, when-14)
nsubj(is-16, that-15)
advcl(say-13, is-16)
dep(more-19, any-18)
advmod(is-16, more-19)
mark(answer-23, than-20)
nsubj(answer-23, others-21)
aux(answer-23, can-22)
advcl(is-16, answer-23)
advmod(begins-26, when-24)
nsubj(begins-26, life-25)
advcl(answer-23, begins-26)
nsubj(have-29, you-28)
advcl(is-6, have-29)
det(problem-31, no-30)
dobj(have-29, problem-31)
prepc_with(problem-31, proceed-33)
prep_with(proceed-33, abortion-35)
det(answer-38, an-37)
prep_without(proceed-33, answer-38)

(ROOT
  (S
    (SBAR (IN Whether)
      (S
        (NP (DT the) (NN issue))
        (VP (VBZ is)
          (NP (NN life)
            (CC or)
            (NN personhood)))))
    (, ,)
    (NP (DT the) (JJ same) (NN problem))
    (VP (VBZ remains))
    (. .)))

complm(life-5, Whether-1)
det(issue-3, the-2)
nsubj(life-5, issue-3)
cop(life-5, is-4)
ccomp(remains-12, life-5)
conj_or(life-5, personhood-7)
ccomp(remains-12, personhood-7)
det(problem-11, the-9)
amod(problem-11, same-10)
nsubj(remains-12, problem-11)
root(ROOT-0, remains-12)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP (PRP you))
        (VP (MD ca) (RB n't)
          (VP (VB determine)
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (NN personhood))
                (VP (VBZ occurs))))))))
    (, ,)
    (NP (PRP you))
    (ADVP (RB always))
    (VP (VBP run)
      (NP
        (NP (DT the) (NN risk))
        (PP (IN of)
          (S
            (VP (VBG killing)
              (NP (DT a) (NN person))
              (PP (IN through)
                (NP (NN abortion))))))))
    (. .)))

mark(determine-5, If-1)
nsubj(determine-5, you-2)
aux(determine-5, ca-3)
neg(determine-5, n't-4)
advcl(run-12, determine-5)
advmod(occurs-8, when-6)
nsubj(occurs-8, personhood-7)
advcl(determine-5, occurs-8)
nsubj(run-12, you-10)
advmod(run-12, always-11)
root(ROOT-0, run-12)
det(risk-14, the-13)
dobj(run-12, risk-14)
prepc_of(risk-14, killing-16)
det(person-18, a-17)
dobj(killing-16, person-18)
prep_through(killing-16, abortion-20)

(ROOT
  (S
    (PP (IN In)
      (NP (DT the) (NN end)))
    (NP
      (NP (DT all))
      (SBAR
        (S
          (NP (PRP you))
          (VP (VBP 've)
            (ADVP (RB really))
            (VP (VBN done))))))
    (VP (VBZ is)
      (VP (VB move)
        (NP (DT the) (NN problem))
        (ADVP (RB somewhere) (RB else))))
    (. .)))

det(end-3, the-2)
prep_in(move-10, end-3)
dobj(done-8, all-4)
nsubj(move-10, all-4)
nsubj(done-8, you-5)
aux(done-8, 've-6)
advmod(done-8, really-7)
rcmod(all-4, done-8)
aux(move-10, is-9)
root(ROOT-0, move-10)
det(problem-12, the-11)
dobj(move-10, problem-12)
advmod(else-14, somewhere-13)
advmod(move-10, else-14)

(ROOT
  (S
    (NP (PRP You))
    (VP (VBP have) (RB n't)
      (VP (VBN solved)
        (NP (NN anything))))
    (. .)))

nsubj(solved-4, You-1)
aux(solved-4, have-2)
neg(solved-4, n't-3)
root(ROOT-0, solved-4)
dobj(solved-4, anything-5)

